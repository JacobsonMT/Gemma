
if(typeof googleAnalyticsTrackPageviewIfConfigured==='undefined'){var googleAnalyticsTrackPageviewIfConfigured=function(pageURL){if(typeof pageTracker!=='undefined'){pageTracker._trackPageview(pageURL);}};}
if(typeof dwr==='undefined'){var dwr={};}
if(typeof dwr.engine==='undefined'){dwr.engine={};}
if(typeof AnnotationController==='undefined'){var AnnotationController={};}
AnnotationController._path='/Gemma/dwr';AnnotationController.autoTag=function(p0,callback){dwr.engine._execute(AnnotationController._path,'AnnotationController','autoTag',p0,callback);};AnnotationController.findTerm=function(p0,p1,p2,callback){dwr.engine._execute(AnnotationController._path,'AnnotationController','findTerm',p0,p1,p2,callback);};AnnotationController.createExperimentTag=function(p0,p1,callback){dwr.engine._execute(AnnotationController._path,'AnnotationController','createExperimentTag',p0,p1,callback);};AnnotationController.removeExperimentTag=function(p0,p1,callback){dwr.engine._execute(AnnotationController._path,'AnnotationController','removeExperimentTag',p0,p1,callback);};AnnotationController.createBioMaterialTag=function(p0,p1,callback){dwr.engine._execute(AnnotationController._path,'AnnotationController','createBioMaterialTag',p0,p1,callback);};AnnotationController.removeBioMaterialTag=function(p0,p1,callback){dwr.engine._execute(AnnotationController._path,'AnnotationController','removeBioMaterialTag',p0,p1,callback);};AnnotationController.reinitializeOntologyIndices=function(callback){dwr.engine._execute(AnnotationController._path,'AnnotationController','reinitializeOntologyIndices',callback);};AnnotationController.validateTags=function(p0,callback){dwr.engine._execute(AnnotationController._path,'AnnotationController','validateTags',p0,callback);};if(typeof ArrayDesignController==='undefined'){var ArrayDesignController={};}
ArrayDesignController._path='/Gemma/dwr';ArrayDesignController.remove=function(p0,callback){dwr.engine._execute(ArrayDesignController._path,'ArrayDesignController','remove',p0,callback);};ArrayDesignController.getArrayDesigns=function(p0,p1,p2,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ArrayDesignController/getArrayDesigns");dwr.engine._execute(ArrayDesignController._path,'ArrayDesignController','getArrayDesigns',p0,p1,p2,callback);};ArrayDesignController.loadArrayDesignsForShowAll=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ArrayDesignController/loadArrayDesignsForShowAll");dwr.engine._execute(ArrayDesignController._path,'ArrayDesignController','loadArrayDesignsForShowAll',p0,callback);};ArrayDesignController.addAlternateName=function(p0,p1,callback){dwr.engine._execute(ArrayDesignController._path,'ArrayDesignController','addAlternateName',p0,p1,callback);};ArrayDesignController.getCsSummaries=function(p0,callback){dwr.engine._execute(ArrayDesignController._path,'ArrayDesignController','getCsSummaries',p0,callback);};ArrayDesignController.getReportHtml=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ArrayDesignController/getReportHtml");dwr.engine._execute(ArrayDesignController._path,'ArrayDesignController','getReportHtml',p0,callback);};ArrayDesignController.updateReport=function(p0,callback){dwr.engine._execute(ArrayDesignController._path,'ArrayDesignController','updateReport',p0,callback);};ArrayDesignController.getSummaryForArrayDesign=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ArrayDesignController/getSummaryForArrayDesign");dwr.engine._execute(ArrayDesignController._path,'ArrayDesignController','getSummaryForArrayDesign',p0,callback);};ArrayDesignController.loadArrayDesignsSummary=function(callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ArrayDesignController/loadArrayDesignsSummary");dwr.engine._execute(ArrayDesignController._path,'ArrayDesignController','loadArrayDesignsSummary',callback);};ArrayDesignController.updateReportById=function(p0,callback){dwr.engine._execute(ArrayDesignController._path,'ArrayDesignController','updateReportById',p0,callback);};if(typeof ArrayDesignRepeatScanController==='undefined'){var ArrayDesignRepeatScanController={};}
ArrayDesignRepeatScanController._path='/Gemma/dwr';ArrayDesignRepeatScanController.run=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ArrayDesignRepeatScanController/run");dwr.engine._execute(ArrayDesignRepeatScanController._path,'ArrayDesignRepeatScanController','run',p0,callback);};if(typeof AuditController==='undefined'){var AuditController={};}
AuditController._path='/Gemma/dwr';AuditController.addAuditEvent=function(p0,p1,p2,p3,callback){dwr.engine._execute(AuditController._path,'AuditController','addAuditEvent',p0,p1,p2,p3,callback);};AuditController.getAuditable=function(p0,callback){dwr.engine._execute(AuditController._path,'AuditController','getAuditable',p0,callback);};AuditController.getEvents=function(p0,callback){dwr.engine._execute(AuditController._path,'AuditController','getEvents',p0,callback);};if(typeof BatchInfoFetchController==='undefined'){var BatchInfoFetchController={};}
BatchInfoFetchController._path='/Gemma/dwr';BatchInfoFetchController.run=function(p0,callback){dwr.engine._execute(BatchInfoFetchController._path,'BatchInfoFetchController','run',p0,callback);};if(typeof BibliographicReferenceController==='undefined'){var BibliographicReferenceController={};}
BibliographicReferenceController._path='/Gemma/dwr';BibliographicReferenceController.update=function(p0,callback){dwr.engine._execute(BibliographicReferenceController._path,'BibliographicReferenceController','update',p0,callback);};BibliographicReferenceController.browse=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/BibliographicReferenceController/browse");dwr.engine._execute(BibliographicReferenceController._path,'BibliographicReferenceController','browse',p0,callback);};BibliographicReferenceController.load=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/BibliographicReferenceController/load");dwr.engine._execute(BibliographicReferenceController._path,'BibliographicReferenceController','load',p0,callback);};BibliographicReferenceController.search=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/BibliographicReferenceController/search");dwr.engine._execute(BibliographicReferenceController._path,'BibliographicReferenceController','search',p0,callback);};BibliographicReferenceController.loadFromPubmedID=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/BibliographicReferenceController/loadFromPubmedID");dwr.engine._execute(BibliographicReferenceController._path,'BibliographicReferenceController','loadFromPubmedID',p0,callback);};if(typeof BioAssayController==='undefined'){var BioAssayController={};}
BioAssayController._path='/Gemma/dwr';BioAssayController.markOutlier=function(p0,callback){dwr.engine._execute(BioAssayController._path,'BioAssayController','markOutlier',p0,callback);};BioAssayController.unmarkOutlier=function(p0,callback){dwr.engine._execute(BioAssayController._path,'BioAssayController','unmarkOutlier',p0,callback);};BioAssayController.getBioAssays=function(p0,callback){dwr.engine._execute(BioAssayController._path,'BioAssayController','getBioAssays',p0,callback);};if(typeof BioMaterialController==='undefined'){var BioMaterialController={};}
BioMaterialController._path='/Gemma/dwr';BioMaterialController.getAnnotation=function(p0,callback){dwr.engine._execute(BioMaterialController._path,'BioMaterialController','getAnnotation',p0,callback);};BioMaterialController.getFactorValues=function(p0,callback){dwr.engine._execute(BioMaterialController._path,'BioMaterialController','getFactorValues',p0,callback);};BioMaterialController.getBioMaterials=function(p0,callback){dwr.engine._execute(BioMaterialController._path,'BioMaterialController','getBioMaterials',p0,callback);};BioMaterialController.addFactorValueTo=function(p0,p1,callback){dwr.engine._execute(BioMaterialController._path,'BioMaterialController','addFactorValueTo',p0,p1,callback);};if(typeof CharacteristicBrowserController==='undefined'){var CharacteristicBrowserController={};}
CharacteristicBrowserController._path='/Gemma/dwr';CharacteristicBrowserController.findCharacteristics=function(p0,callback){dwr.engine._execute(CharacteristicBrowserController._path,'CharacteristicBrowserController','findCharacteristics',p0,callback);};CharacteristicBrowserController.findCharacteristicsCustom=function(p0,p1,p2,p3,p4,p5,p6,callback){dwr.engine._execute(CharacteristicBrowserController._path,'CharacteristicBrowserController','findCharacteristicsCustom',p0,p1,p2,p3,p4,p5,p6,callback);};CharacteristicBrowserController.removeCharacteristics=function(p0,callback){dwr.engine._execute(CharacteristicBrowserController._path,'CharacteristicBrowserController','removeCharacteristics',p0,callback);};CharacteristicBrowserController.updateCharacteristics=function(p0,callback){dwr.engine._execute(CharacteristicBrowserController._path,'CharacteristicBrowserController','updateCharacteristics',p0,callback);};CharacteristicBrowserController.browse=function(p0,callback){dwr.engine._execute(CharacteristicBrowserController._path,'CharacteristicBrowserController','browse',p0,callback);};CharacteristicBrowserController.count=function(callback){dwr.engine._execute(CharacteristicBrowserController._path,'CharacteristicBrowserController','count',callback);};if(typeof CompositeSequenceController==='undefined'){var CompositeSequenceController={};}
CompositeSequenceController._path='/Gemma/dwr';CompositeSequenceController.search=function(p0,p1,callback){dwr.engine._execute(CompositeSequenceController._path,'CompositeSequenceController','search',p0,p1,callback);};CompositeSequenceController.getCsSummaries=function(p0,callback){dwr.engine._execute(CompositeSequenceController._path,'CompositeSequenceController','getCsSummaries',p0,callback);};CompositeSequenceController.getGeneMappingSummary=function(p0,callback){dwr.engine._execute(CompositeSequenceController._path,'CompositeSequenceController','getGeneMappingSummary',p0,callback);};if(typeof IndexService==='undefined'){var IndexService={};}
IndexService._path='/Gemma/dwr';IndexService.index=function(p0,callback){dwr.engine._execute(IndexService._path,'IndexService','index',p0,callback);};if(typeof DEDVController==='undefined'){var DEDVController={};}
DEDVController._path='/Gemma/dwr';DEDVController.getDEDV=function(p0,p1,callback){dwr.engine._execute(DEDVController._path,'DEDVController','getDEDV',p0,p1,callback);};DEDVController.getDEDVForCoexpressionVisualization=function(p0,p1,p2,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DEDVController/getDEDVForCoexpressionVisualization");dwr.engine._execute(DEDVController._path,'DEDVController','getDEDVForCoexpressionVisualization',p0,p1,p2,callback);};DEDVController.getDEDVForDiffExVisualization=function(p0,p1,p2,p3,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DEDVController/getDEDVForDiffExVisualization");dwr.engine._execute(DEDVController._path,'DEDVController','getDEDVForDiffExVisualization',p0,p1,p2,p3,callback);};DEDVController.getDEDVForVisualization=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DEDVController/getDEDVForVisualization");dwr.engine._execute(DEDVController._path,'DEDVController','getDEDVForVisualization',p0,p1,callback);};DEDVController.getVectorData=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DEDVController/getVectorData");dwr.engine._execute(DEDVController._path,'DEDVController','getVectorData',p0,callback);};DEDVController.getDEDVForDiffExVisualizationByThreshold=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DEDVController/getDEDVForDiffExVisualizationByThreshold");dwr.engine._execute(DEDVController._path,'DEDVController','getDEDVForDiffExVisualizationByThreshold',p0,p1,callback);};DEDVController.getDEDVForPcaVisualization=function(p0,p1,p2,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DEDVController/getDEDVForPcaVisualization");dwr.engine._execute(DEDVController._path,'DEDVController','getDEDVForPcaVisualization',p0,p1,p2,callback);};DEDVController.getDEDVForDiffExVisualizationByExperiment=function(p0,p1,p2,p3,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DEDVController/getDEDVForDiffExVisualizationByExperiment");dwr.engine._execute(DEDVController._path,'DEDVController','getDEDVForDiffExVisualizationByExperiment',p0,p1,p2,p3,callback);};if(typeof DifferentialExpressionAnalysisController==='undefined'){var DifferentialExpressionAnalysisController={};}
DifferentialExpressionAnalysisController._path='/Gemma/dwr';DifferentialExpressionAnalysisController.run=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DifferentialExpressionAnalysisController/run");dwr.engine._execute(DifferentialExpressionAnalysisController._path,'DifferentialExpressionAnalysisController','run',p0,callback);};DifferentialExpressionAnalysisController.determineAnalysisType=function(p0,callback){dwr.engine._execute(DifferentialExpressionAnalysisController._path,'DifferentialExpressionAnalysisController','determineAnalysisType',p0,callback);};DifferentialExpressionAnalysisController.runCustom=function(p0,p1,p2,p3,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DifferentialExpressionAnalysisController/runCutom");dwr.engine._execute(DifferentialExpressionAnalysisController._path,'DifferentialExpressionAnalysisController','runCustom',p0,p1,p2,p3,callback);};DifferentialExpressionAnalysisController.remove=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DifferentialExpressionAnalysisController/remove");dwr.engine._execute(DifferentialExpressionAnalysisController._path,'DifferentialExpressionAnalysisController','remove',p0,p1,callback);};DifferentialExpressionAnalysisController.redo=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DifferentialExpressionAnalysisController/redo");dwr.engine._execute(DifferentialExpressionAnalysisController._path,'DifferentialExpressionAnalysisController','redo',p0,p1,callback);};DifferentialExpressionAnalysisController.refreshStats=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DifferentialExpressionAnalysisController/refreshStats");dwr.engine._execute(DifferentialExpressionAnalysisController._path,'DifferentialExpressionAnalysisController','refreshStats',p0,p1,callback);};if(typeof DifferentialExpressionSearchController==='undefined'){var DifferentialExpressionSearchController={};}
DifferentialExpressionSearchController._path='/Gemma/dwr';DifferentialExpressionSearchController.getDifferentialExpression=function(p0,p1,p2,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DifferentialExpressionSearchController/getDifferentialExpression");dwr.engine._execute(DifferentialExpressionSearchController._path,'DifferentialExpressionSearchController','getDifferentialExpression',p0,p1,p2,callback);};DifferentialExpressionSearchController.getDifferentialExpressionWithoutBatch=function(p0,p1,p2,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DifferentialExpressionSearchController/getDifferentialExpressionWithoutBatch");dwr.engine._execute(DifferentialExpressionSearchController._path,'DifferentialExpressionSearchController','getDifferentialExpressionWithoutBatch',p0,p1,p2,callback);};DifferentialExpressionSearchController.getDiffExpressionForGenes=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DifferentialExpressionSearchController/getDiffExpressionForGenes");dwr.engine._execute(DifferentialExpressionSearchController._path,'DifferentialExpressionSearchController','getDiffExpressionForGenes',p0,callback);};DifferentialExpressionSearchController.getDifferentialExpressionForFactors=function(p0,p1,p2,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DifferentialExpressionSearchController/getDifferentialExpressionForFactors");dwr.engine._execute(DifferentialExpressionSearchController._path,'DifferentialExpressionSearchController','getDifferentialExpressionForFactors',p0,p1,p2,callback);};DifferentialExpressionSearchController.getFactors=function(p0,callback){dwr.engine._execute(DifferentialExpressionSearchController._path,'DifferentialExpressionSearchController','getFactors',p0,callback);};DifferentialExpressionSearchController.scheduleDiffExpSearchTask=function(p0,p1,p2,p3,p4,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DifferentialExpressionSearchController/scheduleDiffExpSearchTask");dwr.engine._execute(DifferentialExpressionSearchController._path,'DifferentialExpressionSearchController','scheduleDiffExpSearchTask',p0,p1,p2,p3,p4,callback);};if(typeof DiffExMetaAnalyzerController==='undefined'){var DiffExMetaAnalyzerController={};}
DiffExMetaAnalyzerController._path='/Gemma/dwr';DiffExMetaAnalyzerController.analyzeResultSets=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DiffExMetaAnalyzerController/analyzeResultSets");dwr.engine._execute(DiffExMetaAnalyzerController._path,'DiffExMetaAnalyzerController','analyzeResultSets',p0,callback);};DiffExMetaAnalyzerController.findDetailMetaAnalysisById=function(p0,callback){dwr.engine._execute(DiffExMetaAnalyzerController._path,'DiffExMetaAnalyzerController','findDetailMetaAnalysisById',p0,callback);};DiffExMetaAnalyzerController.loadAllMetaAnalyses=function(callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DiffExMetaAnalyzerController/loadAllMetaAnalyses");dwr.engine._execute(DiffExMetaAnalyzerController._path,'DiffExMetaAnalyzerController','loadAllMetaAnalyses',callback);};DiffExMetaAnalyzerController.removeMetaAnalysis=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DiffExMetaAnalyzerController/removeMetaAnalysis");dwr.engine._execute(DiffExMetaAnalyzerController._path,'DiffExMetaAnalyzerController','removeMetaAnalysis',p0,callback);};DiffExMetaAnalyzerController.saveResultSets=function(p0,p1,p2,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/DiffExMetaAnalyzerController/saveResultSets");dwr.engine._execute(DiffExMetaAnalyzerController._path,'DiffExMetaAnalyzerController','saveResultSets',p0,p1,p2,callback);};if(typeof ExperimentalDesignController==='undefined'){var ExperimentalDesignController={};}
ExperimentalDesignController._path='/Gemma/dwr';ExperimentalDesignController.updateBioMaterials=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExperimentalDesignController/updateBioMaterials");dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','updateBioMaterials',p0,callback);};ExperimentalDesignController.getFactorValues=function(p0,callback){dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','getFactorValues',p0,callback);};ExperimentalDesignController.getExperimentalFactors=function(p0,callback){dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','getExperimentalFactors',p0,callback);};ExperimentalDesignController.getBioMaterials=function(p0,callback){dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','getBioMaterials',p0,callback);};ExperimentalDesignController.createDesignFromFile=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExperimentalDesignController/createDesignFromFile");dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','createDesignFromFile',p0,p1,callback);};ExperimentalDesignController.createExperimentalFactor=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExperimentalDesignController/createExperimentalFactor");dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','createExperimentalFactor',p0,p1,callback);};ExperimentalDesignController.createFactorValue=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExperimentalDesignController/createFactorValue");dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','createFactorValue',p0,callback);};ExperimentalDesignController.createFactorValueCharacteristic=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExperimentalDesignController/createFactorValueCharacteristic");dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','createFactorValueCharacteristic',p0,p1,callback);};ExperimentalDesignController.deleteExperimentalFactors=function(pO,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExperimentalDesignController/deleteExperimentalFactors");dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','deleteExperimentalFactors',pO,p1,callback);};ExperimentalDesignController.deleteFactorValueCharacteristics=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExperimentalDesignController/deleteFactorValueCharacteristics");dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','deleteFactorValueCharacteristics',p0,callback);};ExperimentalDesignController.deleteFactorValues=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExperimentalDesignController/deleteFactorValues");dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','deleteFactorValues',p0,p1,callback);};ExperimentalDesignController.getFactorValuesWithCharacteristics=function(p0,callback){dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','getFactorValuesWithCharacteristics',p0,callback);};ExperimentalDesignController.updateExperimentalFactors=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExperimentalDesignController/updateExperimentalFactors");dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','updateExperimentalFactors',p0,callback);};ExperimentalDesignController.updateFactorValueCharacteristics=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExperimentalDesignController/updateFactorValueCharacteristics");dwr.engine._execute(ExperimentalDesignController._path,'ExperimentalDesignController','updateFactorValueCharacteristics',p0,callback);};if(typeof ExpressionDataFileUploadController==='undefined'){var ExpressionDataFileUploadController={};}
ExpressionDataFileUploadController._path='/Gemma/dwr';ExpressionDataFileUploadController.load=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionDataFileUploadController/load");dwr.engine._execute(ExpressionDataFileUploadController._path,'ExpressionDataFileUploadController','load',p0,callback);};ExpressionDataFileUploadController.validate=function(p0,callback){dwr.engine._execute(ExpressionDataFileUploadController._path,'ExpressionDataFileUploadController','validate',p0,callback);};if(typeof ExpressionExperimentController==='undefined'){var ExpressionExperimentController={};}
ExpressionExperimentController._path='/Gemma/dwr';ExpressionExperimentController.getAnnotation=function(p0,callback){dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','getAnnotation',p0,callback);};ExpressionExperimentController.find=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/find");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','find',p0,p1,callback);};ExpressionExperimentController.searchExpressionExperiments=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/searchExpressionExperiments");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','searchExpressionExperiments',p0,callback);};ExpressionExperimentController.getAllTaxonExperimentGroup=function(p0,callback){dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','getAllTaxonExperimentGroup',p0,callback);};ExpressionExperimentController.searchExperimentsAndExperimentGroups=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/searchExperimentsAndExperimentGroups");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','searchExperimentsAndExperimentGroups',p0,p1,callback);};ExpressionExperimentController.searchExperimentsAndExperimentGroupsGetIds=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/searchExperimentsAndExperimentGroupsGetIds");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','searchExperimentsAndExperimentGroupsGetIds',p0,p1,callback);};ExpressionExperimentController.getDescription=function(p0,callback){dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','getDescription',p0,callback);};ExpressionExperimentController.getFactorValues=function(p0,callback){dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','getFactorValues',p0,callback);};ExpressionExperimentController.getExperimentalFactors=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/getExperimentalFactors");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','getExperimentalFactors',p0,callback);};ExpressionExperimentController.updateReport=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/updateReport");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','updateReport',p0,callback);};ExpressionExperimentController.updatePubMed=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/updatePubMed");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','updatePubMed',p0,p1,callback);};ExpressionExperimentController.deleteById=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/deleteById");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','deleteById',p0,callback);};ExpressionExperimentController.getDesignMatrixRows=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/getDesignMatrixRows");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','getDesignMatrixRows',p0,callback);};ExpressionExperimentController.loadExpressionExperimentDetails=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/loadExpressionExperimentDetails");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','loadExpressionExperimentDetails',p0,callback);};ExpressionExperimentController.loadQuantitationTypes=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/loadQuantitationTypes");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','loadQuantitationTypes',p0,callback);};ExpressionExperimentController.loadExpressionExperiments=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/loadExpressionExperiments");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','loadExpressionExperiments',p0,callback);};ExpressionExperimentController.loadStatusSummaries=function(p0,p1,p2,p3,p4,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/loadStatusSummaries");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','loadStatusSummaries',p0,p1,p2,p3,p4,callback);};ExpressionExperimentController.removePrimaryPublication=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/removePrimaryPublication");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','removePrimaryPublication',p0,callback);};ExpressionExperimentController.updateAllReports=function(callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/updateAllReports");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','updateAllReports',callback);};ExpressionExperimentController.updateBasics=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/updateBasics");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','updateBasics',p0,callback);};ExpressionExperimentController.clearFromCaches=function(p0,callback){dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','clearFromCaches',p0,callback);};ExpressionExperimentController.unmatchAllBioAssays=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/unmatchAllBioAssays");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','unmatchAllBioAssays',p0,callback);};ExpressionExperimentController.canCurrentUserEditExperiment=function(p0,callback){dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','canCurrentUserEditExperiment',p0,callback);};ExpressionExperimentController.browse=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/browse");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','browse',p0,callback);};ExpressionExperimentController.browseSpecificIds=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/browseSpecificIds");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','browseSpecificIds',p0,p1,callback);};ExpressionExperimentController.browseByTaxon=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentController/browseByTaxon");dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','browseByTaxon',p0,p1,callback);};ExpressionExperimentController.loadCountsForDataSummaryTable=function(callback){dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','loadCountsForDataSummaryTable',callback);};ExpressionExperimentController.loadExpressionExperimentsWithQcIssues=function(callback){dwr.engine._execute(ExpressionExperimentController._path,'ExpressionExperimentController','loadExpressionExperimentsWithQcIssues',callback);};if(typeof ExpressionExperimentDataFetchController==='undefined'){var ExpressionExperimentDataFetchController={};}
ExpressionExperimentDataFetchController._path='/Gemma/dwr';ExpressionExperimentDataFetchController.getDataFile=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentDataFetchController/getDataFile");dwr.engine._execute(ExpressionExperimentDataFetchController._path,'ExpressionExperimentDataFetchController','getDataFile',p0,callback);};ExpressionExperimentDataFetchController.getDiffExpressionDataFile=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentDataFetchController/getDiffExpressionDataFile");dwr.engine._execute(ExpressionExperimentDataFetchController._path,'ExpressionExperimentDataFetchController','getDiffExpressionDataFile',p0,callback);};ExpressionExperimentDataFetchController.getCoExpressionDataFile=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentDataFetchController/getCoExpressionDataFile");dwr.engine._execute(ExpressionExperimentDataFetchController._path,'ExpressionExperimentDataFetchController','getCoExpressionDataFile',p0,callback);};if(typeof ExpressionExperimentLoadController==='undefined'){var ExpressionExperimentLoadController={};}
ExpressionExperimentLoadController._path='/Gemma/dwr';ExpressionExperimentLoadController.load=function(p0,callback){dwr.engine._execute(ExpressionExperimentLoadController._path,'ExpressionExperimentLoadController','load',p0,callback);};if(typeof ExpressionExperimentSetController==='undefined'){var ExpressionExperimentSetController={};}
ExpressionExperimentSetController._path='/Gemma/dwr';ExpressionExperimentSetController.remove=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentSetController/remove");dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','remove',p0,callback);};ExpressionExperimentSetController.create=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentSetController/create");dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','create',p0,callback);};ExpressionExperimentSetController.update=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentSetController/update");dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','update',p0,callback);};ExpressionExperimentSetController.updateNameDesc=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentSetController/updateNameDesc");dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','updateNameDesc',p0,callback);};ExpressionExperimentSetController.updateMembers=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentSetController/updateMembers");dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','updateMembers',p0,p1,callback);};ExpressionExperimentSetController.loadAll=function(callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentSetController/loadAll");dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','loadAll',callback);};ExpressionExperimentSetController.load=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentSetController/load");dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','load',p0,callback);};ExpressionExperimentSetController.loadByName=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExpressionExperimentSetController/loadByName");dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','loadByName',p0,callback);};ExpressionExperimentSetController.removeUserAndSessionGroups=function(p0,callback){dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','removeUserAndSessionGroups',p0,callback);};ExpressionExperimentSetController.addUserAndSessionGroups=function(p0,callback){dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','addUserAndSessionGroups',p0,callback);};ExpressionExperimentSetController.addSessionGroups=function(p0,p1,callback){dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','addSessionGroups',p0,p1,callback);};ExpressionExperimentSetController.updateUserAndSessionGroups=function(p0,callback){dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','updateUserAndSessionGroups',p0,callback);};ExpressionExperimentSetController.loadAllUserAndSessionGroups=function(callback){dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','loadAllUserAndSessionGroups',callback);};ExpressionExperimentSetController.loadAllSessionGroups=function(callback){dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','loadAllSessionGroups',callback);};ExpressionExperimentSetController.getExperimentsInSet=function(p0,callback){dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','getExperimentsInSet',p0,callback);};ExpressionExperimentSetController.getExperimentsInSetBySessionId=function(p0,callback){dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','getExperimentsInSetBySessionId',p0,callback);};ExpressionExperimentSetController.getExperimentIdsInSet=function(p0,callback){dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','getExperimentIdsInSet',p0,callback);};ExpressionExperimentSetController.canCurrentUserEditGroup=function(p0,callback){dwr.engine._execute(ExpressionExperimentSetController._path,'ExpressionExperimentSetController','canCurrentUserEditGroup',p0,callback);};if(typeof ExpressionExperimentReportGenerationController==='undefined'){var ExpressionExperimentReportGenerationController={};}
ExpressionExperimentReportGenerationController._path='/Gemma/dwr';ExpressionExperimentReportGenerationController.run=function(p0,callback){dwr.engine._execute(ExpressionExperimentReportGenerationController._path,'ExpressionExperimentReportGenerationController','run',p0,callback);};ExpressionExperimentReportGenerationController.runAll=function(callback){dwr.engine._execute(ExpressionExperimentReportGenerationController._path,'ExpressionExperimentReportGenerationController','runAll',callback);};if(typeof ExtCoexpressionSearchController==='undefined'){var ExtCoexpressionSearchController={};}
ExtCoexpressionSearchController._path='/Gemma/dwr';ExtCoexpressionSearchController.doSearch=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExtCoexpressionSearchController/doSearch");dwr.engine._execute(ExtCoexpressionSearchController._path,'ExtCoexpressionSearchController','doSearch',p0,callback);};ExtCoexpressionSearchController.findExpressionExperiments=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExtCoexpressionSearchController/findExpressionExperiments");dwr.engine._execute(ExtCoexpressionSearchController._path,'ExtCoexpressionSearchController','findExpressionExperiments',p0,p1,callback);};ExtCoexpressionSearchController.doSearchQuick2Complete=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExtCoexpressionSearchController/doSearchQuick2");dwr.engine._execute(ExtCoexpressionSearchController._path,'ExtCoexpressionSearchController','doSearchQuick2',p0,p1,callback);};ExtCoexpressionSearchController.doSearchQuick2=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExtCoexpressionSearchController/doSearchQuick2");dwr.engine._execute(ExtCoexpressionSearchController._path,'ExtCoexpressionSearchController','doSearchQuick2',p0,callback);};ExtCoexpressionSearchController.doSearchQuick=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExtCoexpressionSearchController/doSearchQuick");dwr.engine._execute(ExtCoexpressionSearchController._path,'ExtCoexpressionSearchController','doSearchQuick',p0,callback);};ExtCoexpressionSearchController.doBackgroundCoexSearch=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/ExtCoexpressionSearchController/doBackgroundCoexSearch");dwr.engine._execute(ExtCoexpressionSearchController._path,'ExtCoexpressionSearchController','doBackgroundCoexSearch',p0,callback);};if(typeof FileUploadController==='undefined'){var FileUploadController={};}
FileUploadController._path='/Gemma/dwr';FileUploadController.upload=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/FileUploadController/upload");dwr.engine._execute(FileUploadController._path,'FileUploadController','upload',p0,callback);};FileUploadController.getUploadStatus=function(callback){dwr.engine._execute(FileUploadController._path,'FileUploadController','getUploadStatus',callback);};if(typeof GeneController==='undefined'){var GeneController={};}
GeneController._path='/Gemma/dwr';GeneController.getProducts=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneController/getProducts");dwr.engine._execute(GeneController._path,'GeneController','getProducts',p0,callback);};GeneController.findGOTerms=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneController/findGOTerms");dwr.engine._execute(GeneController._path,'GeneController','findGOTerms',p0,callback);};GeneController.loadGeneDetails=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneController/loadGeneDetails");dwr.engine._execute(GeneController._path,'GeneController','loadGeneDetails',p0,callback);};GeneController.loadGeneEvidence=function(p0,p1,p2,p3,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneController/loadGeneEvidence");dwr.engine._execute(GeneController._path,'GeneController','loadGeneEvidence',p0,p1,p2,p3,callback);};GeneController.loadAllenBrainImages=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneController/loadAllenBrainImages");dwr.engine._execute(GeneController._path,'GeneController','loadAllenBrainImages',p0,callback);};if(typeof GenePickerController==='undefined'){var GenePickerController={};}
GenePickerController._path='/Gemma/dwr';GenePickerController.getGenes=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GenePickerController/getGenes");dwr.engine._execute(GenePickerController._path,'GenePickerController','getGenes',p0,callback);};GenePickerController.getGenesByGOId=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GenePickerController/getGenesByGOId");dwr.engine._execute(GenePickerController._path,'GenePickerController','getGenesByGOId',p0,p1,callback);};GenePickerController.searchGenes=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GenePickerController/searchGenes");dwr.engine._execute(GenePickerController._path,'GenePickerController','searchGenes',p0,p1,callback);};GenePickerController.searchGenesAndGeneGroups=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GenePickerController/searchGenesAndGeneGroups");dwr.engine._execute(GenePickerController._path,'GenePickerController','searchGenesAndGeneGroups',p0,p1,callback);};GenePickerController.searchGenesAndGeneGroupsGetIds=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GenePickerController/searchGenesAndGeneGroupsGetIds");dwr.engine._execute(GenePickerController._path,'GenePickerController','searchGenesAndGeneGroupsGetIds',p0,p1,callback);};GenePickerController.searchGenesWithNCBIId=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GenePickerController/searchGenesWithNCBIId");dwr.engine._execute(GenePickerController._path,'GenePickerController','searchGenesWithNCBIId',p0,p1,callback);};GenePickerController.getTaxa=function(callback){dwr.engine._execute(GenePickerController._path,'GenePickerController','getTaxa',callback);};GenePickerController.getTaxaSpecies=function(callback){dwr.engine._execute(GenePickerController._path,'GenePickerController','getTaxaSpecies',callback);};GenePickerController.getTaxaWithGenes=function(callback){dwr.engine._execute(GenePickerController._path,'GenePickerController','getTaxaWithGenes',callback);};GenePickerController.getTaxaWithDatasets=function(callback){dwr.engine._execute(GenePickerController._path,'GenePickerController','getTaxaWithDatasets',callback);};GenePickerController.getTaxaWithArrays=function(callback){dwr.engine._execute(GenePickerController._path,'GenePickerController','getTaxaWithArrays',callback);};GenePickerController.getTaxaWithEvidence=function(callback){dwr.engine._execute(GenePickerController._path,'GenePickerController','getTaxaWithEvidence',callback);};GenePickerController.searchMultipleGenes=function(p0,p1,callback){dwr.engine._execute(GenePickerController._path,'GenePickerController','searchMultipleGenes',p0,p1,callback);};GenePickerController.searchMultipleGenesGetMap=function(p0,p1,callback){dwr.engine._execute(GenePickerController._path,'GenePickerController','searchMultipleGenesGetMap',p0,p1,callback);};GenePickerController.getGeneSetByGOId=function(p0,p1,callback){dwr.engine._execute(GenePickerController._path,'GenePickerController','getGeneSetByGOId',p0,p1,callback);};if(typeof GeoRecordBrowserController==='undefined'){var GeoRecordBrowserController={};}
GeoRecordBrowserController._path='/Gemma/dwr';GeoRecordBrowserController.browse=function(p0,p1,p2,callback){dwr.engine._execute(GeoRecordBrowserController._path,'GeoRecordBrowserController','browse',p0,p1,p2,callback);};GeoRecordBrowserController.getDetails=function(p0,callback){dwr.engine._execute(GeoRecordBrowserController._path,'GeoRecordBrowserController','getDetails',p0,callback);};GeoRecordBrowserController.toggleUsability=function(p0,callback){dwr.engine._execute(GeoRecordBrowserController._path,'GeoRecordBrowserController','toggleUsability',p0,callback);};if(typeof SecurityController==='undefined'){var SecurityController={};}
SecurityController._path='/Gemma/dwr';SecurityController.createGroup=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/createGroup");dwr.engine._execute(SecurityController._path,'SecurityController','createGroup',p0,callback);};SecurityController.deleteGroup=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/deleteGroup");dwr.engine._execute(SecurityController._path,'SecurityController','deleteGroup',p0,callback);};SecurityController.getAvailableGroups=function(callback){dwr.engine._execute(SecurityController._path,'SecurityController','getAvailableGroups',callback);};SecurityController.getAvailableSids=function(callback){dwr.engine._execute(SecurityController._path,'SecurityController','getAvailableSids',callback);};SecurityController.getUsersData=function(p0,p1,callback){dwr.engine._execute(SecurityController._path,'SecurityController','getUsersData',p0,p1,callback);};SecurityController.getSecurityInfo=function(p0,callback){dwr.engine._execute(SecurityController._path,'SecurityController','getSecurityInfo',p0,callback);};SecurityController.addUserToGroup=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/addUserToGroup");dwr.engine._execute(SecurityController._path,'SecurityController','addUserToGroup',p0,p1,callback);};SecurityController.removeUsersFromGroup=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/removeUsersFromGroup");dwr.engine._execute(SecurityController._path,'SecurityController','removeUsersFromGroup',p0,p1,callback);};SecurityController.makeGroupReadable=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/makeGroupReadable");dwr.engine._execute(SecurityController._path,'SecurityController','makeGroupReadable',p0,p1,callback);};SecurityController.makeGroupWriteable=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/makeGroupWriteable");dwr.engine._execute(SecurityController._path,'SecurityController','makeGroupWriteable',p0,p1,callback);};SecurityController.makePrivate=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/makePrivate");dwr.engine._execute(SecurityController._path,'SecurityController','makePrivate',p0,callback);};SecurityController.makePublic=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/makePublic");dwr.engine._execute(SecurityController._path,'SecurityController','makePublic',p0,callback);};SecurityController.removeGroupWriteable=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/removeGroupWriteable");dwr.engine._execute(SecurityController._path,'SecurityController','removeGroupWriteable',p0,p1,callback);};SecurityController.removeGroupReadable=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/removeGroupReadable");dwr.engine._execute(SecurityController._path,'SecurityController','removeGroupReadable',p0,p1,callback);};SecurityController.updatePermissions=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/updatePermissions");dwr.engine._execute(SecurityController._path,'SecurityController','updatePermissions',p0,callback);};SecurityController.updatePermission=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SecurityController/updatePermission");dwr.engine._execute(SecurityController._path,'SecurityController','updatePermission',p0,callback);};SecurityController.getGroupMembers=function(p0,callback){dwr.engine._execute(SecurityController._path,'SecurityController','getGroupMembers',p0,callback);};SecurityController.getAvailablePrincipalSids=function(callback){dwr.engine._execute(SecurityController._path,'SecurityController','getAvailablePrincipalSids',callback);};SecurityController.getAuthenticatedUserNames=function(callback){dwr.engine._execute(SecurityController._path,'SecurityController','getAuthenticatedUserNames',callback);};SecurityController.getAuthenticatedUserCount=function(callback){dwr.engine._execute(SecurityController._path,'SecurityController','getAuthenticatedUserCount',callback);};if(typeof GeneSetController==='undefined'){var GeneSetController={};}
GeneSetController._path='/Gemma/dwr';GeneSetController.getGenesInGroup=function(p0,callback){dwr.engine._execute(GeneSetController._path,'GeneSetController','getGenesInGroup',p0,callback);};GeneSetController.load=function(p0,callback){dwr.engine._execute(GeneSetController._path,'GeneSetController','load',p0,callback);};GeneSetController.getGeneSetsByGOId=function(p0,p1,callback){dwr.engine._execute(GeneSetController._path,'GeneSetController','getGeneSetsByGO',p0,p1,callback);};GeneSetController.update=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/update");dwr.engine._execute(GeneSetController._path,'GeneSetController','update',p0,callback);};GeneSetController.updateNameDesc=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/updateNameDesc");dwr.engine._execute(GeneSetController._path,'GeneSetController','updateNameDesc',p0,callback);};GeneSetController.updateMembers=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/updateMembers");dwr.engine._execute(GeneSetController._path,'GeneSetController','updateMembers',p0,p1,callback);};GeneSetController.updateSessionGroups=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/updateSessionGroups");dwr.engine._execute(GeneSetController._path,'GeneSetController','updateSessionGroups',p0,callback);};GeneSetController.updateUserAndSessionGroups=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/updateUserAndSessionGroups");dwr.engine._execute(GeneSetController._path,'GeneSetController','updateUserAndSessionGroups',p0,callback);};GeneSetController.create=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/create");dwr.engine._execute(GeneSetController._path,'GeneSetController','create',p0,callback);};GeneSetController.addSessionGroups=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/addSessionGroups");dwr.engine._execute(GeneSetController._path,'GeneSetController','addSessionGroups',p0,p1,callback);};GeneSetController.addUserAndSessionGroups=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/addUserAndSessionGroups");dwr.engine._execute(GeneSetController._path,'GeneSetController','addUserAndSessionGroups',p0,callback);};GeneSetController.remove=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/remove");dwr.engine._execute(GeneSetController._path,'GeneSetController','remove',p0,callback);};GeneSetController.removeSessionGroups=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/removeSessionGroups");dwr.engine._execute(GeneSetController._path,'GeneSetController','removeSessionGroups',p0,callback);};GeneSetController.removeUserAndSessionGroups=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/removeUserAndSessionGroups");dwr.engine._execute(GeneSetController._path,'GeneSetController','removeUserAndSessionGroups',p0,callback);};GeneSetController.getUsersGeneGroups=function(p0,p1,callback){dwr.engine._execute(GeneSetController._path,'GeneSetController','getUsersGeneGroups',p0,p1,callback);};GeneSetController.getUserSessionGeneGroups=function(p0,p1,callback){dwr.engine._execute(GeneSetController._path,'GeneSetController','getUserSessionGeneGroups',p0,p1,callback);};GeneSetController.getUserAndSessionGeneGroups=function(p0,p1,callback){dwr.engine._execute(GeneSetController._path,'GeneSetController','getUserAndSessionGeneGroups',p0,p1,callback);};GeneSetController.findGeneSetsByGene=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/findGeneSetsByGene");dwr.engine._execute(GeneSetController._path,'GeneSetController','findGeneSetsByGene',p0,callback);};GeneSetController.findGeneSetsByName=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/GeneSetController/findGeneSetsByName");dwr.engine._execute(GeneSetController._path,'GeneSetController','findGeneSetsByName',p0,p1,callback);};GeneSetController.canCurrentUserEditGroup=function(p0,callback){dwr.engine._execute(GeneSetController._path,'GeneSetController','canCurrentUserEditGroup',p0,callback);};if(typeof SystemMonitorController==='undefined'){var SystemMonitorController={};}
SystemMonitorController._path='/Gemma/dwr';SystemMonitorController.getHibernateStatus=function(callback){dwr.engine._execute(SystemMonitorController._path,'SystemMonitorController','getHibernateStatus',callback);};SystemMonitorController.getSpaceStatus=function(callback){dwr.engine._execute(SystemMonitorController._path,'SystemMonitorController','getJMSBrokerStatus',callback);};SystemMonitorController.getCacheStatus=function(callback){dwr.engine._execute(SystemMonitorController._path,'SystemMonitorController','getCacheStatus',callback);};SystemMonitorController.clearCache=function(p0,callback){dwr.engine._execute(SystemMonitorController._path,'SystemMonitorController','clearCache',p0,callback);};SystemMonitorController.clearAllCaches=function(callback){dwr.engine._execute(SystemMonitorController._path,'SystemMonitorController','clearAllCaches',callback);};SystemMonitorController.enableStatistics=function(callback){dwr.engine._execute(SystemMonitorController._path,'SystemMonitorController','enableStatistics',callback);};SystemMonitorController.disableStatistics=function(callback){dwr.engine._execute(SystemMonitorController._path,'SystemMonitorController','disableStatistics',callback);};SystemMonitorController.resetHibernateStatus=function(callback){dwr.engine._execute(SystemMonitorController._path,'SystemMonitorController','resetHibernateStatus',callback);};if(typeof LinkAnalysisController==='undefined'){var LinkAnalysisController={};}
LinkAnalysisController._path='/Gemma/dwr';LinkAnalysisController.run=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/LinkAnalysisController/run");dwr.engine._execute(LinkAnalysisController._path,'LinkAnalysisController','run',p0,callback);};if(typeof MgedOntologyService==='undefined'){var MgedOntologyService={};}
MgedOntologyService._path='/Gemma/dwr';MgedOntologyService.getMgedTermsByKey=function(p0,callback){dwr.engine._execute(MgedOntologyService._path,'MgedOntologyService','getMgedTermsByKey',p0,callback);};MgedOntologyService.getBioMaterialTreeNodeTerms=function(callback){dwr.engine._execute(MgedOntologyService._path,'MgedOntologyService','getBioMaterialTreeNodeTerms',callback);};MgedOntologyService.getBioMaterialTerms=function(callback){dwr.engine._execute(MgedOntologyService._path,'MgedOntologyService','getBioMaterialTerms',callback);};MgedOntologyService.getUsefulMgedTerms=function(callback){dwr.engine._execute(MgedOntologyService._path,'MgedOntologyService','getUsefulMgedTerms',callback);};MgedOntologyService.loadNewOntology=function(p0,p1,callback){dwr.engine._execute(MgedOntologyService._path,'MgedOntologyService','loadNewOntology',p0,p1,callback);};MgedOntologyService.getTerm=function(p0,callback){dwr.engine._execute(MgedOntologyService._path,'MgedOntologyService','getTerm',p0,callback);};MgedOntologyService.getTermIndividuals=function(p0,callback){dwr.engine._execute(MgedOntologyService._path,'MgedOntologyService','getTermIndividuals',p0,callback);};MgedOntologyService.isOntologyLoaded=function(callback){dwr.engine._execute(MgedOntologyService._path,'MgedOntologyService','isOntologyLoaded',callback);};if(typeof ProcessedExpressionDataVectorCreateController==='undefined'){var ProcessedExpressionDataVectorCreateController={};}
ProcessedExpressionDataVectorCreateController._path='/Gemma/dwr';ProcessedExpressionDataVectorCreateController.run=function(p0,callback){dwr.engine._execute(ProcessedExpressionDataVectorCreateController._path,'ProcessedExpressionDataVectorCreateController','run',p0,callback);};if(typeof ProgressStatusService==='undefined'){var ProgressStatusService={};}
ProgressStatusService._path='/Gemma/dwr';ProgressStatusService.getProgressStatus=function(p0,callback){dwr.engine._execute(ProgressStatusService._path,'ProgressStatusService','getProgressStatus',p0,callback);};ProgressStatusService.cancelJob=function(p0,callback){dwr.engine._execute(ProgressStatusService._path,'ProgressStatusService','cancelJob',p0,callback);};ProgressStatusService.addEmailAlert=function(p0,callback){dwr.engine._execute(ProgressStatusService._path,'ProgressStatusService','addEmailAlert',p0,callback);};ProgressStatusService.getSubmittedTasks=function(callback){dwr.engine._execute(ProgressStatusService._path,'ProgressStatusService','getSubmittedTasks',callback);};if(typeof TwoChannelMissingValueController==='undefined'){var TwoChannelMissingValueController={};}
TwoChannelMissingValueController._path='/Gemma/dwr';TwoChannelMissingValueController.run=function(p0,callback){dwr.engine._execute(TwoChannelMissingValueController._path,'TwoChannelMissingValueController','run',p0,callback);};TwoChannelMissingValueController.run=function(p0,callback){dwr.engine._execute(TwoChannelMissingValueController._path,'TwoChannelMissingValueController','run',p0,callback);};if(typeof SvdController==='undefined'){var SvdController={};}
SvdController._path='/Gemma/dwr';SvdController.run=function(p0,callback){dwr.engine._execute(SvdController._path,'SvdController','run',p0,callback);};if(typeof SearchService==='undefined'){var SearchService={};}
SearchService._path='/Gemma/dwr';SearchService.ajaxSearch=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/SearchService/search");dwr.engine._execute(SearchService._path,'SearchService','ajaxSearch',p0,callback);};if(typeof TaskCompletionController==='undefined'){var TaskCompletionController={};}
TaskCompletionController._path='/Gemma/dwr';TaskCompletionController.checkResult=function(p0,callback){dwr.engine._execute(TaskCompletionController._path,'TaskCompletionController','checkResult',p0,callback);};if(typeof TestTaskController==='undefined'){var TestTaskController={};}
TestTaskController._path='/Gemma/dwr';TestTaskController.run=function(p0,p1,p2,p3,callback){dwr.engine._execute(TestTaskController._path,'TestTaskController','run',p0,p1,p2,p3,callback);};if(typeof FeedReader==='undefined'){var FeedReader={};}
FeedReader._path='/Gemma/dwr';FeedReader.getLatestNews=function(callback){dwr.engine._execute(FeedReader._path,'FeedReader','getLatestNews',callback);};if(typeof UserListController==='undefined'){var UserListController={};}
UserListController._path='/Gemma/dwr';UserListController.getUsers=function(callback){dwr.engine._execute(UserListController._path,'UserListController','getUsers',callback);};UserListController.saveUser=function(p0,callback){dwr.engine._execute(UserListController._path,'UserListController','saveUser',p0,callback);};if(typeof LinkOutController==='undefined'){var LinkOutController={};}
LinkOutController._path='/Gemma/dwr';LinkOutController.getAllenBrainAtlasLink=function(p0,callback){dwr.engine._execute(LinkOutController._path,'LinkOutController','getAllenBrainAtlasLink',p0,callback);};if(typeof PhenotypeController==='undefined'){var PhenotypeController={};}
PhenotypeController._path='/Gemma/dwr';PhenotypeController.findEvidenceByFilters=function(p0,p1,p2,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/PhenotypeController/findEvidenceByFilters");dwr.engine._execute(PhenotypeController._path,'PhenotypeController','findEvidenceByFilters',p0,p1,p2,callback);};PhenotypeController.findCandidateGenes=function(p0,p1,p2,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/PhenotypeController/findCandidateGenes");dwr.engine._execute(PhenotypeController._path,'PhenotypeController','findCandidateGenes',p0,p1,p2,callback);};PhenotypeController.findExperimentMgedCategory=function(callback){dwr.engine._execute(PhenotypeController._path,'PhenotypeController','findExperimentMgedCategory',callback);};PhenotypeController.calculateExternalDatabasesStatistics=function(callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/PhenotypeController/calculateExternalDatabasesStatistics");dwr.engine._execute(PhenotypeController._path,'PhenotypeController','calculateExternalDatabasesStatistics',callback);};PhenotypeController.findExperimentOntologyValue=function(p0,p1,p2,callback){dwr.engine._execute(PhenotypeController._path,'PhenotypeController','findExperimentOntologyValue',p0,p1,p2,callback);};PhenotypeController.findEvidenceOwners=function(callback){dwr.engine._execute(PhenotypeController._path,'PhenotypeController','findEvidenceOwners',callback);};PhenotypeController.loadAllPhenotypesByTree=function(p0,p1,callback){dwr.engine._execute(PhenotypeController._path,'PhenotypeController','loadAllPhenotypesByTree',p0,p1,callback);};PhenotypeController.searchOntologyForPhenotypes=function(p0,p1,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/PhenotypeController/searchOntologyForPhenotypes");dwr.engine._execute(PhenotypeController._path,'PhenotypeController','searchOntologyForPhenotypes',p0,p1,callback);};PhenotypeController.findBibliographicReference=function(p0,p1,callback){dwr.engine._execute(PhenotypeController._path,'PhenotypeController','findBibliographicReference',p0,p1,callback);};PhenotypeController.processPhenotypeAssociationForm=function(p0,callback){dwr.engine._execute(PhenotypeController._path,'PhenotypeController','processPhenotypeAssociationForm',p0,callback);};PhenotypeController.validatePhenotypeAssociationForm=function(p0,callback){dwr.engine._execute(PhenotypeController._path,'PhenotypeController','validatePhenotypeAssociationForm',p0,callback);};PhenotypeController.removePhenotypeAssociation=function(p0,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/PhenotypeController/removePhenotypeAssociation");dwr.engine._execute(PhenotypeController._path,'PhenotypeController','removePhenotypeAssociation',p0,callback);};PhenotypeController.makeDifferentialExpressionEvidencesFromDiffExpressionMetaAnalysis=function(p0,p1,p2,callback){googleAnalyticsTrackPageviewIfConfigured("/Gemma/PhenotypeController/makeDifferentialExpressionEvidencesFromDiffExpressionMetaAnalysis");dwr.engine._execute(PhenotypeController._path,'PhenotypeController','makeDifferentialExpressionEvidencesFromDiffExpressionMetaAnalysis',p0,p1,p2,callback);};PhenotypeController.removeAllEvidenceFromMetaAnalysis=function(p0,callback){dwr.engine._execute(PhenotypeController._path,'PhenotypeController','removeAllEvidenceFromMetaAnalysis',p0,callback);};if(typeof JavascriptLogger==='undefined'){var JavascriptLogger={};}
JavascriptLogger._path='/Gemma/dwr';JavascriptLogger.writeToLog=function(p0,p1,p2,p3,p4,callback){dwr.engine._execute(JavascriptLogger._path,'JavascriptLogger','writeToLog',p0,p1,p2,p3,p4,callback);};JavascriptLogger.writeToDebugLog=function(p0,p1,p2,p3,p4,callback){dwr.engine._execute(JavascriptLogger._path,'JavascriptLogger','writeToDebugLog',p0,p1,p2,p3,p4,callback);};JavascriptLogger.writeToInfoLog=function(p0,p1,p2,p3,p4,callback){dwr.engine._execute(JavascriptLogger._path,'JavascriptLogger','writeToInfoLog',p0,p1,p2,p3,p4,callback);};JavascriptLogger.writeToWarnLog=function(p0,p1,p2,p3,p4,callback){dwr.engine._execute(JavascriptLogger._path,'JavascriptLogger','writeToWarnLog',p0,p1,p2,p3,p4,callback);};JavascriptLogger.writeToErrorLog=function(p0,p1,p2,p3,p4,callback){dwr.engine._execute(JavascriptLogger._path,'JavascriptLogger','writeToErrorLog',p0,p1,p2,p3,p4,callback);};JavascriptLogger.writeToFatalLog=function(p0,p1,p2,p3,p4,callback){dwr.engine._execute(JavascriptLogger._path,'JavascriptLogger','writeToFatalLog',p0,p1,p2,p3,p4,callback);};if(typeof SignupController==='undefined'){var SignupController={};}
SignupController._path='/Gemma/dwr';SignupController.loginCheck=function(callback){dwr.engine._execute(SignupController._path,'SignupController','loginCheck',callback);};Ext.tree.DwrTreeLoader=function(config){this.baseParams={};this.requestMethod="POST";Ext.apply(this,config);this.addEvents({"beforeload":true,"load":true,"loadexception":true});};Ext.extend(Ext.tree.DwrTreeLoader,Ext.tree.TreeLoader,{requestData:function(node,callback){if(this.fireEvent("beforeload",this,node,callback)!==false){var args=[];args.push(node);var cb={success:this.read,failure:this.handleFailure,scope:this,argument:{callback:callback,node:node}};var proxy=new Ext.data.DWRProxy(this.dataUrl,cb);this.transId=proxy.load(null,this,"foo",this,args);}else{if(typeof callback=="function"){callback();}}},read:function(data,attr){var node=attr[0];this.transId=false;this.processResponse(data,node,"foo");this.fireEvent("load",this,node,data);node.fireEvent("load",this,data);},abort:function(){if(this.isLoading()){}},createNode:function(data){if(this.applyLoader!==false){data.loader=this;}
if(data.uiProvider!==undefined&&typeof data.uiProvider=='string'){data.uiProvider=this.uiProviders[data.uiProvider]||eval(data.uiProvider);}
var n=(data.leaf?new Ext.tree.TreeNode(data):new Ext.tree.TreeNode(data));if(n.attributes.children!==undefined){for(var i=0,len=n.attributes.children.length;i<len;i++){var newnode=this.createNode(n.attributes.children[i]);n.appendChild(newnode);}}
return n;},processResponse:function(data,node,callback){try{for(var i=0,len=data.length;i<len;i++){var newnode=this.createNode(data[i]);if(newnode){node.appendChild(newnode);}}
node.loadComplete(true,true,"foo");if(typeof callback=="function"){callback(this,node);}}catch(e){this.handleFailure(data);}},handleFailure:function(response){this.transId=false;this.fireEvent("loadexception",this,this.node,response);}});Ext.ux.CollapsedPanelTitlePlugin=function(){this.init=function(p){if(p.collapsible&&p.collapsedTitle){var r=p.region;if((r=='north')||(r=='south')){p.on('render',function(){var ct=p.ownerCt;ct.on('afterlayout',function(){if(ct.layout[r].collapsedEl){p.collapsedTitleEl=ct.layout[r].collapsedEl.createChild({tag:'span',cls:'x-panel-collapsed-text front-page-header-text',html:p.collapsedTitle});}},false,{single:true});p.on('collapse',function(){if(ct.layout[r].collapsedEl&&!p.collapsedTitleEl){p.collapsedTitleEl=ct.layout[r].collapsedEl.createChild({tag:'span',cls:'x-panel-collapsed-text front-page-header-text',html:p.collapsedTitle});}},false,{single:true});});}}};}
Ext.data.ListRangeReader=function(meta,recordType){this.recordType=meta.record||recordType;Ext.data.ListRangeReader.superclass.constructor.call(this,meta,this.recordType);};Ext.extend(Ext.data.ListRangeReader,Ext.data.JsonReader,{readResponse:function(action,response){var o=(response.responseText!==undefined)?Ext.decode(response.responseText):response;if(!o){throw new Ext.data.JsonReader.Error('response');}
var res;var root=this.getRoot(o);if(action===Ext.data.Api.actions.create){var def=Ext.isDefined(root);if(def&&Ext.isEmpty(root)){throw new Ext.data.JsonReader.Error('root-empty',this.meta.root);}else if(!def){throw new Ext.data.JsonReader.Error('root-undefined-response',this.meta.root);}}
res=new Ext.data.Response({action:action,success:this.getSuccess(o)==null?true:this.getSuccess(o),data:(root)?this.extractData(root,false):[],message:this.getMessage(o)==null?"":this.getMessage(o),raw:o});if(Ext.isEmpty(res.success)){throw new Ext.data.JsonReader.Error('successProperty-response',this.meta.successProperty);}
return res;},readRecords:function(o){if(!o){return;}
this.jsonData=o;if(o.metaData){this.onMetaChange(o.metaData);}
var s=this.meta,Record=this.recordType,f=Record.prototype.fields,fi=f.items,fl=f.length,v;var root=this.getRoot(o)||o,c=root.length,totalRecords=c,success=true;if(s.totalProperty){v=parseInt(this.getTotal(o),10);if(!isNaN(v)){totalRecords=v;}}
if(s.successProperty){v=this.getSuccess(o);if(v===false||v==='false'){success=false;}}
return{success:success,records:this.extractData(root,true),totalRecords:totalRecords};}});Ext.namespace("Ext.ux.data");Ext.ux.data.DwrProxy=function(configOrMethod){this.apiActionToHandlerMap={};if(configOrMethod.apiActionToHandlerMap){Ext.iterate(Ext.data.Api.actions,function(action){var actionHandlerConfig=configOrMethod.apiActionToHandlerMap[action];if(actionHandlerConfig){actionHandlerConfig.action=action;this.apiActionToHandlerMap[action]=new Ext.ux.data.DwrProxy.ActionHandler(actionHandlerConfig);}},this);configOrMethod.api=this.apiActionToHandlerMap;Ext.ux.data.DwrProxy.superclass.constructor.call(this,configOrMethod);}else if(typeof configOrMethod=='function'){this.apiActionToHandlerMap['read']=new Ext.ux.data.DwrProxy.ActionHandler({action:'read',dwrFunction:configOrMethod});var upconf=configOrMethod||{};upconf.api=this.apiActionToHandlerMap;Ext.ux.data.DwrProxy.superclass.constructor.call(this,upconf);}else{throw"OH no! + configOrMethod: "+configOrMethod;}};Ext.data.DWRProxy=Ext.ux.data.DwrProxy;Ext.extend(Ext.ux.data.DwrProxy,Ext.data.DataProxy,{apiActionToHandlerMap:{},doRequest:function(action,records,params,reader,callback,scope,options){var request=new Ext.ux.data.DataProxy.Request(action,records,params,reader,callback,scope,options);var apiActionHandler=this.apiActionToHandlerMap[action];if(!apiActionHandler){throw new Exception('No API Action Handler defined for action: '+action);}
var dwrArgs=apiActionHandler.getDwrArgsFunction.call(apiActionHandler.getDwrArgsScope,request,this.getRecordDataArray(records),this.getRecordDataBeforeUpdateArray(records))||[];dwrArgs.push(this.createCallback(request));apiActionHandler.dwrFunction.apply(Object,dwrArgs);},getRecordDataArray:function(records){return Ext.pluck(records,'data')||[];},getRecordDataBeforeUpdateArray:function(records){var recordDataBeforeUpdate=[];Ext.each(records,function(record){recordDataBeforeUpdate.push(Ext.apply({},record.modified,record.data));});return recordDataBeforeUpdate;},createCallback:function(request){return{callback:function(response){if(request.action===Ext.data.Api.actions.read){this.onRead(request,response);}else{this.onWrite(request,response);}}.createDelegate(this),exceptionHandler:function(message,exception){this.handleResponseException(request,message,exception);}.createDelegate(this)};},onRead:function(request,response){try{readDataBlock=request.reader.readRecords(response);}catch(e){return this.handleResponseException(request,response,e);}
if(readDataBlock===undefined){readDataBlock={success:true,data:[]};}
if(readDataBlock.success===false){this.fireEvent("exception",this,'remote',request.action,request.options,response,null);}else{this.fireEvent("load",this,request,request.options);}
request.callback.call(request.scope,readDataBlock,request.options,readDataBlock.success);},onWrite:function(request,response){var readDataBlock;try{readDataBlock=request.reader.readResponse(request.action,response);}catch(e){return this.handleResponseException(request,response,e);}
if(readDataBlock===undefined){readDataBlock={success:true,data:[]};}
if(readDataBlock&&readDataBlock.success===false){this.fireEvent("exception",this,'remote',request.action,request.options,response,request.records);}else{this.fireEvent("write",this,request.action,readDataBlock.data,readDataBlock,request.records,request.options);}
request.callback.call(request.scope,readDataBlock.data,readDataBlock,readDataBlock.success);},handleResponseException:function(request,response,exception){this.fireEvent("exception",this,'response',request.action,request.options,response,exception);request.callback.call(request.scope,null,request.options,false);}});Ext.ux.data.DwrProxy.ActionHandler=function(config){Ext.apply(this,config);if(!this.action){throw new Exception('"action" is not defined.');}
if(!Ext.data.Api.isAction(this.action)){throw new Exception(this.action+' is not a valid Ext.data.Api action.');}
if(!this.dwrFunction){throw new Exception('"dwrFunction" is not defined.');}
if(!this.getDwrArgsFunction){this.getDwrArgsFunction=this.defaultGetDwrArgsFunctions[this.action];}
if(!this.getDwrArgsScope){this.getDwrArgsScope=Object;}};Ext.extend(Ext.ux.data.DwrProxy.ActionHandler,Object,{defaultGetDwrArgsFunctions:{read:function(request){if(request.options&&request.options.params&&request.options.params.push){return request.options.params;}
return[];},create:function(request,recordDataArray){return[recordDataArray];},update:function(request,recordDataArray,oldRecordDataArray){return[recordDataArray];},destroy:function(request,recordDataArray){return[recordDataArray];}}});Ext.namespace("Ext.ux.data.DataProxy");Ext.ux.data.DataProxy.Request=function(action,records,params,reader,callback,scope,options){Ext.apply(this,{action:action,records:records,params:params,reader:reader,callback:callback,scope:scope,options:options});};if(!Array.prototype.map){Array.prototype.map=function(fun){var len=this.length;if(typeof fun!='function'){throw new TypeError();}
var res=new Array(len);var thisp=arguments[1];for(var i=0;i<len;i++){if(i in this){res[i]=fun.call(thisp,this[i],i,this);}}
return res;};}
Ext.ns('Ext.ux.data');Ext.ux.data.PagingMemoryProxy=Ext.extend(Ext.data.MemoryProxy,{constructor:function(data){Ext.ux.data.PagingMemoryProxy.superclass.constructor.call(this);this.data=data;},doRequest:function(action,rs,params,reader,callback,scope,options){params=params||{};var result;try{result=reader.readRecords(this.data);}catch(e){this.fireEvent('loadexception',this,options,null,e);callback.call(scope,null,options,false);return;}
if(params.filter!==undefined){result.records=result.records.filter(function(el){if(typeof(el)=='object'){var att=params.filterCol||0;return String(el.data[att]).match(params.filter)?true:false;}else{return String(el).match(params.filter)?true:false;}});result.totalRecords=result.records.length;}
if(params.sort!==undefined){var dir=String(params.dir).toUpperCase()=='DESC'?-1:1;var fn=function(v1,v2){return v1>v2?1:(v1<v2?-1:0);};result.records.sort(function(a,b){var v=0;if(typeof(a)=='object'){v=fn(a.data[params.sort],b.data[params.sort])*dir;}else{v=fn(a,b)*dir;}
if(v==0){v=(a.index<b.index?-1:1);}
return v;});}
if(params.start!==undefined&&params.limit!==undefined){result.records=result.records.slice(params.start,params.start+params.limit);}
callback.call(scope,result,options,true);}});Ext.data.PagingMemoryProxy=Ext.ux.data.PagingMemoryProxy;Ext.namespace('Gemma');Gemma.GemmaGridPanel=Ext.extend(Ext.grid.EditorGridPanel,{stripeRows:true,stateful:false,viewConfig:{forceFit:true},initComponent:function(){Ext.apply(this,{selModel:new Ext.grid.RowSelectionModel({})});Gemma.GemmaGridPanel.superclass.initComponent.call(this);this.addEvents('refresh');},getEditedRecords:function(){var edited=[];var all=this.getStore().getRange();for(var i=0;i<all.length;++i){if(all[i].dirty){edited.push(all[i].data);}}
return edited;},getSelectedRecords:function(){var records=[];var selected=this.getSelectionModel().getSelections();for(var i=0;i<selected.length;++i){records.push(selected[i].data);}
return records;},getSelectedIds:function(){var ids=[];var selected=this.getSelectionModel().getSelections();for(var i=0;i<selected.length;++i){ids.push(selected[i].id);}
return ids;},refresh:function(params){var reloadOpts={callback:this.getView().refresh.createDelegate(this.getView())};if(params){reloadOpts.params=params;}
this.getStore().reload(reloadOpts);this.fireEvent('refresh');},revertSelected:function(){var selected=this.getSelectionModel().getSelections();for(var i=0;i<selected.length;++i){selected[i].reject();}
this.getView().refresh();},getReadParams:function(){return(typeof this.readParams=="function")?this.readParams():this.readParams;}});Gemma.GemmaGridPanel.formatTermWithStyle=function(value,uri){var style=uri?"unusedWithUri":"unusedNoUri";var description=uri||"free text";return String.format("<span class='{0}' ext:qtip='{2}'>{1}</span>",style,value,description);};Ext.namespace('Gemma');Gemma.SetPreview=Ext.extend(Ext.Panel,{preview_size:5,listModified:false,border:true,hidden:true,forceLayout:true,hideBorders:true,bodyStyle:'border-color:#B5B8C8; background-color:ghostwhite',setSelectedSetValueObject:function(gsvo){this.selectedSetValueObject=gsvo;this.isSet=true;this.isSingleEntity=false;},resetPreview:function(){Ext.DomHelper.overwrite(this.previewContent.body,{cn:''});},insertMessage:function(msg){Ext.DomHelper.append(this.previewContent.body,{cn:msg});},setTaxonId:function(taxonId){this.taxonId=taxonId;this.selectionEditor.setTaxonId(taxonId);if(this.addingCombo){this.addingCombo.setTaxonId(taxonId);}},getTaxonId:function(){return this.taxonId;},loadPreview:function(entities,total){this.totalCount=(total&&total>0)?total:this.totalCount;this.resetPreview();for(var i=0;i<entities.size();i++){this.previewContent.update(entities[i]);}
this.updateTitle();if(entities.length>=total){this.moreIndicator.setText('');this.moreIndicator.disable().hide();}else{this.moreIndicator.enable().show();this.moreIndicator.setText('['+(total-entities.size())+' more...]');}
this.previewContent.expand();},updateTitle:function(name,size){if(!name){name="Selection Preview";}
this.previewContent.setTitle('<span style="font-size:1.2em">'+name+'</span> &nbsp;&nbsp;<span style="font-weight:normal">('+
this.totalCount+
((this.totalCount>1)?" entities)":" entity)"));},showPreview:function(){this.show();if(this.previewContent){this.previewContent.show();this.previewContent.expand();}},collapsePreview:function(){this.moreIndicator.hide();if(typeof this.previewContent!=='undefined'){this.previewContent.collapse(true);}},expandPreview:function(){this.moreIndicator.show();if(typeof this.previewContent!=='undefined'){this.previewContent.expand(true);}},launchSelectionEditor:function(){this.fireEvent('maskParentContainer');if(!(this.selectedEntityOrGroup&&this.selectedEntityOrGroup.resultValueObject)&&!(this.entityIds||this.entityIds!==null||this.entityIds.length>0)&&!this.selectedSetValueObject){return;}
this.selectionEditorWindow.show();this.selectionEditor.loadMask=new Ext.LoadMask(this.selectionEditor.getEl(),{msg:Gemma.StatusText.Loading.generic});this.selectionEditor.loadMask.show();Ext.apply(this.selectionEditor,{taxonId:this.getTaxonId()});if(this.selectedSetValueObject){this.selectionEditor.loadSetValueObject(this.selectedSetValueObject,function(){this.selectionEditor.loadMask.hide();}.createDelegate(this,[],false));}else if(this.entityIds&&this.entityIds.length>0){this.selectionEditor.loadEntities(this.entityIds,function(){this.selectionEditor.loadMask.hide();}.createDelegate(this,[],false));}else{this.selectionEditor.loadMask.hide();}},selectionEditor:new Ext.grid.GridPanel({name:'placeholder'}),initComponent:function(){this.selectionEditor.on('doneModification',function(){this.selectionEditorWindow.hide();this.fireEvent('doneModification');this.fireEvent('unmaskParentContainer');},this);this.moreIndicator=new Ext.Button({handler:this.launchSelectionEditor,scope:this,style:'margin-left:10px; padding-bottom:5px;',tooltip:"Edit your selection",ctCls:'transparent-btn transparent-btn-link'});this.selectionEditorWindow=new Ext.Window({closable:false,layout:'fit',width:500,height:500,items:this.selectionEditor,title:'Edit Your Selection'});this.selectionEditor.on('titlechange',function(panel,newTitle){this.selectionEditorWindow.setTitle(newTitle);},this);this.addEvents('removeMe','doneModification');var itemsForCmp=[{ref:'previewContent',title:this.defaultPreviewTitle,collapsible:true,forceLayout:true,cls:'unstyledTitle',bodyStyle:'padding:10px;padding-bottom:0px; background-color:transparent',hidden:false,style:'padding-right: 4px;',tplWriteMode:'append',tpl:this.defaultTpl,tools:[{id:'saveEdit',handler:this.launchSelectionEditor,scope:this,qtip:'Edit or save your set'}],listeners:{collapse:function(){this.moreIndicator.hide();},expand:function(){this.moreIndicator.show();},scope:this}}];if(this.moreIndicator){itemsForCmp.push(this.moreIndicator);}
if(this.addingCombo){itemsForCmp.push(this.addingCombo);}
Ext.apply(this,{items:itemsForCmp});Gemma.SetPreview.superclass.initComponent.call(this);}});Ext.reg('Gemma.SetPreview',Gemma.SetPreview);Ext.namespace('Gemma');Gemma.ProgressWindow=Ext.extend(Ext.Window,{modal:true,closable:false,resizable:false,stateful:false,showAllMessages:false,collapsible:false,autoHeight:true,width:400,id:"progressWidget-window",initComponent:function(){this.progressBar=new Gemma.ProgressWidget({taskId:this.taskId});Ext.apply(this,{items:[this.progressBar]});Gemma.ProgressWindow.superclass.initComponent.call(this);this.addEvents('done','fail');this.on('show',this.start,this);this.relayEvents(this.progressBar,['done','fail']);},start:function(){this.progressBar.on('done',function(payload){if(this.callback){this.callback(payload);}
this.destroy();},this);this.progressBar.on('fail',function(message){if(this.errorHandler){this.errorHandler(message);}},this);this.progressBar.on('cancel',function(successfullyCancelled){if(this.errorHandler){if(successfullyCancelled){this.errorHandler("Job was cancelled");}else{this.errorHandler("Could not be cancelled?");}}},this);this.progressBar.startProgress();}});Gemma.ProgressWidget=Ext.extend(Ext.Panel,{BAR_UPDATE_INTERVAL:2000,refreshTaskProgressIntervalID:null,waitingForReply:false,noEmailOption:false,allMessages:"",previousMessage:'',resizable:false,bodyBorder:false,stateful:false,id:"progressWidget-panel",showLogMessages:function(){if(!this.allMessages){return;}
this.insert(1,new Ext.form.Label({id:"logsProgressWidget",html:this.allMessages}));this.doLayout();this.on('message-received',function(){Ext.DomHelper.overwrite('logsProgressWidget',{id:'logsProgressWidget',html:this.allMessages});});},hideLogMessages:function(){this.remove(1,true);},initComponent:function(){this.progressBar=new Ext.ProgressBar({width:400,text:"Initializing ..."});Ext.apply(this,{items:[this.progressBar],buttons:[{text:"Logs",id:"progresslogsbutton",tooltip:"Show log messages",enableToggle:true,toggleHandler:function(button,enabled){if(enabled){this.showLogMessages();}else{this.hideLogMessages();}},scope:this},{text:"Cancel Job",id:"progresscancelbutton",tooltip:"Attempt to stop the job.",handler:function(){Ext.Msg.show({title:'Cancel?',msg:'Are you sure?',buttons:Ext.Msg.YESNO,fn:function(btn){if(btn==='yes'){this.cancelJob();}}.createDelegate(this),icon:Ext.MessageBox.QUESTION});},scope:this},{text:"Hide",id:"progresshidebutton",tooltip:"Remove the progress bar and return to the page",handler:function(){Ext.Msg.show({title:"Discontinuing monitoring",msg:"The job will continue to run. You can get an email on completion. ",buttons:{ok:'OK',cancel:'Email me'},fn:function(btn){if(btn==='cancel'){ProgressStatusService.addEmailAlert(this.taskId);}},scope:this});this.stopProgress();if(this.ownerCt){this.ownerCt.destroy();}else{this.destroy();}},scope:this}]});Gemma.ProgressWidget.superclass.initComponent.call(this);Ext.apply(this);this.addEvents('done','fail','cancel','message-received');},handleResponseFailure:function(data,e){this.waitingForReply=false;this.progressBar.updateText("Waiting...");},handleFailure:function(data,e){this.stopProgress();var messageText="";if(data.description){messageText=data.description;}else if(!e){messageText=data;}else if(e.message){messageText=e.message;}else{messageText=e;}
this.fireEvent("fail",messageText);},startProgress:function(){if(this.waitingForReply){return;}
this.progressBar.wait({text:"Starting ..."});if(!this.taskId){var taskId=this.findTaskId();if(!taskId){alert("no task id");return;}
this.taskId=taskId;}
var callParams=[];var callback=this.updateProgress.createDelegate(this);var errorHandler=this.handleResponseFailure.createDelegate(this);callParams.push(callback);callParams.push(errorHandler);var refreshTaskProgressFn=this.refreshProgress.createDelegate(this,callParams,false);this.refreshTaskProgressIntervalID=window.setInterval(refreshTaskProgressFn,this.BAR_UPDATE_INTERVAL);},stopProgress:function(){window.clearInterval(this.refreshTaskProgressIntervalID);this.previousMessage=null;this.waitingForReply=false;this.progressBar.reset();},handleFinalResult:function(result){this.stopProgress();this.fireEvent('done',result);},done:false,updateProgress:function(data){this.waitingForReply=false;var messages="";var messagesToSave='';while(data.length>0){var progressUpdateItem=data.shift();messages=progressUpdateItem.description;messagesToSave=messagesToSave+progressUpdateItem.description+"<br/>";if(progressUpdateItem.failed){return this.handleFailure(progressUpdateItem);}else if(progressUpdateItem.done&&!this.done){TaskCompletionController.checkResult(this.taskId,{callback:this.handleFinalResult.createDelegate(this),errorHandler:this.handleFailure.createDelegate(this)});this.done=true;}}
if(this.previousMessage!==messages&&messages.length>0){this.allMessages=this.allMessages+messagesToSave;messages=Ext.util.Format.ellipsis(messages,70);this.previousMessage=messages;this.progressBar.updateText(messages);this.fireEvent('message-received',messages);}else{this.progressBar.updateText(this.progressBar.text.replace('.......',''));this.progressBar.updateText(this.progressBar.text+'.');}},cancelJob:function(){var f=this.cancelCallback.createDelegate(this);ProgressStatusService.cancelJob(this.taskId,f);},refreshProgress:function(callback,errorHandler){if(!this.waitingForReply){ProgressStatusService.getProgressStatus(this.taskId,{callback:callback,errorHandler:errorHandler});this.waitingForReply=true;}},cancelCallback:function(successfullyCancelled){this.stopProgress();this.fireEvent('cancel',successfullyCancelled);if(!successfullyCancelled){Ext.Msg.alert("Couldn't cancel","Sorry, the job couldn't be cancelled; perhaps it finished or was cancelled already?");}else{this.showLogMessages("Job was cancelled");}},findTaskId:function(){var queryStart=document.URL.indexOf("?");if(queryStart>-1){var param=Ext.urlDecode(document.URL.substr(queryStart+1));if(param.taskId){return param.taskId;}}
return dwr.util.getValue("taskId");},hideLogsButton:function(){Ext.getCmp("progresslogsbutton").setVisible(false);},hideHideButton:function(){Ext.getCmp("progresshidebutton").setVisible(false);}});Ext.namespace('Gemma.HelpText','Gemma.StatusText');Gemma.CITATION="Zoubarev, A., et al., Gemma: A resource for the re-use, sharing and meta-analysis of expression profiling data. Bioinformatics, 2012.";Gemma.CITATION_DIRECTIONS="If you use this file for your research, please cite: {0}"+Gemma.CITATION;Gemma.EvidenceCodeInfo={getQtipInfo:function(code,evidenceCodeInfo){return{text:'<b>'+code+': '+evidenceCodeInfo.name+'</b><br />'+evidenceCodeInfo.description,width:370};},EXP:{name:'Inferred from Experiment',description:'An experimental assay has been located in the cited reference, whose results indicate a gene association (or non-association) to a phenotype.'},IAGP:{name:'Inferred from Association of Genotype and Phenotype',description:'The association between the gene and phenotype is inferred based on association studies comparing case and control groups.'},IBA:{name:'Inferred from Biological aspect of Ancestor',description:''},IBD:{name:'Inferred from Biological aspect of Descendant',description:''},IC:{name:'Inferred by Curator',description:'The association between the gene and phenotype is not supported by any direct evidence, but can be reasonably inferred by a curator. This includes annotations from animal models or cell cultures.'},IDA:{name:'Inferred from Direct Assay',description:''},IEA:{name:'Inferred from Electronic Annotation',description:''},IED:{name:'Inferred from Experimental Data',description:'The association between the gene and phenotype is inferred based on association studies comparing case and control groups.'},IEP:{name:'Inferred from Expression Pattern',description:'The association between the gene and phenotype is inferred from the timing or location of expression of a gene.'},IGC:{name:'Inferred from Genomic Context',description:''},IGI:{name:'Inferred from Genetic Interaction',description:'The association between the gene and phenotype is inferred based on a mutation in another gene.'},IKR:{name:'Inferred from Key Residues',description:''},IMP:{name:'Inferred from Mutant Phenotype',description:'The association between the gene and phenotype is inferred based on differences in the function, process, or cellular localization between two different alleles of the corresponding gene.'},IPI:{name:'Inferred from Physical Interaction',description:''},IPM:{name:'Inferred from Phenotype Manipulation',description:'The association between the gene and phenotype is inferred based on phenotype manipulation in model organisms.'},IRD:{name:'Inferred from Rapid Divergence',description:''},ISA:{name:'Inferred from Sequence Alignment',description:''},ISM:{name:'Inferred from Sequence Model',description:''},ISO:{name:'Inferred from Sequence Orthology',description:''},ISS:{name:'Inferred from Sequence or Structural Similarity',description:''},NAS:{name:'Non-traceable Author Statement',description:''},ND:{name:'No biological Data available',description:''},NR:{name:'Not Recorded',description:''},QTM:{name:'Quantitative Trait Measurement',description:'The association between the gene and phenotype is inferred based on correlation between genotype and severity of the phenotype.'},RCA:{name:'inferred from Reviewed Computational Analysis',description:''},TAS:{name:'Traceable Author Statement',description:'The gene-to-phenotype association is stated in a review paper or a website (external database) with a reference to the original publication.'}};Gemma.StatusText={Loading:{arrayDesigns:"Loading platforms...",experiments:"Loading experiments...",experimentFactors:"Loading factors",generic:"Loading...",genes:"Loading genes..."},processing:"Processing...",waiting:"Please wait",creating:"Creating new {0}",saving:"Saving...",deleting:"Deleting...",deletingSpecific:"Deleting {0}...",Searching:{generic:"Processing request...",analysisResults:"Processing request..."}};Gemma.HelpText.CommonWarnings={LoseChanges:{title:'Changes will be lost!',text:'You have unsaved changes, are you sure you want to refresh?'},UnsavedChanges:{title:"Unsaved changes",text:"There are unsaved changes. Do you want to continue without saving?"},Deletion:{title:'Comfirm Deletion',text:"Are you sure you want to delete this {0}? This cannot be undone."},Redo:{title:'Confirm redo',text:"Are you sure you want to redo this {0}? This cannot be undone."},RefreshStats:{title:'Confirm refresh',text:"Are you sure you want to refresh statistics for this {0}? This cannot be undone."},ReIndexing:{title:'Comfirm Re-Indexing',text:"Are you sure you want to rebuild the {0} indicies? This will delete current indicies."+" <br>(Do not run this as part of a website test.)"},DuplicateName:{title:"Duplicate Name",text:"Please provide a previously unused name for the group"},BrowserWarnings:{ie8:'Advanced differential expression visualizations are not available in your browser (Internet Explorer 8). We suggest upgrading to  '+'<a href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer 9</a>, '+'<a href="http://www.mozilla.com/en-US/firefox/new/" target="_blank">Firefox</a> or '+'<a href="http://www.google.com/chrome/" target="_blank">Chrome</a>.',ieNot8:'This page may display improperly in older versions of Internet Explorer(IE). Please upgrade to '+'<a href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">IE 9</a>, '+'<a href="http://www.mozilla.com/en-US/firefox/new/" target="_blank">Firefox</a> or '+'<a href="http://www.google.com/chrome/" target="_blank">Chrome</a>.'+' If you are running IE 9 and you see this message, please make sure you are not in compatibility mode. ',generic:'This page may not display properly in all browsers. (The \"canvas\" element is requried.)'+' Please switch to '+'<a href="http://www.mozilla.com/en-US/firefox/new/" target="_blank">Firefox</a>,'+'<a href="http://www.google.com/chrome/" target="_blank">Chrome</a> or'+'<a href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie" target="_blank">Internet Explorer 9</a>.',ie7:'This page may display improperly in older versions of Internet Explorer. Please upgrade to Internet Explorer 8 or newer.'},Timeout:{title:'Gemma is Busy',text:"Gemma appears to be under heavy usage, please try your query again in a few minutes"}};Gemma.HelpText.CommonErrors={MissingInput:{title:'Missing information',taxon:"Please select a taxon"},InvalidForm:{title:"Submit Failed",text:"Form is not valid, check entries before clicking 'submit'"},EmptySet:{title:"Cannot save an empty group",text:"You cannot save an empty group. No changes have been saved.<br>"+" Add experiments to group {0} or delete it."},accessDenied:'Your access is denied.',objectAlreadyRemoved:'This record cannot be found because it has been removed by someone else.<br />Please reload the page to view the latest records.',userNotLoggedIn:'You are not logged in. Please log in to try again.',errorUnknown:'System error has occurred. Please contact the system administrator for assistance.'};Gemma.HelpText.WidgetDefaults={AjaxLogin_AjaxLoginWindow:{passwordHintLink:"Forgot your password?",registerButton:"Need an account? Register",invalidLogin:'Invalid Username/Password'},AjaxLogin_AjaxRegister:{successTitle:"Registration Successful",successText:"A confirmation email was sent. Please check your mail and click the link it contains"},AnalysisResultsSearchNonWidget:{CoexpressionTutorial:{supportColumnTitle:'Support',supportColumnText:'The number in the support column corresponds to the amount of dataset support.  Positive support is denoted by green text. Negative support is denoted by red text',visualiseColumnTitle:'Visualise',visualiseColumnText:'what does this do',nodeDegreeColumnTitle:'Specificity',nodeDegreeColumnText:'Specificity measures the coexpression of the gene with all other genes in their taxon. Genes with higher specificity show less coexpression with all other genes in their taxon.',stringencyTitle:'Stringency',stringencyText:'Use the stringency control to add/remove genes with more/less dataset support that confirms coexpression',cytoNodeDegreeTitle:'node deg 2nd',cytoNodeDegreeText:'explain visualisation of node deg',saveTitle:'Saving your results',saveText:'explain formats',updateQueryTitle:'new query from chart',updateQueryText:'click and drag etc',visualizeTabTitle:'Visualization Tab',visualizeTabText:'Click the visualization tab to view your coexpression results as a gene network, click the Help button after the visualization has loaded for information on its features.'}},AnalysisResultsSearchForm:{trimmingWarningTitle:"Warning",trimmingWarningText:"You are using {0} for your search. "+"Searching for more than {1}"+" can take some time to load and can slow down your interactions with the search results. "+"We suggest you cancel this search and refine your selections or let us trim your query.",autoTrimmingText:"You can only search up to {0} {1}. Please note that your list of {1} has been trimmed automatically.",taxonModeTT:"Searches are limited to one taxon, if you want to change the taxon, click the reset button.",Examples:{diffEx1Text:"Hippocampus development & autism (human)",diffEx1TT:'Search for differential expression patterns in ten experiments studying autism spectrum disorder based on '+'genes from the &quot;hippocampus development&quot; GO group (human)',diffEx2Text:"Forebrain neuron differentiation in fetal mice (mouse)",diffEx2TT:'Search for differential expression patterns in of genes from the &quot;forebrain neuron '+'differentiation&quot; GO group in experiments using fetal/embryonic mouse samples on the GPL1261 platform. (mouse)',coex1Text:"Regulation of cell division (yeast)",coex1TT:'Search for coexpression patterns in thirty-three experiments based on genes in the &quot;regulation of cell division&quot; '+'GO group (yeast)',coex2Text:"Protein localization to the synapse (human)",coex2TT:'Search for coexpression patterns in human brain experiments based on genes the &quot;Protein localization to the synapse&quot;'+' GO group (human)'}},AnnotationGrid:{parentLinkDescription:"The 'owner' of this annotation. May be hidden due to security.",taggingHelpTitle:"Help with tagging",taggingHelpText:"Select a 'category' for the term; then enter a term, "
+"choosing from existing terms if possible. "
+"Click 'create' to save it. You can also edit existing terms;"
+" click 'save' to make the change stick, or 'delete' to remove a selected tag."},ArrayDesignsNonPagingGrid:{emptyText:'Either you didn\'t select any platforms, or you don\'t have permissions to view the ones you chose.',actionsColumnTT:'Regenerate this report or delete orphaned designs (designs that aren\'t used by any experiments in Gemma)',isMergedTT:"merged: this design was created by merging others",isMergeeTT:"mergee: this design was merged with others to create a new design",isSubsumedTT:"subsumed: all the sequences in this design are covered by another",isSubsumerTT:"subsumer: this design \'covers\' one or more others in that it contains all their sequences",hideOrhpansTT:"Click to show/hide platforms that aren't used by any experiments in Gemma",hideTroubledTT:"Click to show/hide platforms that are troubled"},CoexpressionGrid:{stringencySpinnerTT:"Add/remove genes with more/less dataset support that confirms coexpression",myDataButtonTT:"Click to show/hide results containing only my data",supportColumnTT:"Number of data sets supporting coexpression. Green indicates positive correlations, red negative. Thus 5/27 means the coexpression was supported by 5 out of 27 tested data sets. Values in parentheses are after removal of potentially non-specifically hybridizing probes."},CytoscapePanel:{extendNodeText:'Extend Selected Nodes',searchWithSelectedText:'Search with Selected Nodes',applyGeneListOverlayText:'Apply Gene List Overlay',clearGeneListOverlayText:'Clear Gene List Overlay',stringencySpinnerTT:'Add/remove genes with more/less dataset support that confirms coexpression',widgetHelpTT:'Click here for documentation on how to use this visualizer.',refreshLayoutText:'Refresh Layout',nodeDegreeEmphasisText:'Specificity Emphasis',nodeDegreeEmphasisTT:'Specificity is represented by the darkness of a gene node. The higher the specificity of a gene is'+', the darker it is and the less it shows coexpression with all other genes in that taxon',lowStringencyWarning:'Lowering the stringency to this level will run a new search to retrieve low stringency results. '+'Low stringency results may not be meaningful for the number of datasets your are searching in.',exportPNGWindowTitle:'Right-click the image and save the image as file.',exportGraphMLWindowTitle:'GraphML data',exportXGMMLWindowTitle:'XGMML data',exportSIFWindowTitle:'SIF data',exportSVGWindowTitle:'SVG data',searchStatusTitle:'Status of Search',searchStatusTooMany:'Too Many Genes Selected. Max number of selected genes is {0}',searchStatusTooManyReduce:'Total number of visible query genes and selected genes exceeds max of {0}. Click Yes to continue search with reduced query genes',searchStatusTooFew:'No Genes Selected',searchStatusNoExtraSelectedForExtend:'You must select a non-query gene to extend',searchStatusNoMoreResults:'No more results found for this gene',compressGraphText:'Compress Graph',unCompressGraphText:'Uncompress Graph',nodeLabelsText:'Node Labels On',noNodeLabelsText:'Node Labels Off',invalidStringencyWarning:'You cannot lower the stringency below 2. Please select a different stringency',newSearchOrReturnToCurrentStringencyOption:'You are viewing the data on the table at a lower stringency than the current graph data stringency.'+'Would you like use the current lowest graph stringency of {0} or search for new graph data at stringency {1}?',graphSizeMenuTT:'Due to browser performance limitations when rendering large graphs we have trimmed edges between non-query genes. Use the control'+' to adjust the trim stringency and change the number of edges in your graph',graphSizeMenuTT2:'Due to browser performance limitations when rendering large graphs we have trimmed edges between non-query genes.'},DatasetGroupEditor:{widgetTT:"Use this tool to create and edit groups of datasets. "+"You can modify a built-in group by making a copy (clone) and editing the copy",helpURL:Gemma.HOST+"faculty/pavlidis/wiki/display/gemma/Dataset+chooser"},DatasetGroupGridPanel:{protectedTT:"Protected; cannot have members changed, usually applies to automatically generated groups."},DiffExpressionGrid:{},EEDetailsVisualizationWidget:{visualizaButtonTT:"Click to display data for selected genes, or a 'random' selection of data from this experiment",instructions:'Use the search fields to find individual genes, or groups of genes. '+'Gene group searches work for GO terms and other groups in Gemma. '+'To create groups use the <a href=\"/Gemma/geneGroupManager.html\">gene group manager</a>.'+' Click "show" to view the data for those genes. '+'Note that when viewing gene groups, not all genes in the group are necessarily in the data set.',GoButtonText:{random:'Visualize \'random\' genes',one:'Visualize 1 gene',multiple:'Visualize {0} genes'},StatusText:{random:'Visualizing 20 \'random\' elements/probes.',one:'Visualizing selected gene.',multiple:'Visualizing selected genes. Note that not all genes are necessarily in the data set.',geneMatchCount:'Found data for {0} of {1} genes.'}},EEManager:{customiseDiffExHelpTitle:'Processed vector analysis',customiseDiffExHelpText:'Choose which factors to include in the model. If you choose only one, the analysis'+' will be a t-test or one-way-anova. If you choose two factors, you might be able to include interactions. '+'If you choose three or more, interactions will not be estimated. You can also choose to analyze different '+'parts of the data sets separately, by splitting it up according to the factors listed. The analysis is then '+'done independently on each subset.'},ExperimentalDesignUpload:{instructions:'<p>Experimental design submission works in two phases. '+'First you must upload your design file (file format instructions'+' <a target="_blank" href="'+
Gemma.HOST+'faculty/pavlidis/wiki/display/gemma/Experimental+Design+Upload">here</a>). '+'Then click "submit". If your file format is invalid or does not match the properties of the '+'experiment the design is intended for, you will see an error message.</p>'},ExperimentalFactorAddWindow:{descriptionEmptyText:"A short phrase such as 'control vs. drug'",descriptionUnique:"Description must be unique among factors",continuousCheckboxTT:"Check if the factor is a measurement that can take arbitrary numerical values. If in doubt leave this unchecked."},ExperimentalFactorChooserPanel:{helpTitle:"Help for factor choose",helpText:"The meta-analysis can only use one factor per study. Experiments that have more"
+" than one factor will be shown here (or view all experiments)."
+" Click on the factor field to get a menu for choosing among multiple possibilities. Use the 'hinting' "
+"button to choose the type of factor most useful to you, to save manual work. For more help see <a target='_blank' "
+"href='"+Gemma.WIKI
+"Dataset+chooser#Datasetchooser-TheGemmaexperimentalfactorchooser'>this page</a>",noResultsTitle:"No results",noResultsText:"Sorry, there are no differential expression analyses for the data sets you selected."},ExperimentalFactorToolbar:{deleteFactorWarningTitle:"Deleting Factor(s)",deleteFactorWarningText:'Are you sure? This cannot be undone. Any associated differential expression analyses will be deleted as well.'},ExperimentPagingGrid:{emptyText:'Either you didn\'t select any experiments, or you don\'t have permissions to view the ones you chose.'},ExperimentSearchAndPreview:{widgetHelpTT:'Select a group of experiments or try searching for experiments by name, '+' or keywords such as: schizophrenia, hippocampus, GPL96 etc.<br><br>'+'<b>Example: search for Alzheimer\'s and select all human experiments'},ExpressionDataUpload:{instructions:'<ul class="plainList" >'
+'<li>Is your data available on GEO? If so, it is probably already loaded for you. '
+'Check <a href="/Gemma/expressionExperiment/showAllExpressionExperiments.html">here</a>.</li>'
+'<li>Complete all sections of the form, upload your data file (compress it first to speed things up)'
+', and click "Validate data"; once validation is complete you will be able to click "Submit data".</li>'
+'<li>Most of the descriptive text you enter can be modified later. '
+'The taxon, platform and the data themselves cannot easily be altered after submission.</li>'
+'<li>For help with the file data file format, see '
+'<a target="_blank" href="http://gemma-doc.chibi.ubc.ca/managing-and-editing-data/data-uploads/">this page</a>.</li> '
+'<li>The probe identifiers in your file must match those in the platform on record.</li>'
+'<li>If you used more than one platform in your study, there may be a "combined" platform that will take care of your case. If not, let us know.</li>'
+'<li>Problems? Questions? Please <a href="mailto:gemma@ubic.ca">contact us</a></li></ul>',loadingGEOWarningTitle:'GEO Dataset Check',loadingGEOWarningText:'It looks like you\'re trying to load a GEO dataset. '+'Please check that it is not already loaded in Gemma. '+'\nTry looking <a href="/Gemma/expressionExperiment/showAllExpressionExperiments.html">here</a>.'},ExpressionExperimentDetails:{statusMultiplePreferredQuantitationTypes:'This experiment has multiple \'preferred\' quantitation types. '+'This isn\'t necessarily a problem but is suspicious.',statusMultipleTechnologyTypes:'This experiment seems to mix platforms with different technology types.',profileDownloadTT:'Tab-delimited data file for this experiment. '+'The filtered version corresponds to what is used in most Gemma analyses, removing some probes/elements. Unfiltered includes all elements'},ExpressionExperimentGrid:{},ExpressionExperimentListView:{},FactorValueGrid:{deleteFactorValueWarningTitle:"Deleting Factor Value(s)",deleteFactorValueWarningText:'Are you sure? This cannot be undone. Any associated differential expression analyses will be deleted as well.'},GeneAllenBrainAtlasImages:{helpTT:"Below is a sampling of in situ hybridization from the Allen Brain Atlas. Beside is a link to the Allen Brain Atlas"},GeneDetails:{probesTT:'Number of elements/probes for this gene on expression platforms in Gemma',assocExpTT:'Experiments that specifically involve manipulation (or naturally-occurring variation/mutations) of this gene as part of their design.',multifuncTT:'Overall multifunctionality is a function of both the number of GO terms and the sizes of the groups. Values range from 0-1 where 1 indicates the highest multifunctionality',nodeDegreeTT:'Relative measure estimating how &quot;hubby&quot; this gene is, based on coexpression. Values range from 0-1 where 1 indicates the highest number of associations.',phenotypeTT:'Phenotypes this gene has been found to be associated with. Click the links or go to the &quot;Phenotypes&quot; tab for more detail.'},GeneImportPanel:{instructions:"Type or paste in gene symbols, one per line, up to {0}. (Note that searches are "+"limited to a smaller number of genes.)"},GeneMembersSaveGrid:{saveAsTT:'Save your selection as a new group.',saveTT:'Save your selection permanently.',doneTT:'Return to search using your edited list. (Selection will be kept temporarily.)',exportTT:'Get a plain text version of this list'},GeneSearchAndPreview:{instructions:'Select a general group of genes or try searching for genes by symbol, '+'GO terms or keywords such as: schizophrenia, hippocampus etc.<br><br>'+'<b>Example: search for "map kinase" and select a GO group</b>',symbolListButtonInstructions:"Select multiple genes with a list of symbols or NCBI IDs",inexactFromList:'<div style="padding-bottom:7px;color:red;">Not all symbols had exact matches ('+'<a onmouseover="this.style.cursor=\'pointer\'" '+'onclick="Ext.Msg.alert(\'Query Result Details\',\'<br>{0}{1}'+'\');" style="color: red; text-decoration: underline;">details</a>)</div>'},ManageGroups:{groupInUseErrorText:'Cannot delete group while permissions are set. Uncheck all checkboxes in the panel to the right, save your changes and try again.',groupInUseErrorTitle:'Group in use'},MetaAnalysisManagerGridPanel:{ErrorTitle:{saveMetaAnalysisAsEvidence:'Cannot save meta-analysis as Neurocarta evidence',removeMetaAnalysis:'Cannot remove meta-analysis',viewMetaAnalysisDetail:'Cannot view meta-analysis detail'},ErrorMessage:{evidenceExist:'Please remove Neurocarta evidence before removing meta-analysis.'}},MetaAnalysisShowResultPanel:{ErrorTitle:{resultSetsNotAnalyzed:'Cannot analyze result sets',resultSetsNotSaved:'Cannot save result sets'},ErrorMessage:{resultSetsNotAnalyzed:'Result sets cannot be analyzed.',resultSetsNotSaved:'Result sets cannot be saved.'}},MetaAnalysisEvidenceWindow:{ErrorTitle:{removeEvidence:'Cannot remove Neurocarta evidence'},ErrorMessage:{qvalueThresholdOutOfRange:'q-value threshold should be greater than {0}, and less than or equal to {1}.'}},MetaheatmapApplication:{noGenesSelectedTitle:"No Genes Selected",noGenesSelectedText:"Selection cannot be saved because no genes have been selected. "+"To select genes, hold down &quot;Ctrl&quot; and click on gene symbols.",noDatasetsSelectedTitle:"No Experiments Selected",noDatasetsSelectedText:"Selection cannot be saved because no experiments have been selected. "+"To select experiments, hold down &quot;Ctrl&quot; and click on condition labels.",Tutorial:{searchResultsTitle:'Search Results',searchResultsText:'Your results are displayed as a heatmap of genes vs conditions. Fold change is shown with cell color and p values are encoded by opacity of the black inner rectangle. Hover over a cell for more details.',foldChangeTitle:'Fold change and p value',foldChangeText:'Use this button to show or hide p value.',colourLegendTitle:'Color Legend',colourLegendText:'View the color legend for the chart.',sortAndFilterTitle:'Sort and Filter',sortAndFilterText:'Change the layout of your data to clarify patterns.',downloadTitle:'Download your Results',downloadText:'Save an image of your chart or save a text version of the results.',instructions:'This tutorial will point out some features of the differential expression search interface.'}},PhenotypeEvidenceGridPanel:{specificallyRelatedTT:'Marks evidence related specifically to your phenotype search',negativeEvidenceTT:'Denotes evidence against association'},PhenotypePanel:{setupErrorTitle:'Error in Gemma.PhenotypePanel',setupErrorText:'If you are using PhenotypePanel inside of Gemma, <b>phenotypeStoreProxy</b>,<br />'+'<b>geneStoreProxy</b>, <b>evidenceStoreProxy</b> and <b>getGeneLink</b><br />'+'should not be set in config. Otherwise, all of them should be set.<br />'+'',modifyPhenotypeAssociationOutsideOfGemmaTitle:"Add new phenotype association",modifyPhenotypeAssociationOutsideOfGemmaText:"To add, edit or remove gene-phenotype associatons, please go to the <a target='_blank' href='http://www.chibi.ubc.ca/Gemma/phenotypes.html'>Gemma website</a>.",viewBibliographicReferenceOutsideOfGemmaTitle:"View bibliographic reference",viewBibliographicReferenceOutsideOfGemmaText:"To view bibliographic reference, please go to the <a target='_blank' href='http://www.chibi.ubc.ca/Gemma/phenotypes.html'>Gemma website</a>.",filterMyAnnotationsOutsideOfGemmaTitle:"Filter by my annotations",filterMyAnnotationsOutsideOfGemmaText:"To filter by my annotations, please go to the <a target='_blank' href='http://www.chibi.ubc.ca/Gemma/phenotypes.html'>Gemma website</a>."},PhenotypeAssociationForm:{ErrorMessage:{userNotLoggedIn:'You are not logged in. Please log in to try again.',accessDenied:'Your access is denied.',lastUpdateDifferent:'This evidence has been modified by someone else. Please reload the page to view the updated version.',evidenceNotFound:'This evidence cannot be found because it has been removed by someone else.<br />Please reload the page to view the latest records.',pubmedIdInvalid:'{0} is not valid.',sameGeneAndPhenotypesAnnotated:'An identical annotation (same gene and same phenotype(s)) already exists for this PubMed Id.',sameGeneAnnotated:'An annotation for this gene already exists for this PubMed Id.',sameGeneAndOnePhenotypeAnnotated:'A similar annotation (same gene and related phenotype(s)) already exists for this PubMed Id.',sameGeneAndPhenotypeChildOrParentAnnotated:'A similar annotation (same gene and related phenotype(s)) already exists for this PubMed Id.',sameEvidenceFound:'The same evidence already exists.',errorUnknown:'System error has occurred. Please contact the system administrator for assistance.',pubMedIdsDuplicate:'{0} and {1} should not be the same.',pubMedIdOnlyPrimaryEmpty:'{0} is required if you specify {1}.',phenotypesDuplicate:'Phenotypes should not have duplicate.',experimentTagsDuplicate:'Experiment tags should not have duplicate.'}},ProbeLevelDiffExGrid:{},SecurityManager:{noGroupsToShareWith:'You cannot share this entity because you do not belong to any user groups.'+'<br>Would you like to <a href="/Gemma/manageGroups.html">create one</a>? ',publicWarning:'Please note: setting the read permissions to "public" means that all '+'users of Gemma (registered and anonymous) will be able to view this entity and use it in analyses.'},Tutorial:{ControlPanel:{instructions:'This tutorial will point out some features of this page. Click the "next" and "previous" buttons to navigate between tips and click the "X" to close the tutorial.'}},VisualizationWithThumbsPanel:{browserWarning:"Plots use a feature of HTML 5 that runs in IE via emulation unless you have Chrome Frame installed. "+"Firefox, Chrome, Safari and Opera will be faster too.'>"+"Too slow in Explorer? Try <a href='http://www.google.com/chromeframe/"}};Ext.namespace("Gemma");Gemma.NewsDisplay=Ext.extend(Ext.Panel,{autoHeight:true,baseCls:'x-plain-panel',initComponent:function(){Ext.apply(this,{items:[new Ext.DataView({autoHeight:true,emptyText:'No news',loadingText:'Loading news ...',itemSelector:'news',store:new Ext.data.Store({proxy:new Ext.data.DWRProxy(FeedReader.getLatestNews),reader:new Ext.data.JsonReader({fields:[{name:"title"},{name:"date",type:"date",convert:function(v,rec){return Ext.util.Format.date(v,"M d y");}},{name:"body"},{name:"teaser"}]}),autoLoad:true}),tpl:new Ext.XTemplate(' <tpl for="."><div class="news"><div class="roundedcornr_box_962327">'
+'<div class="roundedcornr_top_962327"> <div></div> </div> <div class="roundedcornr_content_962327">'
+'<h3>{title}</h3>{body}<div style="font-size:smaller">Posted: {date}</div><div class="roundedcornr_bottom_962327"> <div></div> </div></div></tpl>')})]});Gemma.NewsDisplay.superclass.initComponent.call(this);}});Ext.namespace('Gemma.LinkRoots');Gemma.LinkRoots={expressionExperimentPage:"/Gemma/expressionExperiment/showExpressionExperiment.html?id=",expressionExperimentSetPage:"/Gemma/expressionExperimentSet/showExpressionExperimentSet.html?id=",geneSetPage:"/Gemma/geneSet/showGeneSet.html?id=",genePage:"/Gemma/gene/showGene.html?id=",genePageNCBI:"/Gemma/gene/showGene.html?ncbiid=",phenotypePage:"/Gemma/phenotypes.html?phenotypeUrlId="};Ext.namespace("Gemma");Gemma.WaitHandler=Ext.extend(Ext.util.Observable,{throbberEl:null,constructor:function(config){this.addEvents({"done":true,"fail":true,"background":true});if(config){if(config.listeners){this.listeners=config.listeners;}
if(config.throbberEl){this.throbberEl=config.throbberEl;}}
Gemma.WaitHandler.superclass.constructor.call(config);},handleWait:function(taskId,showAllMessages,hideLogsButton,hideHideButton,noEmailOption){try{var p=new Gemma.ProgressWindow({taskId:taskId,callback:function(data){this.fireEvent('done',data);}.createDelegate(this),errorHandler:function(data){this.fireEvent('fail',data);}.createDelegate(this),showAllMessages:showAllMessages});if(hideLogsButton){p.progressBar.hideLogsButton();}
if(hideHideButton){p.progressBar.hideHideButton();}
if(this.throbberEl===null){p.show();}else{var el=Ext.get(this.throbberEl);var id=Ext.id();Ext.DomHelper.append(this.throbberEl,'<span id="'+id
+'"><img src="/Gemma/images/default/tree/loading.gif"/></span>');this.on('done',function(data){Ext.DomHelper.overwrite(id,"");});p.start();}}catch(e){Ext.Msg.alert("Error",e);}},handleGoBackground:function(){this.fireEvent('background',this);}});Ext.namespace('Gemma');Gemma.isRunningOutsideOfGemma=function(){var hostname=window.location.hostname;return hostname.indexOf('chibi.ubc.ca')<0&&hostname.indexOf('localhost')<0;}
Gemma.convertToEvidenceError=function(validateEvidenceValueObject){var isWarning=false;var errorMessage='';if(validateEvidenceValueObject.userNotLoggedIn){isWarning=false;errorMessage=Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.userNotLoggedIn;}else if(validateEvidenceValueObject.accessDenied){isWarning=false;errorMessage=Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.accessDenied;}else if(validateEvidenceValueObject.lastUpdateDifferent){isWarning=false;errorMessage=Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.lastUpdateDifferent;}else if(validateEvidenceValueObject.evidenceNotFound){isWarning=false;errorMessage=Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.evidenceNotFound;}else if(validateEvidenceValueObject.pubmedIdInvalid){isWarning=false;errorMessage=Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.pubmedIdInvalid;}else if(validateEvidenceValueObject.sameGeneAndPhenotypesAnnotated){isWarning=true;errorMessage=Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.sameGeneAndPhenotypesAnnotated;}else if(validateEvidenceValueObject.sameGeneAnnotated){isWarning=true;errorMessage=Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.sameGeneAnnotated;}else if(validateEvidenceValueObject.sameGeneAndOnePhenotypeAnnotated){isWarning=true;errorMessage=Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.sameGeneAndOnePhenotypeAnnotated;}else if(validateEvidenceValueObject.sameGeneAndPhenotypeChildOrParentAnnotated){isWarning=true;errorMessage=Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.sameGeneAndPhenotypeChildOrParentAnnotated;}else if(validateEvidenceValueObject.sameEvidenceFound){isWarning=false;errorMessage=Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.sameEvidenceFound;}else{isWarning=false;errorMessage=Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.errorUnknown;}
return{isWarning:isWarning,errorMessage:errorMessage};};Ext.namespace('Gemma.Widget','Gemma.Common');Gemma.Widget.tpl={ArrayDesignsNonPagingGrid:{rowDetails:'<p>Elements: <b>{designElementCount}</b></p>'
+'<p>With sequences: <b>{numProbeSequences}</b> <span style="color:grey">(Number of elements with sequences)</span></p>'
+'<p>With align: <b>{numProbeAlignments}</b> <span style="color:grey">(Number of elements with at least one genome alignment)</span></p>'
+'<p>Mapped to genes: <b>{numProbesToGenes}</b> <span style="color:grey">(Number of elements mapped to genes)</span></p>'
+'<p>Unique genes: <b>{numGenes}</b> <span style="color:grey">(Number of distinct genes represented by the platform)</span></p>'
+'<p> (as of {dateCached})</p>'}};Gemma.Common.tpl={pubmedLink:{simple:'<a target="_blank" href="{pubmedURL}"><img ext:qtip="Go to PubMed (in new window)" '
+'src="/Gemma/images/pubmed.gif" width="47" height="15" /></a>',complex:'<tpl if="pubAvailable==\'true\'">'
+'{primaryCitationStr}'
+'&nbsp; <a target="_blank" ext:qtip="Go to PubMed (in new window)"'
+' href="{pubmedURL}"><img src="/Gemma/images/pubmed.gif" ealt="PubMed" /></a>&nbsp;&nbsp'
+'</tpl>'+'<tpl if="pubAvailable==\'false\'">'
+'Not Available'+'</tpl>'}};Ext.namespace("Gemma");Gemma.FileUploadForm=Ext.extend(Ext.Panel,{width:500,autoHeight:true,reset:function(){Ext.getCmp('form-file').reset();Ext.getCmp('messages').setStatus('');},initComponent:function(){Ext.apply(this,{width:500,frame:false,frame:true,items:[new Ext.form.FormPanel({id:'uploadform',labelWidth:50,fileUpload:true,header:false,method:'POST',frame:true,url:'/Gemma/uploadFile.html',timeout:15000,defaults:{anchor:'95%',allowBlank:false,msgTarget:'side'},items:[{xtype:'fileuploadfield',id:'form-file',emptyText:'Select a file',fieldLabel:'File',name:'file-path',listeners:{'fileselected':function(field,value){Ext.getCmp('file-upload-button').enable();}.createDelegate(this)},buttonCfg:{text:'',iconCls:'upload-icon'}}],buttons:[{text:'Upload',id:'file-upload-button',disabled:true,handler:function(){var form=Ext.getCmp('uploadform').getForm();if(form.isValid()){form.submit({success:function(form,a){var m=a.result;var m=a.result;Ext.getCmp('messages').setText("File uploaded: "+
m.originalFile+"; "+m.size+" bytes");this.fireEvent('finish',m);}.createDelegate(this),failure:function(form,a){Ext.Msg.alert('Failure','Problem with processing of file on the server: '+
a.result.error);this.fireEvent('fail',a.result);}.createDelegate(this),scope:this});this.startMonitor();}},scope:this}]})],bbar:new Ext.ux.StatusBar({id:'messages'})});Gemma.FileUploadForm.superclass.initComponent.call(this);this.addEvents({finish:true,fail:true,start:true,cancel:true});},processProgressInfo:function(data){if(data){if(data.status=='done'){window.clearInterval(this.timeoutid);}else{Ext.getCmp('messages').setStatus(data.bytesRead+"/"+data.totalSize+" bytes read");}}},startMonitor:function(){this.timeoutid=window.setInterval(this.refreshProgress.createDelegate(this),2000);this.fireEvent('start');this.on('finish',function(){window.clearInterval(this.timeoutid);});this.on('fail',function(){window.clearInterval(this.timeoutid);});},refreshProgress:function(){var callback=this.processProgressInfo.createDelegate(this);var errorHandler=function(e){window.clearInterval(this.timeoutid);};FileUploadController.getUploadStatus({callback:callback,errorHandler:errorHandler});}});Ext.namespace('Gemma');Gemma.alertUserToError=function(baseValueObject,title){Ext.MessageBox.minWidth=250;if(baseValueObject.errorFound){if(baseValueObject.accessDenied){Ext.MessageBox.alert(title,Gemma.HelpText.CommonErrors.accessDenied);}else if(baseValueObject.objectAlreadyRemoved){Ext.MessageBox.alert(title,Gemma.HelpText.CommonErrors.objectAlreadyRemoved);}else if(baseValueObject.userNotLoggedIn){Ext.MessageBox.alert(title,Gemma.HelpText.CommonErrors.userNotLoggedIn,Gemma.AjaxLogin.showLoginWindowFn);}else{Ext.MessageBox.alert(title,Gemma.HelpText.CommonErrors.errorUnknown);}}};Ext.namespace("Gemma");Gemma.CoexValueObjectUtil={trimKnownGeneResultsWithQueryGenes:function(knowngenes,currentQueryGeneIds,filterStringency){var graphNodeIds=[];var trimmedGeneResults=[];var i;var kglength=knowngenes.length;for(i=0;i<kglength;i++){if(((currentQueryGeneIds.indexOf(knowngenes[i].foundGene.id)!==-1||(currentQueryGeneIds.indexOf(knowngenes[i].queryGene.id)!==-1))&&(knowngenes[i].posSupp>=filterStringency||knowngenes[i].negSupp>=filterStringency))){if(graphNodeIds.indexOf(knowngenes[i].foundGene.id)===-1){graphNodeIds.push(knowngenes[i].foundGene.id);}
if(graphNodeIds.indexOf(knowngenes[i].queryGene.id)===-1){graphNodeIds.push(knowngenes[i].queryGene.id);}
trimmedGeneResults.push(knowngenes[i]);}}
for(i=0;i<kglength;i++){if(graphNodeIds.indexOf(knowngenes[i].foundGene.id)!==-1&&graphNodeIds.indexOf(knowngenes[i].queryGene.id)!==-1&&(knowngenes[i].posSupp>=filterStringency||knowngenes[i].negSupp>=filterStringency)&&currentQueryGeneIds.indexOf(knowngenes[i].foundGene.id)===-1&&currentQueryGeneIds.indexOf(knowngenes[i].queryGene.id)===-1){trimmedGeneResults.push(knowngenes[i]);}}
var trimmed={};trimmed.trimmedKnownGeneResults=trimmedGeneResults;trimmed.trimmedNodeIds=graphNodeIds;return trimmed;},trimKnownGeneResultsForReducedGraph:function(knowngenes,currentQueryGeneIds,currentStringency,stringencyTrimLimit,resultsSizeLimit){var i;var displayTrimmedStringency;var returningGeneResults=knowngenes;var trimmedGeneResults=[];var h;for(h=currentStringency;h<=stringencyTrimLimit;h++){var graphNodeIds=[];var kglength=knowngenes.length;for(i=0;i<kglength;i++){if(((currentQueryGeneIds.indexOf(knowngenes[i].foundGene.id)!==-1||(currentQueryGeneIds.indexOf(knowngenes[i].queryGene.id)!==-1)))){trimmedGeneResults.push(knowngenes[i]);if(currentQueryGeneIds.indexOf(knowngenes[i].foundGene.id)!==-1&&currentQueryGeneIds.indexOf(knowngenes[i].queryGene.id)!==-1){graphNodeIds.push(knowngenes[i].foundGene.id);graphNodeIds.push(knowngenes[i].queryGene.id);}else if(currentQueryGeneIds.indexOf(knowngenes[i].foundGene.id)!==-1){graphNodeIds.push(knowngenes[i].foundGene.id);if(knowngenes[i].posSupp>h||knowngenes[i].negSupp>h){graphNodeIds.push(knowngenes[i].queryGene.id);}}else if(currentQueryGeneIds.indexOf(knowngenes[i].queryGene.id)!==-1){graphNodeIds.push(knowngenes[i].queryGene.id);if(knowngenes[i].posSupp>h||knowngenes[i].negSupp>h){graphNodeIds.push(knowngenes[i].foundGene.id);}}}}
for(i=0;i<kglength;i++){if(currentQueryGeneIds.indexOf(knowngenes[i].foundGene.id)===-1&&currentQueryGeneIds.indexOf(knowngenes[i].queryGene.id)===-1&&(knowngenes[i].posSupp>h||knowngenes[i].negSupp>h)&&graphNodeIds.indexOf(knowngenes[i].foundGene.id)!==-1&&graphNodeIds.indexOf(knowngenes[i].queryGene.id)!==-1){trimmedGeneResults.push(knowngenes[i]);}}
if(trimmedGeneResults.length<returningGeneResults.length){displayTrimmedStringency=h;}
returningGeneResults=trimmedGeneResults;if(trimmedGeneResults.length<resultsSizeLimit){break;}
trimmedGeneResults=[];}
var returnObject={};returnObject.geneResults=returningGeneResults;returnObject.trimStringency=displayTrimmedStringency;return returnObject;},trimKnownGeneResults:function(knowngenes,filterStringency){var trimmedGeneResults=[];var i;var kglength=knowngenes.length;for(i=0;i<kglength;i++){if((knowngenes[i].posSupp>=filterStringency||knowngenes[i].negSupp>=filterStringency)){trimmedGeneResults.push(knowngenes[i]);}}
return trimmedGeneResults;},getCurrentQueryGeneIds:function(queryGenes){var currentQueryGeneIds=[];var qlength=queryGenes.length;var i;for(i=0;i<qlength;i++){if(currentQueryGeneIds.indexOf(queryGenes[i].id)===-1){currentQueryGeneIds.push(queryGenes[i].id);}}
return currentQueryGeneIds;},filterGeneResultsByGeneIds:function(geneIds,knowngenes){var trimmedGeneResults=[];var kglength=knowngenes.length;var i;for(i=0;i<kglength;i++){if(geneIds.indexOf(knowngenes[i].foundGene.id)!==-1||geneIds.indexOf(knowngenes[i].queryGene.id)!==-1)
{trimmedGeneResults.push(knowngenes[i]);}}
return trimmedGeneResults;},filterGeneResultsByGeneIdsMyGenesOnly:function(geneIds,knowngenes){var trimmedGeneResults=[];var kglength=knowngenes.length;var i;for(i=0;i<kglength;i++){if(geneIds.indexOf(knowngenes[i].foundGene.id)!==-1&&geneIds.indexOf(knowngenes[i].queryGene.id)!==-1)
{trimmedGeneResults.push(knowngenes[i]);}}
return trimmedGeneResults;},combineKnownGeneResultsAndQueryGeneOnlyResults:function(kgResults,qgoResults){if(!qgoResults){return kgResults;}
var coexEdgeSet=[];var combinedResults=[];var kglength=kgResults.length;var i;for(i=0;i<kglength;i++){if(coexEdgeSet.indexOf(kgResults[i].foundGene.officialSymbol
+"to"+kgResults[i].queryGene.officialSymbol)==-1&&coexEdgeSet.indexOf(kgResults[i].queryGene.officialSymbol
+"to"
+kgResults[i].foundGene.officialSymbol)==-1){combinedResults.push(kgResults[i]);coexEdgeSet.push(kgResults[i].foundGene.officialSymbol+"to"
+kgResults[i].queryGene.officialSymbol);coexEdgeSet.push(kgResults[i].queryGene.officialSymbol+"to"
+kgResults[i].foundGene.officialSymbol);}}
var qgolength=qgoResults.length;for(i=0;i<qgolength;i++){if(coexEdgeSet.indexOf(qgoResults[i].foundGene.officialSymbol
+"to"+qgoResults[i].queryGene.officialSymbol)==-1&&coexEdgeSet.indexOf(qgoResults[i].queryGene.officialSymbol
+"to"
+qgoResults[i].foundGene.officialSymbol)==-1){combinedResults.push(qgoResults[i]);coexEdgeSet.push(qgoResults[i].foundGene.officialSymbol+"to"
+qgoResults[i].queryGene.officialSymbol);coexEdgeSet.push(qgoResults[i].queryGene.officialSymbol+"to"
+qgoResults[i].foundGene.officialSymbol);}}
return combinedResults;},filterGeneResultsByTextForNodeIds:function(text,knowngenes){var genesMatchingSearch=[];var splitTextArray=text.split(",");var j;for(j=0;j<splitTextArray.length;j++){splitTextArray[j]=splitTextArray[j].replace(/^\s+|\s+$/g,'');if(splitTextArray[j].length<2)continue;var value=new RegExp(Ext.escapeRe(splitTextArray[j]),'i');var kglength=knowngenes.length;var i;for(i=0;i<kglength;i++){var foundGene=knowngenes[i].foundGene;var queryGene=knowngenes[i].queryGene;if(genesMatchingSearch.indexOf(foundGene.officialSymbol)!==1){if(value.test(foundGene.officialSymbol)||value.test(foundGene.officialName)){genesMatchingSearch.push(foundGene.officialSymbol);}}
if(genesMatchingSearch.indexOf(queryGene.officialSymbol)!==1){if(value.test(queryGene.officialSymbol)||value.test(queryGene.officialName)){genesMatchingSearch.push(queryGene.officialSymbol);}}}}
return genesMatchingSearch;},filterGeneResultsByText:function(text,knowngenes){var value=new RegExp(Ext.escapeRe(text),'i');var genesMatchingSearch=[];var kglength=knowngenes.length;var i;for(i=0;i<kglength;i++){if(value.test(knowngenes[i].foundGene.officialSymbol)||value.test(knowngenes[i].queryGene.officialSymbol)||value.test(knowngenes[i].foundGene.officialName)||value.test(knowngenes[i].queryGene.officialName)){genesMatchingSearch.push(knowngenes[i]);}}
return genesMatchingSearch;},getHighestResultStringencyUpToInitialDisplayStringency:function(knowngenes,initialDisplayStringency){var highestResultStringency=2;var kglength=knowngenes.length;var i;for(i=0;i<kglength;i++){if(knowngenes[i].posSupp>highestResultStringency){highestResultStringency=knowngenes[i].posSupp;}
if(knowngenes[i].negSupp>highestResultStringency){highestResultStringency=knowngenes[i].negSupp;}
if(highestResultStringency>=initialDisplayStringency){return initialDisplayStringency;}}
return highestResultStringency;}}
Ext.namespace('Gemma');Gemma.StatefulRemoteCombo=Ext.extend(Ext.form.ComboBox,{mode:'local',lazyInit:false,isReady:false,stateEvents:['select'],applyState:function(state){if(state&&state.id){this.setState(state.id);}},getState:function(){r=this.getSelected();if(r){return({id:r.get('id')});}},getSelected:function(){if(this.getStore()&&this.view){var index=this.view.getSelectedIndexes()[0];return this.getStore().getAt(index);}},restoreState:function(){if(this.storedState){this.selectById(this.storedState,true);delete this.storedState;}
if(this.getSelected()){this.fireEvent('ready',this.getSelected().data);}else{this.fireEvent('ready');}
this.isReady=true;},setState:function(state){if(this.isReady){this.selectById(state,true);}else{this.storedState=state;}},selectById:function(id,suppressEvent){if(this.store){var index=this.store.findExact("id",id);if(index>=0){var rec=this.store.getAt(index);if(typeof this.store.setSelected=='function'){this.store.setSelected(rec);}
this.setValue(rec.get(this.displayField));if(suppressEvent!==undefined&&!suppressEvent){this.fireEvent("select",this,rec,index);}}}},initComponent:function(){Gemma.StatefulRemoteCombo.superclass.initComponent.call(this);this.addEvents('ready');this.store.on('beforeload',function(field,query){if(this.loadMask){this.loadMask.show();}
this.addClass("x-loading");this.disable();},this);this.on('ready',function(field,results){if(this.loadMask){this.loadMask.hide();}
this.enable();this.removeClass("x-loading");});this.store.on("load",this.restoreState,this,{delay:100,single:true});}});Ext.namespace('Gemma.Tutorial');Gemma.Tutorial.ControlPanel=Ext.extend(Ext.Panel,{instructions:Gemma.HelpText.WidgetDefaults.Tutorial.ControlPanel.instructions,padding:10,bodyStyle:'background-color: #FFD700;line-height:22px',defaults:{bodyStyle:'background: transparent;margin-left:auto;margin-right:auto;width:600px;',border:false,padding:5},stateful:false,getState:function(){return{hidden:this.hidden};},stateEvents:['hide','show'],initComponent:function(){this.currIndex=0;this.tips=[];this.targetEls=[];Gemma.Tutorial.ControlPanel.superclass.initComponent.call(this);this.add([{layout:'hbox',flex:1,height:30,items:[{html:this.instructions,border:false,bodyStyle:'background: transparent;',flex:1},{xtype:'button',cls:'transparent-btn',tooltip:'Close this tutorial',icon:'/Gemma/images/icons/cross.png',handler:this.hideTutorial,scope:this,flex:0}]},{ref:'controlBtns',layout:{type:'hbox',pack:'end'},items:[{xtype:'button',ref:'prevBtn',text:"Previous",disabled:true,handler:this.showPrevTip,scope:this},{xtype:'button',ref:'nextBtn',text:'Next',handler:this.showNextTip,scope:this}]}]);},addTips:function(tipDefinitions){var i;var existingTipCount=this.tips.length;for(i=0;i<tipDefinitions.length;i++){var index=existingTipCount+i;this.targetEls.push(tipDefinitions[i].element);var tip=this.initTip(tipDefinitions[i]);tip.tipIndex=index;this.tips.push(tip);this.controlBtns.insert(index+1,{xtype:'button',ref:'progBtn'+index,icon:'/Gemma/images/icons/bullet_black.png',cls:'transparent-btn',toggleHandler:function(button,state){if(state){button.setIcon('/Gemma/images/icons/bullet_blue.png');}else{button.setIcon('/Gemma/images/icons/bullet_black.png');}},enableToggle:true,handler:this.playTips.createDelegate(this,[index]),scope:this});}
this.doLayout();},playTips:function(index){this.hideTips();this.currIndex=index;this.showTip(this.tips[index]);},updateBtnDisabling:function(){if(this.currIndex===0){this.controlBtns.prevBtn.disable();}else{this.controlBtns.prevBtn.enable();}
if(this.currIndex===(this.tips.length-1)){this.controlBtns.nextBtn.disable();}else{this.controlBtns.nextBtn.enable();}},showNextTip:function(){this.hideTip(this.tips[this.currIndex]);this.showTip(this.tips[++this.currIndex]);},showPrevTip:function(){if(this.currIndex)this.hideTip(this.tips[this.currIndex]);this.showTip(this.tips[--this.currIndex]);},hideTutorial:function(){this.currIndex=-1;this.hideTips();this.hide();this.fireEvent('tutorialHidden');},hideTips:function(tipsToHide){if(!tipsToHide){tipsToHide=this.tips;}
var i;for(i=0;i<tipsToHide.length;i++){this.hideTip(tipsToHide[i]);}},hideTip:function(tip){if(!tip)return;tip.hide();this.controlBtns['progBtn'+tip.tipIndex].toggle(false);},showTip:function(tip){if(!tip)return;tip.show();this.controlBtns['progBtn'+tip.tipIndex].toggle(true);this.updateBtnDisabling();},getTipsBy:function(func){var i;var trueTips=[];for(i=0;i<this.tips.length;i++){if(func(this.tips[i])){trueTips.push(this.tips[i]);}}
return trueTips;},initTip:function(tipDefinition){var element,tipTitle,tipBody,tipConfig;element=tipDefinition.element;tipTitle=tipDefinition.title;tipBody=tipDefinition.text;tipConfig=tipDefinition.tipConfig;var newX=(tipDefinition.position)?tipDefinition.position.x:null;var newY=(tipDefinition.position)?tipDefinition.position.y:null;var fromLeft=(tipDefinition.position)?tipDefinition.position.fromLeft:null;var fromTop=(tipDefinition.position)?tipDefinition.position.fromTop:null;var moveDown=(tipDefinition.position&&tipDefinition.position.moveDown)?tipDefinition.position.moveDown:0;var moveRight=(tipDefinition.position&&tipDefinition.position.moveRight)?tipDefinition.position.moveRight:0;var topScope=this;var defaultConfigs={cls:'x-tip-gold',bodyStyle:'background-color: #FFD700',anchorToTarget:true,anchor:'right',trackMouse:false,target:Ext.getBody(),realTarget:element,onShow:function(){var onId=(topScope.tips[topScope.currIndex])?topScope.tips[topScope.currIndex].id:-1;if(onId===this.id){if(element.addClass){element.addClass('highlightToggleBorderOn');}
if(tipDefinition.onShow){tipDefinition.onShow();}
if(this.floating){return this.el.show();}
Ext.Panel.superclass.onShow.call(this);}
return false;},initTarget:function(target){var t;if((t=Ext.get(target))){this.target=t;}
if(this.anchor){this.anchorTarget=this.target;}},hidden:true,padding:10,shadow:'frame',html:tipBody,title:tipTitle,autoHide:false,draggable:true,closable:true,listeners:{'hide':function(){if(element.removeClass){element.removeClass('highlightToggleBorderOn');}},'afterlayout':function(){if(fromLeft&&fromLeft!==null&&fromTop&&fromTop!==null){this.setPosition(fromLeft,fromTop);}
if(newX&&newX!==null&&newY&&newY!==null){this.setPagePosition(newX,newY);}
if(moveDown!==0||moveRight!==0){var arr=this.getPosition(true);this.setPosition(arr[0]+moveRight,arr[1]+moveDown);}}}};Ext.apply(defaultConfigs,tipConfig);var tip=new Ext.ToolTip(defaultConfigs);element.on('render',function(){tip.initTarget(element.el);},this);return tip;},updateRenderingTargets:function(){var i;console.log(this.tips);for(i=0;i<this.tips.length;i++){var tip=this.tips[i];tip.realTarget.on('render',function(){tip.initTarget(tip.realTarget.el);},this);}}});Ext.reg('Tutorial.ControlPanel',Gemma.Tutorial.ControlPanel);Ext.namespace('Gemma');TaxonRecord=Ext.data.Record.create([{name:"id",type:"int"},{name:"commonName",type:"string",convert:function(v,rec){if(rec.commonName){return rec.commonName;}
return rec.scientificName;}},{name:"scientificName",type:"string"},{name:"parentTaxon"}]);Gemma.TaxonCombo=Ext.extend(Gemma.StatefulRemoteCombo,{name:"taxcomb",displayField:'commonName',valueField:'id',editable:false,loadingText:Gemma.StatusText.Loading.generic,triggerAction:'all',listWidth:250,width:120,stateId:"Gemma.TaxonCombo",allTaxa:false,emptyText:'Select a taxon',isDisplayTaxonSpecies:false,isDisplayTaxonWithGenes:false,isDisplayTaxonWithDatasets:false,isDisplayTaxonWithEvidence:false,record:TaxonRecord,filter:function(taxon){this.store.clearFilter();this.store.filterBy(function(record,id){if(taxon.id===record.get("id")){return true;}else{return false;}});this.setTaxon(taxon);this.onLoad();},initComponent:function(){var tmpl=new Ext.XTemplate('<tpl for="."><div class="x-combo-list-item">{commonName} ({scientificName})</div></tpl>');if(this.isDisplayTaxonSpecies){proxyTaxon=new Ext.data.DWRProxy(GenePickerController.getTaxaSpecies);}else if(this.isDisplayTaxonWithDatasets){proxyTaxon=new Ext.data.DWRProxy(GenePickerController.getTaxaWithDatasets);}else if(this.isDisplayTaxonWithGenes){proxyTaxon=new Ext.data.DWRProxy(GenePickerController.getTaxaWithGenes);}else if(this.isDisplayTaxaWithArrays){proxyTaxon=new Ext.data.DWRProxy(GenePickerController.getTaxaWithArrays);}else if(this.isDisplayTaxonWithEvidence){proxyTaxon=new Ext.data.DWRProxy(GenePickerController.getTaxaWithEvidence);}else{proxyTaxon=new Ext.data.DWRProxy(GenePickerController.getTaxa);}
Ext.apply(this,{store:new Ext.data.Store({proxy:proxyTaxon,reader:new Ext.data.ListRangeReader({id:"id"},this.record),remoteSort:false,sortInfo:{field:'commonName'}}),tpl:tmpl});Gemma.TaxonCombo.superclass.initComponent.call(this);if(this.allTaxa){this.store.load({params:[],add:false,callback:function(allTaxa){var allTaxaRecord=new TaxonRecord({'id':'-1','commonName':'All taxa','scientificName':'All Taxa','parentTaxon':'-1'});this.insert(0,[allTaxaRecord]);this.fireEvent('doneLoading');}});}else{this.store.load({params:[],add:false,callback:function(){this.fireEvent('doneLoading');}});}},getTaxon:function(){return(this.store.getById(this.getValue())||this.store.getAt(this.store.find('commonName',this.getValue(),0,false)));},setTaxon:function(taxon){if(taxon.id){this.setValue(taxon.id);}else{this.setValue(taxon);}
var r=this.store.findExact(this.getValue());this.fireEvent("select",this,r,this.store.indexOf(r));},setTaxonById:function(taxonId){if(taxonId){this.setValue(taxonId);}
var r=this.store.findExact(this.getValue());this.fireEvent("select",this,r,this.store.indexOf(r));},setTaxonByCommonName:function(commonName){var records=this.store.getRange();if(!records||records.size()<1){return-1;}
var i=0;for(i=0;i<records.size();i++){if(records[i].data.commonName===commonName){this.setTaxon(records[i].data.id);return records[i].data;}}
return-1;}});Ext.reg('taxonCombo',Gemma.TaxonCombo);Ext.namespace('Gemma','Gemma.AjaxLogin');Gemma.AjaxLogin.AjaxRegister=Ext.extend(Ext.Window,{id:'_ajaxRegister',title:'register',closeAction:'hide',resizable:false,initComponent:function(){Ext.apply(this,{items:[new Ext.FormPanel({id:'_registerForm',labelWidth:140,url:'/Gemma/signup.html',frame:true,monitorValid:true,bodyStyle:'padding:5px 5px 0',width:540,keys:[{key:Ext.EventObject.ENTER,formBind:true,handler:this.submitHandler}],defaults:{width:300},defaultType:'textfield',items:[{fieldLabel:'Username',name:'username',allowBlank:false,vtype:'alphanum'},{fieldLabel:'Email',id:'email',name:'email',allowBlank:false,vtype:'email',validationDelay:1500,invalidText:"A valid email address is required"},{fieldLabel:'Confirm Email',id:'emailConfirm',name:'emailConfirm',allowBlank:false,vtype:'email',validator:function(value){return(value==document.getElementById("email").value)||"Your email addresses do not match";}},{fieldLabel:'Password',id:'password',name:'password',allowBlank:false,maxLength:16,minLength:6,inputType:'password'},{fieldLabel:'Confirm password',id:'passwordConfirm',name:'passwordConfirm',inputType:'password',vtype:'password',allowBlank:false,initialPassField:'password'},{xtype:'recaptcha',name:'recaptcha',id:'captcha',publickey:'6Lf4KAkAAAAAADFjpOSiyfHhlQ1pkznapAnmIvyr',theme:'white',lang:'en',allowBlank:false},{id:'ajaxRegisterTrue',name:'ajaxRegisterTrue',hidden:true,value:'true'}],buttons:[{text:"Cancel",handler:this.cancel,scope:this},{text:'Submit',formBind:true,handler:this.submitHandler}],bbar:new Ext.ux.StatusBar({id:'my-status_ajaxRegister',text:'',iconCls:'default-icon',busyText:'Validating...',items:['<div id="ajax-error_ajaxRegister" style="color: red; vertical-align: top; padding-right: 5px;"><br/></div>']})})]});this.addEvents('register_cancelled','register_success');Gemma.AjaxLogin.AjaxRegister.superclass.initComponent.call(this,arguments);},submitHandler:function(){var errordiv=Ext.get('ajax-error_ajaxRegister');Ext.DomHelper.overwrite(errordiv,"");signup=Ext.getCmp("_registerForm");if(!signup.getForm().isValid()){var erdiv=Ext.get('ajax-error_ajaxRegister');Ext.DomHelper.overwrite(erdiv,Gemma.HelpText.CommonErrors.InvalidForm.text);return;}
signup.getForm().submit({url:this.url,method:'POST',success:function(){var sb=Ext.getCmp('my-status_ajaxRegister');sb.clearStatus();Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.AjaxLogin_AjaxRegister.successTitle,Gemma.HelpText.WidgetDefaults.AjaxLogin_AjaxRegister.successText);var registerWidget=Ext.getCmp("_ajaxRegister");registerWidget.fireEvent("register_success");},failure:function(form,action){var msg;if(action.failureType==='client'){msg="Invalid form";}else{var errMsg=Ext.util.JSON.decode(action.response.responseText);msg=errMsg.message;}
var erdiv=Ext.get('ajax-error_ajaxRegister');Ext.DomHelper.overwrite(erdiv,msg);Ext.getCmp('captcha').reset();Ext.getCmp('password').reset();Ext.getCmp('passwordConfirm').reset();Ext.getCmp('my-status_ajaxRegister').clearStatus();}});var sb=Ext.getCmp('my-status_ajaxRegister');sb.showBusy();},cancel:function(){this.fireEvent('register_cancelled');}});Ext.ux.Recaptcha=Ext.extend(Ext.form.Field,{lang:'en',fieldLabel:"Prove you are human",theme:'white',width:310,fieldClass:'',reset:function(){Recaptcha.reload();},destroy:function(){Ext.ux.Recaptcha.superclass.destroy.call(this);Recaptcha.destroy();},validateValue:function(){if(Ext.get('recaptcha_response_field').getValue().length>0){return true;}
this.markInvalid("Recaptcha must be filled in");return false;},filterValidation:function(e){if(!e.isNavKeyPress()){this.validationTask.delay(this.validationDelay);}},allowBlank:false,onRender:function(ct,position){if(!this.el){this.el=document.createElement('div');this.el.id=this.getId();Recaptcha.create(this.publickey,this.el,{theme:this.theme,lang:this.lang,callback:Recaptcha.focus_response_field});}
Ext.ux.Recaptcha.superclass.onRender.call(this,ct,position);},initComponent:function(){Ext.ux.Recaptcha.superclass.initComponent.call(this);this.addEvents('keyup');},initEvents:function(){Ext.ux.Recaptcha.superclass.initEvents.call(this);this.validationTask=new Ext.util.DelayedTask(this.validate,this);this.mon(this.el,'keyup',this.filterValidation,this);}});Ext.reg('recaptcha',Ext.ux.Recaptcha);Ext.apply(Ext.form.VTypes,{password:function(val,field){if(field.initialPassField){var pwd=Ext.getCmp(field.initialPassField);return(val==pwd.getValue());}
return true;},passwordText:'Passwords do not match'});Ext.namespace('Gemma');Gemma.ArrayDesignsStore=Ext.extend(Ext.data.Store,{reader:new Ext.data.JsonReader({idProperty:"id",sortInfo:{field:"name",direction:"ASC"},fields:[{name:"id",type:"int"},{name:"name",type:"string"},{name:"shortName",type:"string"},{name:"taxon",type:"string"},{name:"expressionExperimentCount"},{name:"summaryTable"},{name:"lastSequenceUpdate",dateFormat:"timestamp",type:"date"},{name:"lastRepeatMask",dateFormat:"timestamp",type:"date"},{name:"lastSequenceAnalysis",dateFormat:"timestamp",type:"date"},{name:"lastGeneMapping",dateFormat:"timestamp",type:"date"},{name:"color",type:"string"},{name:"isMergee"},{name:"isMerged"},{name:"isSubsumed"},{name:"isSubsumer"},{name:"troubled"},{name:"troubleEvent"},{name:"troubleEventDate",convert:function(v,record){if(record.troubleEvent&&record.troubleEvent.date){return record.troubleEvent.date;}
return null;},dateFormat:"timestamp",type:"date"},{name:"statusArray",convert:function(v,record){return[record.troubled,record.isMerged,record.isMergee,record.isSubsumed,record.isSubsumer];},sortDir:'DESC',sortType:function(value){var i;var count=0;for(i=0;i<value.length;i++){if(value[i]){count+=Math.pow(value.length-i,value.length-i);}}
return count;}},{name:"designElementCount",defaultValue:'[not avail.]',useNull:true,convert:function(v,record){if(v===null){return'<span style="color:grey">[not avail.]</span>';}
return v;}},{name:"numProbeSequences",defaultValue:'[not avail.]',useNull:true,convert:function(v,record){if(v===null){return'<span style="color:grey">[not avail.]</span>';}
return v;}},{name:"numProbeAlignments",defaultValue:'[not avail.]',useNull:true,convert:function(v,record){if(v===null){return'<span style="color:grey">[not avail.]</span>';}
return v;}},{name:"numProbesToGenes",defaultValue:'[not avail.]',useNull:true,convert:function(v,record){if(v===null){return'<span style="color:grey">[not avail.]</span>';}
return v;}},{name:"numGenes",defaultValue:'[not avail.]',useNull:true,convert:function(v,record){if(v===null){return'<span style="color:grey">[not avail.]</span>';}
return v;}},{name:"dateCached"},{name:'cannotBeDeleted',convert:function(v,record){if(record.expressionExperimentCount===0&&!record.isMerged&&!record.isMergee){return false;}
return true;}}]})});Gemma.ArrayDesignsNonPagingGrid=Ext.extend(Ext.grid.GridPanel,{autoScroll:true,stripeRows:true,rowExpander:null,emptyText:Gemma.HelpText.WidgetDefaults.ArrayDesignsNonPagingGrid.emptyText,viewConfig:{forceFit:true},myPageSize:50,title:'Platforms',totalCount:0,showOrphans:false,showMergees:true,showTroubled:true,loadArrayDesigns:function(adIds,extraCallback,extraCallbackParams){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.arrayDesigns});}
this.loadMask.show();ArrayDesignController.loadArrayDesignsForShowAll(adIds,function(arrayDesigns){this.loadMask.hide();this.getStore().loadData(arrayDesigns);this.setTitle(arrayDesigns.length+((arrayDesigns.length===1)?" Platform":" Platforms"));this.totalCount=arrayDesigns.length;this.getStore().applyMultiFilters();if(extraCallback)extraCallback(extraCallbackParams);}.createDelegate(this));},initComponent:function(){this.showAll=!(document.URL.indexOf("?")>-1&&(document.URL.indexOf("id=")>-1));this.idSubset=null;var filterById=false;if(!this.showAll){var subsetDetails=document.URL.substr(document.URL.indexOf("?")+1);var param=Ext.urlDecode(subsetDetails);if(param.id){this.idSubset=param.id.split(',');filterById=true;}if(param.showOrph){this.showOrphans=param.showOrph;}if(param.showMerg){this.showMergees=param.showMerg;}}
Ext.apply(this,{store:new Gemma.ArrayDesignsStore()});this.action=new Ext.ux.grid.RowActions({header:'Actions',dataIndex:'actions',tooltip:Gemma.HelpText.WidgetDefaults.ArrayDesignsNonPagingGrid.actionsColumnTT,keepSelection:true,actions:[{iconCls:'icon-refresh',tooltip:'Refresh'},{iconCls:'icon-cross',tooltip:'Delete platform',hideIndex:'cannotBeDeleted'}],callbacks:{'icon-cross':function(grid,record,action,row,col){}}});this.action.on({action:function(grid,record,action,row,col){if(action==='icon-cross'){Ext.Msg.confirm(Gemma.HelpText.CommonWarnings.Deletion.title,String.format(Gemma.HelpText.CommonWarnings.Deletion.text,'platform'),function(btnId){if(btnId==='yes'){var callParams=[];callParams.push({id:record.id});callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,false);k.on('done',function(payload){window.location.reload();});}.createDelegate(this)});ArrayDesignController.remove.apply(this,callParams);}});}
else
if(action==='icon-refresh'){updateArrayDesignReport(record.id,grid);}},beforeaction:function(grid,record,action,row,col){return true;}});this.rowExpander=new Ext.grid.RowExpander({enableCaching:false,tpl:Gemma.Widget.tpl.ArrayDesignsNonPagingGrid.rowDetails});this.on('reportUpdated',function(id){var extraCallback=function(arr){var grid=arr[0];var id=arr[1];grid.rowExpander.collapseAll();record=grid.getStore().getById(id);grid.rowExpander.expandRow(grid.getStore().indexOf(record));};this.loadArrayDesigns(this.idSubset,extraCallback,[this,id]);});var cellTips=new Ext.ux.plugins.grid.CellToolTips([{field:'name',tpl:'{name}'},{field:'shortName',tpl:'{shortName}'}]);Ext.apply(this,{plugins:[this.action,this.rowExpander,cellTips],colModel:new Ext.grid.ColumnModel({defaults:{sortable:true},columns:[this.rowExpander,{id:'name',header:"Platform Name",dataIndex:'name',width:0.3,renderer:function(value,metaData,record,rowIndex,colIndex,store){return(value&&record)?'<a target="_blank" href="/Gemma/arrays/showArrayDesign.html?id='+
record.id+'">'+value+'</a>':'';}},{header:"Status",dataIndex:'statusArray',width:0.05,renderer:function(value,metaData,record,rowIndex,colIndex,store){var statusString="";if(record.get('troubled')){var te=record.get('troubleEvent');if(te&&(te.detail||te.note||te.performer)){var date=(record.get('troubleEventDate'))?new Date(record.get('troubleEventDate')).format("Y-m-d"):'';var detail=(te&&te.detail)?'('+te.detail+')':'';var user=(te&&te.performer)?' by '+te.performer+': ':'';statusString+='<img title="'+date+user+te.note+detail+'" src="/Gemma/images/icons/stop.png"/>&nbsp;';}
else{statusString+='<img src="/Gemma/images/icons/stop.png"/>&nbsp;';}}
if(record.get('isMerged')){statusString+='<img title="'+Gemma.HelpText.WidgetDefaults.ArrayDesignsNonPagingGrid.isMergedTT+'"'+' src="/Gemma/images/icons/merging_result.png"/>&nbsp;';}
if(record.get('isMergee')){statusString+='<img title="'+Gemma.HelpText.WidgetDefaults.ArrayDesignsNonPagingGrid.isMergeeTT+'"'+' src="/Gemma/images/icons/arrow_merge.png"/>&nbsp;';}
if(record.get('isSubsumed')){statusString+='<img title="'+Gemma.HelpText.WidgetDefaults.ArrayDesignsNonPagingGrid.isSubsumedTT+'"'+' src="/Gemma/images/icons/subsumed.png"/>&nbsp;';}
if(record.get('isSubsumer')){statusString+='<img title="'+Gemma.HelpText.WidgetDefaults.ArrayDesignsNonPagingGrid.isSubsumerTT+'"'+' src="/Gemma/images/icons/subsumer.png"/>';}
return statusString;}},{header:"Short Name",dataIndex:'shortName',width:0.07},{header:"Taxon",dataIndex:'taxon',width:0.07},{header:"Expts",dataIndex:'expressionExperimentCount',width:0.03,tooltip:'Number of experiments in Gemma that use this design'},{header:"Seq. Update",dataIndex:'lastSequenceUpdate',width:0.07,sortDir:'DESC',xtype:'datecolumn',format:'Y-m-d'},{header:"Rep. mask",dataIndex:'lastRepeatMask',width:0.07,sortDir:'DESC',xtype:'datecolumn',format:'Y-m-d'},{header:"Seq. Analysis",dataIndex:'lastSequenceAnalysis',width:0.07,sortDir:'DESC',xtype:'datecolumn',format:'Y-m-d'},{header:"Gene Mapping",dataIndex:'lastGeneMapping',width:0.07,sortDir:'DESC',xtype:'datecolumn',format:'Y-m-d'},{header:"Channels",dataIndex:'color',width:0.03,renderer:function(value,metaData,record,rowIndex,colIndex,store){return(value==="ONECOLOR"||value==="NONE")?"1":(value==="TWOCOLOR")?"2":'<span title="'+value+'">'+value+'</span>';}},this.action]})});this.getStore().addMultiFilter({name:'orphanFilter',active:!this.showOrphans,fn:function(record){return(record.get('expressionExperimentCount')&&record.get('expressionExperimentCount')>0);}});this.getStore().addMultiFilter({name:'mergeeFilter',active:!this.showMergees,fn:function(record){return!record.get('isMergee');}});this.getStore().addMultiFilter({name:'troubledFilter',active:false,fn:function(record){return!record.get('troubled');}});var textFilterFun=function(query){var value=new RegExp(Ext.escapeRe(query),'i');return function(record){var fieldContents;for(var field in record.data){fieldContents=record.data[field];if(value.test(fieldContents)){return true;}}
return false;};};Ext.apply(this,{clearFilter:function(){this.getTopToolbar().searchInGrid.reset();this.getStore().removeMultiFilter('textQueryFilter');this.getStore().applyMultiFilters();this.getTopToolbar().fieldClearBtn.disable();},tbar:new Ext.Toolbar({items:[{xtype:'textfield',ref:'searchInGrid',tabIndex:1,enableKeyEvents:true,emptyText:'Enter search term',listeners:{"keyup":{fn:function(){this.getTopToolbar().fieldClearBtn.enable();this.getStore().removeMultiFilter('textQueryFilter');this.getStore().addMultiFilter({name:'textQueryFilter',active:true,fn:textFilterFun(this.getTopToolbar().searchInGrid.getValue())});this.getStore().applyMultiFilters();},scope:this,options:{delay:100}}}},{ref:'fieldClearBtn',disabled:true,tooltip:'Clear your search',icon:'/Gemma/images/icons/cross.png',handler:function(){this.clearFilter();},scope:this},'-',{ref:'refreshButton',text:'Refresh',icon:'/Gemma/images/icons/arrow_refresh_small.png',tooltip:'Refresh the contents of this table',handler:function(){this.clearFilter();this.loadArrayDesigns(this.idSubset);},scope:this},'->','-',{ref:'orphansToggle',boxLabel:'Hide Orphans',checked:!this.showOrphans,xtype:'checkbox',style:'margin-top:0px',tooltip:Gemma.HelpText.WidgetDefaults.ArrayDesignsNonPagingGrid.hideOrphansTT,handler:function(checkbox,isChecked){if(!isChecked){this.showOrphans=true;this.getStore().deactivateMultiFilter('orphanFilter');this.getStore().applyMultiFilters();}else{this.showOrphans=false;this.getStore().activateMultiFilter('orphanFilter');this.getStore().applyMultiFilters();}},scope:this},'-',{ref:'troubledToggle',boxLabel:'Hide Troubled',checked:!this.showTroubled,hidden:true,style:'margin-top:0px',xtype:'checkbox',tooltip:Gemma.HelpText.WidgetDefaults.ArrayDesignsNonPagingGrid.hideTroubledTT,handler:function(checkbox,isChecked){if(!isChecked){this.showTroubled=true;this.getStore().deactivateMultiFilter('troubledFilter');this.getStore().applyMultiFilters();}else{this.showTroubled=false;this.getStore().activateMultiFilter('troubledFilter');this.getStore().applyMultiFilters();}},scope:this},'-',{ref:'ArrayDesignsSummaryWindowBtn',text:'Platforms Summary',cls:'x-toolbar-standardbutton',hidden:true,handler:function(){if(Ext.WindowMgr.get('ArrayDesignsSummaryWindow')){Ext.WindowMgr.bringToFront('ArrayDesignsSummaryWindow');}else{new Gemma.ArrayDesignsSummaryWindow({id:'arrayDesignsSummaryWindow'}).show();}},scope:this}]})});Gemma.ArrayDesignsNonPagingGrid.superclass.initComponent.call(this);this.on('render',function(){this.loadArrayDesigns(this.idSubset);},this);this.getStore().on('datachanged',function(store){this.setTitle(this.getStore().getCount()+" of "+this.totalCount+" Platforms");},this);var isAdmin=(Ext.getDom('hasAdmin'))?Ext.getDom('hasAdmin').getValue():false;this.adjustForIsAdmin(isAdmin);Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){this.adjustForIsAdmin(isAdmin);},this);Gemma.Application.currentUser.on("logOut",function(){this.adjustForIsAdmin(false);},this);},adjustForIsAdmin:function(isAdmin){var colModel=this.getColumnModel();var index=this.getColumnModel().findColumnIndex('lastSequenceUpdate');colModel.setHidden(index,!isAdmin);index=this.getColumnModel().findColumnIndex('lastRepeatMask');colModel.setHidden(index,!isAdmin);index=this.getColumnModel().findColumnIndex('lastSequenceAnalysis');colModel.setHidden(index,!isAdmin);index=this.getColumnModel().findColumnIndex('lastGeneMapping');colModel.setHidden(index,!isAdmin);index=this.getColumnModel().findColumnIndex('color');colModel.setHidden(index,!isAdmin);index=this.getColumnModel().findColumnIndex('actions');colModel.setHidden(index,!isAdmin);if(!isAdmin){this.getStore().activateMultiFilter('troubledFilter');this.getStore().applyMultiFilters();}
this.getTopToolbar().troubledToggle.setVisible(isAdmin);this.getTopToolbar().ArrayDesignsSummaryWindowBtn.setVisible(isAdmin);}});Gemma.ArrayDesignsSummaryWindow=Ext.extend(Ext.Window,{title:'Summary for All Platforms',shadow:false,loadText:function(){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:"Loading Summary ..."});}
this.loadMask.show();ArrayDesignController.loadArrayDesignsSummary(function(arrayDesignSummary){if(arrayDesignSummary===null){arrayDesignSummary=this.defaultData;}else{for(field in arrayDesignSummary){if(arrayDesignSummary[field]===null){arrayDesignSummary[field]='<span style="color:grey">[Not avail.]</span>';}}}
this.update(arrayDesignSummary);this.loadMask.hide();}.createDelegate(this));},tpl:'<a href="/Gemma/arrays/generateArrayDesignSummary.html" onclick="return confirm(\'Regenerate report for all platforms?\');">Regenerate this report</a><br><br>'+
Gemma.Widget.tpl.ArrayDesignsNonPagingGrid.rowDetails,padding:7,defaultData:{numProbeSequences:'<span style="color:grey">[Not avail.]</span>',numProbeAlignments:'<span style="color:grey">[Not avail.]</span>',numProbesToGenes:'<span style="color:grey">[Not avail.]</span>',numGenes:'<span style="color:grey">[Not avail.]</span>',dateCached:'<span style="color:grey">[Not avail.]</span>',},initComponent:function(){Gemma.ArrayDesignsSummaryWindow.superclass.initComponent.call(this);this.on('render',function(){this.loadText();},this);}});if(Ext.isIE){Ext.override(Ext.layout.FormLayout,{fieldTpl:new Ext.XTemplate('<div class="x-form-item {itemCls}" tabIndex="-1">','<label for="{id}" style="{labelStyle}" title="{labelTip}" class="x-form-item-label">{label}{labelSeparator}</label>','<div class="x-form-element" id="x-form-el-{id}" style="{elementStyle}">','<img src="/Gemma/images/icons/question_blue.png" style="float:right;display:{displayHelp}" title="{labelTip}"/>','</div><div class="{clearCls}"></div>','</div>',{disableFormats:true}),getTemplateArgs:function(field){var noLabelSep=!field.fieldLabel||field.hideLabel;var tipText=(typeof field.fieldTip===undefined||!field.fieldTip)?'':field.fieldTip;tipText=tipText.replace("'","&#39;");tipText=tipText.replace('"','&quot;');return{id:field.id,label:field.fieldLabel,itemCls:(field.itemCls||this.container.itemCls||'')+(field.hideLabel?' x-hide-label':''),clearCls:field.clearCls||'x-form-clear-left',labelStyle:this.getLabelStyle(field.labelStyle),elementStyle:this.elementStyle||'',labelSeparator:noLabelSep?'':(Ext.isDefined(field.labelSeparator)?field.labelSeparator:this.labelSeparator),labelTip:tipText,displayHelp:(field.hidden||field.hideHelpIcon||!tipText||typeof tipText==='undefined'||tipText==='')?'none':'inline'};}});}else{Ext.override(Ext.layout.FormLayout,{fieldTpl:new Ext.XTemplate('<div class="x-form-item {itemCls}" tabIndex="-1">','<label for="{id}" style="{labelStyle}" ext:qtip="{labelTip}" ext:qtitle="{labelTipTitle}" ext:qclass="{labelTipCls}" class="x-form-item-label">{label}{labelSeparator}</label>','<div class="x-form-element" id="x-form-el-{id}" style="{elementStyle}" >','<img src="/Gemma/images/icons/question_blue.png" style="float:right;display:{displayHelp}" ext:qtip="{labelTip}" ext:qtitle="{labelTipTitle}" ext:qclass="{labelTipCls}" "/>','</div><div class="{clearCls}"></div>','</div>',{disableFormats:true}),getTemplateArgs:function(field){var noLabelSep=!field.fieldLabel||field.hideLabel;var tipText=(typeof field.fieldTipHTML!=='undefined')?field.fieldTipHTML:(typeof field.fieldTip!=='undefined')?field.fieldTip:'';tipText=tipText.replace("'","&#39;");tipText=tipText.replace('"','&quot;');return{id:field.id,label:field.fieldLabel,itemCls:(field.itemCls||this.container.itemCls||'')+(field.hideLabel?' x-hide-label':''),clearCls:field.clearCls||'x-form-clear-left',labelStyle:this.getLabelStyle(field.labelStyle),elementStyle:this.elementStyle||'',labelSeparator:noLabelSep?'':(Ext.isDefined(field.labelSeparator)?field.labelSeparator:this.labelSeparator),labelTip:tipText,labelTipCls:'inline-help-form-q-tip '+((typeof field.fieldTipCls!=='undefined')?field.fieldTipCls:''),labelTipTitle:field.fieldTipTitle,displayHelp:(field.hidden||field.hideHelpIcon||!tipText||typeof tipText==='undefined'||tipText==='')?'none':'inline'};}});}
Ext.namespace('Gemma');Gemma.WizardTabPanelItemPanel=Ext.extend(Ext.Panel,{nextButtonText:'Next',nextButtonHandler:null,createNextButton:function(){var nextButton=new Ext.Button({text:this.nextButtonText,handler:function(button,eventObject){if(this.nextButtonHandler){this.nextButtonHandler.call(this);}else{this.fireEvent('nextButtonClicked',this);}},scope:this});return nextButton;},maskWindow:function(msg){var window=this.findParentBy(function(container){return container instanceof Ext.Window;});if(window){window.getEl().mask(msg==null?'Loading ...':msg);}},unmaskWindow:function(){var window=this.findParentBy(function(container){return container instanceof Ext.Window;});if(window){window.getEl().unmask();}}});Ext.namespace('Gemma');Gemma.WizardTabPanel=Ext.extend(Ext.TabPanel,{activeTab:0,cls:'wizardTabPanel',useCustomInsteadOfTabIcons:true,enableOnlyFirstTab:true,initComponent:function(){if(this.useCustomInsteadOfTabIcons){this.addClass('wizardTabPanelUseCustomIcon');}
var findComponentIndex=function(component){var componentIndex=-1;this.items.each(function(item,index,length){if(component===item){componentIndex=index;}});return componentIndex;}.createDelegate(this);for(var i=0;i<this.items.length;i++){var item=this.items[i];if(i!=0&&this.enableOnlyFirstTab){item.disable();}
if(i<this.items.length-1&&this.useCustomInsteadOfTabIcons){item.iconCls='icon-wizard-next';}
item.on({nextButtonClicked:function(component){var componentIndex=findComponentIndex(component);if(componentIndex<this.items.length-1){this.setActiveTab(componentIndex+1);this.getActiveTab().enable();}
for(var i=componentIndex+2;i<this.items.length;i++){this.getComponent(i).disable();}},scope:this});}
Gemma.WizardTabPanel.superclass.initComponent.call(this);this.setActiveTab(this.activeTab);}});Gemma.InlineHelpIcon=Ext.extend(Ext.Button,{icon:"/Gemma/images/icons/question_blue.png",padding:'3px',cls:'transparent-btn',initComponent:function(){Gemma.InlineHelpIcon.superclass.initComponent.call(this);Ext.apply(this,{tooltip:this.tooltipText});}});Ext.reg('Gemma.InlineHelpIcon',Gemma.InlineHelpIcon);Ext.namespace('Gemma');Gemma.AuditTrailGrid=Ext.extend(Ext.grid.GridPanel,{title:"History",collapsible:true,height:200,width:720,loadMask:true,stateful:false,loadOnlyOnRender:false,record:Ext.data.Record.create([{name:"id",type:"int"},{name:"date",type:"date"},{name:"actionName",type:"string"},{name:"note",type:"string"},{name:"detail",type:"string"},{name:"performer"},{name:"eventTypeName",type:"string"}]),createEvent:function(obj){var cb=function(){this.getStore().reload();}.createDelegate(this);AuditController.addAuditEvent(this.auditable,obj.type,obj.comment,obj.details,{callback:cb});},showAddEventDialog:function(){if(!this.addEventDialog){this.addEventDialog=new Gemma.AddAuditEventDialog();this.addEventDialog.on("commit",function(resultObj){this.createEvent(resultObj);}.createDelegate(this));}
this.addEventDialog.show();},refreshGrid:function(){this.getStore().load({params:[this.auditable]});},eventTypeRenderer:function(value,metaData,record,rowIndex,colIndex,store){var ret=value.replace(/.*\./,'').replace("Impl",'').replace(/([A-Z])/g,' $1');if(value==='TroubleStatusFlagEventImpl'||value==='ExperimentalDesignTroubleImpl'){ret='<img  src="/Gemma/images/icons/stop.png">&nbsp;'+ret;}else if(value==='ValidatedFlagEventImpl'){ret='<img  src="/Gemma/images/icons/emoticon_smile.png">&nbsp;'+ret;}else if(value==='OkStatusEventFlagImpl'){ret='<img  src="/Gemma/images/icons/checked.gif">&nbsp;'+ret;}
return ret;},initComponent:function(){Ext.apply(this,{columns:[{header:"Date",width:105,dataIndex:"date",renderer:Ext.util.Format.dateRenderer('D, d M Y H:i:s'),sortable:true},{header:"Action",width:50,hidden:true,dataIndex:"actionName"},{header:"Performer",width:80,dataIndex:"performer"},{header:"Event type",width:170,dataIndex:"eventTypeName",renderer:this.eventTypeRenderer},{header:"Comment",width:275,dataIndex:"note"}],store:new Ext.data.Store({proxy:new Ext.data.DWRProxy(AuditController.getEvents),reader:new Ext.data.ListRangeReader({id:"id"},this.record),remoteSort:false}),tbar:[{xtype:'button',icon:"/Gemma/images/icons/add.png",tooltip:'Add an audit event',handler:this.showAddEventDialog,scope:this},{xtype:'button',icon:"/Gemma/images/icons/arrow_refresh_small.png",tooltip:'Reload view from the database',handler:this.refreshGrid,scope:this}]});Gemma.AuditTrailGrid.superclass.initComponent.call(this);this.getColumnModel().defaultSortable=false;this.getStore().setDefaultSort('date');if(!this.loadOnlyOnRender){this.getStore().load({params:[this.auditable]});}else{this.on('render',function(){this.getStore().load({params:[this.auditable]});});}
this.on('rowdblclick',function(grid,row,event){var record=this.getStore().getAt(row).data;var note=record.note;var detail=record.detail;detail=detail.replace("\n","<br />\n");var content="Date: "+record.date+"<br />Performer: "+record.performer+"<br />Note: "+note+"<br />Details: "+detail;Ext.MessageBox.alert("Event details",content);});}});Gemma.AddAuditEventDialog=Ext.extend(Ext.Window,{height:350,width:550,shadow:true,minWidth:200,minHeight:150,closeAction:"hide",modal:true,layout:'fit',layoutConfig:{forceFit:true},title:"Add an audit event",validate:function(){return this.auditEventTypeCombo.isValid()&&this.auditEventCommentField.isValid()&&this.auditEventDetailField.isValid();},initComponent:function(){this.auditEventTypeStore=new Ext.data.SimpleStore({fields:['type','description'],data:[['CommentedEvent','Comment'],['TroubleStatusFlagEvent','Other (generic) Trouble'],['ExperimentalDesignTrouble','Experimental Design Trouble'],['OutlierSampleTrouble','Outlier sample'],['OKStatusFlagEvent','OK flag (clear Trouble)'],['ValidatedFlagEvent','Validated flag'],['ValidatedQualityControl','QC validated'],['ValidatedAnnotations','Tags validated'],['ValidatedExperimentalDesign','Experimental design validated']]});this.auditEventTypeCombo=new Ext.form.ComboBox({fieldLabel:'Event type',store:this.auditEventTypeStore,displayField:'description',valueField:'type',typeAhead:true,mode:'local',allowBlank:false,triggerAction:'all',emptyText:'Select an event type',editable:false,width:180});this.auditEventCommentField=new Ext.form.TextField({fieldLabel:'Comment',width:400,allowBlank:true});this.auditEventDetailField=new Ext.form.TextArea({fieldLabel:'Details',height:200,width:400,allowBlank:true});this.fs=new Ext.form.FieldSet({items:[this.auditEventTypeCombo,this.auditEventCommentField,this.auditEventDetailField]});Ext.apply(this,{items:[this.fs],buttons:[{text:'Add Event',handler:function(){if(this.validate()){this.hide();this.fireEvent('commit',{comment:this.auditEventCommentField.getValue(),type:this.auditEventTypeCombo.getValue(),details:this.auditEventDetailField.getValue()});}else{Ext.Msg.alert("Error","You must fill in the required fields");}}.createDelegate(this),scope:this},{text:'Cancel',handler:this.hide.createDelegate(this)}]});Gemma.AddAuditEventDialog.superclass.initComponent.call(this);this.addEvents('commit');}});Ext.namespace('Gemma');Gemma.GemmaViewPort=Ext.extend(Ext.Viewport,{layout:'border',defaultCenter:{xtype:'panel',html:'must be set in config'},centerPanelConfig:null,initComponent:function(){this.centerPanel=(this.centerPanelConfig)?this.centerPanelConfig:this.defaultCenter;Gemma.GemmaViewPort.superclass.initComponent.call(this);this.add([{xtype:'gemmaNavHeader',region:'north'}]);this.setCenterRegion(this.centerPanel);},setCenterRegion:function(panel){Ext.apply(panel,{region:'center'});this.add(panel);},onRender:function(ct,position){Gemma.GemmaViewPort.superclass.onRender.call(this,ct,position);var createdJunk=document.getElementById('page');if(createdJunk&&createdJunk.parentNode&&createdJunk.parentNode.hasChildNodes){createdJunk.style.display="none";}}});Ext.namespace("Gemma");Gemma.ArrayDesignCombo=Ext.extend(Gemma.StatefulRemoteCombo,{displayField:'name',valueField:'id',editable:true,loadingText:"Loading ...",listWidth:550,forceSelection:true,typeAhead:true,triggerAction:'all',emptyText:'Select a platform',stateId:'Gemma.ArrayDesign',record:Ext.data.Record.create([{name:"id",type:"int"},{name:"name",type:"string"},{name:"description",type:"string"},{name:"taxon"},{name:"shortName",type:"string"},{name:"troubled",type:"boolean"}]),initComponent:function(){var templ=new Ext.XTemplate('<tpl for="."><div ext:qtip="{description}" class="x-combo-list-item"><tpl if="troubled"><img src="/Gemma/images/icons/stop.png" /></tpl>{shortName} - {name}</div></tpl>');Ext.apply(this,{store:new Ext.data.Store({sortInfo:{field:'name',direction:'ASC'},proxy:new Ext.data.DWRProxy(ArrayDesignController.getArrayDesigns),reader:new Ext.data.ListRangeReader({id:"id"},this.record),remoteSort:false}),tpl:templ});Gemma.ArrayDesignCombo.superclass.initComponent.call(this);this.store.on('load',function(){this.taxonChanged(this.taxon);},this);this.store.load({params:[[],false,true],scope:this,add:false});this.doQuery();this.addEvents('arrayDesignchanged');},setValue:function(v){var changed=false;if(this.getValue()!==v){changed=true;}
if(changed&&this.store.isFiltered()){this.store.clearFilter();}
Gemma.ArrayDesignCombo.superclass.setValue.call(this,v);if(changed){this.fireEvent('arrayDesignchanged',this.getArrayDesign());}},getArrayDesign:function(){var ArrayDesign=this.store.getById(this.getValue());return ArrayDesign;},taxonChanged:function(taxon){if(taxon===undefined){return;}
this.taxon=taxon;if(this.getArrayDesign()&&this.getArrayDesign().taxon&&this.getArrayDesign().taxon.id!==taxon.id){this.reset();}
this.applyFilter(taxon);},applyFilter:function(taxon){if(taxon===undefined){return;}
this.store.filterBy(function(record,id){if(!record.data.taxon||record.data.taxon.indexOf(taxon.commonName)===-1){return false;}else{return true;}});},clearCustom:function(){var rec=this.store.getById(-1);if(rec){this.store.remove(rec);}}});Ext.reg('ArrayDesigncombo',Gemma.ArrayDesignCombo);Ext.namespace('Gemma.Application','Gemma.AjaxLogin');Gemma.Application.currentUser=new Ext.util.Observable();Gemma.Application.currentUser.addEvents('logIn','logOut');Gemma.AjaxLogin.logoutFn=function(){Ext.Ajax.request({url:'/Gemma/j_spring_security_logout',method:'GET',success:function(response,options){var hasuser=Ext.getDom('hasUser');if(hasuser){hasuser.value='';}
var hasadmin=Ext.getDom('hasAdmin');if(hasadmin){hasadmin.value='';}
var hasname=Ext.getDom('username-logged-in');if(hasname){hasname.value='';}
Gemma.Application.currentUser.fireEvent('logOut');var reloadOnLogout=Ext.getDom('reloadOnLogout');if(reloadOnLogout==undefined||reloadOnLogout.getValue()==="true"){Ext.getBody().mask("Logging you out");window.location.reload();}},failure:function(response,options){alert('Failed to log you out of Gemma.');},scope:this,disableCaching:true});};Gemma.AjaxLogin.loginWindow=null;Gemma.AjaxLogin.showLoginWindowFn=function(reloadPageOnLogin){if(Ext.get('_login')){return;}
if(Gemma.AjaxLogin.loginWindow===null){Gemma.AjaxLogin.loginWindow=new Gemma.AjaxLogin.AjaxLoginWindow();}
if(reloadPageOnLogin){Ext.apply(Gemma.AjaxLogin.loginWindow,{reloadPageOnLogin:reloadPageOnLogin});}
Ext.getBody().mask();Gemma.AjaxLogin.loginWindow.show();};Gemma.AjaxLogin.AjaxLoginWindow=Ext.extend(Ext.Window,{id:'_ajaxLogin',width:360,shadow:true,resizable:false,closeAction:'hide',reloadPageOnLogin:false,extraText:new Ext.Panel({border:false,html:''}),listeners:{"login_success":function(userName,isAdmin){Ext.getBody().unmask();Gemma.Application.currentUser.userName=userName;Gemma.Application.currentUser.isAdmin=isAdmin;this.hide();var myReloadPageOnLogin=Ext.getDom('reloadOnLogin');if(myReloadPageOnLogin&&myReloadPageOnLogin.value==="true"){this.reloadPageOnLogin=true;}
if(this.reloadPageOnLogin){Ext.getBody().mask("Logging you in");window.location.reload();}else{Gemma.Application.currentUser.fireEvent('logIn',userName,isAdmin);}},"register_requested":function(){Ext.getBody().unmask();this.hide();this.launchRegisterWidget();},"login_cancelled":function(){this.hide();Ext.getBody().unmask();},"show":function(){Ext.getBody().mask();},"hide":function(){Ext.getCmp("_loginForm").getForm().reset();Ext.getBody().unmask();},"close":function(){Ext.getCmp("_loginForm").getForm().reset();Ext.getBody().unmask();}},launch:function(){var onLoginPage=Ext.get('_loginForm');if(!onLoginPage){this.targetElement=Ext.getBody();this.show();}},launchRegisterWidget:function(){if(this.ajaxRegister===null||!this.ajaxRegister){var otherOpenRegister=Ext.getCmp('_ajaxRegister');if(otherOpenRegister&&otherOpenRegister!==null){otherOpenRegister.fireEvent("register_cancelled");}
this.ajaxRegister=new Gemma.AjaxLogin.AjaxRegister({name:'ajaxRegister',closable:false,closeAction:'hide',title:'Please Register'});this.ajaxRegister.on("register_cancelled",function(){this.ajaxRegister.close();this.ajaxRegister=null;Ext.getBody().unmask();},this);this.ajaxRegister.on("register_success",function(){this.ajaxRegister.close();this.ajaxRegister=null;Ext.getBody().unmask();},this);}
Ext.getBody().mask();this.ajaxRegister.show();},initComponent:function(){Ext.apply(this,{items:[this.extraText,new Ext.FormPanel({labelWidth:90,id:'_loginForm',frame:true,bodyStyle:'padding:5px 5px 0',iconCls:'user-suit',width:350,monitorValid:true,keys:[{key:Ext.EventObject.ENTER,fn:this.submitHandler}],defaults:{},defaultType:'textfield',items:[{fieldLabel:'Username',name:'j_username',id:'j_username',allowBlank:false},{fieldLabel:'Password',name:'j_password',id:'j_password',allowBlank:false,inputType:'password'},{fieldLabel:'Remember Me',boxLabel:'rememberMe',id:'_spring_security_remember_me',name:'_spring_security_remember_me',inputType:'checkbox'},{html:'<a href="/Gemma/passwordHint.html">'+Gemma.HelpText.WidgetDefaults.AjaxLogin_AjaxLoginWindow.passwordHintLink+'</a>',name:'passwordHint',id:'passwordHint',xtype:'label',hidden:false},{id:'ajaxLoginTrue',name:'ajaxLoginTrue',hidden:true,value:'true'}],buttons:[{text:Gemma.HelpText.WidgetDefaults.AjaxLogin_AjaxLoginWindow.registerButton,minWidth:75,handler:this.registerHandler,scope:this},{text:"Cancel",handler:this.cancel,scope:this},{text:'Login',formBind:true,type:'submit',method:'POST',minWidth:75,handler:this.submitHandler}]})],bbar:new Ext.ux.StatusBar({id:'my-status_ajax',text:'',iconCls:'default-icon',busyText:'Logging you in...',items:['<div id="ajax-error" style="color: red; vertical-align: top; padding-right: 5px;"><br/></div>']})});this.addEvents('login_success','login_failure','register_requested','login_cancelled');Gemma.AjaxLogin.AjaxLoginWindow.superclass.initComponent.call(this);},submitHandler:function(){var errordiv=Ext.get('ajax-error');Ext.DomHelper.overwrite(errordiv,"");var sb=Ext.getCmp('my-status_ajax');sb.showBusy();Ext.getCmp("_loginForm").getForm().submit({url:'/Gemma/j_spring_security_check',success:function(form,action){var sb=Ext.getCmp('my-status_ajax');if(sb){sb.clearStatus();}
var link=Ext.getDom('footer-login-link');if(link){link.href="/Gemma/j_spring_security_logout";link.innerHTML="Logout";}
var dataMsg=Ext.util.JSON.decode(action.response.responseText);var loggedInAs=Ext.getDom('username-logged-in');if(loggedInAs){loggedInAs.value=dataMsg.user;}
var hasuser=Ext.getDom('hasUser');if(hasuser){hasuser.value=true;}
var hasadmin=Ext.getDom('hasAdmin');if(hasadmin&&dataMsg.isAdmin){hasadmin.value=true;}
var loginWidget=Ext.getCmp("_ajaxLogin");if(loginWidget){loginWidget.fireEvent("login_success",dataMsg.user,dataMsg.isAdmin);}},failure:function(form,action){var sb=Ext.getCmp('my-status_ajax');if(sb){sb.clearStatus();}
var erdiv=Ext.get('ajax-error');if(erdiv){Ext.DomHelper.overwrite(erdiv,Gemma.HelpText.WidgetDefaults.AjaxLogin_AjaxLoginWindow.invalidLogin);}
var loginWidget=Ext.getCmp("_ajaxLogin");if(loginWidget){loginWidget.fireEvent("login_failure");}
loggedInAs=Ext.getDom('username-logged-in');if(loggedInAs){loggedInAs.value="";}}});},registerHandler:function(){this.fireEvent("register_requested");},cancel:function(){this.fireEvent('login_cancelled');}});Ext.namespace('Gemma','Gemma.AjaxLogin','Gemma.Application');Gemma.GemmaNavigationHeader=Ext.extend(Ext.Toolbar,{height:60,style:'background:white;border-bottom:1px solid #A9BFD3',border:false,defaults:{flex:0},layout:'hbox',layoutConfig:{align:'middle'},doSearchQuery:function(){if(this.inMenuSearchField.getValue().length>1){location.href='/Gemma/searcher.html?query='+this.inMenuSearchField.getValue();}},showAbout:function(){var w=new Ext.Window({width:500,height:300,title:"About Gemma",layout:'fit',items:[{xtype:'panel',html:'<div style="margin:10px;padding:5px;"><p>Gemma is a web site, database and a set of tools for the meta-analysis, re-use and '
+'sharing of genomics data, currently primarily targeted at the analysis of gene expression profiles. Gemma contains data from thousands '
+'of public studies, referencing thousands of published papers. Users can search, access and visualize coexpression and differential'
+' expression results. For more information, see the '
+'<a href="http://gemma-chibi-doc.sites.olt.ubc.ca/" target="_blank">help and documentation.&nbsp;<img src="/Gemma/images/icons/link_external_icon_tight.gif"/></a>'
+'</p><p>Gemma was developed by the Pavlidis group at UBC '
+'(<a href="http://gemma-chibi-doc.sites.olt.ubc.ca/credits/" target="_blank">credits&nbsp;<img src="/Gemma/images/icons/link_external_icon_tight.gif"/></a>). '
+'</p><p>To cite Gemma, please use: <br>'
+'Zoubarev, A., et al., Gemma: A resource for the re-use, sharing and meta-analysis of expression profiling data. <em>Bioinformatics</em>, 2012.'
+' <a href="http://dx.doi.org/doi:10.1093/bioinformatics/bts430" target="_blank">link&nbsp;<img src="/Gemma/images/icons/link_external_icon_tight.gif"/></a>'
+'</p></div>'}],buttons:[{text:"OK",handler:function(){w.destroy();},scope:w}]});w.show();},initComponent:function(){this.inMenuSearchField=new Ext.form.TextField({flex:1,enableKeyEvents:true,emptyText:'Search',minLength:2,listeners:{specialkey:function(formField,e){if(e.getKey()===e.ENTER){this.doSearchQuery(this.lastQuery);}else if(e.getKey()===e.ESC){formField.setValue('');}},scope:this}});var isAdmin=(Ext.getDom('hasAdmin')&&Ext.getDom('hasAdmin').getValue()==='true')?true:false;var userLoggedIn=(Ext.getDom('hasUser')&&Ext.getDom('hasUser').getValue()==='true')?true:false;var menuDefaults={cls:'x-menu-item-large'};var searchBtn=new Ext.Button({ref:'searchBtn',text:'Explore',menu:new Ext.menu.Menu({defaults:menuDefaults,style:'background:white;',items:[{xtype:'panel',layout:'hbox',border:false,items:[this.inMenuSearchField,{xtype:'button',text:'Go',handler:function(){this.doSearchQuery();},scope:this,flex:0}]},{text:'Search Analyses',href:"/Gemma/analysesResultsSearch.html",tooltip:"Search for differential and coexpression patterns"},'-',{text:'Browse Datasets',href:"/Gemma/expressionExperiment/showAllExpressionExperiments.html",tooltip:"View the list of Gemma's expression data sets"},{text:'Browse Phenotype Associations',href:"/Gemma/phenotypes.html",tooltip:"View the list of Gemma's phenotype-gene associations"},{text:'Browse Platforms',href:"/Gemma/arrays/showAllArrayDesigns.html",tooltip:"View the list of Gemma's platforms"},{text:'Search Annotated Papers',href:"/Gemma/bibRef/searchBibRefs.html",tooltip:"Search for papers the Gemma curators have annotated"}],listeners:{mouseover:function(){hideTaskSearch.cancel();},mouseout:function(){hideTaskSearch.delay(250);}}}),listeners:{mouseover:function(){hideTaskSearch.cancel();if(!this.hasVisibleMenu()){this.showMenu();}},mouseout:function(){hideTaskSearch.delay(250);}}});var myGemmaBtn=new Ext.Button({text:'My Gemma',hidden:!userLoggedIn,menu:new Ext.menu.Menu({defaults:menuDefaults,style:'background:white',items:[{text:'Load Data',href:"/Gemma/expressionExperiment/upload.html",tooltip:"Upload your expression data"},{text:'My Data Sets',href:"/Gemma/expressionExperiment/showAllExpressionExperimentLinkSummaries.html",tooltip:"Curate your data"},{text:'My Phenotype Associations',href:"/Gemma/phenotypeAssociationManager.html",tooltip:"Modify your phenotype-gene associations"},'-',{text:'User Groups',href:"/Gemma/manageGroups.html",tooltip:"Manage your user groups"},{text:'Gene Groups',href:"/Gemma/geneGroupManager.html",tooltip:"Manage your gene groups"},{text:'Experiment Groups',href:"/Gemma/expressionExperimentSetManager.html",tooltip:"Manage your dataset / expression experiment groups"},'-',{text:'Edit Profile',href:"/Gemma/userProfile.html",tooltip:"Edit your profile"}],listeners:{mouseover:function(){hideTaskMyGemma.cancel();},mouseout:function(){hideTaskMyGemma.delay(250);}}}),listeners:{mouseover:function(){hideTaskMyGemma.cancel();if(!this.hasVisibleMenu()){this.showMenu();}},mouseout:function(){hideTaskMyGemma.delay(250);}}});var aboutBtn=new Ext.Button({text:'About',menu:new Ext.menu.Menu({defaults:menuDefaults,style:'background:white',items:[{text:'About Gemma',handler:function(b,e){this.showAbout();},scope:this},{text:'Help and Documentation&nbsp;<img src="/Gemma/images/icons/link_external_icon.gif"/>',href:"http://gemma-chibi-doc.sites.olt.ubc.ca/",tooltip:"Gemma overview and general help",hrefTarget:"_blank"},{text:'Dataset citations',href:"/Gemma/bibRef/showAllEeBibRefs.html"},{text:'QC updates',href:"/Gemma/expressionExperimentsWithQC.html"}],listeners:{mouseover:function(){hideTaskAbout.cancel();},mouseout:function(){hideTaskAbout.delay(250);}}}),listeners:{mouseover:function(){hideTaskAbout.cancel();if(!this.hasVisibleMenu()){this.showMenu();}},mouseout:function(){hideTaskAbout.delay(250);}}});var helpBtn=new Ext.Button({text:'Help',menu:new Ext.menu.Menu({defaults:menuDefaults,style:'background:white',items:[{text:'Wiki',href:"http://www.chibi.ubc.ca/faculty/pavlidis/wiki/display/gemma",tooltip:"Gemma wiki"},{text:'For Developers',href:"http://www.chibi.ubc.ca/Gemma/resources/",tooltip:"About the Gemma framework"},{text:'Contact Us',href:"/Gemma/contactUs.html",tooltip:"Contact Us"}],listeners:{mouseover:function(){hideTaskHelp.cancel();},mouseout:function(){hideTaskHelp.delay(250);}}}),listeners:{mouseover:function(){hideTaskHelp.cancel();if(!this.hasVisibleMenu()){this.showMenu();}},mouseout:function(){hideTaskHelp.delay(250);}}});var adminBtn=new Ext.Button({text:'Admin',hidden:!isAdmin,menu:new Ext.menu.Menu({defaults:menuDefaults,style:'background:white',items:[{text:'Add Data',href:"/Gemma/admin/loadExpressionExperiment.html",tooltip:"Import from GEO or ArrayExpress"},{text:'Browse GEO',href:"/Gemma/admin/geoRecordBrowser.html",tooltip:"Browse data sets in GEO"},{text:'Search Annotations',href:"/Gemma/characteristicBrowser.html",tooltip:"Search annotations"},'-',{text:'Manage Users',href:"/Gemma/admin/userManager.html",tooltip:"Manage users"},{text:'View Active Sessions',href:"/Gemma/admin/activeUsers.html",tooltip:"View active users"},{text:'System Monitoring',href:"/Gemma/admin/systemStats.html"},{text:'Index Gemma Database',href:"/Gemma/admin/indexer.html"},{text:'Re-Index Gemma Ontologies',href:"/Gemma/admin/reIndexOntologies.html"},{text:'Manage Maintenance Mode',href:"/Gemma/admin/maintenanceMode.html"},{text:'Update "What\'s New"',href:"/Gemma/whatsnew/generateCache.html"},{text:'Widget Test Page',href:"/Gemma/admin/widgetTest.html"}],listeners:{mouseover:function(){hideTaskAdmin.cancel();},mouseout:function(){hideTaskAdmin.delay(250);}}}),listeners:{mouseover:function(){hideTaskAdmin.cancel();if(!this.hasVisibleMenu()){this.showMenu();}},mouseout:function(){hideTaskAdmin.delay(250);}}});var loggedInAs=Ext.getDom('username-logged-in');if(loggedInAs){loggedInAs=loggedInAs.value;}
var userBtn=new Ext.Button({text:loggedInAs,hidden:!loggedInAs,menu:new Ext.menu.Menu({defaults:menuDefaults,style:'background:white',items:[{text:'Edit your profile',href:"/Gemma/userProfile.html",tooltip:"Change your password"},{text:'Log out',handler:Gemma.AjaxLogin.logoutFn,tooltip:"Log out of Gemma"}],listeners:{mouseover:function(){hideTaskUser.cancel();},mouseout:function(){hideTaskUser.delay(250);}}}),listeners:{mouseover:function(){hideTaskUser.cancel();if(!this.hasVisibleMenu()){this.showMenu();}},mouseout:function(){hideTaskUser.delay(250);}}});this.loginBtn=new Ext.Button({xtype:'button',text:'Log In',cls:'mediumText',hidden:userLoggedIn,handler:function(){Gemma.AjaxLogin.showLoginWindowFn();},scope:this});Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){this.loginBtn.hide();myGemmaBtn.show();if(this.navToolbar.myGemmaSpacer){this.navToolbar.myGemmaSpacer.show();}
adminBtn.setVisible(isAdmin);if(this.navToolbar.adminSpacer){this.navToolbar.adminSpacer.setVisible(isAdmin);}
userBtn.setText(userName);userBtn.show();this.doLayout();},this);Gemma.Application.currentUser.on("logOut",function(){this.loginBtn.show();userBtn.setText('anon');userBtn.hide();adminBtn.hide();if(this.navToolbar.adminSpacer){this.navToolbar.adminSpacer.hide();}
myGemmaBtn.hide();if(this.navToolbar.myGemmaSpacer){this.navToolbar.myGemmaSpacer.hide();}
this.doLayout();},this);var hideTaskSearch=new Ext.util.DelayedTask(searchBtn.hideMenu,searchBtn);var hideTaskAbout=new Ext.util.DelayedTask(aboutBtn.hideMenu,aboutBtn);var hideTaskHelp=new Ext.util.DelayedTask(helpBtn.hideMenu,helpBtn);var hideTaskMyGemma=new Ext.util.DelayedTask(myGemmaBtn.hideMenu,myGemmaBtn);var hideTaskAdmin=new Ext.util.DelayedTask(adminBtn.hideMenu,adminBtn);var hideTaskUser=new Ext.util.DelayedTask(userBtn.hideMenu,userBtn);Gemma.GemmaNavigationHeader.superclass.initComponent.call(this);this.add([{xtype:'box',autoEl:{tag:'a',href:'/Gemma/home.html',cn:'<img src="/Gemma/images/logo/gemma-sm230x52_text.png" style="padding-left:10px"/>'}},{xtype:'box',autoEl:{tag:'img',src:'/Gemma/images/logo/neurocarta.png',style:'padding-left:10px'},hidden:window.location.pathname.indexOf('/Gemma/phenotypes.html')<0&&window.location.pathname.indexOf('/Gemma/phenotypeAssociationManager.html')<0},'->',{ref:'navToolbar',xtype:'toolbar',height:23,style:'background:white;border-style:none',defaults:{cls:'bigText'},items:['->',searchBtn,{xtype:'tbspacer',width:15},aboutBtn,{xtype:'tbspacer',width:15},myGemmaBtn,{ref:'myGemmaSpacer',xtype:'tbspacer',width:15,hidden:!userLoggedIn},adminBtn,' ',{ref:'adminSpacer',xtype:'tbspacer',width:15,hidden:!isAdmin},'-',{xtype:'tbspacer',width:15},this.loginBtn,userBtn]},{xtype:'box',autoEl:{tag:'a',href:'http://www.ubc.ca/',cn:'<img src="/Gemma/images/logo/ubcgrey_logo_40.png"/>',style:'padding-left:15px; padding-right:10px'}}]);}});Ext.reg('gemmaNavHeader',Gemma.GemmaNavigationHeader);Gemma.CreateSetDetailsWindow=Ext.extend(Ext.Window,{width:500,height:300,closeAction:'hide',title:"Provide or edit group details",shadow:true,modal:true,isDisplayTaxonWithDatasets:false,store:false,lockInTaxonId:function(taxId,leaveEnabled){if(taxId&&taxId!==null){this.taxCombo.on('ready',function(){this.taxCombo.setTaxonById(taxId);this.taxCombo.setDisabled(leaveEnabled);},this);}},initComponent:function(){this.addEvents("commit");this.formId=Ext.id();this.taxCombo=new Gemma.TaxonCombo({name:'newEesetTaxon',fieldLabel:'Taxon',isDisplayTaxonWithDatasets:this.isDisplayTaxonWithDatasets,invalidText:"You must select a taxon",msgTarget:'side',validator:function(val){return(val===""||val===undefined||val===null)?'Taxon value required':true;}});Ext.apply(this,{items:new Ext.FormPanel({id:this.id+'FormPanel',ref:'formPanel',frame:false,labelAlign:'left',height:250,items:new Ext.form.FieldSet({id:this.id+'FieldSet',ref:'fieldSet',height:240,items:[this.taxCombo,new Ext.form.TextField({ref:'nameField',id:this.id+"Name",fieldLabel:'Name',name:'newSetName',minLength:3,allowBlank:false,invalidText:"You must provide a name",msgTarget:'side',width:300}),new Ext.form.TextArea({ref:'descField',id:this.id+'Desc',fieldLabel:'Description',name:'newSetDescription',value:this.description,width:300}),new Ext.form.Checkbox({fieldLabel:'Public group',name:'publik',checked:this.publik,value:this.publik,width:300})]})}),buttons:[{text:"Cancel",handler:this.hide.createDelegate(this,[])},{text:"OK",scope:this,handler:this.onCommit.createDelegate(this)}]});Gemma.CreateSetDetailsWindow.superclass.initComponent.call(this);this.addEvents("commit");},onCommit:function(){if(this.taxCombo.validate()&&this.formPanel.fieldSet.nameField.validate()){var values=this.formPanel.getForm().getValues();var taxon=this.formPanel.getForm().findField('newEesetTaxon').getTaxon();if(this.store&&this.store instanceof Ext.data.Store){var indexOfExisting=this.store.findBy(function(record,id){return record.get("name")===values.newSetName;},this);if(indexOfExisting>=0){Ext.Msg.alert(Gemma.HelpText.CommonWarnings.DuplicateName.title,Gemma.HelpText.CommonWarnings.DuplicateName.text);return;}}
this.fireEvent("commit",{name:values.newSetName,description:values.newSetDescription,publik:(typeof values.publik!=="undefined"&&values.publik==="on"),taxon:taxon});this.hide();}
return;}});Ext.namespace('Gemma');Gemma.DataFilterCombo=Ext.extend(Ext.form.ComboBox,{editable:false,width:150,triggerAction:'all',lazyRender:true,mode:'local',defaultValue:'50',emptyText:"Number to display",store:new Ext.data.ArrayStore({fields:['count','displayText'],data:[[50,'50 recently updated'],[100,'100 recently updated'],[200,'200 recently updated'],[300,'300 recently updated'],[500,'500 recently updated'],[-50,'50 oldest updates'],[-100,'100 oldest updates'],[-200,'200 oldest updates'],[-300,'300 oldest updates'],[-500,'500 oldest updates']]}),valueField:'count',displayField:'displayText'});Gemma.GeneGroupPanel=Ext.extend(Ext.grid.EditorGridPanel,{selModel:new Ext.grid.RowSelectionModel({singleSelect:true}),name:'geneGroupGridPanel',stripeRows:true,initComponent:function(){Gemma.GeneGroupPanel.superclass.initComponent.call(this);if(!this.store){Ext.apply(this,{store:new Gemma.GeneGroupStore()});}
this.addEvents({'dirty':true});this.record=this.getStore().record;},afterRender:function(){Gemma.GeneGroupPanel.superclass.afterRender.call(this);this.loadMask=new Ext.LoadMask(this.body,{msg:Gemma.StatusText.Loading.generic,store:this.store});this.getSelectionModel().on("rowselect",function(selmol,index,rec){this.getStore().setSelected(rec);this.fireEvent("rowselect",selmol,index,rec);},this);this.getSelectionModel().on("datachanged",function(store){this.fireEvent("datachanged",store);},this);},columns:[{header:'Name',dataIndex:'name',width:0.45,editable:true,sortable:true,editor:new Ext.form.TextField({allowBlank:false})},{header:'Details',dataIndex:'id',width:0.06,editable:false,sortable:false,renderer:function(value,metadata,record,rowIndex,colIndex,store){return'<a target="_blank" title="Go to gene group page" '+'href="/Gemma/geneSet/showGeneSet.html?id='+record.data.id+'"><img src="/Gemma/images/magnifier.png"></a>';}},{header:'Description',dataIndex:'description',width:0.45,editable:true,sortable:true,editor:new Ext.form.TextField({allowBlank:false})},{header:'Taxon',dataIndex:'taxonName',width:0.15,editable:false,sortable:true},{header:'Size',sortable:true,dataIndex:'size',editable:false,width:0.07,tooltip:'number of genes in group'},{header:'Flags',sortable:true,width:0.1,renderer:function(value,metadata,record,rowIndex,colIndex,store){var result=Gemma.SecurityManager.getSecurityLink("ubic.gemma.model.genome.gene.GeneSetImpl",record.get('id'),record.get('publik'),record.get('shared'),record.get('currentUserHasWritePermission'),null,null,null,record.get('currentUserIsOwner'));return result;},tooltip:'Click to edit permissions'}],updateMembers:function(store){var rec=this.getSelectionModel().getSelected();if(!rec){Ext.Msg.alert("Sorry","You must select a set or create a new set before adding genes.",function(){store.un("remove",this.updateMembers);store.un("add",this.updateMembers);store.removeAll();});return;}
var ids=[];store.each(function(rec){ids.push(rec.get("id"));});rec.set("geneIds",ids);rec.set("size",ids.length);this.fireEvent("dirty",rec);}});Gemma.GeneGroupStore=function(config){this.record=Ext.data.Record.create([{name:"id",type:"int"},{name:"name",type:"string",convert:function(v,rec){if(v.startsWith("GO")){return rec.description;}
return v;}},{name:"description",type:"string",convert:function(v,rec){if(rec.name.startsWith("GO")){return rec.name;}
return v;}},{name:"publik",type:"boolean"},{name:"size",type:"int"},{name:"shared",type:'boolean'},{name:"taxonName"},{name:"taxonId"},{name:"currentUserHasWritePermission",type:'boolean'},{name:"currentUserIsOwner",type:'boolean'},{name:"geneIds"}]);this.reader=new Ext.data.ListRangeReader({id:"id"},this.record);Gemma.GeneGroupStore.superclass.constructor.call(this,config);};Ext.extend(Gemma.GeneGroupStore,Ext.data.Store,{autoLoad:true,autoSave:false,selected:null,name:"geneGroupData-store",proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:GeneSetController.getUsersGeneGroups,getDwrArgsFunction:function(request){if(request.params.length>0){return[request.params[0],request.params[1]];}
return[false,null];}},create:{dwrFunction:GeneSetController.create},update:{dwrFunction:GeneSetController.update},destroy:{dwrFunction:GeneSetController.remove}}}),writer:new Ext.data.JsonWriter({writeAllFields:true}),getSelected:function(){return this.selected;},setSelected:function(rec){this.previousSelection=this.getSelected();if(rec){this.selected=rec;}},getPreviousSelection:function(){return this.previousSelection;},clearSelected:function(){this.selected=null;delete this.selected;},listeners:{write:function(store,action,result,res,rs){},exception:function(proxy,type,action,options,res,arg){if(type==='remote'){Ext.Msg.show({title:'Error',msg:res,icon:Ext.MessageBox.ERROR});}else{Ext.Msg.show({title:'Error',msg:arg,icon:Ext.MessageBox.ERROR});}}}});Gemma.GeneSessionSaveForm=Ext.extend(Ext.Panel,{layout:'table',width:390,height:480,frame:true,stateful:true,stateEvents:["beforesearch"],taxonComboReady:false,eeSetReady:false,stateId:"Gemma.CoexpressionSearch",defaults:{collapsible:true,bodyStyle:"padding:10px"},doSaveDatabase:function(){var SessionStoreRecord=Ext.data.Record.create([{name:"id",type:"int"},{name:"name",type:"string",convert:function(v,rec){if(v.startsWith("GO")){return rec.description;}
return v;}},{name:"description",type:"string",convert:function(v,rec){if(rec.name.startsWith("GO")){return rec.name;}
return v;}},{name:"publik",type:"boolean"},{name:"size",type:"int"},{name:"shared",type:'boolean'},{name:"currentUserHasWritePermission",type:'boolean'},{name:"session",type:'boolean'},{name:"geneIds"}]);var tempstore=new Ext.data.SimpleStore({fields:[{name:'id',type:'int'},{name:'taxon'},{name:'officialSymbol',type:'string'},{name:'officialName',type:'string'}],sortInfo:{field:'officialSymbol',direction:'ASC'}});var records=[];this.geneChooserPanel.store.each(function(r){records.push(r.copy());});tempstore.add(records);sessionStore=new Gemma.GeneGroupStore();var ids=[];tempstore.each(function(r){ids.push(r.get("id"));});var rec=new SessionStoreRecord();rec.set("geneIds",ids);rec.set("size",ids.length);rec.set("name",this.nameOfGroup.getValue());rec.set("description",this.description.getValue());sessionStore.add(rec);sessionStore.save();},saveToSession:function(){var SessionStoreRecord=Ext.data.Record.create([{name:"id",type:"int"},{name:"name",type:"string",convert:function(v,rec){if(v.startsWith("GO")){return rec.description;}
return v;}},{name:"description",type:"string",convert:function(v,rec){if(rec.name.startsWith("GO")){return rec.name;}
return v;}},{name:"publik",type:"boolean"},{name:"size",type:"int"},{name:"shared",type:'boolean'},{name:"currentUserHasWritePermission",type:'boolean'},{name:"session",type:'boolean'},{name:"geneIds"}]);var tempstore=new Ext.data.SimpleStore({fields:[{name:'id',type:'int'},{name:'taxon'},{name:'officialSymbol',type:'string'},{name:'officialName',type:'string'}],sortInfo:{field:'officialSymbol',direction:'ASC'}});var records=[];this.geneChooserPanel.store.each(function(r){records.push(r.copy());});tempstore.add(records);sessionStore=new Gemma.SessionGeneGroupStore();var ids=[];tempstore.each(function(r){ids.push(r.get("id"));});var rec=new SessionStoreRecord();rec.set("id",'-1');rec.set("geneIds",ids);rec.set("size",ids.length);rec.set("name",this.nameOfGroup.getValue());rec.set("description",this.description.getValue());sessionStore.add(rec);sessionStore.save();},handleError:function(msg,e){Ext.DomHelper.overwrite("coexpression-messages",{tag:'img',src:'/Gemma/images/icons/warning.png'});Ext.DomHelper.append("coexpression-messages",{tag:'span',html:"&nbsp;&nbsp;"+msg});this.returnFromSearch({errorState:msg});},initComponent:function(){this.geneChooserPanel=new Gemma.GeneGrid({height:400,width:400,region:'center',id:'gene-chooser-panel'});this.nameOfGroup=new Ext.form.TextField({fieldLabel:'Name of Group',region:'south',width:100,name:'name'});this.description=new Ext.form.TextField({fieldLabel:'Description',region:'west',width:100,name:'description'});this.form=new Ext.form.FormPanel({items:[this.nameOfGroup,this.description],width:400});Ext.apply(this.geneChooserPanel.getTopToolbar().taxonCombo,{stateId:"",stateful:false,stateEvents:[]});Ext.apply(this,{title:"Search configuration",items:[this.geneChooserPanel,this.form],buttons:[{text:"Save To Session",handler:this.saveToSession.createDelegate(this,[],false)},{text:"Save To Database",handler:this.doSaveDatabase.createDelegate(this,[],false)}]});Gemma.GeneSessionSaveForm.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.GeneAndGeneGroupComboRecord=Ext.data.Record.create([{name:"name",type:"string"},{name:"description",type:"string"},{name:"isGroup",type:"boolean"},{name:"size",type:"int"},{name:"taxonId",type:"int",defaultValue:"-1"},{name:"taxonName",type:"string",defaultValue:""},{name:"memberIds",defaultValue:[]},{name:"comboText",type:"string",convert:function(v,record){if(record.resultValueObject instanceof GOGroupValueObject){return record.name+": "+record.description;}else{return record.name;}}},{name:"resultValueObject"},{name:"userOwned",type:"boolean"}]);Gemma.GeneAndGeneGroupCombo=Ext.extend(Ext.form.ComboBox,{name:'geneAndGeneGroupCombo',displayField:'comboText',width:160,listWidth:450,lazyInit:false,triggerAction:'all',allQuery:'',enableKeyEvents:true,loadingText:'Searching...',emptyText:"Search genes by keyword",listEmptyText:'No results found',listEmptyTextBlankQuery:'Enter text to search for genes',minChars:2,selectOnFocus:false,autoSelect:false,forceSelection:true,typeAhead:false,taxonId:null,hideTrigger:true,lastQuery:null,mode:'remote',queryDelay:800,listeners:{specialkey:function(formField,e){if(e.getKey()===e.TAB||e.getKey()===e.RIGHT||e.getKey()===e.DOWN){this.expand();}else if(e.getKey()===e.ENTER){if(this.getValue()&&this.getValue()!==null){this.doQuery(this.getValue(),true);}else{this.doQuery('',true);}}else if(e.getKey()===e.ESC){this.collapse();}},beforequery:function(qe){delete qe.combo.lastQuery;}},onLoad:function(){if(!this.hasFocus){return;}
if(this.store.getCount()>0||this.listEmptyText){this.expand();this.restrictHeight();if(this.lastQuery==this.allQuery){if(this.editable){}
if(this.autoSelect!==false&&!this.selectByValue(this.value,true)){this.select(0,true);}}else{if(this.autoSelect!==false){this.selectNext();}
if(this.typeAhead&&this.lastKey!=Ext.EventObject.BACKSPACE&&this.lastKey!=Ext.EventObject.DELETE){this.taTask.delay(this.typeAheadDelay);}}}else{this.collapse();}},getParams:function(query){return[query,this.getTaxonId()];},initComponent:function(){var geneTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#ECF4FF" class="x-combo-list-item" '+'ext:qtip="{name}: {description} ({taxonName})"><b>{name}</b>: {description} <span style="color:grey">({taxonName})</span></div>');var goGroupTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#E3FBE9" class="x-combo-list-item" '+'ext:qtip="{name}: {description} ({size}) ({taxonName})"><b>{name}</b>: {description} ({size}) <span style="color:grey">({taxonName})</span></div>');var phenotypeGroupTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#E3FBE9" class="x-combo-list-item" '+'ext:qtip="{name}: {description} ({size}) ({taxonName})"><b>{name}</b>: {description} ({size}) <span style="color:grey">({taxonName})</span></div>');var freeTxtTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#FFFFE3" class="x-combo-list-item" '+'ext:qtip="{name}: {description} ({size}) ({taxonName})"><b>{name}</b>: {description} ({size}) <span style="color:grey">({taxonName})</span></div>');var modifiedSessionTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#FFFFFF" class="x-combo-list-item" '+'ext:qtip="{name}: {description} ({size}) ({taxonName})"><b>{name}</b>: <span style="color:red">Unsaved</span> {description} ({size}) <span style="color:grey">({taxonName})</span></div>');var userOwnedDbGeneSetTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#FFECEC" class="x-combo-list-item" '+'ext:qtip="{name}: {description} ({size}) ({taxonName})"><b>{name}</b>: {description} ({size}) <span style="color:grey">({taxonName})</span></div>');var dbGeneSetTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#EBE3F6" class="x-combo-list-item" '+'ext:qtip="{name}: {description} ({size}) ({taxonName})"><b>{name}</b>: {description} ({size}) <span style="color:grey">({taxonName})</span></div>');var sessionGeneSetTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#EBE3F6" class="x-combo-list-item" '+'ext:qtip="{name}: {description} ({size}) ({taxonName})"><b>{name}</b>: {description} ({size}) <span style="color:grey">({taxonName})</span></div>');var defaultTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#EBE3F6" class="x-combo-list-item" '+'ext:qtip="{name}: {description} ({size}) ({taxonName})"><b>{name}</b>: {description} ({size}) <span style="color:grey">({taxonName})</span></div>');Ext.apply(this,{tpl:new Ext.XTemplate('<tpl for=".">'+'{[ this.renderItem(values) ]}'+'</tpl>',{renderItem:function(values){if(values.resultValueObject instanceof DatabaseBackedGeneSetValueObject){if(values.userOwned){return userOwnedDbGeneSetTpl.apply(values);}else{return dbGeneSetTpl.apply(values);}}else if(values.resultValueObject instanceof GOGroupValueObject){return goGroupTpl.apply(values);}else if(values.resultValueObject instanceof PhenotypeGroupValueObject){return phenotypeGroupTpl.apply(values);}else if(values.resultValueObject instanceof FreeTextGeneResultsValueObject){return freeTxtTpl.apply(values);}else if(values.resultValueObject instanceof SessionBoundGeneSetValueObject){if(values.resultValueObject.modified){return modifiedSessionTpl.apply(values);}else{return sessionGeneSetTpl.apply(values);}}else if(values.resultValueObject instanceof GeneValueObject){return geneTpl.apply(values);}
return defaultTpl.apply(values);}}),store:{reader:new Ext.data.ListRangeReader({},Gemma.GeneAndGeneGroupComboRecord),proxy:new Ext.data.DWRProxy(GenePickerController.searchGenesAndGeneGroups),autoLoad:false}});Gemma.GeneAndGeneGroupCombo.superclass.initComponent.call(this);this.on('select',this.setGeneGroup,this);this.on('keypress',function(textfield,eventObj){this.displayingComboValueToQueryMatch=false;});this.getStore().on('load',function(store,records,options){var query=(options.params)?options.params[0]:null;if(this.getValue()!==query){store.removeAll();if(this.prevQuery===this.getValue()){store.add(this.prevRecords);}
if(!this.displayingComboValueToQueryMatch){this.innerList.update(this.loadingText?''+this.loadingText+'':'');this.restrictHeight();this.selectedIndex=-1;}}else{this.displayingComboValueToQueryMatch=true;this.prevRecords=this.store.getRange();this.prevQuery=(options.params)?options.params[0]:null;if(this.store.getCount()===0&&(this.prevQuery===''||this.prevQuery===null)){this.innerList.update(this.listEmptyTextBlankQuery?''+this.listEmptyTextBlankQuery+'':'');}}},this);this.on('focus',function(field){if(this.getValue()===''){this.doQuery('',true);this.lastQuery=null;}},this);},reset:function(){Gemma.GeneAndGeneGroupCombo.superclass.reset.call(this);delete this.selectedGeneGroup;this.lastQuery=null;if(this.tooltip){this.tooltip.destroy();}},getGeneGroup:function(){if(this.getRawValue()===''){return null;}
return this.selectedGeneGroup;},getGeneIds:function(){if(this.selectedGeneGroup){return this.selectedGeneGroup.memberIds;}
return[];},setGeneGroup:function(combo,geneGroup,index){this.selectedGeneGroup=geneGroup.data;this.lastQuery=null;},getTaxonId:function(){return this.taxonId;},setTaxonId:function(taxonId){if(!taxonId){return;}
if(!this.taxonId||this.taxonId!==taxonId){this.taxonId=taxonId;this.lastQuery=null;}}});Ext.namespace('Gemma');Gemma.GeneGroupEditToolbar=Ext.extend(Ext.Toolbar,{getCurrentSetGeneIds:function(){return this.getCurrentSet().get("geneIds");},getCurrentSet:function(){var sm=this.ownerCt.getSelectionModel();return sm.getSelected();},getCurrentSetId:function(){return this.getCurrentSet().get("id");},getNewDetails:function(){if(!this.detailsWin){this.detailsWin=new Gemma.CreateSetDetailsWindow({store:this.ownerCt.getStore()});}
this.detailsWin.purgeListeners();this.detailsWin.on("commit",function(args){var constr=this.ownerCt.getStore().record;var newRec=new constr({name:args.name,description:args.description,taxonId:args.taxon.data.id,taxonName:args.taxon.data.commonName,publik:args.publik,currentUserHasWritePermission:true,geneIds:[],size:0});newRec.markDirty();this.ownerCt.getStore().add(newRec);this.ownerCt.getSelectionModel().selectRecords([newRec]);this.ownerCt.getView().focusRow(this.ownerCt.getStore().indexOf(newRec));this.commitBut.enable();this.deleteBut.enable();this.cloneBut.disable();this.resetBut.disable();},this);this.detailsWin.name='';this.detailsWin.description='';this.detailsWin.show();},afterRender:function(){Gemma.GeneGroupEditToolbar.superclass.afterRender.call(this);this.addButton(this.newBut);this.addButton(this.commitBut);this.addButton(this.cloneBut);this.addButton(this.resetBut);this.addButton(this.deleteBut);this.addButton(this.publicOrPrivateBut);this.addFill();},initComponent:function(){Gemma.GeneGroupEditToolbar.superclass.initComponent.call(this);this.newBut=new Ext.Button({handler:this.initNew,scope:this,icon:"/Gemma/images/icons/add.png",disabled:false,tooltip:"Create a new set (click 'commit' when you are done)"});this.commitBut=new Ext.Button({handler:this.commit,disabled:true,scope:this,icon:"/Gemma/images/icons/database_save.png",tooltip:"Commit all changes to the database"});this.cloneBut=new Ext.Button({handler:this.copy,scope:this,disabled:true,icon:"/Gemma/images/icons/arrow_branch.png",tooltip:"Clone as a new set (click 'save' afterwards)"});this.resetBut=new Ext.Button({handler:this.reset,scope:this,disabled:true,icon:"/Gemma/images/icons/arrow_undo.png",tooltip:"Reset selected set to stored version"});this.deleteBut=new Ext.Button({handler:this.remove,scope:this,disabled:true,icon:"/Gemma/images/icons/database_delete.png",tooltip:"Delete selected set"});this.publicOrPrivateBut=new Ext.Button({tooltip:"Show/hide public data",enableToggle:true,icon:"/Gemma/images/icons/world_add.png",handler:this.refreshData,pressed:true,scope:this});},onRender:function(ct,position){Gemma.GeneGroupEditToolbar.superclass.onRender.apply(this,arguments);this.ownerCt.on('rowselect',function(selector,rowindex,record){if(!record.phantom){this.cloneBut.enable();}
if(record.get('currentUserHasWritePermission')){this.deleteBut.enable();if(record.isModified()){this.resetBut.enable();this.commitBut.enable();}}else{this.deleteBut.disable();this.commitBut.disable();this.resetBut.disable();}},this);this.ownerCt.getStore().on('update',function(store,record,operation){if(this.getCurrentSet&&this.getCurrentSet()&&this.getCurrentSet().dirty){this.cloneBut.enable();this.resetBut.enable();this.commitBut.enable();}},this);this.ownerCt.on('afteredit',function(e){this.resetBut.enable();this.commitBut.enable();},this);this.ownerCt.getStore().on('write',function(store,action,data,records,options){this.ownerCt.loadMask.hide();this.commitBut.disable();},this);this.ownerCt.getStore().on('exception',function(proxy,type,action,options,response,arg){this.ownerCt.loadMask.hide();},this);},initNew:function(){this.getNewDetails();},remove:function(){var rec=this.getCurrentSet();if(rec){Ext.Msg.confirm(Gemma.HelpText.CommonWarnings.Deletion.title,String.format(Gemma.HelpText.CommonWarnings.Deletion.text,"set"),function(but){if(but==='no'){return;}
this.ownerCt.loadMask.show();if(rec.phantom){this.ownerCt.getStore().remove(rec);this.ownerCt.getStore().clearSelected();this.resetBut.disable();this.deleteBut.disable();this.commitBut.disable();this.ownerCt.loadMask.hide();}else{var callback=function(data){if(data){this.ownerCt.getStore().remove(rec);this.ownerCt.getStore().clearSelected();this.resetBut.disable();this.deleteBut.disable();this.commitBut.disable();this.ownerCt.loadMask.hide();}}.createDelegate(this);GeneSetController.remove([rec.data],callback);}
this.fireEvent("delete-set",rec);},this);}},clearFilter:function(){this.ownerCt.getStore().clearFilter();},refreshData:function(){var showPrivateOnly=!this.publicOrPrivateBut.pressed;if(this.ownerCt.getStore().getModifiedRecords().length>0){Ext.Msg.show({title:'Are you sure?',msg:'You have unsaved changes which will be lost if you change modes.',buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn==='yes'){this.ownerCt.getStore().load({params:[showPrivateOnly,null]});}},scope:this});}else{this.ownerCt.getStore().load({params:[showPrivateOnly,null]});}},commit:function(){this.ownerCt.loadMask.show();var recordsToSave=this.ownerCt.getStore().getModifiedRecords();var i,rec;for(i=0;recordsToSave.length>i;i++){rec=recordsToSave[i];if(!rec.get("geneIds")||rec.get("geneIds").length===0){Ext.Msg.show({title:'Cannot save '+rec.get("name"),msg:'You cannot save an empty set. No changes have been saved.'+' Add genes to set "'+rec.get("name")+'" or delete it.',buttons:Ext.Msg.OK,icon:Ext.MessageBox.WARNING});this.ownerCt.loadMask.hide();return;}}
this.ownerCt.getStore().save();},copy:function(){var rec=this.getCurrentSet();var constr=this.ownerCt.getStore().record;var newRec=new constr({name:"Copy of "+rec.get("name"),description:rec.get("description"),size:rec.get("size"),geneIds:rec.get("geneIds"),currentUserHasWritePermission:true});this.ownerCt.getStore().add(newRec);this.ownerCt.getSelectionModel().selectRecords([newRec]);this.ownerCt.getView().focusRow(this.ownerCt.getStore().indexOf(newRec));this.deleteBut.enable();this.commitBut.enable();this.resetBut.disable();this.cloneBut.disable();},reset:function(){if(this.getCurrentSet()){this.getCurrentSet().reject();this.resetBut.disable();this.commitBut.disable();this.cloneBut.enable();this.ownerCt.getSelectionModel().fireEvent("rowselect",this.ownerCt.getSelectionModel(),this.ownerCt.getStore().indexOf(this.getCurrentSet()),this.getCurrentSet());}}});Ext.namespace('Gemma');Gemma.MAX_GENES_PER_PASTE=1000;Gemma.GeneGrid=Ext.extend(Ext.grid.GridPanel,{collapsible:false,autoWidth:true,stateful:false,frame:true,title:"Genes",layout:'fit',width:400,height:250,viewConfig:{forceFit:true,emptyText:"Multiple genes can be listed here"},autoScroll:true,columns:[{header:'Symbol',toolTip:'Gene symbol',dataIndex:'officialSymbol',width:75,sortable:true,renderer:function(value,metadata,record,row,col,ds){return String.format("<a target='_blank' href='/Gemma/gene/showGene.html?id={0}'>{1}</a> ",record.data.id,record.data.officialSymbol);}},{id:'desc',toolTip:'Gene name',header:'Name',dataIndex:'officialName'}],autoExpandColumn:'desc',loadGenes:function(geneIds,callback,args){if(!geneIds||geneIds.length===0){return;}
GenePickerController.getGenes(geneIds,function(genes){var geneData=[];for(var i=0;i<genes.length;++i){geneData.push([genes[i].id,genes[i].taxonScientificName,genes[i].officialSymbol,genes[i].officialName]);}
this.getStore().loadData(geneData);if(callback){callback(args);}}.createDelegate(this));},addGeneValueObjects:function(gvos){if(!gvos||gvos.length===0){return;}
if(this.getEl()){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.genes,msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});this.loadMask.show();}
var geneData=[];for(var i=0;i<gvos.length;++i){geneData.push([gvos[i].id,gvos[i].taxonScientificName,gvos[i].officialSymbol,gvos[i].officialName]);}
this.getStore().loadData(geneData);},initComponent:function(){Ext.apply(this,{tbar:new Gemma.GeneChooserToolBar({geneGrid:this,extraButtons:this.extraButtons,style:"border: #a3bad9 solid 1px;"}),store:new Ext.data.SimpleStore({fields:[{name:'id',type:'int'},{name:'taxon'},{name:'officialSymbol',type:'string'},{name:'officialName',type:'string'}],sortInfo:{field:'officialSymbol',direction:'ASC'}})});Gemma.GeneGrid.superclass.initComponent.call(this);this.addEvents('addgenes','removegenes');this.getTopToolbar().geneCombo.on("select",function(){this.fireEvent("addgenes");},this);this.getStore().on("remove",function(){this.fireEvent("removegenes");},this);this.getStore().on("add",function(){this.fireEvent("addgenes");},this);this.on("keypress",function(e){if(!this.getTopToolbar().disabled&&e.getCharCode()===Ext.EventObject.DELETE){this.removeGene();}},this);this.relayEvents(this.getTopToolbar(),['ready','taxonchanged']);if(this.genes){var genes=this.genes instanceof Array?this.genes:this.genes.split(",");this.loadGenes(genes);}},removeGene:function(){var selected=this.getSelectionModel().getSelections();for(var i=0;i<selected.length;++i){this.getStore().remove(selected[i]);}
this.getSelectionModel().selectLastRow();},removeAllGenes:function(){this.getStore().removeAll();},record:Ext.data.Record.create([{name:'id',type:'int'},{name:'taxon'},{name:'officialSymbol',type:'string'},{name:'officialName',type:'string'}]),addGene:function(gene){if(!gene){return;}
if(this.getStore().find("id",gene.id)<0){var Constructor=this.record;var record=new Constructor(gene);this.getStore().add([record]);}},getGenesFromList:function(e,taxon){if(!taxon){Ext.Msg.alert(Gemma.HelpText.CommonErrors.MissingInput.title,Gemma.HelpText.CommonErrors.MissingInput.text);return;}
var loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.genes});loadMask.show();var taxonId=taxon.id;var text=e.geneNames;GenePickerController.searchMultipleGenes(text,taxonId,{callback:function(genes){var geneData=[];var warned=false;for(var i=0;i<genes.length;++i){if(i>=Gemma.MAX_GENES_PER_QUERY){if(!warned){Ext.Msg.alert("Too many genes","You can only search up to "+
Gemma.MAX_GENES_PER_QUERY+" genes, some of your selections will be ignored.");warned=true;}
break;}
if(this.getStore().find("id",genes[i].id)<0){geneData.push([genes[i].id,genes[i].taxonScientificName,genes[i].officialSymbol,genes[i].officialName]);}}
this.getStore().loadData(geneData,true);loadMask.hide();}.createDelegate(this),errorHandler:function(e){if(this.getEl&&this.getEl()){this.getEl().unmask();}
Ext.Msg.alert('There was an error',e);}});},getTaxonId:function(){return this.getTopToolbar().getTaxonId();},setGene:function(geneId,callback,args){this.getTopToolbar().setGene(geneId,callback,args);this.fireEvent("addgenes",[geneId]);},getGeneIds:function(){var ids=[];var all=this.getStore().getRange();for(var i=0;i<all.length;++i){ids.push(all[i].data.id);}
var gene=this.getTopToolbar().geneCombo.getGene();if(gene){for(var j=0;j<ids.length;++j){if(ids[j]===gene.id){return ids;}}
ids.push(gene.id);}
return ids;},taxonChanged:function(taxon){this.getTopToolbar().taxonChanged(taxon,true);},getGenes:function(){var genes=[];var all=this.getStore().getRange();for(var i=0;i<all.length;++i){genes.push(all[i].data);}
var gene=this.getTopToolbar().geneCombo.getGene();if(gene){for(var j=0;j<genes.length;++j){if(genes[j].id===gene.id){return genes;}}
genes.push(gene);}
return genes;}});Ext.reg('genechooser',Gemma.GeneGrid);Gemma.GeneChooserToolBar=Ext.extend(Ext.Toolbar,{name:"gctb",setGene:function(geneId,callback,args){GenePickerController.getGenes([geneId],function(genes){var g=genes[0];if(g){this.geneCombo.setGene(g);this.geneCombo.setValue(g.officialSymbol);this.getStore().removeAll();this.addButton.enable();}
if(callback){callback(args);}}.createDelegate(this));},getTaxonId:function(){if(this.taxonCombo){return this.taxonCombo.getValue();}else{return this.geneCombo.getTaxon().id;}},taxonChanged:function(taxon){if(!taxon||(this.geneCombo.getTaxon()&&this.geneCombo.getTaxon().id===taxon.id)){return;}
this.geneCombo.setTaxon(taxon);var all=this.getStore().getRange();for(var i=0;i<all.length;++i){if(all[i].get('taxonId')!==taxon.id){this.getStore().remove(all[i]);}}
this.taxonCombo.setTaxon(taxon);this.fireEvent("taxonchanged",taxon);},getTaxon:function(){return this.taxonCombo.getTaxon();},getGenesFromList:function(e){this.geneGrid.getGenesFromList(e,this.getTaxon());},getStore:function(){return this.geneGrid.getStore();},initComponent:function(){Gemma.GeneChooserToolBar.superclass.initComponent.call(this);this.taxonCombo=new Gemma.TaxonCombo({isDisplayTaxonWithGenes:true,listeners:{'select':{fn:function(cb,rec,index){this.taxonChanged(rec.data,false);}.createDelegate(this)}}});this.geneCombo=new Gemma.GeneCombo({emptyText:'Search for a gene',listeners:{'select':{fn:function(combo,rec,index){if(rec.get){this.taxonCombo.setTaxon(rec.get("taxonId"));}else{this.taxonCombo.setTaxon(rec.taxonId);}
this.addButton.enable();}.createDelegate(this)}}});this.addButton=new Ext.Toolbar.Button({icon:"/Gemma/images/icons/add.png",cls:"x-btn-icon",tooltip:"Add a gene to the list",disabled:true,handler:function(){this.geneGrid.addGene(this.geneCombo.getGene());this.geneCombo.reset();this.addButton.disable();}.createDelegate(this)});this.removeButton=new Ext.Toolbar.Button({icon:"/Gemma/images/icons/subtract.png",cls:"x-btn-icon",tooltip:"Remove the selected gene from the list",disabled:true,handler:function(){this.geneGrid.removeGene();}.createDelegate(this)});this.chooser=new Gemma.GeneImportPanel({listeners:{'commit':{fn:this.getGenesFromList.createDelegate(this),scope:this}}});this.multiButton=new Ext.Toolbar.Button({icon:"/Gemma/images/icons/page_white_put.png",cls:"x-btn-icon",tooltip:"Import multiple genes",disabled:false,handler:function(){if(!this.getTaxon()){Ext.Msg.alert(Gemma.HelpText.CommonErrors.MissingInput.title,Gemma.HelpText.CommonErrors.MissingInput.text);return;}
this.geneCombo.reset();this.addButton.enable();this.chooser.show();}.createDelegate(this,[],true)});this.geneGrid.getSelectionModel().on("selectionchange",function(model){var selected=model.getSelections();if(selected.length>0){this.removeButton.enable();}else{this.removeButton.disable();}}.createDelegate(this));this.relayEvents(this.taxonCombo,['ready']);},afterRender:function(c,l){Gemma.GeneChooserToolBar.superclass.afterRender.call(this,c,l);this.add(this.taxonCombo);this.addSpacer();this.add(this.geneCombo,this.addButton);this.addSpacer();this.add(this.removeButton);this.addSpacer();this.add(this.multiButton);if(this.extraButtons){for(var i=0;i<this.extraButtons.length;i++){this.addSpacer();this.add(this.extraButtons[i]);}}}});Gemma.GeneImportPanel=Ext.extend(Ext.Window,{title:"Import multiple genes (one symbol or NCBI id per line, up to "+Gemma.MAX_GENES_PER_PASTE+")",modal:true,layout:'fit',stateful:false,autoHeight:false,width:350,height:300,closeAction:'hide',easing:3,showTaxonCombo:false,onCommit:function(){if(this.showTaxonCombo&&(typeof this._taxonCombo.getTaxon()==='undefined'||isNaN(this._taxonCombo.getTaxon().id))){this._taxonCombo.markInvalid("This field is required");return;}
this.hide();var geneList=this._geneText.getValue();if(geneList.length>0){this.fireEvent("commit",{geneNames:geneList});}},initComponent:function(){this.addEvents({"commit":true});if(this.showTaxonCombo){Ext.apply(this,{layout:'form',width:420,height:400,padding:10,items:[{xtype:'taxonCombo',ref:'_taxonCombo',emptyText:'Select a taxon (required)',fieldLabel:'Select a taxon',width:250,msgTarget:'side',isDisplayTaxonWithGenes:true},{xtype:'textarea',ref:'_geneText',fieldLabel:String.format(Gemma.HelpText.WidgetDefaults.GeneImportPanel.instructions,Gemma.MAX_GENES_PER_QUERY),width:250,height:290}]});}else{Ext.apply(this,{items:[{id:'gene-list-text',xtype:'textarea',ref:'_geneText',fieldLabel:String.format(Gemma.HelpText.WidgetDefaults.GeneImportPanel.instructions,Gemma.MAX_GENES_PER_QUERY),width:290,height:290}]});}
Ext.apply(this,{buttons:[{text:'OK',handler:this.onCommit,scope:this},{text:'Clear',scope:this,handler:function(){this._geneText.setValue("");}},{text:'Cancel',handler:function(){this.hide();}.createDelegate(this),scope:this}]});Gemma.GeneImportPanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.GeneGOGrid=Ext.extend(Gemma.GemmaGridPanel,{deferLoadToRender:false,viewConfig:{forceFit:true},record:Ext.data.Record.create([{name:"id",type:"int"},{name:"termUri"},{name:"termName"},{name:"evidenceCode"}]),golink:function(d){var g=d.replace("_",":");return"<a target='_blank' href='http://amigo.geneontology.org/cgi-bin/amigo/go.cgi?view=details&query="
+g+"'>"+g+"</a>";},initComponent:function(){Ext.apply(this,{columns:[{header:"ID",dataIndex:"termUri",renderer:this.golink},{header:"Term",dataIndex:"termName"},{header:"Evidence Code",dataIndex:"evidenceCode",renderer:function(value,metaData,record,rowIndex,colIndex,store){return Gemma.EvidenceCodeInfo[record.get('evidenceCode')].name;}}],store:new Ext.data.Store({proxy:new Ext.data.DWRProxy(GeneController.findGOTerms),reader:new Ext.data.ListRangeReader({id:"id"},this.record),remoteSort:false})});Gemma.GeneGOGrid.superclass.initComponent.call(this);this.getStore().setDefaultSort('termUri');if(!this.deferLoadToRender){this.getStore().load({params:[this.geneid]});}else{this.on('render',function(){this.getStore().load({params:[this.geneid]});});}}});Ext.reg('genegogrid',Gemma.GeneGOGrid);Ext.namespace('Gemma');Gemma.GeneGroupCombo=Ext.extend(Ext.form.ComboBox,{name:'geneGroupcombo',displayField:'name',valueField:'id',width:160,listWidth:450,prepopulate:true,loadingText:Gemma.StatusText.Searching.generic,emptyText:"Choose or search for groups",minChars:1,selectOnFocus:true,mode:'remote',queryDelay:800,initComponent:function(){var template=new Ext.XTemplate('<tpl for="."><div style="font-size:11px" class="x-combo-list-item" ext:qtip="{name} ({size})"> {name} - {description} ({size})</div></tpl>');Ext.apply(this,{tpl:template,store:new Gemma.GeneGroupStore({proxy:new Ext.data.DWRProxy(GeneSetController.findGeneSetsByName),autoLoad:false})});Gemma.GeneGroupCombo.superclass.initComponent.call(this);this.on('select',this.setGeneGroup,this);if(this.prepopulate){this.on('focus',function(){GeneSetController.getUsersGeneGroups(false,this.taxon.id,function(records){this.store.loadData(records);}.createDelegate(this));}.createDelegate(this),this,{scope:this,single:true});}},reset:function(){Gemma.GeneGroupCombo.superclass.reset.call(this);delete this.selectedGeneGroup;this.lastQuery=null;if(this.tooltip){this.tooltip.destroy();}},getParams:function(query){return[query,this.taxon?this.taxon.id:1];},getGeneGroup:function(){if(this.getRawValue()===''){return null;}
return this.selectedGeneGroup;},setGeneGroup:function(combo,geneGroup,index){this.selectedGeneGroup=geneGroup.data;this.tooltip=new Ext.ToolTip({target:this.getEl(),html:String.format('{0} ({1})',this.selectedGeneGroup.name,this.selectedGeneGroup.description)});this.lastQuery=null;},getTaxon:function(){return this.taxon;},setTaxon:function(taxon){if(!this.taxon||this.taxon.id!==taxon.id){this.taxon=taxon;this.reset();this.lastQuery=null;}}});Ext.namespace('Gemma');Gemma.GeneSearchAndPreview=Ext.extend(Ext.Panel,{listModified:false,getSelectedGeneOrGeneSetValueObject:function(){return(this.selectedGeneOrGroup)?this.selectedGeneOrGroup.resultValueObject:null;},setSelectedGeneSetValueObject:function(gsvo){this.selectedGeneSetValueObject=gsvo;this.isGeneSet=true;this.isGene=false;},getSelectedGeneSetValueObject:function(){return this.selectedGeneSetValueObject;},resetGenePreview:function(){this.preview.resetPreview();},showGenePreview:function(){this.preview.showPreview();},collapsePreview:function(){this.preview.collapsePreview();},maskGenePreview:function(){if(!this.loadMask&&this.getEl()){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.genes});}
if(this.loadMask){this.loadMask.show();}},showTaxonCombo:true,loadGeneOrGroup:function(record,query){this.selectedGeneOrGroup=record.data;if(this.selectedGeneOrGroup.resultValueObject instanceof GeneSetValueObject){this.setSelectedGeneSetValueObject(this.selectedGeneOrGroup.resultValueObject);this.isGeneSet=true;this.isGene=false;}else if(this.selectedGeneOrGroup.resultValueObject instanceof GeneValueObject){this.isGene=true;this.isGeneSet=false;}
var id=record.get("resultValueObject").id;var size=record.get("size");var name=record.get("name");var taxonId=this.searchForm.getTaxonId();if(id===null){var queryToGetSelected="";if(this.isGeneSet&&this.selectedGeneSetValueObject instanceof GOGroupValueObject&&this.name.match(/^GO_\d+/)){queryToGetSelected="taxon:"+taxonId+";GO:"+name;}else if(this.isGeneSet&&this.selectedGeneSetValueObject instanceof FreeTextGeneResultsValueObject&&name.indexOf(query)!=-1){queryToGetSelected="taxon:"+taxonId+";query:"+query;}
this.queryUsedToGetSessionGroup=queryToGetSelected;}
var geneIds=[];if(this.isGeneSet){this.preview.setTaxonId(taxonId);this.preview.loadGenePreviewFromGeneSet(this.getSelectedGeneSetValueObject());}
else{this.selectedGeneOrGroup.memberIds=[id];this.geneIds=[id];this.searchForm.geneGroupId=null;this.resetGenePreview();this.preview.setTaxonId(taxonId);this.preview.loadGenePreviewFromGenes([this.selectedGeneOrGroup.resultValueObject]);}},loadGenes:function(ids,taxonId){this.preview.mask();this.geneIds=ids;this.searchForm.geneIds=ids;this.preview.setTaxonId(this.taxonId);this.preview.loadGenePreviewFromIds(ids);this.preview.on('previewLoaded',function(genes){var geneSet=this.makeSessionBoundGeneSet(ids,taxonId,'Backup GO group','GO database unavailable, using backup list');this.fireEvent('previewLoaded',geneSet);},this);},makeSessionBoundGeneSet:function(geneIds,taxonId,name,description){this.searchForm.geneIds=geneIds;this.geneIds=geneIds;var newGeneSet=new SessionBoundGeneSetValueObject();newGeneSet.modified=false;newGeneSet.geneIds=geneIds;newGeneSet.taxonId=taxonId;newGeneSet.name=name;newGeneSet.description=description,newGeneSet.size=geneIds.length;newGeneSet.id=null;this.selectedGeneOrGroup=newGeneSet;this.selectedGeneOrGroup.memberIds=geneIds;this.selectedGeneOrGroup.resultValueObject=newGeneSet;return newGeneSet;},getGenesFromList:function(e,taxonId){var taxonName;if(!taxonId&&this.searchForm.getTaxonId()){taxonId=this.searchForm.getTaxonId();taxonName=this.searchForm.getTaxonName();}else{taxonId=this.symbolList._taxonCombo.getTaxon().id;taxonName=this.symbolList._taxonCombo.getTaxon().data.commonName;}
if(isNaN(taxonId)){Ext.Msg.alert(Gemma.HelpText.CommonErrors.MissingInput.title,Gemma.HelpText.CommonErrors.MissingInput.taxon);return;}
this.searchForm.taxonChanged(taxonId,taxonName);this.geneCombo.disable().hide();this.helpBtn.hide();this.symbolListButton.hide();this.fireEvent('madeFirstSelection');this.doLayout();var loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.genes});loadMask.show();var text=e.geneNames;GenePickerController.searchMultipleGenesGetMap(text,taxonId,{callback:function(queryToGenes){var i;var geneData=[];var warned=false;this.maskGenePreview();var geneIds=[];var queriesWithMoreThanOneResult=[];var queriesWithNoResults=[];var query;var allGenes=[];for(query in queryToGenes){var genes=queryToGenes[query];if(genes.length>1){queriesWithMoreThanOneResult.push(query);}
if(genes.length===0){queriesWithNoResults.push(query);}
for(i=0;i<genes.length;i++){geneIds.push(genes[i].id);allGenes.push(genes[i]);}}
this.searchForm.geneIds=geneIds;this.geneIds=geneIds;this.makeSessionBoundGeneSet(geneIds,taxonId,'From Symbol List','Group made from gene symbols entered.');var msgMany="";var msgNone="";if(queriesWithMoreThanOneResult.length>0){msgMany=queriesWithMoreThanOneResult.length+
((queriesWithMoreThanOneResult.length===1)?" query":" queries")+"  returned more than one gene, all were added to the results: <br>";query='';for(i=0;i<queriesWithMoreThanOneResult.length;i++){query=queriesWithMoreThanOneResult[i];msgMany+="<br> - <b>"+query+"</b> matched: ";genes=queryToGenes[query];for(var j=0;j<genes.length&&j<10;j++){msgMany+=genes[j].officialSymbol;msgMany+=(j+1<genes.length)?", ":".";}
if(genes.length>10){msgMany+="...("+genes.length-20+" more)";}}
msgMany+='<br><br><br>';}
if(queriesWithNoResults.length>0){msgNone=queriesWithNoResults.length+
((queriesWithNoResults.length===1)?" query":" queries")+" did not match any genes in Gemma:<br><br>";query='';for(i=0;i<queriesWithNoResults.length;i++){query=queriesWithNoResults[i];msgNone+=" - "+query+"<br>";}}
this.resetGenePreview();this.preview.setTaxonId(taxonId);this.preview.loadGenePreviewFromGenes(allGenes);if(queriesWithMoreThanOneResult.length>0||queriesWithNoResults.length>0){this.preview.insertMessage(String.format(Gemma.HelpText.WidgetDefaults.GeneSearchAndPreview.inexactFromList,msgMany,msgNone));}
this.preview.show();loadMask.hide();}.createDelegate(this),errorHandler:function(e){this.getEl().unmask();Ext.Msg.alert('There was an error',e);}});this.fireEvent('select');},getGenesFromUrl:function(){var urlparams=Ext.urlDecode(location.search.substring(1));if(isNaN(urlparams.taxon)){Ext.Msg.alert(Gemma.HelpText.CommonErrors.MissingInput.title,Gemma.HelpText.CommonErrors.MissingInput.taxon);return;}
this.geneCombo.disable().hide();this.helpBtn.hide();this.symbolListButton.hide();this.fireEvent('madeFirstSelection');this.doLayout();var loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.genes});loadMask.show();var splitTextArray=urlparams.geneList.split(",");var geneList="";var j;for(j=0;j<splitTextArray.length;j++){splitTextArray[j]=splitTextArray[j].replace(/^\s+|\s+$/g,'');if(splitTextArray[j].length<2)continue;geneList=geneList+splitTextArray[j]+"\n";}
GenePickerController.searchMultipleGenesGetMap(geneList,urlparams.taxon,{callback:function(queryToGenes){var i;var geneData=[];var warned=false;this.maskGenePreview();var geneIds=[];var queriesWithNoResults=[];var query;var allGenes=[];for(query in queryToGenes){var genes=queryToGenes[query];if(genes.length>1){queriesWithMoreThanOneResult.push(query);}
if(genes.length===0){queriesWithNoResults.push(query);}
for(i=0;i<genes.length;i++){geneIds.push(genes[i].id);allGenes.push(genes[i]);}}
this.searchForm.geneIds=geneIds;this.geneIds=geneIds;this.makeSessionBoundGeneSet(geneIds,urlparams.taxon,'From URL','Group made from gene symbols in URL.');var msgMany="";var msgNone="";if(queriesWithNoResults.length>0){msgNone=queriesWithNoResults.length+
((queriesWithNoResults.length===1)?" query":" queries")+" did not match any genes in Gemma:<br><br>";query='';for(i=0;i<queriesWithNoResults.length;i++){query=queriesWithNoResults[i];msgNone+=" - "+query+"<br>";}}
this.resetGenePreview();this.preview.setTaxonId(urlparams.taxon);this.preview.loadGenePreviewFromGenes(allGenes);if(queriesWithNoResults.length>0){this.preview.insertMessage(String.format(Gemma.HelpText.WidgetDefaults.GeneSearchAndPreview.inexactFromList,msgMany,msgNone));}
this.preview.show();loadMask.hide();this.fireEvent('geneListUrlSelectionComplete');}.createDelegate(this),errorHandler:function(e){Ext.Msg.alert('There was an error',e);}});this.fireEvent('select');},getGenesFromGeneValueObjects:function(genesToPreview,geneIds,taxonId,taxonName){this.searchForm.geneIds=geneIds;this.geneIds=geneIds;var newGeneSet=new SessionBoundGeneSetValueObject();newGeneSet.modified=false;newGeneSet.geneIds=geneIds;newGeneSet.taxonId=taxonId;newGeneSet.name='From Symbol List';newGeneSet.description='Group made from gene symbols entered.';newGeneSet.size=geneIds.length;newGeneSet.id=null;this.selectedGeneOrGroup=newGeneSet;this.selectedGeneOrGroup.memberIds=geneIds;this.selectedGeneOrGroup.resultValueObject=newGeneSet;this.searchForm.taxonChanged(taxonId,taxonName);this.geneCombo.disable().hide();this.helpBtn.hide();this.symbolListButton.hide();this.fireEvent('madeFirstSelection');this.doLayout();this.preview.setTaxonId(taxonId);this.preview.loadGenePreviewFromGenes(genesToPreview);this.preview.show();this.fireEvent('select');},createGeneImportPanel:function(){return new Gemma.GeneImportPanel({height:300,showTaxonCombo:this.showTaxonCombo,listeners:{'commit':{fn:this.getGenesFromList.createDelegate(this),scope:this},'show':{fn:function(){if(this.showTaxonCombo&&this.searchForm.getTaxonId()!==null&&this.searchForm.getTaxonId()&&typeof this.searchForm.getTaxonId()!=='undefined'){this.symbolList._taxonCombo.setTaxonById(this.searchForm.getTaxonId());this.symbolList._taxonCombo.disable();}},scope:this}}});},initComponent:function(){this.newBoxTriggered=false;this.geneCombo=new Gemma.GeneAndGeneGroupCombo({width:282,hideTrigger:true,taxonId:this.taxonId,emptyText:'Find genes by keyword'});this.geneCombo.on('select',function(combo,record,index){this.searchForm.taxonChanged(record.get("taxonId"),record.get("taxonName"));var query=combo.store.baseParams.query;this.loadGeneOrGroup(record,query);this.preview.showPreview();this.preview.show();this.preview.setTaxonId(record.get("taxonId"));if(combo.startValue===''&&this.newBoxTriggered===false){this.fireEvent('madeFirstSelection');this.newBoxTriggered=true;this.helpBtn.hide();this.symbolListButton.hide();}
combo.disable().hide();this.helpBtn.hide();this.symbolListButton.hide();this.doLayout();this.fireEvent('geneSelected');},this);this.relayEvents(this.geneCombo,['select']);this.symbolListButton=new Ext.Button({icon:"/Gemma/images/icons/page_upload.png",cls:"x-btn-icon",tooltip:Gemma.HelpText.WidgetDefaults.GeneSearchAndPreview.symbolListButtonInstructions,disabled:false,style:'padding-right:5px',handler:function(){this.geneCombo.reset();this.symbolList=this.createGeneImportPanel();this.symbolList.show();}.createDelegate(this,[],true)});this.preview=new Gemma.GeneSetPreview();this.preview.on('geneListModified',function(newSets){var i;for(i=0;i<newSets.length;i++){if(typeof newSets[i].geneIds!=='undefined'&&typeof newSets[i].name!=='undefined'){this.selectedGeneOrGroup.resultValueObject=newSets[i];this.setSelectedGeneSetValueObject(newSets[i]);}}
this.fireEvent('geneSelected');},this);this.preview.on('maskParentContainer',function(){this.searchForm.getEl().mask();},this);this.preview.on('unmaskParentContainer',function(){this.searchForm.getEl().unmask();},this);this.preview.on('removeMe',function(){this.fireEvent('removeGene');},this);this.helpBtn=new Gemma.InlineHelpIcon({tooltipText:Gemma.HelpText.WidgetDefaults.GeneSearchAndPreview.instructions});Ext.apply(this,{width:335,frame:false,border:false,hideBorders:true,items:[{layout:'hbox',hideBorders:true,items:[this.symbolListButton,this.geneCombo,this.helpBtn]},this.preview]});this.addEvents('geneListUrlSelectionComplete');Gemma.GeneSearchAndPreview.superclass.initComponent.call(this);}});Ext.reg('geneSearchAndPreview',Gemma.GeneSearchAndPreview);Ext.namespace('Gemma');Gemma.MAX_GENES_PER_QUERY=1000;Gemma.GeneMembersGrid=Ext.extend(Ext.grid.GridPanel,{collapsible:false,autoWidth:true,stateful:false,frame:true,layout:'fit',stripeRows:true,changeMade:false,loggedId:null,extraButtons:[],columnSet:"reduced",allowSaveToSession:true,viewConfig:{forceFit:true,emptyText:"Multiple genes can be listed here"},autoScroll:true,autoExpandColumn:'desc',showRemoveColumn:function(){this.getColumnModel().setHidden(this.getColumnModel().getIndexById("remove"),false);},getFullColumnModel:function(){this.getColumnModel().setHidden(this.getColumnModel().getIndexById("taxon"),false);this.getColumnModel().setHidden(this.getColumnModel().getIndexById("inList"),false);},setSelectedGeneSetValueObject:function(data){this.selectedGeneSetValueObject=data;},getSelectedGeneSetValueObject:function(){return this.selectedGeneSetValueObject;},loadSetValueObject:function(gsvo,callback,args){this.loadGeneSetValueObject(gsvo,callback,args);},loadGeneSetValueObject:function(gsvo,callback,args){this.setTitle("Edit your gene selection, from group: \""+gsvo.name+"\"");this.setSelectedGeneSetValueObject(gsvo);this.loadGenes(gsvo.geneIds,callback,args);},loadEntities:function(geneIds,callback,args){this.loadGenes(geneIds,callback,args);},loadGenes:function(geneIds,callback,args){if(!geneIds||geneIds.length===0){return;}
if(this.getEl()){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.genes,msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});this.loadMask.show();}
GenePickerController.getGenes(geneIds,function(genes){if(this.loadMask){this.loadMask.hide();}
var geneData=[];var i=0;var taxonId=(genes[0])?genes[0].taxonId:-1;for(i=0;i<genes.length;i++){geneData.push([genes[i].id,genes[i].taxonScientificName,genes[i].officialSymbol,genes[i].officialName]);if(taxonId!=genes[i].taxonId){var taxonId=-1;}}
if(taxonId!=-1){this.setTaxonId(taxonId);}
this.getStore().loadData(geneData);if(callback){callback(args);}
this.fireEvent('genesLoaded');}.createDelegate(this));},addGenes:function(searchResultValObj){if(!searchResultValObj){return;}
var geneIdsToAdd=[];geneIdsToAdd=searchResultValObj.memberIds;if(!geneIdsToAdd||geneIdsToAdd===null||geneIdsToAdd.length===0){return;}
GenePickerController.getGenes(geneIdsToAdd,function(genes){for(var j=0;j<genes.size();j++){if(this.getStore().find("id",genes[j].id)<0){var Constructor=this.store.recordType;var record=new Constructor(genes[j]);this.getStore().add([record]);}}}.createDelegate(this));},setTaxonId:function(taxonId){this.taxonId=taxonId;if(this.getTopToolbar()){Ext.apply(this.getTopToolbar().geneCombo,{taxonId:taxonId});}},initComponent:function(){Ext.apply(this,{store:new Ext.data.SimpleStore({fields:[{name:'id',type:'int'},{name:'taxon'},{name:'officialSymbol',type:'string'},{name:'officialName',type:'string'},{name:'inList',type:'boolean',defaultValue:true}],sortInfo:{field:'officialSymbol',direction:'ASC'}}),colModel:new Ext.grid.ColumnModel({defaults:{sortable:true},columns:[{header:'Symbol',toolTip:'Gene symbol',dataIndex:'officialSymbol',width:75,renderer:function(value,metadata,record,row,col,ds){return String.format("<a target='_blank' href='/Gemma/gene/showGene.html?id={0}'>{1}</a><br>"+"<span style='font-color:grey; white-space:normal !important;'>{2}</span> ",record.data.id,record.data.officialSymbol,record.data.officialName);}},{id:'taxon',toolTip:'Gene\'s Taxon',header:'Taxon',dataIndex:'taxon',hidden:true},{id:'inList',toolTip:'Marks whether this gene is present in one of your lists',header:'In List(s)',dataIndex:'inList',hidden:true}]})});if(this.columnSet==="full"){Ext.apply(this,this.getFullColumnModel());}
Gemma.GeneMembersGrid.superclass.initComponent.call(this);this.addEvents('addgenes','removegenes','geneListModified');},listeners:{render:function(){if(this.selectedGeneSetValueObject){this.loadGeneSetValueObject(this.selectedGeneSetValueObject);}else if(this.genes||this.geneIds){var gis=((this.genes)?this.genes:this.geneIds);var genes=gis instanceof Array?gis:gis.split(",");this.loadGenes(gis);}},keypress:function(e){if(!this.getTopToolbar().disabled&&e.getCharCode()===Ext.EventObject.DELETE){this.removeGene();}}},removeGene:function(){var selected=this.getSelectionModel().getSelections();var i;for(i=0;i<selected.length;i++){this.getStore().remove(selected[i]);}
this.getSelectionModel().selectLastRow();},removeAllGenes:function(){this.getStore().removeAll();},record:Ext.data.Record.create([{name:'id',type:'int'},{name:'taxon'},{name:'officialSymbol',type:'string'},{name:'officialName',type:'string'},{name:'inList',type:'boolean',defaultValue:true}]),addGene:function(gene){if(!gene){return;}
if(this.getStore().find("id",gene.id)<0){var Constructor=this.record;var record=new Constructor(gene);this.getStore().add([record]);}},getGeneIds:function(){var ids=[];var all=this.getStore().getRange();var i=0;for(i=0;i<all.length;++i){ids.push(all[i].data.id);}
return ids;},getGenes:function(){var genes=[];var all=this.getStore().getRange();var i=0;for(i=0;i<all.length;++i){genes.push(all[i].data);}
return genes;},cancel:function(){this.fireEvent('doneModification');},exportToTxt:function(){var downloadLink=String.format("/Gemma/gene/downloadGeneList.html?g={0}",this.getGeneIds());window.open(downloadLink);}});Ext.reg('geneMembersGrid',Gemma.GeneMembersGrid);Gemma.GeneMembersSaveGrid=Ext.extend(Gemma.GeneMembersGrid,{allowSaveToSession:true,allowAdditions:true,allowRemovals:true,sortableColumnsView:false,hideOkCancel:false,showSeparateSaveAs:false,enableSaveOnlyAfterModification:false,initComponent:function(){var extraButtons=[];if(this.allowRemovals){var removeSelectedBtn=new Ext.Button({text:'Remove Selected',icon:"/Gemma/images/icons/cross.png",hidden:true,handler:function(){var records=this.getSelectionModel().getSelections();this.getStore().remove(records);removeSelectedBtn.setVisible(false);},scope:this});extraButtons=[removeSelectedBtn];this.getSelectionModel().on('rowselect',function(selModel){removeSelectedBtn.setVisible(selModel.getCount()>1);},this);}
if(this.allowAdditions){Ext.apply(this,{tbar:new Gemma.GeneAndGroupAdderToolbar({extraButtons:extraButtons,geneComboWidth:this.width-50,geneGrid:this,taxonId:this.taxonId})});}
var columns=[];if(this.sortableColumnsView){Ext.apply(this,{hideHeaders:false,autoExpandColumn:'name'});columns=[{header:'Symbol',toolTip:'Gene symbol',dataIndex:'officialSymbol',width:75,renderer:function(value,metadata,record,row,col,ds){return String.format("<a target='_blank' href='/Gemma/gene/showGene.html?id={0}'>{1}</a>",record.data.id,record.data.officialSymbol);}},{header:'Name',id:'name',toolTip:'Gene name',dataIndex:'officialName'}];}
else{columns=[{header:'Symbol',toolTip:'Gene symbol',dataIndex:'officialSymbol',width:35,renderer:function(value,metadata,record,row,col,ds){return String.format("<a target='_blank' href='/Gemma/gene/showGene.html?id={0}'>{1}</a><br>"+"<span style='font-color:grey; white-space:normal !important;'>{2}</span> ",record.data.id,record.data.officialSymbol,record.data.officialName);}}];}
if(this.allowRemovals){this.action=new Ext.ux.grid.RowActions({header:'Remove',tooltip:'Remove gene',keepSelection:true,actions:[{iconCls:'icon-cross',tooltip:'Remove gene'}],callbacks:{'icon-cross':function(grid,record,action,row,col){}}});this.action.on({action:function(grid,record,action,row,col){if(action==='icon-cross'){this.changeMade=true;grid.getStore().remove(record);}},beforeaction:function(grid,record,action,row,col){if(grid.getStore().getCount()==1&&action==='icon-cross'){return false;}
return true;}});columns.push(this.action);Ext.apply(this,{plugins:[this.action]});}
this.saveAsButton=new Ext.Button({text:"Save As",handler:this.saveAsBtnHandler,tooltip:Gemma.HelpText.WidgetDefaults.GeneMembersSaveGrid.saveAsTT,scope:this,disabled:!this.showSeparateSaveAs,hidden:!this.showSeparateSaveAs});this.saveButton=new Ext.Button({text:"Save...",handler:this.saveBtnHandler,tooltip:Gemma.HelpText.WidgetDefaults.GeneMembersSaveGrid.saveTT,scope:this,disabled:this.enableSaveOnlyAfterModification});this.okButton=new Ext.Button({text:"OK",handler:this.okHandler,scope:this,disabled:(!this.allowSaveToSession||this.hideOkCancel),hidden:(!this.allowSaveToSession||this.hideOkCancel)});this.cancelButton=new Ext.Button({text:"Cancel",handler:this.cancel,scope:this,hidden:(this.allowSaveToSession||this.hideOkCancel),disabled:(this.allowSaveToSession||this.hideOkCancel)});this.exportButton=new Ext.Button({icon:"/Gemma/images/download.gif",tooltip:Gemma.HelpText.WidgetDefaults.GeneMembersSaveGrid.exportTT,handler:this.exportToTxt,scope:this,disabled:false});Ext.apply(this,{buttonAlign:'left',fbar:[this.exportButton,'->',this.saveButton,this.saveAsButton,this.okButton,this.cancelButton]});Gemma.GeneMembersGrid.superclass.initComponent.call(this);Ext.apply(this,{store:new Ext.data.SimpleStore({fields:[{name:'id',type:'int'},{name:'taxon'},{name:'officialSymbol',type:'string'},{name:'officialName',type:'string'},{name:'inList',type:'boolean',defaultValue:true}],sortInfo:{field:'officialSymbol',direction:'ASC'}}),colModel:new Ext.grid.ColumnModel({defaults:{sortable:true},columns:columns})});if(this.columnSet==="full"){Ext.apply(this,this.getFullColumnModel());}
this.ajaxLogin=null;this.ajaxRegister=null;this.addEvents('addgenes','removegenes','geneListModified');this.on('doneModification',function(){this.changesMade=false;});this.getStore().on("remove",function(){this.fireEvent("removegenes");this.changesMade=true;this.saveButton.enable();},this);this.getStore().on("add",function(){this.fireEvent("addgenes");this.changesMade=true;this.saveButton.enable();},this);this.on('genesLoaded',function(){if(this.selectedGeneSetValueObject){GeneSetController.canCurrentUserEditGroup(this.selectedGeneSetValueObject,function(response){var dataMsg=Ext.util.JSON.decode(response);if(!dataMsg.userCanEditGroup||!dataMsg.groupIsDBBacked){if(!this.showSeparateSaveAs){this.saveButton.setText("Save As");}else{this.saveButton.hide().disable();}}else{this.saveButton.setText("Save...");}}.createDelegate(this));}});},record:Ext.data.Record.create([{name:'id',type:'int'},{name:'taxon'},{name:'officialSymbol',type:'string'},{name:'officialName',type:'string'},{name:'inList',type:'boolean',defaultValue:true}]),createDetails:function(){if(!this.selectedGeneSetValueObject&&(!this.groupName||this.groupName===null||this.groupName==='')){this.newGroupName="Gene group created: "+(new Date()).toString();}else{var groupName=(this.selectedGeneSetValueObject&&this.selectedGeneSetValueObject.name)?this.selectedGeneSetValueObject.name:this.groupName;var currentTime=new Date();var hours=currentTime.getHours();var minutes=currentTime.getMinutes();if(minutes<10){minutes="0"+minutes;}
var time='('+hours+':'+minutes+') ';this.newGroupName=time+"Custom Gene Group";}
if(!this.newGroupDescription||this.newGroupDescription===null){this.newGroupDescription="Temporary gene group created "+(new Date()).toString();}},okHandler:function(){if(this.changesMade&&this.allowSaveToSession){this.prepareAndSaveToSession();}else{this.cancel();}},prepareAndSaveToSession:function(){if(this.getStore().getRange()&&this.getStore().getRange().length===0){Ext.Msg.alert('Cannot use empty set','You are trying to use an empty set. '+'Please add some genes and try again.');return;}
this.createDetails();this.createInSession();},cancel:function(){this.fireEvent('doneModification');},exportToTxt:function(){var downloadLink=String.format("/Gemma/gene/downloadGeneList.html?g={0}",this.getGeneIds());window.open(downloadLink);},launchRegisterWidget:function(){if(this.ajaxRegister===null){var otherOpenRegister=Ext.getCmp('_ajaxRegister');if(otherOpenRegister!==null){otherOpenRegister.fireEvent("register_cancelled");}
this.ajaxRegister=new Gemma.AjaxRegister({name:'ajaxRegister',closable:false,closeAction:'hide',title:'Please Register'});this.ajaxRegister.on("register_cancelled",function(){this.ajaxRegister.destroy();this.ajaxRegister=null;this.getEl().unmask();},this);this.ajaxRegister.on("register_success",function(){this.ajaxRegister.destroy();this.ajaxRegister=null;this.getEl().unmask();},this);}
this.getEl().mask();this.ajaxRegister.show();},saveBtnHandler:function(){SignupController.loginCheck({callback:function(result){if(result.loggedIn){this.loggedInSaveHandler();}
else{this.promptLoginForSave('save');}}.createDelegate(this)});},saveAsBtnHandler:function(){SignupController.loginCheck({callback:function(result){if(result.loggedIn){this.createDetails();this.saveAsHandler();}
else{this.promptLoginForSave('saveAs');}}.createDelegate(this)});},promptLoginForSave:function(saveAction){Gemma.AjaxLogin.showLoginWindowFn();Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){Ext.getBody().unmask();if(saveAction==='save'){this.loggedInSaveHandler();}else{this.saveAsHandler();}},this);},loggedInSaveHandler:function(){if(this.getStore().getRange()&&this.getStore().getRange().length===0){Ext.Msg.alert('Cannot save empty set','You are trying to save an empty set. '+'Please add some genes and try again.');return;}
this.createDetails();if(this.selectedGeneSetValueObject){GeneSetController.canCurrentUserEditGroup(this.selectedGeneSetValueObject,function(response){var dataMsg=Ext.util.JSON.decode(response);if(dataMsg.userCanEditGroup&&dataMsg.groupIsDBBacked){Ext.Msg.show({title:'Save Changes?',msg:'You have edited an <b>existing group</b>, '+'how would you like to save your changes?<br>',buttons:{ok:'Save over',yes:'Save as...',no:'Cancel'},fn:function(btnId){if(btnId==='ok'){this.saveHandler();}else if(btnId==='yes'){this.saveAsHandler();}else if(btnId==='no'){}},scope:this,icon:Ext.MessageBox.QUESTION});}else{this.saveAsHandler();}}.createDelegate(this));}else{this.saveAsHandler();}},saveAsHandler:function(){var detailsWin=new Gemma.CreateSetDetailsWindow();detailsWin.lockInTaxonId(this.taxonId,true);detailsWin.on("commit",function(args){this.newGroupName=args.name;this.newGroupDescription=args.description;this.newGroupPublik=args.publik;this.newGroupTaxon=args.taxon;this.createInDatabase();},this);detailsWin.on("hide",function(args){this.close();});detailsWin.name=this.groupName;detailsWin.description='Edited search results for: "'+this.groupName+'". Created: '+
(new Date()).toString();detailsWin.show();},saveHandler:function(){this.updateDatabase();},createInSession:function(){var editedGroup;editedGroup=new SessionBoundGeneSetValueObject();editedGroup.id=null;editedGroup.name=this.newGroupName;editedGroup.description=this.newGroupDescription;editedGroup.geneIds=this.getGeneIds();editedGroup.taxonId=this.taxonId;editedGroup.size=this.getGeneIds().length;editedGroup.modified=true;editedGroup.publik=false;GeneSetController.addSessionGroups([editedGroup],true,function(geneSets){if(geneSets===null||geneSets.length===0){return;}else{this.fireEvent('geneListModified',geneSets,geneSets[0].geneIds);this.fireEvent('doneModification');}}.createDelegate(this));},createInDatabase:function(){var editedGroup;if(this.selectedGeneSetValueObject===null||typeof this.selectedGeneSetValueObject==='undefined'||!(this.selectedGeneSetValueObject instanceof DatabaseBackedGeneSetValueObject)){editedGroup=new DatabaseBackedGeneSetValueObject();}
else{editedGroup=Object.clone(this.selectedGeneSetValueObject);}
editedGroup.id=null;editedGroup.name=this.newGroupName;editedGroup.description=this.newGroupDescription;editedGroup.publik=this.newGroupPublik;editedGroup.geneIds=this.getGeneIds();editedGroup.taxonId=(this.newGroupTaxon)?this.newGroupTaxon.id:this.taxonId;editedGroup.size=this.getGeneIds().length;GeneSetController.create([editedGroup],function(geneSets){if(geneSets===null||geneSets.length===0){return;}
else{this.fireEvent('geneListModified',geneSets,geneSets[0].geneIds);this.fireEvent('geneSetCreated',geneSets[0]);this.fireEvent('doneModification');}}.createDelegate(this));this.fireEvent('doneModification');},updateDatabase:function(){var groupId=this.getSelectedGeneSetValueObject().id;var geneIds=this.getGeneIds();GeneSetController.updateMembers(groupId,geneIds,function(msg){this.selectedGeneSetValueObject.geneIds=geneIds;this.fireEvent('geneListModified',[this.selectedGeneSetValueObject],this.selectedGeneSetValueObject.geneIds);this.fireEvent('geneListSavedOver');this.fireEvent('doneModification');}.createDelegate(this));}});Ext.reg('geneMembersSaveGrid',Gemma.GeneMembersSaveGrid);Gemma.GeneAndGroupAdderToolbar=Ext.extend(Ext.Toolbar,{extraButtons:[],initComponent:function(){Gemma.GeneAndGroupAdderToolbar.superclass.initComponent.call(this);this.geneCombo=new Gemma.GeneAndGeneGroupCombo({typeAhead:false,width:300,listeners:{'select':{fn:function(combo,rec,index){this.addBtn.enable();if(rec.data.size===1){this.addBtn.setText('Add 1 gene');}else{this.addBtn.setText('Add '+rec.data.size+' genes');}}.createDelegate(this)}}});this.addBtn=new Ext.Toolbar.Button({icon:"/Gemma/images/icons/add.png",cls:"x-btn-text-icon",tooltip:"Add selected genes(s) to the list",text:'Add',disabled:true,handler:function(){this.geneGrid.addGenes(this.geneCombo.getGeneGroup());this.geneCombo.reset();this.addBtn.setText('Add');this.addBtn.disable();}.createDelegate(this)});},afterRender:function(c,l){Gemma.GeneAndGroupAdderToolbar.superclass.afterRender.call(this,c,l);this.add(this.geneCombo,this.addBtn);this.addButton(this.extraButtons);}});Gemma.GeneGroupMemberPanelClassic=Ext.extend(Gemma.GeneGrid,{initComponent:function(){Gemma.GeneGroupMemberPanelClassic.superclass.initComponent.call(this);},showGeneGroup:function(groupRecord){this.getEl().mask("Loading genes ...");GeneSetController.getGenesInGroup(groupRecord.get('id'),{callback:this.afterLoadGenes.createDelegate(this,[groupRecord],true),errorHandler:function(e){this.getEl().unmask();Ext.Msg.alert('There was an error',e);}});},reset:function(){this.getTopToolbar().taxonCombo.reset();this.getTopToolbar().geneCombo.reset();this.getTopToolbar().taxonCombo.setDisabled(false);this.fireEvent("taxonchanged",null);this.loadGenes([]);this.currentGroupSize=0;},resetKeepTaxon:function(){this.getTopToolbar().geneCombo.reset();this.getTopToolbar().taxonCombo.setDisabled(false);this.loadGenes([]);this.currentGroupSize=0;},lockInTaxon:function(taxon){this.getTopToolbar().taxonCombo.setTaxon(taxon);this.getTopToolbar().geneCombo.setTaxon(taxon);this.getTopToolbar().taxonCombo.setDisabled(true);},afterLoadGenes:function(geneValueObjs,groupRecord){if(groupRecord.get('currentUserHasWritePermission')){Ext.util.Observable.releaseCapture(this.getStore());this.getTopToolbar().setDisabled(false);}
else{this.getTopToolbar().setDisabled(true);Ext.util.Observable.capture(this.getStore(),function(eventName,args){if(eventName==='add'||eventName==='remove'){Ext.Msg.alert("Access denied","You don't have permission to edit this set.");return false;}
return true;},this);}
this.currentGroupId=groupRecord.get('id');if(!geneValueObjs||geneValueObjs.size()===0){this.reset();}
else{this.currentGroupSize=geneValueObjs.size();var taxonId=geneValueObjs[0].taxonId;for(var i=0;i<geneValueObjs.length;i++){if(taxonId!==geneValueObjs[0].taxonId){Ext.Msg.alert('Sorry','Gene groups do not support mixed taxa. Please remove this gene group');break;}}
var groupTaxon={id:taxonId,commonName:geneValueObjs[0].taxonName};this.lockInTaxon(groupTaxon);this.addGeneValueObjects(geneValueObjs);}
this.getEl().unmask();}});Ext.namespace('Gemma');Gemma.GeneCombo=Ext.extend(Ext.form.ComboBox,{name:'genecombo',displayField:'comboText',valueField:'id',width:140,listWidth:450,enableKeyEvents:true,loadingText:'Searching...',emptyText:"Search for a gene",minChars:1,selectOnFocus:true,mode:'remote',queryDelay:800,lastQuery:null,stickyTaxon:true,actualTextOfLastQuery:'',record:Ext.data.Record.create([{name:"id",type:"int"},{name:"taxonId"},{name:"taxonScientificName"},{name:"officialSymbol",type:"string"},{name:"officialName",type:"string"},{name:"comboText",type:"string",convert:function(v,record){return record.officialSymbol+" ("+record.taxonCommonName+")";}}]),initComponent:function(){var template=new Ext.XTemplate('<tpl for="."><div style="font-size:11px" class="x-combo-list-item" ext:qtip="{officialName} ({[values.taxonScientificName]})"> {officialSymbol} {officialName} ({[values.taxonScientificName]})</div></tpl>');Ext.apply(this,{tpl:template,store:new Ext.data.Store({proxy:new Ext.data.DWRProxy(GenePickerController.searchGenes),reader:new Ext.data.ListRangeReader({id:"id"},this.record),sortInfo:{field:"comboText",dir:"ASC"}})});Gemma.GeneCombo.superclass.initComponent.call(this);this.addEvents('genechanged');this.store.on("datachanged",function(){if(this.store.getCount()===0){this.fireEvent("invalid","No matching genes");}},this);this.on('keyup',function(){this.actualTextOfLastQuery='';},this);this.getStore().on('beforeload',function(store,options){this.records=this.store.getRange();},this);this.getStore().on('load',function(store,records,options){var query=(options.params)?options.params[0]:null;if((query===null&&this.lastQuery!==null)||(query!==''&&query!==this.lastQuery)){store.removeAll();store.add(this.records);if(this.records===null||this.records.length===0){this.doQuery(this.lastQuery);}}else{this.records=this.store.getRange();}},this);},onSelect:function(record,index){Gemma.GeneCombo.superclass.onSelect.call(this,record,index);if(!this.selectedGene||record.data.id!==this.selectedGene.id){this.setGene(record.data);this.fireEvent('select',this,this.selectedGene);this.fireEvent('selectSingle',this,record);}
this.actualTextOfLastQuery=this.lastQuery;},reset:function(){Gemma.GeneCombo.superclass.reset.call(this);delete this.selectedGene;this.lastQuery=null;if(this.tooltip){this.tooltip.destroy();}},getParams:function(query){if(this.actualTextOfLastQuery){query=this.actualTextOfLastQuery;}
if(this.stickyTaxon){return[query,this.taxon?this.taxon.id:-1];}else{return[query,-1];this.taxon=false;}},getGene:function(){if(this.getRawValue()===''){return null;}
return this.selectedGene;},setGene:function(gene){if(this.tooltip){this.tooltip.destroy();}
if(gene){this.selectedGene=gene;this.taxon={id:gene.taxonId,commonName:gene.taxonCommonName,scientificname:gene.taxonScientificName};this.tooltip=new Ext.ToolTip({target:this.getEl(),html:String.format('{0} ({1})',gene.officialName||"no description",gene.taxonScientificName)});}},getTaxon:function(){return this.taxon;},setTaxon:function(taxon){if(!this.taxon||this.taxon.id!==taxon.id){this.taxon=taxon;this.reset();this.lastQuery=null;}}});Gemma.GeneSearch=Ext.extend(Ext.FormPanel,{autoHeight:true,frame:true,stateEvents:["beforesearch"],labelAlign:"top",width:350,height:30,buttonAlign:'right',layout:'fit',stickyTaxon:true,initComponent:function(){Gemma.GeneSearch.superclass.initComponent.call(this);this.geneCombo=new Gemma.GeneCombo({hiddenName:'g',id:'gene-combo',fieldLabel:'Select a gene',enableKeyEvents:true,stickyTaxon:this.stickyTaxon});this.geneCombo.on("focus",this.clearMessages,this);var submitButtonHandler=function(object,event){var msg=this.validateSearch(this.geneCombo.getValue());if(msg.length===0){if(typeof pageTracker!=='undefined'){pageTracker._trackPageview("/Gemma/gene/showGene");}
document.location.href=String.format("/Gemma/gene/showGene.html?id={0}",this.geneCombo.getValue());}else{this.handleError(msg);}};var enterButtonPressed=function(object,event){var keycode=event.getKey();if(keycode===13){var msg=this.validateSearch(this.geneCombo.getValue());if(msg.length===0){if(typeof pageTracker!=='undefined'){pageTracker._trackPageview("/Gemma/gene/showGene");}
document.location.href=String.format("/Gemma/gene/showGene.html?id={0}",this.geneCombo.getValue());}else{this.handleError(msg);}}};this.geneCombo.on("keypress",enterButtonPressed.createDelegate(this));var submitButton=new Ext.Button({text:"Go",handler:submitButtonHandler.createDelegate(this)});this.add(this.geneCombo);this.addButton(submitButton);},validateSearch:function(gene){if(!gene||gene.length===0){return"Please select a valid query gene";}
return"";},handleError:function(msg,e){Ext.DomHelper.overwrite("geneSearchMessages",{tag:'img',src:'/Gemma/images/icons/warning.png'});Ext.DomHelper.append("geneSearchMessages",{tag:'span',html:"&nbsp;&nbsp;"+msg});},clearMessages:function(){if(Ext.DomQuery.select("geneSearchMessages").length>0){Ext.DomHelper.overwrite("geneSearchMessages",{tag:'h3',html:"Gene Query"});}}});Ext.namespace('Gemma');Gemma.UserSessionGeneGroupStore=function(config){this.record=Ext.data.Record.create([{name:"id",type:"int"},{name:"taxonId",type:"int"},{name:"name",type:"string",convert:function(v,rec){if(v.startsWith("GO")){return rec.description;}
return v;}},{name:"taxonName",type:"string"},{name:"description",type:"string",convert:function(v,rec){if(rec.name.startsWith("GO")){return rec.name;}
return v;}},{name:"publik",type:"boolean"},{name:"size",type:"int"},{name:"shared",type:'boolean'},{name:"currentUserHasWritePermission",type:'boolean'},{name:"session",type:'boolean'},{name:"geneIds"}]);this.reader=new Ext.data.ListRangeReader({},this.record);Gemma.UserSessionGeneGroupStore.superclass.constructor.call(this,config);};Ext.extend(Gemma.UserSessionGeneGroupStore,Ext.data.Store,{autoLoad:true,autoSave:false,selected:null,name:"geneGroupData-store",proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:GeneSetController.getUserAndSessionGeneGroups,getDwrArgsFunction:function(request){if(request.params.length>0){return[request.params[0],request.params[1]];}
return[false,null];}},create:{dwrFunction:GeneSetController.addUserAndSessionGroups},update:{dwrFunction:GeneSetController.updateUserAndSessionGroups},destroy:{dwrFunction:GeneSetController.removeUserAndSessionGroups}}}),writer:new Ext.data.JsonWriter({writeAllFields:true}),getSelected:function(){return this.selected;},setSelected:function(rec){this.previousSelection=this.getSelected();if(rec){this.selected=rec;}},getPreviousSelection:function(){return this.previousSelection;},clearSelected:function(){this.selected=null;delete this.selected;}});Ext.namespace('Gemma');Ext.BLANK_IMAGE_URL='/Gemma/images/default/s.gif';Gemma.GeneSetSummary=Ext.extend(Ext.Panel,{layout:'vbox',layoutConfig:{align:'stretch'},dirtyForm:false,listeners:{leavingTab:function(){if(this.editModeOn&&this.dirtyForm){var leave=confirm("You are still in edit mode. Your unsaved changes will be discarded when you switch tabs. Do you want to continue?");if(leave){return true;}
return false;}
return true;},tabChanged:function(){this.fireEvent('toggleEditMode',false);}},renderStatus:function(g){var statusString="";if(g.modifiable){statusString+="<img src='/Gemma/images/icons/shield.png' height='16' width='16' "+"title='Protected; cannot have members changed, usually applies to automatically generated groups.' />&nbsp;";}
var sl=Gemma.SecurityManager.getSecurityLink("ubic.gemma.model.genome.gene.GeneSetImpl",g.id,g.publik,g.shared,g.currentUserHasWritePermission,null,null,null,g.currentUserIsOwner);statusString+=sl;return statusString;},renderNumber:function(g){var numString=""+g.size;return numString;},initComponent:function(){Gemma.GeneSetSummary.superclass.initComponent.call(this);var g=this.geneSet;if(g.currentUserHasWritePermission){this.editable=true;}
var currentDescription=g.description;var currentName=g.name;save=function(){if(!this.saveMask){this.saveMask=new Ext.LoadMask(this.getEl(),{msg:"Saving ..."});}
this.saveMask.show();var description=descriptionArea.getValue();var name=nameArea.getValue();var entity={id:g.id,description:description,name:name};GeneSetController.updateNameDesc(entity,function(data){nameArea.setValue(data.name);descriptionArea.setValue(data.description);currentName=data.name;currentDescription=data.description;this.dirtyForm=false;this.saveMask.hide();}.createDelegate(this));}.createDelegate(this);var descriptionArea=new Ext.form.TextArea({allowBlank:true,resizable:true,readOnly:true,disabled:true,growMin:1,growMax:150,growAppend:'',grow:true,disabledClass:'disabled-plain',fieldClass:'',emptyText:'No description provided',enableKeyEvents:true,bubbleEvents:['changeMade'],listeners:{'keyup':function(field,e){if(field.isDirty()){field.fireEvent('changeMade',field.isValid());}},'toggleEditMode':function(editOn){this.setReadOnly(!editOn);this.setDisabled(!editOn);if(editOn){this.removeClass('x-bare-field');}
else{this.addClass('x-bare-field');}}},style:'width: 100%; background-color: #f6f6f6;',value:currentDescription});var nameArea=new Ext.form.TextArea({allowBlank:false,grow:true,growMin:1,growAppend:'',readOnly:true,disabled:true,disabledClass:'disabled-plain',emptyText:'Name is required',enableKeyEvents:true,bubbleEvents:['changeMade'],listeners:{'keyup':function(field,e){if(field.isDirty()){field.fireEvent('changeMade',field.isValid());}},'toggleEditMode':function(editOn){this.setReadOnly(!editOn);this.setDisabled(!editOn);if(editOn){this.removeClass('x-bare-field');}
else{this.addClass('x-bare-field');}}},style:'font-weight: bold; font-size:1.3em; width:100%',value:currentName});resetEditableFields=function(){nameArea.setValue(currentName);descriptionArea.setValue(currentDescription);saveBtn.disable();cancelBtn.disable();};var editBtn=new Ext.Button({text:'Start editing',editOn:false,disabled:!this.editable,handler:function(button,event){this.fireEvent('toggleEditMode',true);},scope:this});var cancelBtn=new Ext.Button({text:'Cancel',disabled:true,toolTip:'Reset all fields to saved values',handler:function(){this.fireEvent('toggleEditMode',false);},scope:this});var saveBtn=new Ext.Button({text:'Save',disabled:true,handler:function(){save();this.fireEvent('toggleEditMode',false);},scope:this});var deleteEEButton=new Ext.Button({text:'Delete Gene Group',icon:'/Gemma/images/icons/cross.png',toolTip:'Delete the gene group from the system',disabled:!this.editable,handler:this.deleteGeneSet,scope:this});this.on('toggleEditMode',function(editOn){this.editModeOn=editOn;editBtn.setText((editOn)?'Editing mode on':'Start editing');editBtn.setDisabled(editOn);nameArea.fireEvent('toggleEditMode',editOn);descriptionArea.fireEvent('toggleEditMode',editOn);resetEditableFields();saveBtn.setDisabled(!editOn);cancelBtn.setDisabled(!editOn);if(!editOn){resetEditableFields();this.dirtyForm=false;}});this.on('changeMade',function(wasValid){saveBtn.setDisabled(!wasValid);cancelBtn.setDisabled(!wasValid);this.dirtyForm=true;});var basics=new Ext.Panel({flex:0,ref:'fieldPanel',collapsible:false,bodyBorder:false,frame:false,baseCls:'x-plain-panel',bodyStyle:'padding:10px',defaults:{bodyStyle:'vertical-align:top;font-size:12px;color:black',baseCls:'x-plain-panel',fieldClass:'x-bare-field'},tbar:new Ext.Toolbar({hidden:!this.editable,items:[editBtn,' ',saveBtn,' ',cancelBtn,'-',deleteEEButton]}),items:[nameArea,descriptionArea,{layout:'form',defaults:{border:false},items:[{fieldLabel:"Taxon",html:g.taxonName},{fieldLabel:'Genes',html:this.renderNumber(g)},{fieldLabel:'Status',html:this.renderStatus(g)}]}]});this.add(basics);var geneMembersGrid=new Gemma.GeneMembersSaveGrid({title:'Gene Group Members',name:'geneMembersGrid',frame:true,taxonId:g.taxonId,taxonName:g.taxonName,geneGroupId:g.id,selectedGeneSetValueObject:g,groupName:g.name,allowSaveToSession:false,allowRemovals:this.editable,allowAdditions:this.editable,sortableColumnsView:true,hideOkCancel:true,showSeparateSaveAs:true,enableSaveOnlyAfterModification:true,flex:1});geneMembersGrid.on('geneListSavedOver',function(){Ext.getBody().mask('Reloading set');window.location.reload();});geneMembersGrid.on('geneSetCreated',function(geneSet){Ext.getBody().mask('Loading new set');window.location="/Gemma/geneSet/showGeneSet.html?id="+geneSet.id;});this.add(geneMembersGrid);Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){var appScope=this;GeneSetController.canCurrentUserEditGroup(this.geneSet.id,{callback:function(editable){appScope.adjustForIsEditable(editable);},scope:appScope});},this);Gemma.Application.currentUser.on("logOut",function(){this.adjustForIsEditable(false);},this);this.doLayout();this.fireEvent("ready");},adjustForIsEditable:function(editable){this.fieldPanel.getTopToolbar().setVisible(editable);},deleteGeneSet:function(){var id=this.geneSet.id;var redirectHome=true;Ext.Msg.show({title:'Delete '+this.geneSet.name+'?',msg:'Are you sure you want to delete gene group "'+this.geneSet.name+'"? This cannot be undone.',buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push([{id:id}]);if(!this.deleteMask){this.deleteMask=new Ext.LoadMask(Ext.getBody(),{msg:"Deleting ..."});}
this.deleteMask.show();callParams.push({callback:function(data){window.location='/Gemma/home.html';}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Deletion failed",error);this.deleteMask.hide();}.createDelegate(this)});GeneSetController.remove.apply(this,callParams);}},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});}});Ext.namespace('Gemma');Gemma.GeneSetPage=Ext.extend(Ext.TabPanel,{defaults:{autoScroll:true},deferredRender:true,listeners:{'tabchange':function(tabPanel,newTab){newTab.fireEvent('tabChanged');},'beforetabchange':function(tabPanel,newTab,currTab){if(currTab){return currTab.fireEvent('leavingTab');}
return true;}},invalidIdHandler:function(msg){this.items.add(new Ext.Panel({html:"Error in loading gene group due to invalid id. "+msg}));},initComponent:function(){if(!this.geneSetId&&document.URL.indexOf("?")>-1&&(document.URL.indexOf("id=")>-1)){var subsetDetails=document.URL.substr(document.URL.indexOf("?")+1);var param=Ext.urlDecode(subsetDetails);if(param.id){var ids=param.id.split(',');if(ids.length===1){this.geneSetId=ids[0];}else{this.invalidIdHandler("Id was: "+param.id);Gemma.GeneSetPage.superclass.initComponent.call(this);return;}}if(param.goid){var goids=param.goid.split(',');if(goids.length===1){this.geneSetGOId=ids[0];}else{this.invalidIdHandler("GO Id was: "+param.goid);Gemma.GeneSetPage.superclass.initComponent.call(this);return;}}else{this.invalidIdHandler("Missing \"id\" or \"GO id\" parameter.");Gemma.GeneSetPage.superclass.initComponent.call(this);return;}}
var isAdmin=Ext.get("hasAdmin").getValue()=='true';Gemma.GeneSetPage.superclass.initComponent.call(this);this.on('render',function(){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.generic,msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});}
this.loadMask.show();GeneSetController.load(this.geneSetId,function(geneSetVO){this.geneSet=geneSetVO;this.editable=geneSetVO.currentUserHasWritePermission;this.loadMask.hide();this.add(new Gemma.GeneSetSummary({title:'Summary',geneSet:geneSetVO,editable:this.editable,admin:this.admin}));this.adjustForIsAdmin(isAdmin,this.editable);Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){var appScope=this;GeneController.canCurrentUserEditGroup(geneDetails.id,{callback:function(editable){appScope.adjustForIsAdmin(isAdmin,editable);},scope:appScope});},this);Gemma.Application.currentUser.on("logOut",function(){this.adjustForIsAdmin(false,false);},this);this.setActiveTab(0);}.createDelegate(this));});},adjustForIsAdmin:function(isAdmin,isEditable){}});Ext.namespace('Gemma');Gemma.SessionGeneGroupStore=function(config){this.record=Ext.data.Record.create([{name:"id",type:"int"},{name:"taxonId",type:"int"},{name:"name",type:"string",convert:function(v,rec){if(v.startsWith("GO")){return rec.description;}
return v;}},{name:"taxonName",type:"string"},{name:"description",type:"string",convert:function(v,rec){if(rec.name.startsWith("GO")){return rec.name;}
return v;}},{name:"publik",type:"boolean"},{name:"size",type:"int"},{name:"shared",type:'boolean'},{name:"currentUserHasWritePermission",type:'boolean'},{name:"session",type:'boolean'},{name:"geneIds"}]);this.reader=new Ext.data.ListRangeReader({},this.record);Gemma.SessionGeneGroupStore.superclass.constructor.call(this,config);};Ext.extend(Gemma.SessionGeneGroupStore,Ext.data.Store,{autoLoad:true,autoSave:false,selected:null,name:"geneGroupSessionData-store",proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:GeneSetController.getUserAndSessionGeneGroups,getDwrArgsFunction:function(request){if(request.params.length>0){return[request.params[0],request.params[1]];}
return[false,null];}},create:{dwrFunction:GeneSetController.addSessionGroups},update:{dwrFunction:GeneSetController.updateSessionGroups},destroy:{dwrFunction:GeneSetController.removeSessionGroups}}}),writer:new Ext.data.JsonWriter({writeAllFields:true}),getSelected:function(){return this.selected;},setSelected:function(rec){this.previousSelection=this.getSelected();if(rec){this.selected=rec;}},getPreviousSelection:function(){return this.previousSelection;},clearSelected:function(){this.selected=null;delete this.selected;},listeners:{write:function(store,action,result,res,rs){},exception:function(proxy,type,action,options,res,arg){if(type==='remote'){Ext.Msg.show({title:'Error',msg:res,icon:Ext.MessageBox.ERROR});}else{Ext.Msg.show({title:'Error',msg:arg,icon:Ext.MessageBox.ERROR});}}}});Ext.namespace('Gemma');Gemma.GeneSetPreview=Ext.extend(Gemma.SetPreview,{loadGenePreviewFromIds:function(ids){this.entityIds=ids;this.totalCount=ids.length;var limit=(ids.size()<this.preview_size)?ids.size():this.preview_size;var previewIds=ids.slice(0,limit);GenePickerController.getGenes(previewIds,function(genes){this.loadPreview(genes,ids.length);this.fireEvent('previewLoaded',genes);}.createDelegate(this));},loadGenePreviewFromGeneSet:function(geneSet){var ids=geneSet.geneIds;this.entityIds=ids;this.loadGenePreviewFromIds(ids);this.setSelectedSetValueObject(geneSet);},loadGenePreviewFromGenes:function(genes){this.entityIds=[];Ext.each(genes,function(item,index,allitems){this.entityIds.push(item.id);},this);this.totalCount=genes.length;var limit=(genes.size()<this.preview_size)?genes.size():this.preview_size;var previewGenes=genes.slice(0,limit);this.loadPreview(previewGenes,genes.length);},updateTitle:function(name,size){if(!name&&this.selectedSetValueObject instanceof GeneSetValueObject){size=this.selectedSetValueObject.geneIds.size();if(this.selectedSetValueObject instanceof DatabaseBackedGeneSetValueObject){name="<a target=\"_blank\" href=\""+Gemma.LinkRoots.geneSetPage+
this.selectedSetValueObject.id+'">'+
this.selectedSetValueObject.name+'</a>';}else if(this.selectedSetValueObject instanceof PhenotypeGroupValueObject){name="<a target=\"_blank\" href=\""+Gemma.LinkRoots.phenotypePage+
this.selectedSetValueObject.phenotypeName+'">'+
this.selectedSetValueObject.name+": "+this.selectedSetValueObject.description+'</a>';}else if(this.selectedSetValueObject instanceof GOGroupValueObject){name=this.selectedSetValueObject.name+": "+this.selectedSetValueObject.description;}else if(this.selectedSetValueObject instanceof PhenotypeGroupValueObject){name=this.selectedSetValueObject.name+": "+this.selectedSetValueObject.description;}else{name=this.selectedSetValueObject.name;}}else if(!name){name="Gene Selection Preview";}
this.previewContent.setTitle('<span style="font-size:1.2em">'+name+'</span> &nbsp;&nbsp;<span style="font-weight:normal">('+
this.totalCount+
((this.totalCount>1)?" genes)":" gene)"));},initComponent:function(){var withinSetGeneCombo=new Gemma.GeneAndGeneGroupCombo({width:300,style:'margin:10px',hideTrigger:true,taxonId:this.taxonId,emptyText:'Add genes to your group'});withinSetGeneCombo.setTaxonId(this.taxonId);withinSetGeneCombo.on('select',function(combo,record,index){var allIds=this.entityIds;var newIds=record.get('memberIds');var i;for(i=0;i<newIds.length;i++){if(allIds.indexOf(newIds[i])<0){allIds.push(newIds[i]);}}
var currentTime=new Date();var hours=currentTime.getHours();var minutes=currentTime.getMinutes();if(minutes<10){minutes="0"+minutes;}
var time='('+hours+':'+minutes+') ';var editedGroup;editedGroup=new SessionBoundGeneSetValueObject();editedGroup.id=null;editedGroup.name=time+" Custom Gene Group";editedGroup.description="Temporary gene group created "+currentTime.toString();editedGroup.geneIds=allIds;editedGroup.taxonId=record.get('taxonId');editedGroup.taxonName=record.get('taxonName');editedGroup.size=editedGroup.geneIds.length;editedGroup.modified=true;editedGroup.publik=false;GeneSetController.addSessionGroups([editedGroup],true,function(geneSets){if(geneSets===null||geneSets.length===0){return;}else{withinSetGeneCombo.reset();this.focus();this.loadGenePreviewFromIds(geneSets[0].geneIds);this.setSelectedSetValueObject(geneSets[0]);this.updateTitle();this.fireEvent('geneListModified',geneSets,geneSets[0].geneIds);this.fireEvent('doneModification');}}.createDelegate(this));},this);Ext.apply(this,{selectionEditor:new Gemma.GeneMembersSaveGrid({name:'geneSelectionEditor',hideHeaders:true,width:500,height:500,frame:false}),defaultTpl:new Ext.Template('<div style="padding-bottom:7px;">'+'<a target="_blank" href="/Gemma/gene/showGene.html?id={id}">{officialSymbol}</a> {officialName} '+'<span style="color:grey">({taxonCommonName})</span></div>'),defaultPreviewTitle:"Gene Selection Preview",addingCombo:withinSetGeneCombo});Gemma.GeneSetPreview.superclass.initComponent.call(this);this.selectionEditor.on('geneListModified',function(newSets){var i;for(i=0;i<newSets.length;i++){if(typeof newSets[i].geneIds!=='undefined'&&typeof newSets[i].name!=='undefined'){this.loadGenePreviewFromIds(newSets[i].geneIds);this.setSelectedSetValueObject(newSets[i]);this.updateTitle();}}
this.listModified=true;this.fireEvent('geneListModified',newSets);},this);}});Ext.reg('Gemma.GeneSetPreview',Gemma.GeneSetPreview);Ext.namespace('Gemma');Gemma.GeneProductGrid=Ext.extend(Gemma.GemmaGridPanel,{deferLoadToRender:false,record:Ext.data.Record.create([{name:"id"},{name:"name"},{name:"description"},{name:"accessions"},{name:"type",convert:function(d){return d.value;}.createDelegate()}]),initComponent:function(){Ext.apply(this,{columns:[{header:"Name",dataIndex:"name"},{header:"Type",dataIndex:"type"},{header:"Description",dataIndex:"description"},{dataIndex:"accessions",header:"accessions"}],store:new Ext.data.Store({proxy:new Ext.data.DWRProxy(GeneController.getProducts),reader:new Ext.data.ListRangeReader({id:"id"},this.record),remoteSort:false})});Gemma.GeneProductGrid.superclass.initComponent.call(this);this.getStore().setDefaultSort('type','name');if(!this.deferLoadToRender){this.getStore().load({params:[this.geneid]});}else{this.on('render',function(){this.getStore().load({params:[this.geneid]});});}}});Ext.reg('geneproductgrid',Gemma.GeneProductGrid);Ext.namespace('Gemma.BibliographicReference');Gemma.BibliographicReference.Record=new Ext.data.Record.create([{name:"id",type:"int"},{name:"volume"},{name:"title"},{name:"publicationDate",type:'date'},{name:"publication"},{name:"pubAccession"},{name:"pages"},{name:"citation"},{name:"authorList"},{name:"abstractText"},{name:"experiments"},{name:"meshTerms"},{name:"chemicalsTerms"},{name:"bibliographicPhenotypes"}]);Gemma.BibliographicReference.SearchStore=Ext.extend(Ext.data.Store,{initComponent:function(){Gemma.BibliographicReference.SearchStore.superclass.initComponent.call(this);},remoteSort:false,proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:BibliographicReferenceController.search}}}),reader:new Ext.data.JsonReader({root:'records',successProperty:'success',messageProperty:'message',totalProperty:'total',idProperty:"id",fields:Gemma.BibliographicReference.Record})});Gemma.BibliographicReference.ColumnModel=new Ext.grid.ColumnModel({defaultSortable:true,columns:[{header:"Authors",dataIndex:'authorList',width:175},{header:"Title",dataIndex:'title',id:'title',width:350},{header:"Journal",dataIndex:'publication',width:135},{header:"Date",dataIndex:'publicationDate',width:70,renderer:Ext.util.Format.dateRenderer("Y")},{header:"Experiments",dataIndex:'experiments',width:80,renderer:function(value){var result="";for(var i=0;i<value.length;i++){result=result+'&nbsp<a target="_blank" ext:qtip="View details of '+
value[i].shortName+' ('+
value[i].name+')" href="/Gemma/expressionExperiment/showExpressionExperiment.html?id='+
value[i].id+'">'+
value[i].shortName+'</a>';}
return result;}},{header:"Phenotypes",dataIndex:'bibliographicPhenotypes',width:80,renderer:function(value){var maxPhenotypesToDisplay=3;var result="";var phenotypeStrings={};for(var i=0;i<value.length&&i<maxPhenotypesToDisplay;i++){var phenotypesValues=value[i].phenotypesValues;for(var j=0;j<phenotypesValues.length&&j<maxPhenotypesToDisplay;j++){if(phenotypeStrings[phenotypesValues[j].value]==true){continue;}
if(result.length!=0){result+=",";}
result=result+'&nbsp<a target="_blank" ext:qtip="View all associations for &quot;'+
phenotypesValues[j].value+'&quot; ('+
phenotypesValues[j].urlId+')" href="'+Gemma.LinkRoots.phenotypePage+
phenotypesValues[j].urlId+'">'+
phenotypesValues[j].value+'</a>';phenotypeStrings[phenotypesValues[j].value]=true;}}
return result;}},{header:"PubMed",dataIndex:'citation',width:70,renderer:function(value){if(value&&value.pubmedURL){return(new Ext.Template(Gemma.Common.tpl.pubmedLink.simple)).apply({pubmedURL:value.pubmedURL});}
return'';},sortable:false}]});Gemma.BibliographicReference.SearchResultGrid=Ext.extend(Ext.grid.GridPanel,{loadMask:true,autoScroll:true,layout:'fit',view:new Ext.ux.InitialTextGridView({initialText:'Use search boxes above to find papers.',emptyText:'No results found.',deferEmptyText:true,forceFit:true}),colModel:Gemma.BibliographicReference.ColumnModel,store:new Gemma.BibliographicReference.SearchStore({autoLoad:false}),runKeywordSearch:function(query){if(query.length>0){this.getStore().load({params:[query]});}},runPubmedSearch:function(query){if(query.length>0){BibliographicReferenceController.loadFromPubmedID(query,{callback:function(data){if(data!==null){var newRecord=new Gemma.BibliographicReference.Record(data);this.getStore().removeAll();this.getStore().add(newRecord);this.updateTitle(1,"pubmed ID = "+query);this.getSelectionModel().selectFirstRow();this.enableFiltering();}else{this.getStore().removeAll();this.updateTitle(0,"pubmed ID = "+query);}}.createDelegate(this)});}},updateTitle:function(recordCount,query){var papers=(recordCount==1)?" paper":" papers";query=(query&&query!=null&&query.length>0)?" for \""+query+"\" ":" - ";this.setTitle("Bibliographic reference search"+query+"found "+recordCount+papers);},enableFiltering:function(){this.getTopToolbar().filterInGridField.enable();this.getTopToolbar().filterInGridButton.enable();},initComponent:function(){this.loadPubmedFromURL=(document.URL.indexOf("?")>-1&&(document.URL.indexOf("pubmedID=")>-1));if(this.loadPubmedFromURL){var subsetDetails=document.URL.substr(document.URL.indexOf("?")+1);var param=Ext.urlDecode(subsetDetails);if(param.pubmedID){var pubmedIDsToLoad=param.pubmedID.split(',');this.runPubmedSearch(pubmedIDsToLoad[0]);}else{this.pubmedFromURL=null;}}
this.store.on('load',function(store,records,options){var query=(options.params&&options.params[0]&&options.params[0].length>0)?options.params[0]:null;this.updateTitle(records.length,query);this.getSelectionModel().selectFirstRow();this.enableFiltering();},this);var searchInGridFieldKeyword=new Ext.form.TwinTriggerField({emptyText:'keyword',trigger1Class:'x-form-clear-trigger',trigger2Class:'x-form-search-trigger',hideTrigger1:true,hideTrigger2:true,enableKeyEvents:true,onTrigger1Click:function(event){this.setValue('');this.triggers[0].hide();this.triggers[1].hide();this.fireEvent('keywordSearchCleared');},onTrigger2Click:function(event){var txtValue=this.getValue();this.fireEvent('runKeywordSearch',txtValue);},listeners:{'keyup':function(field,e){var txtValue=this.getValue();if(txtValue.length>0){this.triggers[0].show();this.triggers[1].show();this.fireEvent('keywordSearchBeingTyped');}
if(txtValue.length==0){this.triggers[0].hide();this.triggers[1].hide();this.fireEvent('keywordSearchCleared');}},'specialkey':function(field,e){if(e.getKey()==e.ENTER){var txtValue=this.getValue();this.fireEvent('runKeywordSearch',txtValue);}}}});var searchInGridFieldPubmed=new Ext.form.TwinTriggerField({emptyText:'pubmed ID',trigger1Class:'x-form-clear-trigger',trigger2Class:'x-form-search-trigger',hideTrigger1:true,hideTrigger2:true,enableKeyEvents:true,onTrigger1Click:function(event){this.setValue('');this.triggers[0].hide();this.triggers[1].hide();this.fireEvent('pubmedSearchCleared');},onTrigger2Click:function(event){var txtValue=this.getValue();this.fireEvent('runPubmedSearch',txtValue);},listeners:{'keyup':function(field,e){var txtValue=this.getValue();if(txtValue.length>0){this.triggers[0].show();this.triggers[1].show();this.fireEvent('pubmedSearchBeingTyped');}
if(txtValue.length==0){this.triggers[0].hide();this.triggers[1].hide();this.fireEvent('pubmedSearchCleared');}},'specialkey':function(field,e){if(e.getKey()==e.ENTER){var txtValue=this.getValue();this.fireEvent('runPubmedSearch',txtValue);}}}});searchInGridFieldKeyword.on('keywordSearchCleared',function(){searchInGridFieldPubmed.enable();},this);searchInGridFieldKeyword.on('keywordSearchBeingTyped',function(){searchInGridFieldPubmed.setValue('');searchInGridFieldPubmed.disable();},this);searchInGridFieldKeyword.on('runKeywordSearch',function(query){searchInGridFieldPubmed.setValue('');searchInGridFieldPubmed.enable();this.runKeywordSearch(query);},this);searchInGridFieldPubmed.on('pubmedSearchCleared',function(){searchInGridFieldKeyword.enable();},this);searchInGridFieldPubmed.on('pubmedSearchBeingTyped',function(){searchInGridFieldKeyword.setValue('');searchInGridFieldKeyword.disable();},this);searchInGridFieldPubmed.on('runPubmedSearch',function(query){searchInGridFieldKeyword.setValue('');searchInGridFieldKeyword.enable();this.runPubmedSearch(query);},this);var mytbar=new Ext.Toolbar({items:['Search for papers by ',searchInGridFieldKeyword,' or ',searchInGridFieldPubmed,'-',new Ext.CycleButton({ref:'filterInGridButton',showText:true,disabled:true,prependText:'Filter by ',items:[{text:'Authors',id:'authorList',iconCls:'view-text',checked:true},{text:'Title',id:'title',iconCls:'view-text'},{text:'PudMed ID',id:'pubAccession',iconCls:'view-text'},{text:'Mesh Terms',id:'meshTerms',iconCls:'view-text'}]}),new Ext.form.TextField({ref:'filterInGridField',enableKeyEvents:true,emptyText:'Filter',disabled:true,listeners:{'keyup':function(){var txtValue=this.getTopToolbar().filterInGridField.getValue();this.getStore().clearFilter();if(txtValue.length>1){this.getStore().filter(this.getTopToolbar().filterInGridButton.getActiveItem().id,txtValue,true,false);}},scope:this}})]});Ext.apply(this,{sm:new Ext.grid.RowSelectionModel({singleSelect:true,listeners:{rowselect:function(sm,index,record){this.fireEvent('bibRefSelected',record);},scope:this}}),tbar:mytbar});Gemma.BibliographicReference.SearchResultGrid.superclass.initComponent.call(this);}});function doUpdate(id){var callParams=[];callParams.push(id);var delegate=updateDone.createDelegate(this,[],true);var errorHandler=handleFailure.createDelegate(this,[],true);callParams.push({callback:delegate,errorHandler:errorHandler});BibliographicReferenceController.update.apply(this,callParams);Ext.DomHelper.overwrite("messages",{tag:'img',src:'/Gemma/images/default/tree/loading.gif'});Ext.DomHelper.append("messages",{tag:'span',html:"&nbsp;Please wait..."});}
function updateDone(data){Ext.DomHelper.overwrite("messages",{tag:'img',src:'/Gemma/images/icons/ok.png'});Ext.DomHelper.append("messages",{tag:'span',html:"&nbsp;Updated"});}
function handleFailure(data,e){Ext.DomHelper.overwrite("messages",{tag:'img',src:'/Gemma/images/icons/warning.png'});Ext.DomHelper.append("messages",{tag:'span',html:"&nbsp;There was an error: "+data});}
Ext.namespace('Gemma.BibliographicReference');Gemma.BibliographicReference.DetailsPanel=Ext.extend(Ext.Panel,{genePhenotypeSeparator:'<span style="font-size:22px; line-height:14px;">&harr;</span>',layout:'form',title:'Bibliographic Reference Details',autoScroll:true,collapseByDefault:false,defaults:{hidden:true,labelWidth:120},loadFromId:function(id){BibliographicReferenceController.load(id,function(data){var rec=new Gemma.BibliographicReference.Record(data);this.updateFields(rec);}.createDelegate(this));},initComponent:function(){var currentBibliographicPhenotypes=null;var currentEvidenceId=null;var getPudmedAnchor=function(pubmedUrl){return(new Ext.Template(Gemma.Common.tpl.pubmedLink.simple)).apply({pubmedURL:pubmedUrl});};var getGenePhenotypeRow=function(bibliographicPhenotype){var genePhenotypeRow='';if(bibliographicPhenotype.evidenceId==currentEvidenceId){genePhenotypeRow+='<b>';}
genePhenotypeRow+='<a target="_blank" href="'+
Gemma.LinkRoots.genePageNCBI+bibliographicPhenotype.geneNCBI+'">'+
bibliographicPhenotype.geneName+'</a> '+this.genePhenotypeSeparator+' ';for(var i=0;i<bibliographicPhenotype.phenotypesValues.length;i++){genePhenotypeRow+=bibliographicPhenotype.phenotypesValues[i].value;if(i<bibliographicPhenotype.phenotypesValues.length-1){genePhenotypeRow+='; ';}}
if(bibliographicPhenotype.evidenceId==currentEvidenceId){genePhenotypeRow+='</b>'+' <img height="12" src="/Gemma/images/icons/asterisk_black.png" ext:qtip="This is the annotation you are editing." /> ';}
return genePhenotypeRow;}.createDelegate(this);Ext.apply(this,{updateFields:function(bibRefRecord,evidenceId){this.citation.show();this.detailsFieldset.show();this.abstractBibli.setValue(bibRefRecord.get('abstractText'));this.authors.setValue(bibRefRecord.get('authorList'));if(bibRefRecord.get('citation')){this.citation.setValue(bibRefRecord.get('citation').citation+' '+
getPudmedAnchor(bibRefRecord.get('citation').pubmedURL));}
var allExperiments='';var i;var ee;for(i=0;i<bibRefRecord.get('experiments').length;i++){ee=bibRefRecord.get('experiments')[i];allExperiments+='<a href="'+Gemma.LinkRoots.expressionExperimentPage+ee.id
+'" target="_blank" >'+ee.shortName+'</a>'+" : ";allExperiments+=ee.name+"<br />";}
this.experiments.setValue(allExperiments);var allMeshTerms="";for(i=0;i<bibRefRecord.get('meshTerms').length;i++){allMeshTerms+=bibRefRecord.get('meshTerms')[i];if(i<bibRefRecord.get('meshTerms').length-1){allMeshTerms+="; ";}}
this.pubmed.setValue(bibRefRecord.get('pubAccession'));this.mesh.setValue(allMeshTerms);var allChemicalsTerms="";for(i=0;i<bibRefRecord.get('chemicalsTerms').length;i++){allChemicalsTerms+=bibRefRecord.get('chemicalsTerms')[i];if(i<bibRefRecord.get('chemicalsTerms').length-1){allChemicalsTerms+="; ";}}
this.chemicals.setValue(allChemicalsTerms);this.tagsFieldset.setVisible((allMeshTerms.length>0&&allChemicalsTerms.length>0));currentBibliographicPhenotypes=bibRefRecord.get('bibliographicPhenotypes');currentEvidenceId=evidenceId;var allGenePhenotypeAssociations="";if(currentBibliographicPhenotypes!=null){for(i=0;i<currentBibliographicPhenotypes.length;i++){allGenePhenotypeAssociations+=getGenePhenotypeRow(currentBibliographicPhenotypes[i])+'<br />';}}
this.genePhenotypeAssociation.setValue(allGenePhenotypeAssociations);this.detailsFieldset.items.each(function(field){if(field.getValue()==""){field.hide();}else{field.show();}});if(this.experiments.getValue()==""&&this.genePhenotypeAssociation.getValue()==""){this.annotationsFieldset.hide();}else{this.annotationsFieldset.show();}
this.annotationsFieldset.items.each(function(field){if(field.getValue()==""){field.hide();}else{field.show();}});},showAnnotationError:function(errorEvidenceIds,errorColor){var allGenePhenotypeAssociations="";if(currentBibliographicPhenotypes!=null){for(var i=0;i<currentBibliographicPhenotypes.length;i++){var hasError=false;for(var j=0;!hasError&&j<errorEvidenceIds.length;j++){hasError=(currentBibliographicPhenotypes[i].evidenceId==errorEvidenceIds[j]);}
if(hasError&&errorColor!=null){allGenePhenotypeAssociations+='<span style="color: '+errorColor+';">';}
allGenePhenotypeAssociations+=getGenePhenotypeRow(currentBibliographicPhenotypes[i]);if(hasError&&errorColor!=null){allGenePhenotypeAssociations+='</span>';}
allGenePhenotypeAssociations+='<br />';}}
this.genePhenotypeAssociation.setValue(allGenePhenotypeAssociations);}});Gemma.BibliographicReference.DetailsPanel.superclass.initComponent.call(this);this.citation=new Ext.form.DisplayField({hideLabel:true});this.abstractBibli=new Ext.form.TextArea({anchor:'100%',grow:true,growMin:1,growMax:62,fieldLabel:'Abstract',disabledClass:'disabled-plain',disabled:true,boxMaxWidth:600});this.authors=new Ext.form.DisplayField({fieldLabel:'Authors'});this.pubmed=new Ext.form.DisplayField({fieldLabel:'PubMed Id'});this.mesh=new Ext.form.DisplayField({fieldLabel:'MeSH'});this.chemicals=new Ext.form.DisplayField({fieldLabel:'Chemicals'});this.detailsFieldset=new Ext.form.FieldSet({defaults:{labelStyle:'padding-top: 1px;'},collapsed:this.collapseByDefault,cls:'no-collapsed-border',anchor:'100%',title:'Publication Details',collapsible:true,style:"margin-bottom: 3px;",items:[this.abstractBibli,this.authors,this.pubmed]});this.experiments=new Ext.form.DisplayField({fieldLabel:'Experiments'});this.genePhenotypeAssociation=new Ext.form.DisplayField({fieldLabel:'Gene '+this.genePhenotypeSeparator+' Phenotype'});this.annotationsFieldset=new Ext.form.FieldSet({defaults:{labelStyle:'padding-top: 1px;'},cls:'no-collapsed-border',anchor:'100%',title:'Associations',collapsible:true,style:"margin-bottom: 3px;",items:[this.experiments,this.genePhenotypeAssociation]});this.tagsFieldset=new Ext.form.FieldSet({collapsed:this.collapseByDefault,defaults:{labelStyle:'padding-top: 1px;'},cls:'no-collapsed-border',anchor:'100%',title:'Tags',collapsible:true,style:"margin-bottom: 3px;",items:[this.mesh,this.chemicals]});this.add(this.citation,this.detailsFieldset,this.annotationsFieldset,this.tagsFieldset);this.doLayout();}});Ext.namespace('Gemma.BibliographicReference');Gemma.BibliographicReference.PagingStore=Ext.extend(Ext.data.Store,{initComponent:function(){Gemma.BibliographicReference.PagingStore.superclass.initComponent.call(this);},remoteSort:true,proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:BibliographicReferenceController.browse,getDwrArgsFunction:function(request){var params=request.params;return[params];}}}}),reader:new Ext.data.JsonReader({root:'records',successProperty:'success',messageProperty:'message',totalProperty:'totalRecords',idProperty:"id",fields:Gemma.BibliographicReference.Record}),writer:new Ext.data.JsonWriter({writeAllFields:true})});Gemma.BibliographicReference.PagingGrid=Ext.extend(Ext.grid.GridPanel,{loadMask:true,autoScroll:true,layout:'fit',viewConfig:{forceFit:true},colModel:new Ext.grid.ColumnModel({defaultSortable:true,columns:[{header:"Authors",dataIndex:'authorList',width:215},{header:"Title",dataIndex:'title',id:'title',width:350},{header:"Publication",dataIndex:'publication',width:135},{header:"Date",dataIndex:'publicationDate',width:70,renderer:Ext.util.Format.dateRenderer("Y")},{header:"Pages",dataIndex:'pages',width:80,sortable:false},{header:"Experiments",dataIndex:'experiments',width:80,renderer:function(value){var result="";for(var i=0;i<value.length;i++){result=result+'&nbsp<a target="_blank" ext:qtip="View details of '+
value[i].shortName+' ('+
value[i].name+')" href="/Gemma/expressionExperiment/showExpressionExperiment.html?id='+
value[i].id+'">'+
value[i].shortName+'</a>';}
return result;}},{header:"PubMed",dataIndex:'citation',width:70,renderer:function(value){if(value&&value.pubmedURL){return'<a target="_blank" href="'+value.pubmedURL+'"><img ext:qtip="View at NCBI PubMed"  src="/Gemma/images/pubmed.gif" width="47" height="15" /></a>';}
return'';},sortable:false}]}),initComponent:function(){var pagingStore=new Gemma.BibliographicReference.PagingStore({autoLoad:{params:{start:0,limit:20}}});var mybbar=new Ext.PagingToolbar({store:pagingStore,displayInfo:true,pageSize:20,plugins:[new Ext.ux.PageSizePlugin()]});var mytbar=new Ext.Toolbar({items:[new Ext.CycleButton({ref:'btnFilter',showText:true,prependText:'Filter by ',items:[{text:'Authors',id:'authorList',iconCls:'view-text',checked:true},{text:'Title',id:'title',iconCls:'view-text'},{text:'PudMed ID',id:'pubAccession',iconCls:'view-text'},{text:'Mesh Terms',id:'meshTerms',iconCls:'view-text'}]}),new Ext.form.TextField({ref:'searchInGridField',enableKeyEvents:true,emptyText:'Filter',listeners:{'keyup':function(){var txtValue=this.getTopToolbar().searchInGridField.getValue();this.getStore().clearFilter();if(txtValue.length>1){this.getStore().filter(this.getTopToolbar().btnFilter.getActiveItem().id,txtValue,true,false);}},scope:this}})]});Ext.apply(this,{store:pagingStore,sm:new Ext.grid.RowSelectionModel({singleSelect:true,listeners:{rowselect:function(sm,index,record){this.fireEvent('bibRefSelected',record);},scope:this}}),tbar:mytbar,bbar:mybbar});Gemma.BibliographicReference.PagingGrid.superclass.initComponent.call(this);this.on('render',function(){this.getSelectionModel().selectFirstRow();},this);}});Ext.namespace('Gemma.BibliographicReference');Gemma.BibliographicReference.Browser=Ext.extend(Ext.Panel,{layout:'border',initComponent:function(){Gemma.BibliographicReference.Browser.superclass.initComponent.call(this);var grid=new Gemma.BibliographicReference.SearchResultGrid({region:'center',title:'Bibliographic References'});var details=new Gemma.BibliographicReference.DetailsPanel({region:'south',split:true,title:'',collapsible:true,collapsed:true});this.add(grid);this.add(details);this.doLayout();grid.on('bibRefSelected',function(record){details.expand();details.updateFields(record);},this);this.on('render',function(){details.setHeight(Ext.getBody().getViewSize().height/2);},this);}});Ext.namespace('Gemma');Gemma.PhenotypeTreeGridPanel=Ext.extend(Ext.ux.maximgb.tg.GridPanel,{storeAutoLoad:false,title:"Phenotypes Tree",autoScroll:true,stripeRows:true,loadMask:true,master_column_id:'value',autoExpandColumn:'value',initComponent:function(){var DISABLED_CLASS='x-item-disabled';var PHENOTYPE_COLUMN_INDEX=1;var currentSearchedCellRowIndices=[];var setRowLookSelected=function(index,isLookSelected){var view=this.getView();if(isLookSelected){if(this.getSelectionModel().isSelected(index)){this.getSelectionModel().deselectRow(index);}
view.addRowClass(index,DISABLED_CLASS);view.addRowClass(index,view.selectedRowClass);}else{view.removeRowClass(index,DISABLED_CLASS);view.removeRowClass(index,view.selectedRowClass);}}.createDelegate(this);var isAncestorSelected=function(record){var ancestors=this.getStore().getNodeAncestors(record);var isSelected=false;for(var i=0;!isSelected&&i<ancestors.length;i++){isSelected=this.getSelectionModel().isSelected(ancestors[i]);}
return isSelected;}.createDelegate(this);var findSamePhenotypeIndices=function(urlId){var allIndices=[];var index=this.getStore().findExact('urlId',urlId,0);while(index>=0){allIndices.push(index);index=this.getStore().findExact('urlId',urlId,index+1);}
return allIndices;}.createDelegate(this);var setDescendantRowsLookSelected=function(parentRecord,isLookSelected){var childrenRecords=this.getStore().getNodeChildren(parentRecord);var view=this.getView();for(var i=0;i<childrenRecords.length;i++){var currIndex=this.getStore().indexOf(childrenRecords[i]);var samePhenotypeIndices=findSamePhenotypeIndices(childrenRecords[i].data.urlId);var shouldChangeRowLookSelected=true;if(!isLookSelected){for(var j=0;shouldChangeRowLookSelected&&j<samePhenotypeIndices.length;j++){shouldChangeRowLookSelected=!isAncestorSelected(this.getStore().getAt(samePhenotypeIndices[j]));}}
if(shouldChangeRowLookSelected){for(var j=0;j<samePhenotypeIndices.length;j++){setRowLookSelected(samePhenotypeIndices[j],isLookSelected);}
setRowLookSelected(currIndex,isLookSelected);}
if(this.getStore().hasChildNodes(childrenRecords[i])){setDescendantRowsLookSelected(childrenRecords[i],isLookSelected);}}}.createDelegate(this);var isSelectingSamePhenotypes=false;var setSamePhenotypeRowsSelected=function(urlId,currentRowIndex,isSelected){if(!isSelectingSamePhenotypes){var samePhenotypeIndices=findSamePhenotypeIndices(urlId);for(var i=0;i<samePhenotypeIndices.length;i++){if(i==0){isSelectingSamePhenotypes=true;}
if(samePhenotypeIndices[i]!=currentRowIndex){if(isSelected){this.getSelectionModel().selectRow(samePhenotypeIndices[i],true);}else{this.getSelectionModel().deselectRow(samePhenotypeIndices[i]);}}
if(i==samePhenotypeIndices.length-1){isSelectingSamePhenotypes=false;}}}}.createDelegate(this);var checkboxSelectionModel=new Ext.grid.CheckboxSelectionModel({singleSelect:false,header:'',listeners:{beforerowselect:function(selectionModel,rowIndex,keep,record){return!Ext.get(this.getView().getRow(rowIndex)).hasClass(DISABLED_CLASS);},rowdeselect:function(selectionModel,rowIndex,record){setDescendantRowsLookSelected(record,false);setSamePhenotypeRowsSelected(record.data.urlId,rowIndex,false);},rowselect:function(selectionModel,rowIndex,record){setDescendantRowsLookSelected(record,true);setSamePhenotypeRowsSelected(record.data.urlId,rowIndex,true);},scope:this}});var phenotypeSearchComboBox=new Ext.form.ComboBox({allowBlank:true,editable:true,forceSelection:true,mode:'local',store:new Ext.data.JsonStore({fields:[{name:'value',sortType:Ext.data.SortTypes.asUCString},'urlId'],idProperty:'urlId',sortInfo:{field:'value',direction:'ASC'}}),valueField:'urlId',displayField:'value',width:200,hideTrigger:true,typeAhead:false,emptyText:'Search Phenotypes',triggerAction:'all',selectOnFocus:true});phenotypeSearchComboBox.on({select:function(comboBox,record,index){applyPhenotypeSearch();},blur:function(comboBox){applyPhenotypeSearch();},scope:this});var applyPhenotypeSearch=function(){for(var i=0;i<currentSearchedCellRowIndices.length;i++){this.getView().onCellDeselect(currentSearchedCellRowIndices[i],PHENOTYPE_COLUMN_INDEX);}
currentSearchedCellRowIndices=findSamePhenotypeIndices(phenotypeSearchComboBox.getValue());for(var i=0;i<currentSearchedCellRowIndices.length;i++){this.getView().onCellSelect(currentSearchedCellRowIndices[i],PHENOTYPE_COLUMN_INDEX);this.getView().ensureVisible(currentSearchedCellRowIndices[i],PHENOTYPE_COLUMN_INDEX,false);}}.createDelegate(this);var commonConfig=new Gemma.PhenotypeGridPanelCommonConfig();Ext.apply(this,{viewConfig:commonConfig.getViewConfig(),store:new Ext.ux.maximgb.tg.AdjacencyListStore({proxy:commonConfig.getStoreProxy(this.phenotypeStoreProxy),baseParams:commonConfig.getBaseParams(),reader:new Ext.data.JsonReader({idProperty:'_id',fields:commonConfig.getStoreReaderFields()}),autoLoad:this.storeAutoLoad}),columns:[checkboxSelectionModel,commonConfig.getPhenotypeValueColumn({id:'value'}),commonConfig.getGeneCountColumn()],sm:checkboxSelectionModel,listeners:{hide:commonConfig.getHideHandler,cellclick:commonConfig.getCellClickHandler},tbar:[phenotypeSearchComboBox,commonConfig.getAddNewPhenotypeAssociationButton(this),{handler:function(){this.loadMask.show();Ext.defer(function(){this.getStore().collapseAll();},10,this);},scope:this,icon:"/Gemma/images/icons/details_hidden.gif",tooltip:"Collapse all"},{handler:function(){this.loadMask.show();Ext.defer(function(){this.getStore().expandAll();},10,this);},scope:this,icon:"/Gemma/images/icons/details.gif",tooltip:"Expand all"}]});Gemma.PhenotypeTreeGridPanel.superclass.initComponent.call(this);this.getStore().on('load',function(store,records,options){commonConfig.resetSelectionConfig();var phenotypeSearchComboBoxData=[];for(var i=0;i<records.length;i++){phenotypeSearchComboBoxData.push({value:records[i].data.value,urlId:records[i].data.urlId});}
phenotypeSearchComboBox.getStore().loadData(phenotypeSearchComboBoxData);if(phenotypeSearchComboBox.getValue()!==''){currentSearchedCellRowIndices=[];applyPhenotypeSearch();if(currentSearchedCellRowIndices.length<=0){phenotypeSearchComboBox.setValue('');}}},this,{delay:500});this.getStore().on('datachanged',function(store,rc){this.loadMask.hide();},this);}});Ext.namespace('Gemma');Gemma.PhenotypeEvidenceGridPanel=Ext.extend(Ext.grid.GridPanel,{storeAutoLoad:false,storeSortInfo:{field:'containQueryPhenotype',direction:'DESC'},evidenceStoreProxy:null,evidencePhenotypeColumnRenderer:null,displayPhenotypeAsLink:false,allowCreateOnlyWhenGeneSpecified:true,displayEvidenceCodeFullName:false,title:'Evidence',autoScroll:true,stripeRows:true,loadMask:true,disableSelection:true,viewConfig:{forceFit:true,deferEmptyText:false,emptyText:'No gene has been selected.'},hasRelevanceColumn:true,extraColumns:null,currentPhenotypes:null,currentGene:null,deferLoadToRender:false,showDialogViewBibliographicReferenceOutsideOfGemma:function(){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.PhenotypePanel.viewBibliographicReferenceOutsideOfGemmaTitle,Gemma.HelpText.WidgetDefaults.PhenotypePanel.viewBibliographicReferenceOutsideOfGemmaText);},hasUserLoggedIn:function(){return Ext.get("hasUser")!=null&&Ext.get("hasUser").getValue();},hasAdminLoggedIn:function(){return Ext.get("hasAdmin")!=null&&Ext.get("hasAdmin").getValue();},initComponent:function(){var RELEVANCE_COLUMNS_START_INDEX=1;var DEFAULT_TITLE=this.title;var metaAnalysisUtilities=new Gemma.MetaAnalysisUtilities();var DEFAULT_THRESHOLD=metaAnalysisUtilities.getDefaultThreshold();var phenotypeAssociationFormWindow;var metaAnalysisCache=[];var loggedInColumns=[{columnId:'owner',isAdminColumn:true},{columnId:'lastUpdated',isAdminColumn:false},{columnId:'adminLinks',isAdminColumn:false}];var setColumnsVisible=function(isAdmin,isVisible){var columnModel=this.getColumnModel();Ext.each(loggedInColumns,function(column,index){if((!isVisible)||(column.isAdminColumn&&isAdmin)||(!column.isAdminColumn)){columnModel.setHidden(columnModel.getIndexById(column.columnId),!isVisible);}else{columnModel.setHidden(columnModel.getIndexById(column.columnId),true);}});}.createDelegate(this);if(!Gemma.isRunningOutsideOfGemma()){Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){setColumnsVisible(isAdmin,true);},this);Gemma.Application.currentUser.on("logOut",function(){setColumnsVisible(false,false);},this);}
var generateLink=function(methodWithArguments,imageSrc,description,width,height){return'<span class="link" onClick="return Ext.getCmp(\''+this.getId()+'\').'+methodWithArguments+'"><img src="'+imageSrc+'" alt="'+description+'" ext:qtip="'+description+'" '+
((width&&height)?'width="'+width+'" height="'+height+'" ':'')+'/></span>';}.createDelegate(this);var generatePublicationLinks=function(pudmedId,pubmedUrl){var anchor='';if(pudmedId!=null){var imageSrc='/Gemma/images/icons/magnifier.png';var size=12;if(Gemma.isRunningOutsideOfGemma()){anchor+=generateLink('showDialogViewBibliographicReferenceOutsideOfGemma();',imageSrc,'View Bibliographic Reference',size,size);}else{var description='Go to Bibliographic Reference (in new window)';anchor+='<a target="_blank" href="/Gemma/bibRef/searchBibRefs.html?pubmedID='+
pudmedId+'"><img src="'+imageSrc+'" alt="'+description+'" ext:qtip="'+description+'" width="'+size+'" height="'+size+'" /></a>';}}
return anchor+(new Ext.Template(Gemma.Common.tpl.pubmedLink.simple)).apply({pubmedURL:pubmedUrl});}.createDelegate(this);var convertToExternalDatabaseAnchor=function(databaseName,url,useDatabaseIcon){var html='<a target="_blank" href="'+url+'">';if(useDatabaseIcon){html+='<img ext:qtip="Go to '+databaseName+' (in new window)" '+'src="/Gemma/images/logo/'+databaseName+'.gif" alt="'+databaseName+'" />';}else{html+=url;}
html+='</a>';return html;};var showPhenotypeAssociationFormWindow=function(action,data){if(!phenotypeAssociationFormWindow||(phenotypeAssociationFormWindow&&phenotypeAssociationFormWindow.isDestroyed)){phenotypeAssociationFormWindow=new Gemma.PhenotypeAssociationForm.Window();this.relayEvents(phenotypeAssociationFormWindow,['phenotypeAssociationChanged']);}
phenotypeAssociationFormWindow.showWindow(action,data);}.createDelegate(this);var createPhenotypeAssociationButton=new Ext.Button({disabled:this.allowCreateOnlyWhenGeneSpecified?(this.currentGene==null):false,handler:Gemma.isRunningOutsideOfGemma()?function(){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.PhenotypePanel.modifyPhenotypeAssociationOutsideOfGemmaTitle,Gemma.HelpText.WidgetDefaults.PhenotypePanel.modifyPhenotypeAssociationOutsideOfGemmaText);}:function(){showPhenotypeAssociationFormWindow(Gemma.PhenotypeAssociationForm.ACTION_CREATE,{gene:this.currentGene,phenotypes:this.currentPhenotypes});},scope:this,icon:"/Gemma/images/icons/add.png",tooltip:"Add new phenotype association"});MyRowExpander=Ext.extend(Ext.grid.RowExpander,{getRowClass:function(record,index,rowParams,store){if(record.data.homologueEvidence){rowParams.tstyle+='color: gray;';}else{rowParams.tstyle+='color: black;';}
return this.superclass().getRowClass.call(this,record,index,rowParams,store);},enableCaching:false,lazyRender:false,tpl:new Ext.Template('<div class="x-grid3-cell-inner" style="white-space: normal;">{rowExpanderText}</div>')});var rowExpander=new MyRowExpander();if(this.evidencePhenotypeColumnRenderer==null){this.evidencePhenotypeColumnRenderer={fn:function(value,metadata,record,rowIndex,colIndex,store){var phenotypesHtml='';for(var i=0;i<value.length;i++){if(this.displayPhenotypeAsLink){phenotypesHtml+=String.format('<a target="_blank" href="/Gemma/phenotypes.html?phenotypeUrlId={0}&geneId={2}" ext:qtip="Go to Phenotype Page (in new window)">{1}</a>',value[i].urlId,value[i].value,record.data.geneId);}else{if(value[i].child||value[i].root){phenotypesHtml+='<span style="font-weight: bold; color: red;">'+
value[i].value+'</span>';}else{phenotypesHtml+=value[i].value;}}
phenotypesHtml+='<br />';}
return phenotypesHtml;},scope:this};}
var getGeneLink=this.getGeneLink;var getFormWindowData=function(id){var record=this.getStore().getById(id);var evidenceClassName=record.data.className;var data=null;if(evidenceClassName==='LiteratureEvidenceValueObject'){data={pubMedId:record.data.citationValueObject.pubmedAccession};}else if(evidenceClassName==='ExperimentalEvidenceValueObject'){data={primaryPubMedId:record.data.primaryPublicationCitationValueObject!=null?record.data.primaryPublicationCitationValueObject.pubmedAccession:null,secondaryPubMedId:record.data.relevantPublicationsCitationValueObjects!=null&&record.data.relevantPublicationsCitationValueObjects.length>0?record.data.relevantPublicationsCitationValueObjects[0].pubmedAccession:null,experimentCharacteristics:record.data.experimentCharacteristics};}
if(data!=null){data.evidenceId=record.data.id;data.gene={id:record.data.geneId,ncbiId:record.data.geneNCBI,officialSymbol:record.data.geneOfficialSymbol,officialName:record.data.geneOfficialName,taxonCommonName:record.data.taxonCommonName,taxonId:null};data.phenotypes=record.data.phenotypes;data.evidenceClassName=evidenceClassName;data.isNegativeEvidence=record.data.isNegativeEvidence;data.description=record.data.description;data.evidenceCode=record.data.evidenceCode;data.lastUpdated=record.data.lastUpdated;}
return data;}.createDelegate(this);var showLoadMask=function(msg){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl());}
this.loadMask.msg=msg?msg:"Loading ...";this.loadMask.show();}.createDelegate(this);var hideLoadMask=function(){this.loadMask.hide();}.createDelegate(this);var showMetaAnalysisWindow=function(metaAnalysis,analysisName,numGenesAnalyzed){metaAnalysis.name=analysisName;metaAnalysis.numGenesAnalyzed=numGenesAnalyzed;var viewMetaAnalysisWindow=new Gemma.MetaAnalysisWindow({title:'View Meta-analysis for '+analysisName,metaAnalysis:metaAnalysis,defaultQvalueThreshold:DEFAULT_THRESHOLD});viewMetaAnalysisWindow.show();};var showViewEvidenceWindow=function(metaAnalysis,storeId,metaAnalysisId){var record=this.getStore().getById(storeId);if(record!=null){metaAnalysis.name=record.data.geneDifferentialExpressionMetaAnalysisSummaryValueObject.name;metaAnalysis.numGenesAnalyzed=record.data.geneDifferentialExpressionMetaAnalysisSummaryValueObject.numGenesAnalyzed;var viewEvidenceWindow=new Gemma.MetaAnalysisEvidenceWindow({metaAnalysisId:metaAnalysisId,metaAnalysis:metaAnalysis,showActionButton:record.data.evidenceSecurityValueObject.currentUserHasWritePermission,title:'View Neurocarta evidence for '+record.data.geneDifferentialExpressionMetaAnalysisSummaryValueObject.name,diffExpressionEvidence:record.data.geneDifferentialExpressionMetaAnalysisSummaryValueObject.diffExpressionEvidence,modal:false,listeners:{evidenceRemoved:function(){this.store.reload();this.fireEvent('phenotypeAssociationChanged');},scope:this}});viewEvidenceWindow.show();}};var processMetaAnalysis=function(id,errorDialogTitle,callback,args){var metaAnalysisFound=metaAnalysisCache[id];if(metaAnalysisFound){args.splice(0,0,metaAnalysisFound);callback.apply(this,args);}else{showLoadMask();DiffExMetaAnalyzerController.findDetailMetaAnalysisById(id,function(baseValueObject){hideLoadMask();if(baseValueObject.errorFound){Gemma.alertUserToError(baseValueObject,errorDialogTitle);}else{metaAnalysisCache[id]=baseValueObject.valueObject;args.splice(0,0,metaAnalysisCache[id]);callback.apply(this,args);}}.createDelegate(this));}}.createDelegate(this);var evidenceStore=new Ext.data.Store({autoLoad:this.storeAutoLoad,proxy:this.evidenceStoreProxy==null?new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:GeneController.loadGeneEvidence,getDwrArgsFunction:function(request){return[request.params['taxonId'],request.params['showOnlyEditable'],request.params["geneId"],request.params["phenotypeValueUris"]];}}}}):this.evidenceStoreProxy,reader:new Ext.data.JsonReader({idProperty:'id',fields:['id','className','description','evidenceCode','evidenceSecurityValueObject','evidenceSource','isNegativeEvidence','lastUpdated','phenotypes','containQueryPhenotype','literatureEvidences','geneDifferentialExpressionMetaAnalysisSummaryValueObject','selectionThreshold','numEvidenceFromSameMetaAnalysis','experimentCharacteristics','primaryPublicationCitationValueObject','relevantPublicationsCitationValueObjects','citationValueObject','geneId','geneNCBI','geneOfficialSymbol','geneOfficialName','taxonCommonName','homologueEvidence',{name:'rowExpanderText',convert:function(value,record){var descriptionHtml='';switch(record.className){case'DiffExpressionEvidenceValueObject':descriptionHtml+='<p>';descriptionHtml+='<b>Name</b>: '+record.geneDifferentialExpressionMetaAnalysisSummaryValueObject.name+' '+
generateLink('eval(\'processMetaAnalysis('+
record.geneDifferentialExpressionMetaAnalysisSummaryValueObject.id+', '+'\\\'Cannot view meta-analysis\\\', '+'showMetaAnalysisWindow, '+'[ \\\''+record.geneDifferentialExpressionMetaAnalysisSummaryValueObject.name+'\\\', '+
record.geneDifferentialExpressionMetaAnalysisSummaryValueObject.numGenesAnalyzed+' ])\');','/Gemma/images/icons/magnifier.png','View included result sets and results',10,10)+' ('+record.geneDifferentialExpressionMetaAnalysisSummaryValueObject.numResultSetsIncluded+' result sets included; '+
record.geneDifferentialExpressionMetaAnalysisSummaryValueObject.numGenesAnalyzed+' genes analyzed)<br />';descriptionHtml+='<b>q-value threshold</b>: '+record.selectionThreshold+' ('+record.numEvidenceFromSameMetaAnalysis+' genes '+
generateLink('eval(\'processMetaAnalysis('+
record.geneDifferentialExpressionMetaAnalysisSummaryValueObject.id+', '+'\\\'Cannot view Neurocarta evidence\\\', '+'showViewEvidenceWindow, '+'[ '+record.id+', '+record.geneDifferentialExpressionMetaAnalysisSummaryValueObject.id+' ])\');','/Gemma/images/icons/magnifier.png','View Neurocarta evidence',10,10)+')<br />';descriptionHtml+='<b>p-value</b>: '+record.metaPvalue.toExponential(2)+'; '+'<b>q-value</b>: '+record.metaQvalue.toExponential(2)+'; '+'<b>Direction</b>: '+metaAnalysisUtilities.generateDirectionHtml(record.upperTail)+'<br />';descriptionHtml+='</p>';break;case'ExperimentalEvidenceValueObject':if(record.primaryPublicationCitationValueObject!=null){descriptionHtml+='<p><b>Primary Publication</b>: '+
record.primaryPublicationCitationValueObject.citation+' '+
generatePublicationLinks(record.primaryPublicationCitationValueObject.pubmedAccession,record.primaryPublicationCitationValueObject.pubmedURL)+'</p>';}
var relPub=record.relevantPublicationsCitationValueObjects;if(relPub!=null&&relPub.length>0){descriptionHtml+='<p><b>Relevant Publication</b>: ';for(var i=0;i<relPub.length;i++){descriptionHtml+=relPub[i].citation+' '+
generatePublicationLinks(relPub[i].pubmedAccession,relPub[i].pubmedURL);if(i<relPub.length-1){descriptionHtml+=" | ";}}
descriptionHtml+='</p>';}
var expChar=record.experimentCharacteristics;if(expChar!=null&&expChar.length>0){var expCharMap=new Object();for(var i=0;i<expChar.length;i++){if(expCharMap[expChar[i].category]==null){expCharMap[expChar[i].category]=expChar[i].value;}else{expCharMap[expChar[i].category]+=" | "+expChar[i].value;}}
descriptionHtml+='<p>';Ext.iterate(expCharMap,function(key,value){descriptionHtml+='<b>'+key+"</b>: "+value+'<br />';});descriptionHtml+='</p>';}
break;case'GenericEvidenceValueObject':break;case'GroupEvidenceValueObject':descriptionHtml+='<p>';for(var i=0;i<record.literatureEvidences.length;i++){descriptionHtml+='<b>Publication '+(i+1)+'</b>: '+
record.literatureEvidences[i].citationValueObject.citation+' '+
generatePublicationLinks(record.literatureEvidences[i].citationValueObject.pubmedAccession,record.literatureEvidences[i].citationValueObject.pubmedURL)+'<br />';}
descriptionHtml+='</p>';break;case'LiteratureEvidenceValueObject':if(record.citationValueObject!=null){descriptionHtml+='<p><b>Publication</b>: '+
record.citationValueObject.citation+' '+
generatePublicationLinks(record.citationValueObject.pubmedAccession,record.citationValueObject.pubmedURL)+'</p>';}
break;case'UrlEvidenceValueObject':break;}
if(record.evidenceSource!=null&&record.evidenceSource.externalDatabase.name!=null&&record.evidenceSource.externalUrl!=null){var databaseName=record.evidenceSource.externalDatabase.name;descriptionHtml+='<p><b>Evidence Source</b>: '+databaseName+' '+convertToExternalDatabaseAnchor(databaseName,record.evidenceSource.externalUrl,false)+'</p>';}
if(record.description!=null&&record.description!==''){descriptionHtml+='<p><b>Note</b>: '+record.description+'</p>';}
if(record.homologueEvidence){var geneLink=getGeneLink?getGeneLink(record.geneId):'/Gemma/gene/showGene.html?id='+record.geneId;descriptionHtml+=String.format("<p><b>*</b> Inferred from homology with the {0} gene {1} "+"<a target='_blank' href='"+geneLink+"' ext:qtip='Go to {1} Details (in new window)'>"+"<img src='/Gemma/images/icons/magnifier.png' height='10' width='10'/>"+"</a></p>",record.taxonCommonName,record.geneOfficialSymbol);}
return descriptionHtml;}}]}),sortInfo:this.storeSortInfo});var columns=[rowExpander,{header:"Phenotypes",dataIndex:'phenotypes',width:0.35,renderer:this.evidencePhenotypeColumnRenderer,sortable:false},{header:"Type",dataIndex:'className',width:1,renderer:function(value,metadata,record,rowIndex,colIndex,store){var externalSource='';if(record.data.evidenceSource!=null&&record.data.evidenceSource.externalDatabase!=null){externalSource='External Source ['+record.data.evidenceSource.externalDatabase.name+']';}
var typeColumnHtml='';switch(value){case'DiffExpressionEvidenceValueObject':typeColumnHtml='Differential Expression Meta-analysis';break;case'ExperimentalEvidenceValueObject':var experimentValues='';var experimentCharacteristics=record.data.experimentCharacteristics;if(experimentCharacteristics!=null){for(var i=0;i<experimentCharacteristics.length;i++){if(experimentCharacteristics[i].category=='Experiment'){experimentValues+=experimentCharacteristics[i].value+" | ";}}
if(experimentValues.length>0){experimentValues=' [ '+experimentValues.substr(0,experimentValues.length-3)+' ]';}}
typeColumnHtml='Experimental'+experimentValues;break;case'GenericEvidenceValueObject':if(record.data.evidenceSource==null){typeColumnHtml='Note';}else{typeColumnHtml=externalSource;}
break;case'GroupEvidenceValueObject':typeColumnHtml='<b>'+record.data.literatureEvidences.length+'x</b> Literature';break;case'LiteratureEvidenceValueObject':typeColumnHtml='Literature';break;case'UrlEvidenceValueObject':typeColumnHtml='Url';break;}
if(value!=='GenericEvidenceValueObject'&&externalSource!==''){typeColumnHtml+=' from '+externalSource;}
typeColumnHtml=(record.data.isNegativeEvidence?"<img ext:qwidth='200' ext:qtip='"+
Gemma.HelpText.WidgetDefaults.PhenotypeEvidenceGridPanel.negativeEvidenceTT+"' src='/Gemma/images/icons/thumbsdown.png' height='12'/> ":"")+
typeColumnHtml;return'<span style="white-space: normal;">'+typeColumnHtml+'</span>';},sortable:true},{header:"Evidence Code",dataIndex:'evidenceCode',width:0.33,renderer:{fn:function(value,metadata,record,rowIndex,colIndex,store){var columnRenderer;if(record.data.homologueEvidence){columnRenderer='<span ext:qwidth="200" ext:qtip="'+'Inferred from homology with the '+record.data.taxonCommonName+' gene '+record.data.geneOfficialSymbol+'.'+'">'+'Inferred from '+record.data.geneOfficialSymbol+' ['+record.data.taxonCommonName+']'+'</span>';}else{var evidenceCodeInfo=Gemma.EvidenceCodeInfo[value];var qtipInfo=Gemma.EvidenceCodeInfo.getQtipInfo(value,evidenceCodeInfo);columnRenderer='<span ext:qwidth="'+qtipInfo.width+'" ext:qtip="'+qtipInfo.text+'">'+
(this.displayEvidenceCodeFullName?evidenceCodeInfo.name:value)+'</span>';}
return columnRenderer;},scope:this},sortable:true},{header:"Link Out",dataIndex:'evidenceSource',width:0.2,renderer:function(value,metadata,record,rowIndex,colIndex,store){var linkOutHtml='';switch(record.data.className){case'DiffExpressionEvidenceValueObject':break;case'ExperimentalEvidenceValueObject':if(record.data.primaryPublicationCitationValueObject!=null){linkOutHtml+=generatePublicationLinks(null,record.data.primaryPublicationCitationValueObject.pubmedURL);}
break;case'GenericEvidenceValueObject':break;case'GroupEvidenceValueObject':var pubmedURL=record.data.literatureEvidences[0].citationValueObject.pubmedURL;for(var i=1;i<record.data.literatureEvidences.length;i++){pubmedURL+=','+record.data.literatureEvidences[i].citationValueObject.pubmedAccession;}
linkOutHtml+=generatePublicationLinks(null,pubmedURL);break;case'LiteratureEvidenceValueObject':if(record.data.citationValueObject!=null){linkOutHtml+=generatePublicationLinks(null,record.data.citationValueObject.pubmedURL);}
break;case'UrlEvidenceValueObject':break;}
if(value!=null&&value.externalDatabase.name!=null&&value.externalUrl!=null){if(linkOutHtml!==''){linkOutHtml+=' ';}
linkOutHtml+=convertToExternalDatabaseAnchor(value.externalDatabase.name,value.externalUrl,true);}
return'<span style="white-space: normal;">'+linkOutHtml+'</span>';},sortable:false},{header:'Owner',id:'owner',dataIndex:'evidenceSecurityValueObject',width:0.15,renderer:function(value,metadata,record,rowIndex,colIndex,store){return value.owner;},hidden:!this.hasAdminLoggedIn(),sortable:true},{header:'Updated',id:'lastUpdated',dataIndex:'lastUpdated',width:0.15,renderer:function(value,metadata,record,rowIndex,colIndex,store){return new Date(value).format("y/M/d");},hidden:!this.hasUserLoggedIn(),sortable:true},{header:'Admin',id:'adminLinks',width:0.3,renderer:function(value,metadata,record,rowIndex,colIndex,store){var adminLinks='';if(!this.hidden&&record.data.className!=='DiffExpressionEvidenceValueObject'){adminLinks+=Gemma.SecurityManager.getSecurityLink('ubic.gemma.model.association.phenotype.PhenotypeAssociationImpl',record.data.id,record.data.evidenceSecurityValueObject.public,record.data.evidenceSecurityValueObject.shared,record.data.evidenceSecurityValueObject.currentUserIsOwner,null,null,'Phenotype Association',record.data.evidenceSecurityValueObject.currentUserIsOwner);if((record.data.className==='LiteratureEvidenceValueObject'||record.data.className==='ExperimentalEvidenceValueObject')&&record.data.evidenceSecurityValueObject.currentUserHasWritePermission&&record.data.evidenceSource==null){adminLinks+=' '+
generateLink('showCreateWindow('+record.data.id+');','/Gemma/images/icons/add.png','Clone evidence')+' '+
generateLink('showEditWindow('+record.data.id+');','/Gemma/images/icons/pencil.png','Edit evidence')+' '+
generateLink('removeEvidence('+record.data.id+');','/Gemma/images/icons/cross.png','Remove evidence');}}
return adminLinks;},hidden:!this.hasUserLoggedIn(),sortable:true}];if(this.hasRelevanceColumn){columns.splice(RELEVANCE_COLUMNS_START_INDEX,0,{header:'<img style="vertical-align: bottom;" ext:qwidth="198" ext:qtip="'+
Gemma.HelpText.WidgetDefaults.PhenotypeEvidenceGridPanel.specificallyRelatedTT+'" width="16" height="16" src="/Gemma/images/icons/bullet_red.png">',dataIndex:'containQueryPhenotype',width:0.12,renderer:function(value,metadata,record,rowIndex,colIndex,store){if(value==true){return this.header;}else{return'';}},hidden:!this.hasRelevanceColumn,sortable:true});}
if(this.extraColumns){Ext.each(this.extraColumns,function(columnInfo,columnInfoIndex){Ext.each(columnInfo.columns,function(column,columnIndex){columns.splice(columnInfo.startIndex+columnIndex,0,column);});});}
Ext.apply(this,{store:evidenceStore,plugins:rowExpander,columns:columns,tbar:[createPhenotypeAssociationButton],eval:function(request){eval(request);},setCurrentData:function(currentFilters,currentPhenotypes,currentGene){this.currentPhenotypes=currentPhenotypes;createPhenotypeAssociationButton.setDisabled(currentGene==null);if(currentGene!=null){this.setTitle("Evidence for "+currentGene.officialSymbol);this.currentGene=currentGene;var phenotypeValueUris=[];for(var i=0;i<currentPhenotypes.length;i++){phenotypeValueUris.push(currentPhenotypes[i].valueUri);}
evidenceStore.reload({params:{taxonId:currentFilters.taxonId,showOnlyEditable:currentFilters.showOnlyEditable,geneId:currentGene.id,phenotypeValueUris:phenotypeValueUris}});}else{this.currentGene=null;this.setTitle(DEFAULT_TITLE);evidenceStore.removeAll();}},loadGene:function(geneId){Ext.defer(function(){evidenceStore.reload({params:{taxonId:null,showOnlyEditable:false,geneId:geneId}});},1,this);},showCreateWindow:function(id){var data=getFormWindowData(id);if(data!=null){data.evidenceId=null;data.lastUpdated=null;showPhenotypeAssociationFormWindow(Gemma.PhenotypeAssociationForm.ACTION_CREATE,data);}},showEditWindow:function(id){var data=getFormWindowData(id);if(data!=null){showPhenotypeAssociationFormWindow(Gemma.PhenotypeAssociationForm.ACTION_EDIT,data);}},removeEvidence:function(id){Ext.MessageBox.confirm('Confirm','Are you sure you want to remove this evidence?',function(button){if(button==='yes'){PhenotypeController.removePhenotypeAssociation(id,function(validateEvidenceValueObject){if(validateEvidenceValueObject==null){this.fireEvent('phenotypeAssociationChanged');}else{if(validateEvidenceValueObject.evidenceNotFound){this.fireEvent('phenotypeAssociationChanged');Ext.Msg.alert('Evidence already removed','This evidence has already been removed by someone else.');}else{Ext.Msg.alert('Cannot remove evidence',Gemma.convertToEvidenceError(validateEvidenceValueObject).errorMessage,function(){if(validateEvidenceValueObject.userNotLoggedIn){Gemma.AjaxLogin.showLoginWindowFn();}});}}}.createDelegate(this));}},this);}});Gemma.PhenotypeEvidenceGridPanel.superclass.initComponent.call(this);if(!this.deferLoadToRender){if(this.currentGene!=null&&this.currentGene.id!=''){this.loadGene(this.currentGene.id);}}else{this.on('render',function(){if(this.currentGene!=null&&this.currentGene.id!=''){this.loadGene(this.currentGene.id);}});}}});Ext.namespace('Gemma');Gemma.NeurocartaStatistics=Ext.extend(Gemma.GemmaGridPanel,{title:'Neurocarta Statistics',loadMask:true,record:Ext.data.Record.create([{name:"name",type:"string"},{name:"numEvidence",type:"int"},{name:"numGenes",type:"int"},{name:"numPhenotypes",type:"int"},{name:"numPublications",type:"int"},{name:"lastUpdateDate",type:"date"}]),initComponent:function(){Gemma.NeurocartaStatistics.superclass.initComponent.call(this);var store=new Ext.data.Store({autoLoad:true,proxy:new Ext.data.DWRProxy(PhenotypeController.calculateExternalDatabasesStatistics),reader:new Ext.data.JsonReader({fields:['name','description','webUri','numEvidence','numGenes','numPhenotypes','numPublications','lastUpdateDate']})});function renderDatabase(val,metaData,record,row,col,store,gridView){if(record.data.webUri==""){return val;}
var imageSrc='/Gemma/images/icons/externallink.png';return val+' <A HREF=\''+record.data.webUri+'\' TARGET="_blank"><img src="'+imageSrc+'" /></A>';}
Ext.apply(this,{store:store});Ext.apply(this,{colModel:new Ext.grid.ColumnModel({defaults:{sortable:true},columns:[{header:"Data source",dataIndex:"name",renderer:renderDatabase,width:0.55},{header:"Description",dataIndex:"description",width:0.55},{header:"Number of evidence",dataIndex:"numEvidence",width:0.55},{header:"Number of genes",dataIndex:"numGenes",width:0.55},{header:"Number of phenotypes",dataIndex:"numPhenotypes",width:0.55},{header:"Number of publications",dataIndex:"numPublications",width:0.55},{header:"Last updated",dataIndex:"lastUpdateDate",width:0.55,renderer:Ext.util.Format.dateRenderer('Y/M/d')}]})});}});Ext.namespace('Gemma');Gemma.PhenotypePanelToolbar=Ext.extend(Ext.Toolbar,{initComponent:function(){var DEFAULT_FILTERS_TITLE='Filters';var MY_ANNOTATIONS_ONLY_TITLE='My annotations only';var currentFilters={taxonId:'-1',showOnlyEditable:false};var loggedIn=false;if(!Gemma.isRunningOutsideOfGemma()){var loggedInDom=Ext.getDom('loggedIn');loggedIn=(loggedInDom&&loggedInDom.value==="true");Gemma.Application.currentUser.on("logIn",function(){loggedIn=true;});Gemma.Application.currentUser.on("logOut",function(){loggedIn=false;});}
var showOnlyEditableCheckbox=new Ext.form.Checkbox({checked:false,fieldLabel:MY_ANNOTATIONS_ONLY_TITLE,listeners:{check:function(thisCheckbox,checked){if(checked){if(Gemma.isRunningOutsideOfGemma()){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.PhenotypePanel.filterMyAnnotationsOutsideOfGemmaTitle,Gemma.HelpText.WidgetDefaults.PhenotypePanel.filterMyAnnotationsOutsideOfGemmaText);thisCheckbox.setValue(false);}else{SignupController.loginCheck({callback:function(result){if(!result.loggedIn){Gemma.AjaxLogin.showLoginWindowFn();thisCheckbox.setValue(false);Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){Ext.getBody().unmask();},this,{single:true});}}});}}}}});var taxonCombo=new Gemma.TaxonCombo({isDisplayTaxonWithEvidence:true,fieldLabel:'Taxon',stateId:null,emptyText:"Filter by taxon",allTaxa:true,value:currentFilters.taxonId,getListParent:function(){return this.el.up('.x-menu');}});taxonCombo.getStore().on('doneLoading',function(){taxonCombo.setValue(taxonCombo.value);},this);var menu=new Ext.menu.Menu({listeners:{hide:function(thisMenu){showOnlyEditableCheckbox.suspendEvents();showOnlyEditableCheckbox.setValue(currentFilters.showOnlyEditable);showOnlyEditableCheckbox.resumeEvents();taxonCombo.setValue(currentFilters.taxonId);}},items:[{xtype:'form',autoHeight:true,width:400,labelWidth:120,items:[showOnlyEditableCheckbox,taxonCombo],buttonAlign:'right',buttons:[{text:'Apply',formBind:true,handler:function(){this.fireEvent('filterApplied',{showOnlyEditable:showOnlyEditableCheckbox.getValue(),taxonId:taxonCombo.getValue()==='-1'?null:taxonCombo.getValue()});updateFiltersStatus();menu.hide();},scope:this}]}]});var filterButton=new Ext.Button({text:DEFAULT_FILTERS_TITLE,menu:menu});var updateFiltersStatus=function(){currentFilters.taxonId=taxonCombo.getValue();currentFilters.showOnlyEditable=showOnlyEditableCheckbox.getValue();var filtersApplied='';if(showOnlyEditableCheckbox.getValue()){filtersApplied+='<b>'+MY_ANNOTATIONS_ONLY_TITLE+'</b>';}
if(taxonCombo.getValue()!=='-1'){if(filtersApplied!==''){filtersApplied+=' + ';}
filtersApplied+='<b>'+taxonCombo.getTaxon().data.commonName+'</b>';}
filterButton.setText((filtersApplied==='')?DEFAULT_FILTERS_TITLE:DEFAULT_FILTERS_TITLE+': '+filtersApplied);};Ext.apply(this,{setShowOnlyEditableCheckbox:function(status){showOnlyEditableCheckbox.suspendEvents();showOnlyEditableCheckbox.setValue(status);showOnlyEditableCheckbox.resumeEvents();updateFiltersStatus();},items:[filterButton,'->','<a target="_blank" href="'+
(Gemma.isRunningOutsideOfGemma()?'http://www.chibi.ubc.ca':'')+'/Gemma/neurocartaStatistics.html">Neurocarta Statistics</a>']});Gemma.PhenotypePanelToolbar.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.PhenotypeGridPanel=Ext.extend(Ext.grid.GridPanel,{storeAutoLoad:false,title:"Phenotypes List",autoScroll:true,stripeRows:true,loadMask:true,initComponent:function(){var checkboxSelectionModel=new Ext.grid.CheckboxSelectionModel({dataIndex:'isChecked',singleSelect:false,header:'',listeners:{rowdeselect:function(selectionModel,rowIndex,record){Ext.defer(function(){record.set('isChecked',false);},500);},rowselect:function(selectionModel,rowIndex,record){Ext.defer(function(){record.set('isChecked',true);},500);},scope:this}});var phenotypeSearchField=new Gemma.PhenotypePanelSearchField({emptyText:'Search Phenotypes',listeners:{filterApplied:function(recordFilter){var filterFields=['value'];this.getStore().filterBy(function(record){if(this.getSelectionModel().isSelected(record)||recordFilter(record,filterFields)){return true;}
return false;},this);},filterRemoved:function(){this.getStore().clearFilter(false);},scope:this}});var commonConfig=new Gemma.PhenotypeGridPanelCommonConfig();Ext.apply(this,{viewConfig:commonConfig.getViewConfig(),store:new Ext.data.Store({proxy:commonConfig.getStoreProxy(this.phenotypeStoreProxy),baseParams:commonConfig.getBaseParams(),reader:new Ext.data.JsonReader({idProperty:'urlId',fields:commonConfig.getStoreReaderFields()}),autoLoad:this.storeAutoLoad,sortInfo:{field:'value',direction:'ASC'}}),columns:[checkboxSelectionModel,commonConfig.getPhenotypeValueColumn({sortable:true}),commonConfig.getGeneCountColumn({sortable:true})],sm:checkboxSelectionModel,listeners:{hide:commonConfig.getHideHandler,cellclick:commonConfig.getCellClickHandler,headerclick:function(gridPanel,columnIndex,event){if(columnIndex==0){this.getStore().sort('isChecked');}}},tbar:[phenotypeSearchField,commonConfig.getAddNewPhenotypeAssociationButton(this)]});Gemma.PhenotypeGridPanel.superclass.initComponent.call(this);this.getStore().on('load',function(store,records,options){commonConfig.resetSelectionConfig();if(phenotypeSearchField.getValue()!==''){phenotypeSearchField.applyCurrentFilter();}
var recordsToBeRemoved=[];for(var i=0;i<records.length;i++){if(!records[i].data.dbPhenotype){recordsToBeRemoved.push(records[i]);}}
store.suspendEvents();store.remove(recordsToBeRemoved);store.resumeEvents();store.fireEvent('datachanged',store);},this);}});Ext.namespace('Gemma');Gemma.PhenotypePanel=Ext.extend(Ext.Panel,{phenotypeStoreProxy:null,geneStoreProxy:null,evidenceStoreProxy:null,getGeneLink:null,height:600,width:760,layout:'border',initComponent:function(){if(!((this.phenotypeStoreProxy&&this.geneStoreProxy&&this.evidenceStoreProxy&&this.getGeneLink)||(!this.phenotypeStoreProxy&&!this.geneStoreProxy&&!this.evidenceStoreProxy&&!this.getGeneLink))){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.PhenotypePanel.setupErrorTitle,Gemma.HelpText.WidgetDefaults.PhenotypePanel.setupErrorText);}else{var currentPhenotypes=null;var currentGene=null;var currentFilters={taxonId:null,showOnlyEditable:false};var phenotypePanelToolbar=Gemma.isRunningOutsideOfGemma()?null:new Gemma.PhenotypePanelToolbar({listeners:{filterApplied:function(filters){currentFilters=filters;reloadWholePanel();}}});var phenotypeTabPanel=new Gemma.PhenotypeTabPanel({region:"west",phenotypeStoreProxy:this.phenotypeStoreProxy,listeners:{phenotypeSelectionChange:function(selectedPhenotypes){var uniquePhenotypes=[];for(var i=0;i<selectedPhenotypes.length;i++){var isUniquePhenotype=true;for(var j=0;isUniquePhenotype&&j<uniquePhenotypes.length;j++){isUniquePhenotype=(uniquePhenotypes[j].urlId!==selectedPhenotypes[i].urlId);}
if(isUniquePhenotype){uniquePhenotypes.push(Ext.apply({},selectedPhenotypes[i]));}}
geneGrid.setCurrentPhenotypes(currentFilters,uniquePhenotypes);currentPhenotypes=uniquePhenotypes;}}});this.relayEvents(phenotypeTabPanel,['phenotypeAssociationChanged']);var geneGrid=new Gemma.PhenotypeGeneGridPanel({region:"north",height:300,split:true,geneStoreProxy:this.geneStoreProxy,getGeneLink:this.getGeneLink,listeners:{geneSelectionChange:function(selectedPhenotypes,selectedGene){evidenceGrid.setCurrentData(currentFilters,selectedPhenotypes,selectedGene);currentGene=selectedGene;}}});this.relayEvents(geneGrid,['phenotypeAssociationChanged']);var evidenceGrid=new Gemma.PhenotypeEvidenceGridPanel({region:'center',evidenceStoreProxy:this.evidenceStoreProxy,getGeneLink:this.getGeneLink});this.relayEvents(evidenceGrid,['phenotypeAssociationChanged']);var fireEventOnPhenotypeSelectionChange=function(phenotypeGrid){var selectedPhenotypes=[];var selectionModel=phenotypeGrid.getSelectionModel();if(selectionModel.hasSelection()){var selections=selectionModel.getSelections();for(var i=0;i<selections.length;i++){selectedPhenotypes.push(Ext.apply({},selections[i].data));}}
phenotypeGrid.fireEvent('phenotypeSelectionChange',selectedPhenotypes);};var selectRecordsOnLoad=function(gridPanel,fieldName,recordIds,callback){gridPanel.getStore().on('load',function(store,records,options){if(recordIds.length>0){var selModel=gridPanel.getSelectionModel();selModel.clearSelections();var firstRowIndex;for(var i=0;i<recordIds.length;i++){var currRowIndex=store.findExact(fieldName,recordIds[i]);if(currRowIndex>=0){if(!firstRowIndex){firstRowIndex=currRowIndex;}
selModel.selectRow(currRowIndex,true);gridPanel.getView().focusRow(currRowIndex);}}
if(firstRowIndex>=0){gridPanel.getView().focusRow(firstRowIndex);}
if(callback){callback.call(this);}}},this,{single:true,delay:500});};var reloadWholePanel=function(){if(currentPhenotypes!=null&&currentPhenotypes.length>0){var currentPhenotypeUrlIds=[];for(var i=0;i<currentPhenotypes.length;i++){currentPhenotypeUrlIds.push(currentPhenotypes[i].urlId);}
var phenotypeActiveTabGrid=phenotypeTabPanel.getActiveTab();selectRecordsOnLoad(phenotypeActiveTabGrid,'urlId',currentPhenotypeUrlIds,function(){fireEventOnPhenotypeSelectionChange(phenotypeActiveTabGrid);});if(currentGene!=null){selectRecordsOnLoad(geneGrid,'id',[currentGene.id]);}}
phenotypeTabPanel.reloadActiveTab(currentFilters);};if(!Gemma.isRunningOutsideOfGemma()){Gemma.Application.currentUser.on("logIn",reloadWholePanel);Gemma.Application.currentUser.on("logOut",function(){currentFilters.showOnlyEditable=false;phenotypePanelToolbar.setShowOnlyEditableCheckbox(currentFilters.showOnlyEditable);reloadWholePanel();});}
Ext.apply(this,{tbar:phenotypePanelToolbar,items:[phenotypeTabPanel,{xtype:'panel',height:200,layout:'border',viewConfig:{forceFit:true},items:[geneGrid,evidenceGrid],region:'center',split:true}],listeners:{phenotypeAssociationChanged:function(phenotypes,gene){if(phenotypes!=null&&gene!=null){currentPhenotypes=phenotypes;currentGene=gene;}
reloadWholePanel();},scope:this}});if(Ext.get("phenotypeUrlId")!=null&&Ext.get("phenotypeUrlId").getValue()!=""){var phenotypeActiveTabGrid=phenotypeTabPanel.getActiveTab();selectRecordsOnLoad(phenotypeActiveTabGrid,'urlId',[Ext.get("phenotypeUrlId").getValue()],function(){fireEventOnPhenotypeSelectionChange(phenotypeActiveTabGrid);});if(Ext.get("geneId")!=null&&Ext.get("geneId").getValue()!=""){selectRecordsOnLoad(geneGrid,'id',[parseInt(Ext.get("geneId").getValue())]);}}}
Gemma.PhenotypePanel.superclass.initComponent.call(this);}});Gemma.PhenotypePanelSearchField=Ext.extend(Ext.form.TwinTriggerField,{enableKeyEvents:true,validationEvent:false,validateOnBlur:false,trigger1Class:'x-form-clear-trigger',trigger2Class:'x-form-search-trigger',hideTrigger1:true,width:220,hasSearch:false,listeners:{keyup:function(field,e){var typedStringLength=this.getRawValue().length;if(typedStringLength>=2){this.onTrigger2Click();}else if(typedStringLength<1){this.onTrigger1Click();}}},onTrigger1Click:function(){if(this.hasSearch){this.el.dom.value='';this.triggers[0].hide();this.hasSearch=false;this.fireEvent('filterRemoved');}
Gemma.PhenotypePanelSearchField.superclass.onTrigger1Click.call(this);},onTrigger2Click:function(){var typedString=this.getRawValue().toLowerCase();if(typedString.length<1){this.onTrigger1Click();return;}
this.hasSearch=true;this.triggers[0].show();var recordFilter=function(record,filterFields){for(var i=0;i<filterFields.length;i++){if(record.get(filterFields[i]).toLowerCase().indexOf(typedString)>=0){return true;}}
return false;};this.fireEvent('filterApplied',recordFilter);Gemma.PhenotypePanelSearchField.superclass.onTrigger2Click.call(this);},applyCurrentFilter:function(){this.onTrigger2Click();}});Ext.namespace('Gemma');Gemma.PhenotypeTabPanel=Ext.extend(Ext.TabPanel,{phenotypeStoreProxy:null,activeTab:0,width:330,split:true,initComponent:function(){var syncDestinationStoresOnSourceStoreLoad=function(sourceStore,destinationStores){sourceStore.on('load',function(store,records,options){var data=[];for(var i=0;i<records.length;i++){data.push(Ext.apply({},records[i].data));}
for(var i=0;i<destinationStores.length;i++){var currStore=destinationStores[i].getStore();if(currStore!==sourceStore){currStore.loadData(data);}}},this,{single:true});}
var phenotypeTreeGridPanel=new Gemma.PhenotypeTreeGridPanel({storeAutoLoad:true,phenotypeStoreProxy:this.phenotypeStoreProxy});var phenotypeGrid=new Gemma.PhenotypeGridPanel({storeAutoLoad:false,phenotypeStoreProxy:this.phenotypeStoreProxy});this.relayEvents(phenotypeTreeGridPanel,['phenotypeAssociationChanged','phenotypeSelectionChange']);this.relayEvents(phenotypeGrid,['phenotypeAssociationChanged','phenotypeSelectionChange']);Ext.apply(this,{reloadActiveTab:function(filters){this.getActiveTab().getSelectionModel().clearSelections();var activeTabStore=this.getActiveTab().getStore();syncDestinationStoresOnSourceStoreLoad(activeTabStore,this.items.items);var taxonId;var showOnlyEditable;if(filters==null){taxonId=null;showOnlyEditable=false;}else{taxonId=filters.taxonId;showOnlyEditable=filters.showOnlyEditable;}
activeTabStore.reload({params:{taxonId:taxonId,showOnlyEditable:showOnlyEditable}});},items:[phenotypeTreeGridPanel,phenotypeGrid]});Gemma.PhenotypeTabPanel.superclass.initComponent.call(this);syncDestinationStoresOnSourceStoreLoad(phenotypeTreeGridPanel.getStore(),[phenotypeGrid]);this.setActiveTab(this.activeTab);}});Ext.namespace('Gemma');Gemma.PhenotypeEvidenceManagerGridPanel=Ext.extend(Gemma.PhenotypeEvidenceGridPanel,{storeAutoLoad:true,storeSortInfo:{field:'lastUpdated',direction:'DESC'},displayPhenotypeAsLink:true,allowCreateOnlyWhenGeneSpecified:false,title:'Phenotype Association Manager',hasRelevanceColumn:false,extraColumns:[{startIndex:2,columns:[{header:'Gene',dataIndex:'geneOfficialSymbol',width:0.15,renderer:function(value,metadata,record,row,col,ds){var geneLink='/Gemma/gene/showGene.html?id='+record.data.geneId;return String.format("{0} <a target='_blank' href='"+geneLink+"' ext:qtip='Go to {0} Details (in new window)'><img src='/Gemma/images/icons/magnifier.png' height='10' width='10'/></a> ",value);},sortable:true},{header:'Taxon',dataIndex:'taxonCommonName',width:0.15,sortable:true}]}],initComponent:function(){var DEFAULT_TAXON_ID='-1';var DEFAULT_LIMIT=50;var DEFAULT_USERNAME='All users';this.viewConfig.emptyText='You have not created any phenotype association yet.';Ext.apply(this,{evidenceStoreProxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:PhenotypeController.findEvidenceByFilters,getDwrArgsFunction:function(request){return[request.params.taxonId===DEFAULT_TAXON_ID?null:request.params.taxonId,request.params.limit==null?DEFAULT_LIMIT:request.params.limit,request.params.userName===DEFAULT_USERNAME?null:request.params.userName];}}}}),listeners:{phenotypeAssociationChanged:function(phenotypes,gene){reloadStore();}}});var taxonCombo=new Gemma.TaxonCombo({isDisplayTaxonWithEvidence:true,stateId:null,emptyText:"Filter by taxon",allTaxa:true,value:DEFAULT_TAXON_ID,listeners:{select:function(combo,record,index){reloadStore();}}});taxonCombo.getStore().on('doneLoading',function(){taxonCombo.setValue(taxonCombo.getValue());});var dataFilterCombo=new Gemma.DataFilterCombo({value:DEFAULT_LIMIT,listeners:{select:function(combo,record,index){reloadStore();}}});var reloadStore=function(){this.getStore().reload({params:{taxonId:taxonCombo.getValue(),limit:dataFilterCombo.getValue(),userName:userNameCombo==null?null:userNameCombo.getValue()}});}.createDelegate(this);Gemma.PhenotypeEvidenceManagerGridPanel.superclass.initComponent.call(this);this.getTopToolbar().addButton(taxonCombo);this.getTopToolbar().addButton(dataFilterCombo);if(this.hasAdminLoggedIn()){var userNameRecord=Ext.data.Record.create([{name:"userName",type:"string"}]);var userNameCombo=new Ext.form.ComboBox({editable:false,width:150,triggerAction:'all',lastQuery:'',store:new Ext.data.Store({proxy:new Ext.data.DWRProxy(PhenotypeController.findEvidenceOwners),reader:new Ext.data.ListRangeReader({},userNameRecord),autoLoad:true}),valueField:'userName',displayField:'userName',value:DEFAULT_USERNAME,listeners:{select:function(combo,record,index){reloadStore();}}});userNameCombo.getStore().on('load',function(store,records,options){store.insert(0,[new userNameRecord({'userName':DEFAULT_USERNAME})]);});this.getTopToolbar().addButton(userNameCombo);}}});Ext.namespace('Gemma');Gemma.PhenotypeGeneGridPanel=Ext.extend(Ext.grid.GridPanel,{title:'Genes',autoScroll:true,stripeRows:true,loadMask:true,viewConfig:{forceFit:true,deferEmptyText:false,emptyText:'No phenotype has been selected.'},currentPhenotypes:null,initComponent:function(){var DEFAULT_TITLE=this.title;var titleText=this.title;var phenotypeAssociationFormWindow;var currentStoreData=[];var downloadButton=new Ext.Button({text:'<b>Download</b>',disabled:true,icon:'/Gemma/images/download.gif',handler:function(){var columnConfig=[{header:'NCBI ID',dataIndex:'ncbiId'}].concat(this.getColumnModel().config);var downloadData=[];var downloadDataRow=[];for(var i=0;i<columnConfig.length;i++){downloadDataRow.push(columnConfig[i].header);}
downloadData.push(downloadDataRow);this.getStore().each(function(record){downloadDataRow=[];for(var i=0;i<columnConfig.length;i++){downloadDataRow.push(record.get(columnConfig[i].dataIndex));}
downloadData.push(downloadDataRow);});var downloadDataHeader=titleText;if(geneSearchField.getValue()!==''){downloadDataHeader+=' AND matching pattern "'+geneSearchField.getValue()+'"';}
var textWindow=new Gemma.DownloadWindow({windowTitleSuffix:'Genes associated with selected Phenotype(s)',downloadDataHeader:downloadDataHeader,downloadData:downloadData,modal:true});textWindow.convertToText();textWindow.show();},scope:this});var geneSearchField=new Gemma.PhenotypePanelSearchField({emptyText:'Search Genes',disabled:true,listeners:{filterApplied:function(recordFilter){var filterFields=['officialSymbol','officialName'];this.getStore().filterBy(function(record){if(this.getSelectionModel().isSelected(record)||recordFilter(record,filterFields)){return true;}
return false;},this);},filterRemoved:function(){this.getStore().clearFilter(false);},scope:this}});var createPhenotypeAssociationButton=new Ext.Button({disabled:true,handler:Gemma.isRunningOutsideOfGemma()?function(){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.PhenotypePanel.modifyPhenotypeAssociationOutsideOfGemmaTitle,Gemma.HelpText.WidgetDefaults.PhenotypePanel.modifyPhenotypeAssociationOutsideOfGemmaText);}:function(){if(!phenotypeAssociationFormWindow||(phenotypeAssociationFormWindow&&phenotypeAssociationFormWindow.isDestroyed)){phenotypeAssociationFormWindow=new Gemma.PhenotypeAssociationForm.Window();this.relayEvents(phenotypeAssociationFormWindow,['phenotypeAssociationChanged']);}
phenotypeAssociationFormWindow.showWindow(Gemma.PhenotypeAssociationForm.ACTION_CREATE,{gene:null,phenotypes:this.currentPhenotypes});},scope:this,icon:"/Gemma/images/icons/add.png",tooltip:"Add new phenotype association"});var onStoreRecordChange=function(){downloadButton.setDisabled(this.getStore().getCount()<=0);};Ext.apply(this,{store:new Ext.data.Store({proxy:this.geneStoreProxy==null?new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:PhenotypeController.findCandidateGenes,getDwrArgsFunction:function(request){return[request.params['taxonId'],request.params['showOnlyEditable'],request.params["phenotypeValueUris"]];}}}}):this.geneStoreProxy,reader:new Ext.data.JsonReader({idProperty:'id',fields:['id','ncbiId','taxonId',{name:'officialSymbol',sortType:Ext.data.SortTypes.asUCString},{name:'officialName',sortType:Ext.data.SortTypes.asUCString},'taxonCommonName']}),sortInfo:{field:'officialSymbol',direction:'ASC'},listeners:{clear:onStoreRecordChange,datachanged:onStoreRecordChange,load:function(store,records,options){if(options.params!=null){var haveSameParams=(options.params.phenotypeValueUris.length===this.currentPhenotypes.length);if(haveSameParams){for(var i=0;haveSameParams&&i<options.params.phenotypeValueUris.length;i++){haveSameParams=(options.params.phenotypeValueUris[i]===this.currentPhenotypes[i].valueUri);}}
if(haveSameParams){currentStoreData=[];for(var i=0;i<records.length;i++){currentStoreData.push(Ext.apply({},records[i].data));}}else{store.loadData(currentStoreData);}}},scope:this}}),columns:[{header:"Symbol",dataIndex:'officialSymbol',width:65,renderer:function(value,metadata,record,rowIndex,colIndex,store){var geneLink=this.getGeneLink?this.getGeneLink(record.data.id):'/Gemma/gene/showGene.html?id='+record.data.id;return String.format("{0} <a target='_blank' href='"+geneLink+"' ext:qtip='Go to {0} Details (in new window)'><img src='/Gemma/images/icons/magnifier.png' height='10' width='10'/></a> ",record.data.officialSymbol);},sortable:true,scope:this},{header:"Name",dataIndex:'officialName',width:215,renderToolTip:true,sortable:true},{header:"Taxon",dataIndex:'taxonCommonName',width:100,sortable:true}],selModel:new Ext.grid.RowSelectionModel({singleSelect:true,listeners:{selectionchange:function(selModel){var selectedGene=null;if(selModel.hasSelection()){var geneGridSelection=this.getSelectionModel().getSelected();selectedGene={id:geneGridSelection.get('id'),ncbiId:geneGridSelection.get('ncbiId'),officialSymbol:geneGridSelection.get('officialSymbol'),officialName:geneGridSelection.get('officialName'),taxonCommonName:geneGridSelection.get('taxonCommonName'),taxonId:geneGridSelection.get('taxonId')};}
this.fireEvent('geneSelectionChange',this.currentPhenotypes,selectedGene);},scope:this}}),tbar:[geneSearchField,createPhenotypeAssociationButton,downloadButton],setCurrentPhenotypes:function(currentFilters,currentPhenotypes){this.currentPhenotypes=currentPhenotypes;var hasCurrentPhenotypes=(currentPhenotypes!=null&&currentPhenotypes.length>0);createPhenotypeAssociationButton.setDisabled(!hasCurrentPhenotypes);geneSearchField.setDisabled(!hasCurrentPhenotypes);geneSearchField.setValue('');if(hasCurrentPhenotypes){var currentPhenotypeValueUris=[];var selectedPhenotypePrefix='Genes associated with';var selectedPhenotypeHeader=selectedPhenotypePrefix+' "';var selectedPhenotypeTooltip='&nbsp;&nbsp;&nbsp;';for(var i=0;i<currentPhenotypes.length;i++){var currPhenotypeValue=currentPhenotypes[i].value;currentPhenotypeValueUris.push(currentPhenotypes[i].valueUri);selectedPhenotypeHeader+=currPhenotypeValue;selectedPhenotypeTooltip+=currPhenotypeValue;if(i<currentPhenotypes.length-1){selectedPhenotypeHeader+='" AND "';selectedPhenotypeTooltip+='<br />&nbsp;&nbsp;&nbsp;';}else{selectedPhenotypeHeader+='"';}}
this.getStore().reload({params:{taxonId:currentFilters.taxonId,showOnlyEditable:currentFilters.showOnlyEditable,phenotypeValueUris:currentPhenotypeValueUris}});this.getSelectionModel().clearSelections(false);this.setTitle("<div style='height: 15px; overflow: hidden;' "+"ext:qtitle='"+selectedPhenotypePrefix+"' "+"ext:qtip='"+selectedPhenotypeTooltip+"'>"+selectedPhenotypeHeader+"</div>");titleText=selectedPhenotypeHeader;}else{currentStoreData=[];this.setTitle(DEFAULT_TITLE);this.getStore().removeAll(false);}}});Gemma.PhenotypeGeneGridPanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.PhenotypeGridPanelCommonConfig=Ext.extend(Object,{constructor:function(){var clickedSelections=[];var phenotypeAssociationFormWindow;var phenotypeStoreProxy=null;var generateGeneCountHTML=function(width,geneCountText){return'<span style="float: right; text-align: right; width: '+width+'px;">'+geneCountText+'</span>';};Ext.apply(this,{resetSelectionConfig:function(){clickedSelections=null;},getViewConfig:function(){return{forceFit:true,deferEmptyText:false,emptyText:'You have not created any phenotype association yet.'};},getStoreProxy:function(defaultProxy){var proxyToBeReturned;if(defaultProxy==null){if(phenotypeStoreProxy==null){phenotypeStoreProxy=new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:PhenotypeController.loadAllPhenotypesByTree,getDwrArgsFunction:function(request){return[request.params['taxonId'],request.params['showOnlyEditable']];}.createDelegate(this)}}});}
proxyToBeReturned=phenotypeStoreProxy;}else{proxyToBeReturned=defaultProxy;}
return proxyToBeReturned;},getBaseParams:function(){return{taxonId:null,showOnlyEditable:false};},getStoreReaderFields:function(){return['urlId',{name:'value',sortType:Ext.data.SortTypes.asUCString},'valueUri','publicGeneCount','privateGeneCount','_id','_parent','_is_leaf','dbPhenotype',{name:'isChecked',sortDir:'DESC',defaultValue:false}];},getHideHandler:function(gridPanel){gridPanel.getSelectionModel().clearSelections(false);clickedSelections=[];gridPanel.fireEvent('phenotypeSelectionChange',clickedSelections);},getCellClickHandler:function(gridPanel,rowIndex,columnIndex,event){var newSelections=gridPanel.getSelectionModel().getSelections();var hasSameSelections=(clickedSelections!=null&&clickedSelections.length===newSelections.length);if(hasSameSelections){for(var i=0;hasSameSelections&&i<clickedSelections.length;i++){hasSameSelections=(clickedSelections[i].get('urlId')===newSelections[i].get('urlId'));}}
if(!hasSameSelections){var selectedPhenotypes=[];clickedSelections=newSelections;for(var i=0;i<clickedSelections.length;i++){selectedPhenotypes.push(Ext.apply({},clickedSelections[i].data));}
gridPanel.fireEvent('phenotypeSelectionChange',selectedPhenotypes);}},getPhenotypeValueColumn:function(defaults){return Ext.apply({header:"Phenotype",dataIndex:'value',width:215,renderer:function(value,metaData,record,rowIndex,colIndex,store){metaData.attr='ext:qtip="'+value+'<br />'+record.data.valueUri+'"';return value;}},defaults);},getGeneCountColumn:function(defaults){return Ext.apply({header:"Gene Count",dataIndex:'publicGeneCount',align:"right",width:115,renderer:function(value,metaData,record,rowIndex,colIndex,store){metaData.attr='style="padding-right: 15px; min-width: 66px;"';return generateGeneCountHTML(26,(record.data.privateGeneCount>0?'('+record.data.privateGeneCount+')':'&nbsp;'))+' '+
generateGeneCountHTML(40,record.data.publicGeneCount);}},defaults);},getAddNewPhenotypeAssociationButton:function(gridPanel,defaultButtonHandler){return{handler:Gemma.isRunningOutsideOfGemma()?function(){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.PhenotypePanel.modifyPhenotypeAssociationOutsideOfGemmaTitle,Gemma.HelpText.WidgetDefaults.PhenotypePanel.modifyPhenotypeAssociationOutsideOfGemmaText);}:function(){if(!phenotypeAssociationFormWindow||(phenotypeAssociationFormWindow&&phenotypeAssociationFormWindow.isDestroyed)){phenotypeAssociationFormWindow=new Gemma.PhenotypeAssociationForm.Window();gridPanel.relayEvents(phenotypeAssociationFormWindow,['phenotypeAssociationChanged']);}
phenotypeAssociationFormWindow.showWindow(Gemma.PhenotypeAssociationForm.ACTION_CREATE,{gene:gridPanel.currentGene,phenotypes:gridPanel.currentPhenotypes});},icon:"/Gemma/images/icons/add.png",tooltip:"Add new phenotype association"};}});}});Ext.namespace('Gemma.PhenotypeAssociationForm');Gemma.PhenotypeAssociationForm.ACTION_CREATE='create';Gemma.PhenotypeAssociationForm.ACTION_EDIT='edit';Gemma.PhenotypeAssociationForm.Window=Ext.extend(Ext.Window,{layout:'fit',modal:true,constrain:true,width:700,height:500,shadow:true,closeAction:'close',initComponent:function(){var formPanel=new Gemma.PhenotypeAssociationForm.Panel();formPanel.on({'cancelButtonClicked':function(){this.close();},scope:this});this.relayEvents(formPanel,['phenotypeAssociationChanged']);var showLogInWindow=function(action,data){Gemma.AjaxLogin.showLoginWindowFn();Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){Ext.getBody().unmask();formPanel.setData(action,data);this.show();},this,{single:true});};Ext.apply(this,{listeners:{phenotypeAssociationChanged:function(phenotypes,gene){this.close();},scope:this},showWindow:function(action,data){if(action===Gemma.PhenotypeAssociationForm.ACTION_CREATE){this.setTitle('Add New Phenotype Association');}else if(action===Gemma.PhenotypeAssociationForm.ACTION_EDIT){this.setTitle('Edit Phenotype Association');}
SignupController.loginCheck({callback:function(result){if(result.loggedIn){formPanel.setData(action,data);this.show();}
else{showLogInWindow.call(this,action,data);}}.createDelegate(this)});},items:[formPanel]});Gemma.PhenotypeAssociationForm.Window.superclass.initComponent.call(this);}});Gemma.PhenotypeAssociationForm.Panel=Ext.extend(Ext.FormPanel,{labelWidth:130,initComponent:function(){var ANCHOR_VALUE='96%';var hasLocalErrorMessages=false;var hasServerErrorMessages=false;var phenotypeErrorMessages=[];var literatureErrorMessages=[];var experimentalErrorMessages=[];var evidenceId=null;var lastUpdated=null;this.on('render',function(thisPanel){if(!thisPanel.loadMask){thisPanel.loadMask=new Ext.LoadMask(thisPanel.getEl(),{msg:evidenceId==null?"Adding new phenotype association ...":"Updating phenotype association ..."});}});var errorPanel=new Gemma.PhenotypeAssociationForm.ErrorPanel({region:'north'});var updateErrorMessages=function(){hasServerErrorMessages=false;var allErrorMessages=phenotypeErrorMessages;switch(evidenceTypeComboBox.getValue()){case'ExperimentalEvidenceValueObject':if(experimentalErrorMessages.length>0){allErrorMessages=allErrorMessages.concat(experimentalErrorMessages);}
break;case'LiteratureEvidenceValueObject':if(literatureErrorMessages.length>0){allErrorMessages=allErrorMessages.concat(literatureErrorMessages);}
break;}
hasLocalErrorMessages=allErrorMessages.length>0;if(hasLocalErrorMessages){var formattedErrorMessages='';for(var i=0;i<allErrorMessages.length;i++){formattedErrorMessages+=allErrorMessages[i];if(i<allErrorMessages.length-1){formattedErrorMessages+='<br />';}}
errorPanel.showError(formattedErrorMessages);}else{errorPanel.hide();}}
var generateEvidenceValueObject=function(validatedPhenotypes){var evidenceType=evidenceTypeComboBox.getValue();var evidenceValueObject;if(evidenceType==='ExperimentalEvidenceValueObject'){if(experimentalPanel.isValid()){var experimentalValues=experimentalPanel.getValues();evidenceValueObject=new ExperimentalEvidenceValueObject();evidenceValueObject.primaryPublicationCitationValueObject=experimentalValues.primaryPublicationCitationValueObject;evidenceValueObject.relevantPublicationsCitationValueObjects=experimentalValues.relevantPublicationsCitationValueObjects;evidenceValueObject.experimentCharacteristics=experimentalValues.experimentCharacteristics;}}else if(evidenceType==='LiteratureEvidenceValueObject'){if(literaturePanel.isValid()){evidenceValueObject=new LiteratureEvidenceValueObject();evidenceValueObject.citationValueObject=literaturePanel.getCitationValueObject();}}
if(evidenceValueObject!=null){evidenceValueObject.geneNCBI=geneSearchComboBox.getValue();var phenotypes=[];Ext.each(validatedPhenotypes,function(validatedPhenotype,index){var characteristicValueObject=new CharacteristicValueObject();characteristicValueObject.id=validatedPhenotype.id;characteristicValueObject.urlId=validatedPhenotype.urlId;characteristicValueObject.value=validatedPhenotype.value;characteristicValueObject.valueUri=validatedPhenotype.valueUri;phenotypes.push(characteristicValueObject);});evidenceValueObject.phenotypes=phenotypes;evidenceValueObject.className=evidenceType;evidenceValueObject.isNegativeEvidence=isNegativeEvidenceCheckbox.getValue();evidenceValueObject.description=descriptionTextArea.getValue();evidenceValueObject.evidenceCode=evidenceCodeComboBox.getValue();evidenceValueObject.id=evidenceId;evidenceValueObject.lastUpdated=lastUpdated;}
return evidenceValueObject;};var geneSearchComboBox=new Gemma.PhenotypeAssociationForm.GeneSearchComboBox({listeners:{blur:function(combo){var currentGeneNcbiId=combo.getValue();if(currentGeneNcbiId==''){phenotypesSearchPanel.setCurrentGeneNcbiId(null);experimentalPanel.setCurrentGeneTaxonId(null);}else{phenotypesSearchPanel.setCurrentGeneNcbiId(currentGeneNcbiId);var geneRecord=combo.getStore().getById(currentGeneNcbiId);if(geneRecord==null){experimentalPanel.setCurrentGeneTaxonId(null);}else{experimentalPanel.setCurrentGeneTaxonId(geneRecord.data.taxonId);}}},select:function(combo,record,index){this.validateForm(false);},scope:this}});var phenotypesSearchPanel=new Gemma.PhenotypeAssociationForm.PhenotypesSearchPanel({anchor:ANCHOR_VALUE,listeners:{validtyStatusChanged:function(isModifying,errorMessages){phenotypeErrorMessages=errorMessages;updateErrorMessages();if(!isModifying&&errorPanel.getErrorMessage()===''){this.validateForm(false);}},scope:this}});var experimentalPanel=new Gemma.PhenotypeAssociationForm.ExperimentalPanel({anchor:ANCHOR_VALUE,listeners:{validtyStatusChanged:function(isModifying,errorMessages){experimentalErrorMessages=errorMessages;updateErrorMessages();if(!isModifying&&errorPanel.getErrorMessage()===''){this.validateForm(false);}},scope:this}});var literaturePanel=new Gemma.PhenotypeAssociationForm.LiteraturePanel({anchor:ANCHOR_VALUE,listeners:{pubMedIdFieldBlur:function(thisLiteraturePanel){var pubMedId=thisLiteraturePanel.getPubMedId();if(pubMedId===""){literatureErrorMessages=[];}else if(pubMedId<=0){literatureErrorMessages=[String.format(Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.pubmedIdInvalid,thisLiteraturePanel.pubMedIdFieldLabel)];}
updateErrorMessages();},pubMedIdFieldKeyUp:function(thisLiteraturePanel,event){literatureErrorMessages=[];updateErrorMessages();},pubMedIdStoreLoad:function(thisLiteraturePanel,store,records,options){if(options.params.pubMedId===thisLiteraturePanel.getPubMedId()){if(store.getTotalCount()>0){literatureErrorMessages=[];updateErrorMessages();this.validateForm(false);}else{literatureErrorMessages=[String.format(Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.pubmedIdInvalid,thisLiteraturePanel.pubMedIdFieldLabel)];updateErrorMessages();}}},scope:this}});var evidenceTypeComboBox=new Gemma.PhenotypeAssociationForm.EvidenceTypeComboBox({listeners:{select:function(combo,record,index){switch(record.data.evidenceClassName){case'ExperimentalEvidenceValueObject':literaturePanel.hide();experimentalPanel.show();experimentalPanel.setEvidenceId(evidenceId);break;case'LiteratureEvidenceValueObject':experimentalPanel.hide();literaturePanel.show();literaturePanel.setEvidenceId(evidenceId);break;}
updateErrorMessages();this.validateForm(false);},scope:this}});var isNegativeEvidenceCheckbox=new Ext.form.Checkbox({fieldLabel:'Negative Evidence'});var descriptionTextArea=new Ext.form.TextArea({maxLength:65535,fieldLabel:'Note',anchor:ANCHOR_VALUE,initComponent:function(){Ext.apply(this,{autoCreate:{tag:'textarea',rows:'4',maxlength:this.maxLength},setDescription:function(description){this.setValue(description);this.originalValue=description;}});this.superclass().initComponent.call(this);}});var evidenceCodesForComboBox=['EXP','IAGP','IC','IED','IEP','IGI','IMP','IPM','QTM','TAS'];var evidenceCodeComboBoxStoreData=[];var qtipWidth;Ext.each(evidenceCodesForComboBox,function(evidenceCode,index){var evidenceCodeInfo=Gemma.EvidenceCodeInfo[evidenceCode];var qtipInfo=Gemma.EvidenceCodeInfo.getQtipInfo(evidenceCode,evidenceCodeInfo);if(!qtipWidth){qtipWidth=qtipInfo.width;}
evidenceCodeComboBoxStoreData.push([evidenceCode,evidenceCode+' ('+evidenceCodeInfo.name+')',qtipInfo.text]);});var evidenceCodeComboBox=new Ext.form.ComboBox({valueField:'evidenceCode',allowBlank:false,editable:false,mode:'local',store:new Ext.data.ArrayStore({fields:['evidenceCode','displayText','qtip'],data:evidenceCodeComboBoxStoreData}),tpl:new Ext.XTemplate('<tpl for="."><div ext:qtip="{qtip}" ext:qwidth="'+qtipWidth+'" class="x-combo-list-item">{displayText}</div></tpl>'),value:'IC',forceSelection:true,displayField:'displayText',width:qtipWidth,typeAhead:true,triggerAction:'all',selectOnFocus:true,listeners:{'blur':function(comboBox){this.validateForm(false);},scope:this},initComponent:function(){Ext.apply(this,{selectEvidenceCode:function(evidenceCode){this.setValue(evidenceCode);this.originalValue=evidenceCode;}});this.superclass().initComponent.call(this);}});Ext.apply(this,{layout:'border',monitorValid:true,items:[errorPanel,{xtype:'panel',region:'center',layout:'form',border:false,autoScroll:true,defaults:{blankText:'This field is required'},padding:'15px 0px 8px 15px',items:[{xtype:'textfield',hidden:true,validator:function(){return!hasLocalErrorMessages&&!hasServerErrorMessages;}},{xtype:'compositefield',fieldLabel:'Gene',autoWidth:true,items:[geneSearchComboBox,geneSearchComboBox.getGeneSelectedLabel()]},phenotypesSearchPanel,evidenceTypeComboBox,isNegativeEvidenceCheckbox,experimentalPanel,literaturePanel,descriptionTextArea,{xtype:'compositefield',fieldLabel:"Evidence Code",autoWidth:true,items:[evidenceCodeComboBox]}]}],setData:function(action,data){phenotypesSearchPanel.selectPhenotypes(data.phenotypes,data.gene);geneSearchComboBox.selectGene(data.gene);evidenceId=data.evidenceId;if(data.evidenceClassName!=null){lastUpdated=data.lastUpdated;evidenceTypeComboBox.selectEvidenceType(data.evidenceClassName);switch(data.evidenceClassName){case'LiteratureEvidenceValueObject':literaturePanel.setEvidenceId(evidenceId);literaturePanel.setPubMedId(data.pubMedId);experimentalPanel.hide();experimentalPanel.selectExperimentalData('','',null,null);break;case'ExperimentalEvidenceValueObject':experimentalPanel.show();experimentalPanel.setEvidenceId(evidenceId);experimentalPanel.selectExperimentalData(data.primaryPubMedId,data.secondaryPubMedId,data.experimentCharacteristics,data.gene);literaturePanel.hide();literaturePanel.setPubMedId('');break;}
isNegativeEvidenceCheckbox.setValue(data.isNegativeEvidence);descriptionTextArea.setDescription(data.description);evidenceCodeComboBox.selectEvidenceCode(data.evidenceCode);}
if(this.hidden){this.show();}},submitForm:function(evidenceValueObject){if(this.getForm().isValid()){var isCreating=(evidenceId==null);this.loadMask.show();PhenotypeController.processPhenotypeAssociationForm(evidenceValueObject,function(validateEvidenceValueObject){this.loadMask.hide();if(validateEvidenceValueObject==null){Ext.Msg.alert('Phenotype association '+(isCreating?'added':'updated'),'Phenotype association has been '+(isCreating?'added':'updated')+'.');this.fireEvent('phenotypeAssociationChanged',evidenceValueObject.phenotypes,geneSearchComboBox.getStore().getById(evidenceValueObject.geneNCBI).data);}else{var title='Cannot '+(isCreating?'add':'edit')+' phenotype association';Ext.Msg.alert(title,Gemma.convertToEvidenceError(validateEvidenceValueObject).errorMessage,function(){if(validateEvidenceValueObject.userNotLoggedIn){Gemma.AjaxLogin.showLoginWindowFn();}});}}.createDelegate(this));}},validateForm:function(shouldSubmitAfterValidating){hasServerErrorMessages=false;if(!hasLocalErrorMessages){errorPanel.hide();var evidenceType=evidenceTypeComboBox.getValue();if(evidenceType==='ExperimentalEvidenceValueObject'){experimentalPanel.showAnnotationError([],null);}else if(evidenceType==='LiteratureEvidenceValueObject'){literaturePanel.showAnnotationError([],null);}
if(evidenceType!==''&&geneSearchComboBox.getValue()!==''){var selectedPhenotypes=phenotypesSearchPanel.getSelectedPhenotypes();if(selectedPhenotypes!=null&&selectedPhenotypes.length>0){var isValid=false;if(evidenceType==='ExperimentalEvidenceValueObject'){if(experimentalPanel.isValid()){isValid=true;}}else if(evidenceType==='LiteratureEvidenceValueObject'){if(literaturePanel.isValid()){isValid=true;}}
if(isValid&&evidenceCodeComboBox.getValue()!==''){var evidenceValueObject=generateEvidenceValueObject(selectedPhenotypes);PhenotypeController.validatePhenotypeAssociationForm(evidenceValueObject,function(validateEvidenceValueObject){var hasError=false;var hasWarning=false;if(validateEvidenceValueObject==null){hasError=false;}else{if(validateEvidenceValueObject.problematicEvidenceIds.length>0){var errorColor=validateEvidenceValueObject.sameEvidenceFound?'red':'orange';if(evidenceType==='ExperimentalEvidenceValueObject'){experimentalPanel.showAnnotationError(validateEvidenceValueObject.problematicEvidenceIds,errorColor);}else if(evidenceType==='LiteratureEvidenceValueObject'){literaturePanel.showAnnotationError(validateEvidenceValueObject.problematicEvidenceIds,errorColor);}}
var errorCode=Gemma.convertToEvidenceError(validateEvidenceValueObject);hasWarning=errorCode.isWarning;hasError=!hasWarning;if(hasWarning){errorPanel.showWarning(errorCode.errorMessage);}else{hasServerErrorMessages=true;errorPanel.showError(errorCode.errorMessage);}}
if(shouldSubmitAfterValidating){if(!hasError){if(hasWarning){Ext.MessageBox.confirm('Confirm','<b>'+errorPanel.getErrorMessage()+'</b><br />'+'Are you sure you want to '+(evidenceId==null?'add':'edit')+' phenotype association?',function(button){if(button==='yes'){this.submitForm(evidenceValueObject);}},this);}else{this.submitForm(evidenceValueObject);}}}}.createDelegate(this));}}}}},buttonAlign:'right',buttons:[{text:'OK',formBind:true,handler:function(){this.validateForm(true);},scope:this},{text:'Cancel',handler:function(){this.fireEvent('cancelButtonClicked');},scope:this}]});Gemma.PhenotypeAssociationForm.Panel.superclass.initComponent.call(this);}});Ext.namespace('Gemma.PhenotypeAssociationForm');Gemma.PhenotypeAssociationForm.PhenotypeSearchComboBox=Ext.extend(Ext.form.ComboBox,{currentGeneNcbiId:null,allowBlank:false,enableKeyEvents:true,forceSelection:true,valueField:'valueUri',displayField:'value',typeAhead:false,loadingText:'Searching...',minChars:2,width:400,listWidth:400,pageSize:0,hideTrigger:true,triggerAction:'all',listEmptyText:'No results found',getParams:function(query){return[query,this.currentGeneNcbiId];},autoSelect:false,tpl:new Ext.XTemplate('<tpl for="."><div ext:qtip="{qtip}" style="font-size:11px" class="x-combo-list-item {style}">{value}</div></tpl>'),initComponent:function(){var id=0;Ext.apply(this,{selectPhenotype:function(phenotypeSelection){if(phenotypeSelection!=null){id=phenotypeSelection.id;this.getStore().loadData([phenotypeSelection],true);this.setValue(phenotypeSelection.valueUri);}},getSelectedPhenotype:function(){var record=this.store.getById(this.getValue());record.data.id=id;return record.data;},store:new Ext.data.JsonStore({proxy:new Ext.data.DWRProxy(PhenotypeController.searchOntologyForPhenotypes),fields:['valueUri','value','alreadyPresentInDatabase','alreadyPresentOnGene','urlId',{name:'qtip',convert:function(value,record){return record.value+
(record.valueUri?'<br />'+record.valueUri:'');}},{name:'style',convert:function(value,record){if(record.alreadyPresentInDatabase){return"usedWithUri";}else{return"unusedWithUri";}}}],idProperty:'valueUri'})});Gemma.PhenotypeAssociationForm.PhenotypeSearchComboBox.superclass.initComponent.call(this);}});Ext.namespace('Gemma.PhenotypeAssociationForm');Gemma.PhenotypeAssociationForm.PhenotypesSearchPanel=Ext.extend(Ext.Panel,{fieldLabel:'Phenotype',border:false,layout:'form',initComponent:function(){var errorMessages=[];var comboBoxCount=0;var currentGeneNcbiId=null;var createRowPanel=function(phenotypeSelection){var phenotypeSearchComboBox=new Gemma.PhenotypeAssociationForm.PhenotypeSearchComboBox({currentGeneNcbiId:currentGeneNcbiId});phenotypeSearchComboBox.on({keyup:function(comboBox,event){updateValidity(true);},select:function(comboBox,record,index){updateValidity(false);}});phenotypeSearchComboBox.selectPhenotype(phenotypeSelection);var rowPanel=new Ext.Panel({border:false,layout:'hbox',getPhenotypeSearchComboBox:function(){return phenotypeSearchComboBox;},items:[phenotypeSearchComboBox,{xtype:'button',icon:'/Gemma/images/icons/subtract.png',margins:'0 0 3 3',handler:function(){if(comboBoxCount>1){rowsPanel.remove(rowPanel);rowsPanel.doLayout();comboBoxCount--;}else{phenotypeSearchComboBox.clearValue();}
updateValidity(false);},scope:this}]});comboBoxCount++;return rowPanel;}.createDelegate(this);var rowsPanel=new Ext.Panel({border:false,layout:'form',items:[createRowPanel()]});var addPhenotypeRowButton=new Ext.Button({icon:'/Gemma/images/icons/add.png',fieldLabel:"&nbsp;",labelSeparator:'',handler:function(){rowsPanel.add(createRowPanel());rowsPanel.doLayout();},scope:this});var checkDuplicate=function(){var hasDuplicate=false;for(var i=0;i<rowsPanel.items.length;i++){rowsPanel.items.itemAt(i).getPhenotypeSearchComboBox().clearInvalid();}
for(var i=0;i<rowsPanel.items.length;i++){var currComboBox=rowsPanel.items.itemAt(i).getPhenotypeSearchComboBox();var currValue=currComboBox.getRawValue();for(var j=i+1;currValue!==''&&j<rowsPanel.items.length;j++){var currTestComboBox=rowsPanel.items.itemAt(j).getPhenotypeSearchComboBox();var currTestValue=currTestComboBox.getRawValue();if(currValue===currTestValue){currComboBox.markInvalid();currTestComboBox.markInvalid();hasDuplicate=true;}}}
return hasDuplicate;};var updateValidity=function(isModifying){errorMessages.clear();if(checkDuplicate()){errorMessages.push(Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.phenotypesDuplicate);}
this.fireEvent('validtyStatusChanged',isModifying,errorMessages);}.createDelegate(this);Ext.apply(this,{selectPhenotypes:function(phenotypeSelections,geneSelection){if(geneSelection==null){currentGeneNcbiId=null;}else{currentGeneNcbiId=geneSelection.ncbiId;}
for(comboBoxCount-=1;comboBoxCount>0;comboBoxCount--){rowsPanel.remove(rowsPanel.getComponent(comboBoxCount));}
comboBoxCount++;var firstPhenotypeSearchComboBox=rowsPanel.items.itemAt(comboBoxCount-1).getPhenotypeSearchComboBox();firstPhenotypeSearchComboBox.currentGeneNcbiId=currentGeneNcbiId;if(phenotypeSelections==null||phenotypeSelections.length<=0){firstPhenotypeSearchComboBox.setValue('');firstPhenotypeSearchComboBox.reset();firstPhenotypeSearchComboBox.clearInvalid();}else{firstPhenotypeSearchComboBox.selectPhenotype(phenotypeSelections[0]);for(var i=1;i<phenotypeSelections.length;i++){rowsPanel.add(createRowPanel(phenotypeSelections[i]));}
rowsPanel.doLayout();}},getSelectedPhenotypes:function(){var selectedPhenotypes=errorMessages.length===0?[]:null;for(var i=0;selectedPhenotypes!=null&&i<rowsPanel.items.length;i++){var currPhenotypeSearchComboBox=rowsPanel.items.itemAt(i).getPhenotypeSearchComboBox();if(currPhenotypeSearchComboBox.getValue()===''){selectedPhenotypes=null;}else{selectedPhenotypes.push(currPhenotypeSearchComboBox.getSelectedPhenotype());}}
return selectedPhenotypes;},setCurrentGeneNcbiId:function(newCurrentGeneNcbiId){currentGeneNcbiId=newCurrentGeneNcbiId;for(var i=0;i<rowsPanel.items.length;++i){var currPhenotypeSearchComboBox=rowsPanel.items.itemAt(i).getPhenotypeSearchComboBox();currPhenotypeSearchComboBox.currentGeneNcbiId=currentGeneNcbiId;}},items:[rowsPanel,{border:false,layout:'hbox',hideLabel:true,items:[addPhenotypeRowButton,{xtype:'displayfield',value:'To describe a complex phenotype, you can add more terms by clicking this button.',style:'color: grey;',margins:'4 0 0 4'}]}]});Gemma.PhenotypeAssociationForm.PhenotypesSearchPanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma.PhenotypeAssociationForm');Gemma.PhenotypeAssociationForm.ExperimentTagCategoryComboBox=Ext.extend(Ext.form.ComboBox,{allowBlank:false,editable:false,forceSelection:true,mode:'local',store:new Ext.data.JsonStore({fields:['category','categoryUri'],idProperty:'categoryUri'}),valueField:'categoryUri',displayField:'category',width:200,typeAhead:true,emptyText:'Select category',triggerAction:'all',selectOnFocus:true,initComponent:function(){var originalExperimentTagSelection=null;Ext.apply(this,{selectExperimentTagCategory:function(experimentTagSelection){originalExperimentTagSelection=experimentTagSelection;if(experimentTagSelection==null){this.setValue('');this.reset();this.clearInvalid();}else{this.setValue(experimentTagSelection.categoryUri);}},getSelectedRecord:function(){var selectedCategoryUri=this.getValue();var selectedRecord=null;if(selectedCategoryUri!==''){var record=this.getStore().getById(selectedCategoryUri);if(record!=null){selectedRecord={id:originalExperimentTagSelection==null?0:originalExperimentTagSelection.id,categoryUri:record.data.categoryUri,category:record.data.category};}}
return selectedRecord;}});Gemma.PhenotypeAssociationForm.ExperimentTagCategoryComboBox.superclass.initComponent.call(this);}});Ext.namespace('Gemma.PhenotypeAssociationForm');Gemma.PhenotypeAssociationForm.LiteraturePanel=Ext.extend(Ext.Panel,{pubMedIdFieldAllowBlank:false,pubMedIdFieldLabel:'PubMed Id',evidenceId:null,border:false,layout:'form',hidden:true,autoHeight:true,defaultType:'textfield',initComponent:function(){var previousPubMedId='';var pubMedIdField=new Ext.form.NumberField({minValue:1,minLength:1,maxLength:9,allowBlank:true,allowDecimals:false,allowNegative:false,width:100,enableKeyEvents:true,initComponent:function(){Ext.apply(this,{autoCreate:{tag:'input',type:'text',size:'20',autocomplete:'off',maxlength:this.maxLength},listeners:{blur:function(numberField){updateBibliographicReferenceDetailsPanel(true);}}});this.superclass().initComponent.call(this);}});pubMedIdField.on({blur:function(numberField){this.fireEvent('pubMedIdFieldBlur',this);},keyup:function(numberField,event){var currentPubMedId=pubMedIdField.getValue();if(previousPubMedId!==currentPubMedId){previousPubMedId=currentPubMedId;this.fireEvent('pubMedIdFieldKeyUp',this,event);}},scope:this});var statusDisplayField=new Ext.form.DisplayField({value:'Searching for publication ...',style:'color: grey; font-style: italic;',margins:'4 0 0 0'});var bibliographicReferenceDetailsPanel=new Gemma.BibliographicReference.DetailsPanel({autoScroll:false,hidden:true,border:false,header:false,padding:'0 0 10px 10px',collapseByDefault:true});bibliographicReferenceDetailsPanel.on('render',function(thisPanel){if(!thisPanel.loadMask){thisPanel.loadMask=new Ext.LoadMask(thisPanel.getEl(),{msg:"Loading ..."});statusDisplayField.hide();}});var pubMedStore=new Ext.data.Store({proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:PhenotypeController.findBibliographicReference,getDwrArgsFunction:function(request){return[request.params["pubMedId"],this.evidenceId];}.createDelegate(this)}}}),reader:new Ext.data.JsonReader({fields:Gemma.BibliographicReference.Record})});pubMedStore.on({'load':{fn:function(store,records,options){if(statusDisplayField.ownerCt){statusDisplayField.hide();bibliographicReferenceDetailsPanel.loadMask.hide();if(options.params.pubMedId===pubMedIdField.getValue()){if(pubMedStore.getTotalCount()>0){pubMedIdField.clearInvalid();bibliographicReferenceDetailsPanel.updateFields(pubMedStore.getAt(0),this.evidenceId);bibliographicReferenceDetailsPanel.show();}else{pubMedIdField.markInvalid("PubMed Id is not valid");bibliographicReferenceDetailsPanel.hide();}}
if(options.params.shouldFireEvent){this.fireEvent('pubMedIdStoreLoad',this,store,records,options);}}},scope:this}});var updateBibliographicReferenceDetailsPanel=function(shouldFireEvent){var pubMedId=pubMedIdField.getValue();if(pubMedId===""){bibliographicReferenceDetailsPanel.hide();}else if(pubMedId>0){if(bibliographicReferenceDetailsPanel.loadMask){statusDisplayField.show();bibliographicReferenceDetailsPanel.loadMask.show();}
pubMedStore.reload({params:{'pubMedId':pubMedId,'shouldFireEvent':shouldFireEvent}});}else{bibliographicReferenceDetailsPanel.hide();}};Ext.apply(this,{listeners:{show:function(thisComponent){pubMedIdField.allowBlank=this.pubMedIdFieldAllowBlank;},hide:function(thisComponent){pubMedIdField.allowBlank=true;},scope:this},isValid:function(){var pubMedId=pubMedIdField.getValue();var isPubMedIdValid=false;if(pubMedId===''){isPubMedIdValid=this.pubMedIdFieldAllowBlank;}else if(pubMedId>0){isPubMedIdValid=pubMedStore.getTotalCount()>0;}
return isPubMedIdValid;},getPubMedId:function(){return pubMedIdField.getValue();},getCitationValueObject:function(){var pubMedId=this.getPubMedId();if(pubMedId===''){return null;}else{var citationValueObject=new CitationValueObject();citationValueObject.pubmedAccession=pubMedId;return citationValueObject;}},setPubMedId:function(pubMedId){if(pubMedIdField.getValue()!=pubMedId){pubMedIdField.setValue(pubMedId);updateBibliographicReferenceDetailsPanel(false);}
if(pubMedId===''){pubMedIdField.clearInvalid();this.hide();}else{this.show();}},setEvidenceId:function(evidenceId){this.evidenceId=evidenceId;},showAnnotationError:function(evidenceIds,errorColor){bibliographicReferenceDetailsPanel.showAnnotationError(evidenceIds,errorColor);},items:[{xtype:'compositefield',border:false,layout:'form',fieldLabel:this.pubMedIdFieldLabel,items:[pubMedIdField,statusDisplayField]},bibliographicReferenceDetailsPanel]});Gemma.PhenotypeAssociationForm.LiteraturePanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma.PhenotypeAssociationForm');Gemma.PhenotypeAssociationForm.ErrorPanel=Ext.extend(Ext.Panel,{layout:'form',border:false,style:'padding: 5px; background-color: white;',autoHeight:true,hidden:true,initComponent:function(){var errorDisplayField=new Ext.form.DisplayField({hideLabel:true,value:''});var showMessageInColor=function(message,color){this.getEl().applyStyles('border: 3px solid '+color+';');errorDisplayField.getEl().applyStyles('color: '+color+';');errorDisplayField.setValue(message);this.show();this.ownerCt.doLayout();}.createDelegate(this);Ext.apply(this,{items:[errorDisplayField],getErrorMessage:function(){return errorDisplayField.getValue();},hide:function(){errorDisplayField.setValue('');Gemma.PhenotypeAssociationForm.ErrorPanel.superclass.hide.call(this);this.ownerCt.doLayout();},showError:function(message){showMessageInColor(message,'red');},showWarning:function(message){showMessageInColor(message,'orange');}});Gemma.PhenotypeAssociationForm.ErrorPanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma.PhenotypeAssociationForm');Gemma.PhenotypeAssociationForm.ExperimentTagCategories=null;Gemma.PhenotypeAssociationForm.ExperimentTagsPanel=Ext.extend(Ext.Panel,{fieldLabel:'Experiment Tag',border:false,layout:'form',initComponent:function(){var comboBoxCount=0;var currentGeneTaxonId=null;var createRowPanel=function(experimentTagSelection){var experimentTagCategoryComboBox=new Gemma.PhenotypeAssociationForm.ExperimentTagCategoryComboBox({listeners:{blur:function(combo){var currentCategoryUri=combo.getValue();experimentTagValueComboBox.currentCategoryUri=(currentCategoryUri=='')?null:currentCategoryUri;},scope:this}});var experimentTagValueComboBox=new Gemma.PhenotypeAssociationForm.ExperimentTagValueComboBox({currentCategoryUri:experimentTagSelection==null?null:experimentTagSelection.categoryUri,currentGeneTaxonId:currentGeneTaxonId,margins:'0 0 0 3'});experimentTagCategoryComboBox.selectExperimentTagCategory(experimentTagSelection);experimentTagValueComboBox.selectExperimentTagValue(experimentTagSelection);this.relayEvents(experimentTagCategoryComboBox,['select']);this.relayEvents(experimentTagValueComboBox,['keyup','select']);var rowPanel=new Ext.Panel({border:false,layout:'hbox',getCategoryComboBox:function(){return experimentTagCategoryComboBox;},getValueComboBox:function(){return experimentTagValueComboBox;},items:[experimentTagCategoryComboBox,experimentTagValueComboBox,{xtype:'button',icon:'/Gemma/images/icons/subtract.png',margins:'0 0 3 3',handler:function(){if(comboBoxCount>1){rowsPanel.remove(rowPanel);rowsPanel.doLayout();comboBoxCount--;this.fireEvent('experimentTagFieldRemoved');}else{experimentTagCategoryComboBox.clearValue();experimentTagValueComboBox.clearValue();this.fireEvent('experimentTagFieldCleared');}},scope:this}]});comboBoxCount++;return rowPanel;}.createDelegate(this);var rowsPanel=new Ext.Panel({border:false,layout:'form',items:[createRowPanel()]});var addExperimentTagRowButton=new Ext.Button({icon:'/Gemma/images/icons/add.png',fieldLabel:"&nbsp;",labelSeparator:'',handler:function(){rowsPanel.add(createRowPanel());rowsPanel.doLayout();this.fireEvent('experimentTagFieldAdded');},scope:this});var visiblityHandler=function(isVisible){if(isVisible&&Gemma.PhenotypeAssociationForm.ExperimentTagCategories==null){PhenotypeController.findExperimentMgedCategory(function(characteristicValueObjects){Gemma.PhenotypeAssociationForm.ExperimentTagCategories=[];for(var i=0;i<characteristicValueObjects.length;i++){Gemma.PhenotypeAssociationForm.ExperimentTagCategories.push({categoryUri:characteristicValueObjects[i].categoryUri,category:characteristicValueObjects[i].category});}
for(var i=0;i<rowsPanel.items.length;i++){var currRowPanel=rowsPanel.items.itemAt(i);var currentValue=currRowPanel.getCategoryComboBox().getValue();if(i===0){currRowPanel.getCategoryComboBox().getStore().loadData(Gemma.PhenotypeAssociationForm.ExperimentTagCategories);}
if(currentValue!==''){currRowPanel.getCategoryComboBox().setValue(currentValue);}}}.createDelegate(this));}
for(var i=0;i<rowsPanel.items.length;i++){var currRowPanel=rowsPanel.items.itemAt(i);currRowPanel.getCategoryComboBox().allowBlank=!isVisible;currRowPanel.getValueComboBox().allowBlank=!isVisible;}};Ext.apply(this,{selectExperimentTags:function(experimentTagSelections,geneSelection){if(geneSelection==null){currentGeneTaxonId=null;}else{currentGeneTaxonId=geneSelection.taxonId;}
for(comboBoxCount-=1;comboBoxCount>0;comboBoxCount--){rowsPanel.remove(rowsPanel.getComponent(comboBoxCount));}
comboBoxCount++;var firstExperimentTagCategoryComboBox=rowsPanel.items.itemAt(comboBoxCount-1).getCategoryComboBox();var firstExperimentTagValueComboBox=rowsPanel.items.itemAt(comboBoxCount-1).getValueComboBox();firstExperimentTagValueComboBox.currentGeneTaxonId=currentGeneTaxonId;if(experimentTagSelections==null||experimentTagSelections.length<=0){firstExperimentTagCategoryComboBox.setValue('');firstExperimentTagCategoryComboBox.reset();firstExperimentTagCategoryComboBox.clearInvalid();firstExperimentTagValueComboBox.setValue('');firstExperimentTagValueComboBox.reset();firstExperimentTagValueComboBox.clearInvalid();firstExperimentTagValueComboBox.currentCategoryUri=null;}else{firstExperimentTagCategoryComboBox.selectExperimentTagCategory(experimentTagSelections[0]);firstExperimentTagValueComboBox.selectExperimentTagValue(experimentTagSelections[0]);firstExperimentTagValueComboBox.currentCategoryUri=firstExperimentTagCategoryComboBox.getValue();for(var i=1;i<experimentTagSelections.length;i++){rowsPanel.add(createRowPanel(experimentTagSelections[i]));}
rowsPanel.doLayout();}},getSelectedExperimentTags:function(){var selectedExperimentTags=[];for(var i=0;selectedExperimentTags!=null&&i<rowsPanel.items.length;i++){var currRowPanel=rowsPanel.items.itemAt(i);var currCategoryRecord=currRowPanel.getCategoryComboBox().getSelectedRecord();var currValueRecord=currRowPanel.getValueComboBox().getSelectedRecord();if(currCategoryRecord==null||currValueRecord==null){selectedExperimentTags=null;}else{var characteristicValueObject=new CharacteristicValueObject();characteristicValueObject.id=currCategoryRecord.id;characteristicValueObject.category=currCategoryRecord.category;characteristicValueObject.categoryUri=currCategoryRecord.categoryUri;characteristicValueObject.value=currValueRecord.value;characteristicValueObject.valueUri=currValueRecord.valueUri;selectedExperimentTags.push(characteristicValueObject);}}
return selectedExperimentTags;},checkDuplicate:function(){var hasDuplicate=false;for(var i=0;i<rowsPanel.items.length;i++){var currRowPanel=rowsPanel.items.itemAt(i);currRowPanel.getCategoryComboBox().clearInvalid();currRowPanel.getValueComboBox().clearInvalid();}
for(var i=0;i<rowsPanel.items.length;i++){var currRowPanel=rowsPanel.items.itemAt(i);var currCategoryRecord=currRowPanel.getCategoryComboBox().getSelectedRecord();var currCategory=currCategoryRecord==null?null:currCategoryRecord.category;var currValue=currRowPanel.getValueComboBox().getRawValue();for(var j=i+1;currCategory!=null&&currValue!==''&&j<rowsPanel.items.length;j++){var currTestRowPanel=rowsPanel.items.itemAt(j);var currTestCategoryRecord=currTestRowPanel.getCategoryComboBox().getSelectedRecord();var currTestCategory=currTestCategoryRecord==null?null:currTestCategoryRecord.category;var currTestValue=currTestRowPanel.getValueComboBox().getRawValue();if(currCategory===currTestCategory&&currValue===currTestValue){currRowPanel.getCategoryComboBox().markInvalid();currRowPanel.getValueComboBox().markInvalid();currTestRowPanel.getCategoryComboBox().markInvalid();currTestRowPanel.getValueComboBox().markInvalid();hasDuplicate=true;}}}
return hasDuplicate;},setCurrentGeneTaxonId:function(newCurrentGeneTaxonId){currentGeneTaxonId=newCurrentGeneTaxonId;for(var i=0;i<rowsPanel.items.length;i++){var currValueComboBox=rowsPanel.items.itemAt(i).getValueComboBox();currValueComboBox.currentGeneTaxonId=currentGeneTaxonId;}},isValid:function(){for(var i=0;i<rowsPanel.items.length;i++){var currRowPanel=rowsPanel.items.itemAt(i);if(currRowPanel.getCategoryComboBox().getValue()===''||currRowPanel.getValueComboBox().getRawValue()===''){return false;}}
return true;},listeners:{show:function(thisComponent){visiblityHandler(true);},hide:function(thisComponent){visiblityHandler(false);},scope:this},items:[rowsPanel,{xtype:'compositefield',border:false,layout:'form',hideLabel:true,items:[addExperimentTagRowButton,{xtype:'displayfield',value:'You can add more experiment tags by clicking this button.',style:'color: grey;',margins:'4 0 0 0'}]}]});Gemma.PhenotypeAssociationForm.ExperimentTagsPanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma.PhenotypeAssociationForm');Gemma.PhenotypeAssociationForm.GeneSearchComboBox=Ext.extend(Ext.form.ComboBox,{allowBlank:false,forceSelection:true,store:new Ext.data.JsonStore({proxy:new Ext.data.DWRProxy(GenePickerController.searchGenesWithNCBIId),fields:['id','ncbiId','officialSymbol','officialName','taxonCommonName','taxonId',{name:'comboText',convert:function(value,record){return'<div style="font-size:12px;" class="x-combo-list-item" >'+
record.officialName+' <span style="color:grey">('+record.taxonCommonName+')</span></div>';}}],idProperty:'ncbiId'}),valueField:'ncbiId',displayField:'officialSymbol',typeAhead:false,loadingText:'Searching...',emptyText:'Search genes by keyword',minChars:2,width:150,listWidth:400,pageSize:0,hideTrigger:true,triggerAction:'all',listEmptyText:'No results found',getParams:function(query){return[query,null];},autoSelect:false,tpl:new Ext.XTemplate('<tpl for="."><div style="font-size:11px;background-color:#ECF4FF" class="x-combo-list-item" '+'ext:qtip="{officialSymbol}: {officialName} ({taxonCommonName})"><b>{officialSymbol}</b>: {officialName} <span style="color:grey">({taxonCommonName})</span></div></tpl>'),initComponent:function(){var geneSelectedLabel=new Ext.form.Label();Ext.apply(this,{getGeneSelectedLabel:function(){return geneSelectedLabel;},listeners:{focus:function(combo){geneSelectedLabel.setText('');},blur:function(combo){if(this.value===''){geneSelectedLabel.setText("",false);}else{var record=this.findRecord(this.valueField,this.value);if(record){geneSelectedLabel.setText(record.data.comboText,false);}else{geneSelectedLabel.setText("",false);}}},select:function(combo,record,index){geneSelectedLabel.setText(record.data.comboText,false);this.collapse();},scope:this},selectGene:function(geneSelection){if(geneSelection==null){geneSelectedLabel.setText("",false);this.setValue('');this.reset();this.clearInvalid();}else{this.getStore().loadData([{id:geneSelection.id,ncbiId:geneSelection.ncbiId,officialSymbol:geneSelection.officialSymbol,officialName:geneSelection.officialName,taxonCommonName:geneSelection.taxonCommonName,taxonId:geneSelection.taxonId}]);this.setValue(geneSelection.ncbiId);geneSelectedLabel.setText(this.getStore().getAt(0).data.comboText,false);}}});Gemma.PhenotypeAssociationForm.GeneSearchComboBox.superclass.initComponent.call(this);}});Ext.namespace('Gemma.PhenotypeAssociationForm');Gemma.PhenotypeAssociationForm.ExperimentTagValueComboBox=Ext.extend(Ext.form.ComboBox,{currentCategoryUri:null,currentGeneTaxonId:null,minLength:2,maxLength:255,allowBlank:false,enableKeyEvents:true,forceSelection:false,valueField:'value',displayField:'value',typeAhead:false,loadingText:'Searching...',emptyText:'Enter term',minChars:3,width:200,listWidth:320,pageSize:0,hideTrigger:true,triggerAction:'all',listEmptyText:'No results found',getParams:function(query){return[query,this.currentCategoryUri,this.currentGeneTaxonId];},autoSelect:false,tpl:new Ext.XTemplate('<tpl for="."><div ext:qtip="{qtip}" style="font-size:11px" class="x-combo-list-item {style}">{value}</div></tpl>'),getSelectedRecord:function(){var rawValue=this.getRawValue();var selectedRecord;if(rawValue===''){selectedRecord=null;}else{var storeRecord=this.store.getById(rawValue);selectedRecord={value:rawValue,valueUri:storeRecord==null?'':storeRecord.data.valueUri}}
return selectedRecord;},initComponent:function(){var originalExperimentTagSelection=null;Ext.apply(this,{autoCreate:{tag:'input',type:'text',maxlength:this.maxLength},store:new Ext.data.JsonStore({proxy:new Ext.data.DWRProxy(PhenotypeController.findExperimentOntologyValue),fields:['valueUri','value',{name:'qtip',convert:function(value,record){return record.value+
(record.valueUri?'<br />'+record.valueUri:'');}},{name:'style',convert:function(value,record){if(record.alreadyPresentInDatabase){return record.valueUri?"usedWithUri":"usedNoUri";}else{return"unusedWithUri";}}}],idProperty:'value'}),selectExperimentTagValue:function(experimentTagSelection){originalExperimentTagSelection=experimentTagSelection;if(experimentTagSelection==null){this.setValue('');this.reset();this.clearInvalid();}else{this.getStore().loadData([{valueUri:experimentTagSelection.valueUri,value:experimentTagSelection.value}]);this.setValue(experimentTagSelection.value);}}});Gemma.PhenotypeAssociationForm.ExperimentTagValueComboBox.superclass.initComponent.call(this);}});Ext.namespace('Gemma.PhenotypeAssociationForm');Gemma.PhenotypeAssociationForm.EvidenceTypeComboBox=Ext.extend(Ext.form.ComboBox,{valueField:'evidenceClassName',fieldLabel:'Type of Evidence',allowBlank:false,editable:false,mode:'local',store:new Ext.data.ArrayStore({fields:['evidenceClassName','evidenceType'],data:[['ExperimentalEvidenceValueObject','Experimental'],['LiteratureEvidenceValueObject','Literature']]}),forceSelection:true,displayField:'evidenceType',width:200,typeAhead:true,triggerAction:'all',selectOnFocus:true,initComponent:function(){Ext.apply(this,{selectEvidenceType:function(evidenceClassName){if(evidenceClassName==null){this.setValue('');this.clearInvalid();}else{this.setValue(evidenceClassName);}}});Gemma.PhenotypeAssociationForm.EvidenceTypeComboBox.superclass.initComponent.call(this);}});Ext.namespace('Gemma.PhenotypeAssociationForm');Gemma.PhenotypeAssociationForm.ExperimentalPanel=Ext.extend(Ext.Panel,{border:false,layout:'form',hidden:true,autoHeight:true,defaultType:'textfield',initComponent:function(){var isPrimaryPubMedIdValid=true;var isSecondaryPubMedIdValid=true;var pubMedIdErrorMessages=[];var experimentTagErrorMessages=[];var updatePubMedIdsValidity=function(isModifying,literaturePanel,isValid){var primaryPubMedId=primaryLiteraturePanel.getPubMedId();var secondaryPubMedId=secondaryLiteraturePanel.getPubMedId();pubMedIdErrorMessages.clear();if(literaturePanel===primaryLiteraturePanel){isPrimaryPubMedIdValid=isValid;}else if(literaturePanel===secondaryLiteraturePanel){isSecondaryPubMedIdValid=isValid;}
if(primaryPubMedId===''){if(secondaryPubMedId!==''){pubMedIdErrorMessages.push(String.format(Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.pubMedIdOnlyPrimaryEmpty,primaryLiteraturePanel.pubMedIdFieldLabel,secondaryLiteraturePanel.pubMedIdFieldLabel));}}else if(primaryPubMedId===secondaryPubMedId){pubMedIdErrorMessages.push(String.format(Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.pubMedIdsDuplicate,primaryLiteraturePanel.pubMedIdFieldLabel,secondaryLiteraturePanel.pubMedIdFieldLabel));}else{if(primaryPubMedId!==''&&(primaryPubMedId<=0||!isPrimaryPubMedIdValid)){pubMedIdErrorMessages.push(String.format(Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.pubmedIdInvalid,primaryLiteraturePanel.pubMedIdFieldLabel));}
if(secondaryPubMedId!==''&&(secondaryPubMedId<=0||!isSecondaryPubMedIdValid)){pubMedIdErrorMessages.push(String.format(Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.pubmedIdInvalid,secondaryLiteraturePanel.pubMedIdFieldLabel));}}
this.fireEvent('validtyStatusChanged',isModifying,pubMedIdErrorMessages.concat(experimentTagErrorMessages));}.createDelegate(this);var updateExperimentTagsValidity=function(isModifying){experimentTagErrorMessages.clear();if(experimentTagsPanel.checkDuplicate()){experimentTagErrorMessages.push(Gemma.HelpText.WidgetDefaults.PhenotypeAssociationForm.ErrorMessage.experimentTagsDuplicate);this.fireEvent('validtyStatusChanged',isModifying,pubMedIdErrorMessages.concat(experimentTagErrorMessages));}else{this.fireEvent('validtyStatusChanged',isModifying,pubMedIdErrorMessages);}}.createDelegate(this);var pubMedIdFieldBlurHandler=function(literaturePanel){var pubMedId=literaturePanel.getPubMedId();if(pubMedId===""){updatePubMedIdsValidity(false,literaturePanel,true);}else if(pubMedId<=0){updatePubMedIdsValidity(false,literaturePanel,false);}}
var pubMedIdFieldKeyUpHandler=function(literaturePanel,event){updatePubMedIdsValidity(true,literaturePanel,true);};var pubMedIdStoreLoadHandler=function(literaturePanel,store,records,options){if(options.params.pubMedId===literaturePanel.getPubMedId()){if(store.getTotalCount()>0){updatePubMedIdsValidity(false,literaturePanel,true);}else{updatePubMedIdsValidity(false,literaturePanel,false);}}};var primaryLiteraturePanel=new Gemma.PhenotypeAssociationForm.LiteraturePanel({isErrorShown:false,pubMedIdFieldAllowBlank:true,pubMedIdFieldLabel:'PubMed Id',listeners:{pubMedIdFieldBlur:pubMedIdFieldBlurHandler,pubMedIdFieldKeyUp:pubMedIdFieldKeyUpHandler,pubMedIdStoreLoad:pubMedIdStoreLoadHandler}});var secondaryLiteraturePanel=new Gemma.PhenotypeAssociationForm.LiteraturePanel({isErrorShown:false,pubMedIdFieldAllowBlank:true,pubMedIdFieldLabel:'Secondary PubMed Id',listeners:{pubMedIdFieldBlur:pubMedIdFieldBlurHandler,pubMedIdFieldKeyUp:pubMedIdFieldKeyUpHandler,pubMedIdStoreLoad:pubMedIdStoreLoadHandler}});var experimentTagsPanel=new Gemma.PhenotypeAssociationForm.ExperimentTagsPanel({listeners:{keyup:function(component){updateExperimentTagsValidity(true);},select:function(component){updateExperimentTagsValidity(false);},experimentTagFieldRemoved:function(){updateExperimentTagsValidity(false);}}});var setAllItemsVisible=function(container,isVisible){for(var i=0;i<container.items.length;i++){container.items.items[i].setVisible(isVisible);}}
Ext.apply(this,{setEvidenceId:function(evidenceId){primaryLiteraturePanel.setEvidenceId(evidenceId);},selectExperimentalData:function(primaryPubMedId,secondaryPubMedId,experimentTagSelections,geneSelection){primaryLiteraturePanel.setPubMedId(primaryPubMedId);secondaryLiteraturePanel.setPubMedId(secondaryPubMedId);experimentTagsPanel.selectExperimentTags(experimentTagSelections,geneSelection);},listeners:{show:function(thisComponent){setAllItemsVisible(thisComponent,true);},hide:function(thisComponent){setAllItemsVisible(thisComponent,false);},scope:this},isValid:function(){var primaryPubMedId=primaryLiteraturePanel.getPubMedId();var secondaryPubMedId=secondaryLiteraturePanel.getPubMedId();return primaryLiteraturePanel.isValid()&&secondaryLiteraturePanel.isValid()&&((primaryPubMedId!==secondaryPubMedId)||(primaryPubMedId===''&&secondaryPubMedId===''))&&(primaryPubMedId!==''||secondaryPubMedId==='')&&experimentTagsPanel.isValid();},getValues:function(){var secondaryCitationValueObject=secondaryLiteraturePanel.getCitationValueObject();return{primaryPublicationCitationValueObject:primaryLiteraturePanel.getCitationValueObject(),relevantPublicationsCitationValueObjects:secondaryCitationValueObject==null?[]:[secondaryCitationValueObject],experimentCharacteristics:experimentTagsPanel.getSelectedExperimentTags()};},setCurrentGeneTaxonId:function(newCurrentGeneTaxonId){experimentTagsPanel.setCurrentGeneTaxonId(newCurrentGeneTaxonId);},showAnnotationError:function(errorEvidenceIds,errorColor){primaryLiteraturePanel.showAnnotationError(errorEvidenceIds,errorColor);},items:[primaryLiteraturePanel,secondaryLiteraturePanel,experimentTagsPanel]});Gemma.PhenotypeAssociationForm.ExperimentalPanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.UNFILTERED_FACTORS_BUTTON_TEXT="Unfiltered";Gemma.FILTERED_FACTORS_BUTTON_TEXT="Filtered";Gemma.ExperimentalFactorChooserPanel=Ext.extend(Ext.Window,{id:'factor-chooser',layout:'fit',width:800,height:250,closeAction:'hide',constrainHeader:true,title:"View/Choose the factors to analyze in each experiment",eeFactorsMap:null,reset:function(eeSet){if(this.currentEEset&&eeSet!==this.currentEEset){this.eeFactorsMap=null;}
this.currentEEset=eeSet;},onCommit:function(){if(!this.efGrid){return;}
this.eeFactorsMap=[];var eeFactorSource=this.efGrid.getSource();for(var experimentName in eeFactorSource){var factorName=eeFactorSource[experimentName];if(typeof factorName!=='string'){continue;}
for(var i in this.data){var rec=this.data[i];if(!rec.expressionExperiment){continue;}
var eeInfo=rec.expressionExperiment;var eeName=eeInfo.name;if(eeName!==experimentName){continue;}
var eeId=eeInfo.id;var efInfo=rec.experimentalFactors;for(var j in efInfo){var ef=efInfo[j];if(!ef.name){continue;}
var efName=ef.name;if(efName===factorName){var efId=ef.id;this.eeFactorsMap.push({efId:efId,eeId:eeId});break;}}}}
this.fireEvent("factors-chosen",this.eeFactorsMap);this.hide();},onHelp:function(){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.ExperimentalFactorChooserPanel.helpTitle,Gemma.HelpText.WidgetDefaults.ExperimentalFactorChooserPanel.helpText);},initComponent:function(){Ext.apply(this,{tbar:new Ext.Toolbar({items:[{pressed:true,enableToggle:true,text:Gemma.FILTERED_FACTORS_BUTTON_TEXT,tooltip:"Click to show/hide experiments that have only one factor",id:'single-factor-toggle',cls:'x-btn-text-icon details',toggleHandler:this.toggleFactors.createDelegate(this)},{xtype:'tbspacer'},{xtype:'tbspacer'},{text:'Hinting',tooltip:'Provide heuristics for selecting factors',handler:this.factorHinting.createDelegate(this)}]}),buttons:[{id:'done-selecting-button',text:"Done",handler:this.onCommit.createDelegate(this),scope:this},{id:'help-selecting-button',text:"Help",handler:this.onHelp.createDelegate(this),scope:this}]});Gemma.ExperimentalFactorChooserPanel.superclass.initComponent.call(this);this.addEvents("factors-chosen");},show:function(eeIds){Gemma.ExperimentalFactorChooserPanel.superclass.show.call(this);this.populateFactors(eeIds);},factorHinting:function(btn){var w=new Ext.Window({modal:true,title:"Select type of factor to favor",closeAction:'close',stateful:false,resizable:false,columns:1,autoHeight:true,width:530,items:[{xtype:'radiogroup',stateful:false,id:'factor-hinting-radiogroup',style:'padding:8px;',items:[{stateful:true,id:'factor-hinting-button',boxLabel:'OrganismPart',stateEvents:['check'],stateId:'organism-part-hint',name:'rb-hint',inputValue:1},{stateful:true,boxLabel:'DiseaseState',stateId:'disease-state-hint',stateEvents:['check'],name:'rb-hint',inputValue:2},{stateful:true,boxLabel:'Time',stateId:'sampling-time-hint',stateEvents:['check'],name:'rb-hint',inputValue:3},{stateful:true,boxLabel:'Treatment',stateId:'treatment-hint',stateEvents:['check'],name:'rb-hint',inputValue:4},{stateful:true,boxLabel:'Any',stateId:'any-factor-hint',stateEvents:['check'],name:'rb-hint',checked:true,inputValue:5}]}],buttons:[{text:'OK',handler:function(){this.applyHintingFilter();w.close();},scope:this},{text:'Cancel',handler:function(){w.close();}}]});w.show();},applyHintingFilter:function(){var choice=Ext.getCmp('factor-hinting-button').getGroupValue();if(choice==='1'){this.efGrid.getStore().filterBy(this.organismPartFilter,this);}else if(choice==='2'){this.efGrid.getStore().filterBy(this.diseaseStateFilter,this);}else if(choice==='3'){this.efGrid.getStore().filterBy(this.samplingTimeFilter,this);}else if(choice==='4'){this.efGrid.getStore().filterBy(this.treatmentFilter,this);}else if(choice==='5'){}else{}},toggleFactors:function(btn,pressed){if(pressed){this.efGrid.getStore().filterBy(this.filter,this,0);btn.setText(Gemma.FILTERED_FACTORS_BUTTON_TEXT);}else{this.efGrid.getStore().clearFilter();btn.setText(Gemma.UNFILTERED_FACTORS_BUTTON_TEXT);}},filterByFactorNamePattern:function(r,id,regex){editor=this.efGrid.customEditors[id];editor.field.store.each(function(record){if(record.get('name').match(regex)||record.get('category').match(regex)){r.set('value',record.get('name'));return false;}
return true;});if(Ext.getCmp('single-factor-toggle').pressed){return this.filter(r,id);}
return true;},organismPartFilter:function(r,id){return this.filterByFactorNamePattern(r,id,/^OrganismPart/i);},diseaseStateFilter:function(r,id){return this.filterByFactorNamePattern(r,id,/^DiseaseState/i);},samplingTimeFilter:function(r,id){return this.filterByFactorNamePattern(r,id,/^SamplingTimePoint/i);},treatmentFilter:function(r,id){return this.filterByFactorNamePattern(r,id,/^Treatment/i);},filter:function(r,id){editor=this.efGrid.customEditors[id];if(editor.field.store.getTotalCount()>1){return true;}
return false;},populateFactors:function(eeIds){if(!this.efGrid){Ext.apply(this,{loadMask:new Ext.LoadMask(this.getEl(),{msg:"Loading factors ..."})});this.loadMask.show();}else{this.efGrid.loadMask.show();}
DifferentialExpressionSearchController.getFactors(eeIds,{callback:this.returnFromGetFactors.createDelegate(this)});},returnFromGetFactors:function(results){this.data=results;var dataFromServer={data:results};if(results.size()>0){if(this.efGrid){this.remove(this.efGrid,true);}else{this.loadMask.hide();}
this.efGrid=new Gemma.ExpressionExperimentExperimentalFactorGrid(dataFromServer);this.add(this.efGrid);this.doLayout();this.efGrid.getStore().filterBy(this.filter,this,0);}else{this.loadMask.hide();Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.ExperimentalFactorChooserPanel.noResultsTitle,Gemma.HelpText.WidgetDefaults.ExperimentalFactorChooserPanel.noResultsText);}}});Ext.namespace('Gemma');Gemma.CoexpressionSearchOptions=Ext.extend(Ext.Window,{title:'Coexpression search refinements',layout:'form',width:275,height:250,labelWidth:130,padding:10,initComponent:function(){Ext.apply(this,{buttons:[{text:'Re-run search',scope:this,handler:function(){this.fireEvent('rerunSearch',this.stringencyfield.getValue(),this.forceProbeLevelSearch.getValue(),this.querygenesonly.getValue());}},{text:'Cancel',scope:this,handler:function(){this.hide();}}],items:[{html:'<h4>Run your <u>original</u> coexpression search with: </h4><br>',bodyStyle:'background-color: transparent',border:false},{xtype:'spinnerfield',decimalPrecision:1,incrementValue:1,accelerate:true,ref:'stringencyfield',allowBlank:false,allowDecimals:false,allowNegative:false,minValue:Gemma.MIN_STRINGENCY,maxValue:999,fieldLabel:'Stringency ',value:2,width:60,fieldTip:"The minimum number of datasets that must show coexpression for a result to appear"},{xtype:'checkbox',style:'margin-top:7px',disabled:!this.admin,hidden:!this.admin,hideLabel:!this.admin,ref:'forceProbeLevelSearch',fieldLabel:'Probe-level query',fieldTip:'Run this query at the level of probes instead of genes. '+'May be slower but always gets most current information from newly-processed data sets.'},{xtype:'checkbox',ref:'querygenesonly',style:'margin-top:10px',fieldLabel:'Coexpression among query genes only ',fieldTip:"Restrict the output to include only links among the listed query genes"}]});Gemma.CoexpressionSearchOptions.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.DifferentialExpressionSearchOptions=Ext.extend(Ext.Window,{title:'Differential expression search refinements',layout:'form',width:275,height:200,padding:10,threshold:Gemma.DEFAULT_THRESHOLD,initComponent:function(){Ext.apply(this,{buttons:[{text:'Re-run search',scope:this,handler:function(){this.fireEvent('rerunSearch',this.thresholdfield.getValue());}},{text:'Cancel',scope:this,handler:function(){this.hide();}}],items:[{html:'<h4>Run your <u>original</u> differential expression search with: </h4><br>',bodyStyle:'background-color: transparent',border:false},{xtype:'numberfield',accelerate:true,ref:'thresholdfield',allowBlank:false,allowDecimals:true,allowNegative:false,minValue:Gemma.MIN_THRESHOLD,maxValue:Gemma.MAX_THRESHOLD,invalidText:"Minimum threshold is "+Gemma.MIN_THRESHOLD+".  Max threshold is "+
Gemma.MAX_THRESHOLD,msgTarget:'side',value:this.threshold,fieldLabel:'Threshold '+'<img ext:qtip="Only genes with a qvalue less than this threshold are returned." '+'src="/Gemma/images/icons/question_blue.png"/>',width:60}]});Gemma.DifferentialExpressionSearchOptions.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Ext.BLANK_IMAGE_URL='/Gemma/images/default/s.gif';Gemma.DifferentialExpressionAnalysesSummaryTree=Ext.extend(Ext.tree.TreePanel,{animate:true,rootVisible:false,enableDD:false,cls:'x-tree-noicon',singleClickExpand:true,lines:false,containerScroll:false,autoScroll:true,border:false,layout:'fit',root:{text:'root'},listeners:{afterrender:function(){this.drawPieCharts();},expandnode:function(){this.drawPieCharts();}},initComponent:function(){this.ee=this.experimentDetails;if(this.editable==undefined&&Ext.get("hasAdmin").getValue()=='true'){this.editable=true;}
Gemma.DifferentialExpressionAnalysesSummaryTree.superclass.initComponent.call(this);this.build();new Ext.tree.TreeSorter(this,{folderSort:false,dir:'ASC',property:'text'});},build:function(){var analyses=this.ee.differentialExpressionAnalyses;Ext.apply(this,{contrastPercents:[],totalProbes:this.ee.processedExpressionVectorCount});var root=new Ext.tree.TreeNode({expanded:true,id:'diffExRoot',text:'root'});this.setRootNode(root);if(!analyses||analyses.size()===0){root.appendChild(new Ext.tree.TreeNode({id:'nodeNA',expanded:false,leaf:true,text:'Not Available'}));return;}
var nodeId=0;for(var j=0;j<analyses.size();j++){var analysis=analyses[j];var parentNode=null;var parentText=null;var interaction=0;var subsetText='';var subsetIdent='';var neighbourNode=null;if(analysis.subsetFactor){var subsetFactor=analysis.subsetFactor;subsetText=this.getSubsetText(analysis);subsetIdent=subsetFactor+analysis.resultSets.size();neighbourNode=root.findChild('subsetIdent',subsetIdent);}
var downloadDiffDataLink=this.getDownloadLink(analysis);parentNode=new Ext.tree.TreeNode({id:'node'+this.ee.id+'-'+(nodeId++),expanded:true,singleClickExpand:true,text:downloadDiffDataLink,subsetIdent:subsetIdent,leaf:false});if(neighbourNode){root.insertBefore(parentNode,neighbourNode);}else{root.appendChild(parentNode);}
var resultSet=null;var analysisName=null;var analysisNameExtra=null;var nodeText='';if(analysis.resultSets.size()===1){resultSet=analysis.resultSets[0];analysisName=this.getFactorNameText(analysis,resultSet);analysisNameExtra=this.getFactorNameExtra(analysis,resultSet);nodeText='';if(subsetText!==''){subsetText+=this.getBaseline(resultSet);subsetText+=this.getActionLinks(resultSet,analysisName[0],this.ee.id,nodeId);}else{nodeText+=this.getBaseline(resultSet);nodeText+=this.getActionLinks(resultSet,analysisName[0],this.ee.id,nodeId);}
parentText='<b>'
+analysisName[0]
+(analysisNameExtra?'</b>&nbsp<span style="color:grey;font-size:smaller;" ext:qtip="Values: '
+analysisNameExtra
+'">('
+Ext.util.Format.ellipsis(analysisNameExtra,35,true)
+')</span>':'')+nodeText;parentNode.attributes.numberOfFactors=resultSet.experimentalFactors.size();parentNode.attributes.analysisId=resultSet.analysisId;parentNode.attributes.resultSetId=resultSet.resultSetId;if(resultSet.experimentalFactors.size()==1){parentNode.attributes.numberOfFactorValues=analysis.factorValuesUsed[resultSet.experimentalFactors[0].id].size();}}
else{for(var i=0;i<analysis.resultSets.size();i++){resultSet=analysis.resultSets[i];analysisName=this.getFactorNameText(analysis,resultSet);analysisNameExtra=this.getFactorNameExtra(analysis,resultSet);var factor=analysisName[0];interaction+=analysisName[1];if(resultSet.experimentalFactors.size()===1){parentText=(!parentText)?factor:(factor<parentText)?(factor+" & "+parentText):(parentText+" & "+factor);}
nodeText='';nodeText+=this.getBaseline(resultSet);nodeText+=this.getActionLinks(resultSet,factor,this.ee.id,(nodeId+1));var analysisNode=new Ext.tree.TreeNode({id:'node'+this.ee.id+'-'+(nodeId++),expanded:true,singleClickExpand:true,text:factor
+(analysisNameExtra?'&nbsp<span style="color:grey;font-size:smaller;" ext:qtip="Values: '
+analysisNameExtra
+'">('
+Ext.util.Format.ellipsis(analysisNameExtra,35,true)+')</span>':'')+nodeText,numberOfFactors:resultSet.experimentalFactors.size(),analysisId:resultSet.analysisId,resultSetId:resultSet.resultSetId,numberOfFactorValues:resultSet.experimentalFactors.size()==1?analysis.factorValuesUsed[resultSet.experimentalFactors[0].id].size():null,leaf:true});parentNode.appendChild(analysisNode);}}
var numberOfFactors=0;for(i=0;i<analysis.resultSets.size();i++){resultSet=analysis.resultSets[i];if(resultSet.experimentalFactors.size()===1){numberOfFactors++;}}
var analysisDesc=this.getANOVAtypeText(numberOfFactors);if(numberOfFactors===1||interaction<=0){analysisDesc+=' on ';}else{analysisDesc+=' with interactions on ';}
var deleteText='';var redoText='';var refreshStatsText='';if(this.editable){deleteText=this.getDeleteLink(analysis);redoText=this.getRedoLink(analysis);refreshStatsText=this.getRefreshStatsLink(analysis);}
parentNode.setText(analysisDesc+parentText+subsetText+" "+parentNode.text+deleteText
+redoText+refreshStatsText);var sorter=new Ext.tree.TreeSorter(this,{dir:'ASC',property:'text'});sorter.doSort(parentNode);}},getSubsetText:function(analysis){var subsetText='';if(analysis.subsetFactor){var subsetFactor=analysis.subsetFactor;var subsetFactorValue=analysis.subsetFactorValue;subsetText='<span ext:qtip="Analysis was run by subsetting the data on the factor '
+subsetFactor.category+" ("+subsetFactor.description
+") and selecting samples where the value was \'"+subsetFactorValue.value+'\'">'
+" using a subset of the data ("+subsetFactor.category+" = "
+analysis.subsetFactorValue.value+')</span>';}
return subsetText;},getDownloadLink:function(analysis){return String.format("<span style='cursor:pointer' ext:qtip='Download all differential expression data for this analysis in a tab-delimited  format' onClick='fetchDiffExpressionData({0})' > &nbsp; <img src='/Gemma/images/download.gif'/> &nbsp;  </span>",analysis.id);},getANOVAtypeText:function(numberOfFactors){var analysisDesc='';switch(numberOfFactors){case 1:analysisDesc='One-way ANOVA';break;case 2:analysisDesc='Two-way ANOVA';break;case 3:analysisDesc='Three-way ANOVA';break;case 4:analysisDesc='Four-way ANOVA';break;case 5:analysisDesc='Five-way ANOVA';break;case 6:analysisDesc='Six-way ANOVA';break;default:analysisDesc='n-way ANOVA';}
return analysisDesc;},getExpressionNumbers:function(resultSet,nodeId,showThreshold){var numbers=resultSet.numberOfDiffExpressedProbes+' of '+this.totalProbes
+' probes were differentially expressed<br>';numbers+=resultSet.upregulatedCount+"&nbsp;Up";numbers+=';&nbsp;'+resultSet.downregulatedCount+"&nbsp;Down";if(showThreshold){numbers+='. <br>Threshold value = '+resultSet.threshold;numbers+=(resultSet.qValue)?(', qvalue = '+resultSet.qValue):'';}
if(resultSet.numberOfDiffExpressedProbes===0){this.contrastPercents[nodeId]=null;}else{this.contrastPercents[nodeId]={'up':(resultSet.upregulatedCount/this.totalProbes),'down':(resultSet.downregulatedCount/this.totalProbes),'diffExpressed':(resultSet.numberOfDiffExpressedProbes/this.totalProbes)};}
return numbers;},getBaseline:function(resultSet){var base='';if(resultSet.baselineGroup){base=(resultSet.baselineGroup.value!=null)?' with baseline&nbsp;=&nbsp;'
+resultSet.baselineGroup.value:(resultSet.baselineGroup.factorValue!=null)?' with baseline&nbsp;=&nbsp;'
+resultSet.baselineGroup.factorValue:'';}
return base;},getDeleteLink:function(analysis){var manager=new Gemma.EEManager({id:"eemanager"});manager.on('deletedAnalysis',function(){manager.updateEEReport(this.ee.id);},this);manager.on('reportUpdated',function(){this.fireEvent('analysisDeleted');},this);return String.format("<span style='cursor:pointer' ext:qtip='Delete this analysis' "
+"onClick='Ext.getCmp(&quot;eemanager&quot;).deleteExperimentAnalysis({0},{1},false)'>"
+"<img src='/Gemma/images/icons/cross.png'/></span>",this.ee.id,analysis.id);},getRedoLink:function(analysis){var manager=new Gemma.EEManager({id:"eemanager"});manager.on('differential',function(){manager.updateEEReport(this.ee.id);},this);manager.on('reportUpdated',function(){this.fireEvent('analysisRedone');},this);return String.format("<span style='cursor:pointer' ext:qtip='Re-run this analysis' "
+"onClick='Ext.getCmp(&quot;eemanager&quot;).redoExperimentAnalysis({0},{1},false)'>"
+"<img src='/Gemma/images/icons/arrow_refresh_small.png'/></span>",this.ee.id,analysis.id);},getRefreshStatsLink:function(analysis){var manager=new Gemma.EEManager({id:"eemanager"});manager.on('differential',function(){manager.updateEEReport(this.ee.id);},this);manager.on('reportUpdated',function(){this.fireEvent('analysisRedone');},this);return String.format("<span style='cursor:pointer' ext:qtip='Refresh the summary stats' "
+"onClick='Ext.getCmp(&quot;eemanager&quot;).refreshDiffExStats({0},{1},false)'>"
+"<img src='/Gemma/images/icons/database_refresh.png'/></span>",this.ee.id,analysis.id);},calculateChartId:function(eeId,nodeId){return this.getId()+'Experiment'+eeId+'Chart'+nodeId+'Div';},getActionLinks:function(resultSet,factor,eeID,nodeId){var numbers=this.getExpressionNumbers(resultSet,nodeId,true);var linkText='&nbsp;'
+'<span class="link" onClick="Ext.Msg.alert(\'Differential Expression Specificity and Contrast Ratio\', \''
+numbers+'\')" ext:qtip=\"'+numbers+'\">'+'&nbsp;<canvas height=20 width=20 id="'
+this.calculateChartId(eeID,nodeId)+'"></canvas>';var percentDifferentiallyExpressed=resultSet.upregulatedCount+resultSet.downregulatedCount;percentDifferentiallyExpressed/=this.totalProbes;if((percentDifferentiallyExpressed<0.05&&percentDifferentiallyExpressed>0)){linkText+=" ["
+((Math.round(percentDifferentiallyExpressed*100)===0)?"<1":Math.round(percentDifferentiallyExpressed*100))+"% diff. expr.]";}
linkText+='</span>';linkText+='<span class="link" onClick="visualizeDiffExpressionHandler(\''+eeID+'\',\''
+resultSet.resultSetId+'\',\''+escape(factor)
+'\')" ext:qtip="Click to visualize differentially expressed probes for: '+escape(factor)
+' (FDR threshold='+resultSet.threshold
+')">&nbsp;<img src="/Gemma/images/icons/heatmap.png">&nbsp;</span>';var pValueDistImageSize=16;var strippedFactorName=Ext.util.Format.stripTags(factor);var imageUrl='/Gemma/expressionExperiment/visualizePvalueDist.html?'+'id='+eeID
+'&analysisId='+resultSet.analysisId+'&factorName='+escape(strippedFactorName);var methodWithArguments='showPValueDistributionWindow(\''+escape(factor)+'\', \''+imageUrl
+'\');';linkText+='<div '+'style="cursor: pointer; display: inline-block;'+'width: '
+pValueDistImageSize+'px;'+'height: '+pValueDistImageSize+'px;'+'background: url('
+imageUrl+'&size='+pValueDistImageSize+') no-repeat -8px -6px;" '
+'ext:qtip="Click to view p-value distribution"'+'onClick="return Ext.getCmp(\''
+this.getId()+'\').'+methodWithArguments+'"></div>';return linkText;},getFactorNameText:function(analysis,resultSet){var factor='';var interaction=0;if(resultSet.experimentalFactors===null||resultSet.experimentalFactors.size()===0){factor="n/a";}else{for(var k=0;k<resultSet.experimentalFactors.size();k++){var ef=resultSet.experimentalFactors[k];if(k>0&&k<resultSet.experimentalFactors.size()){factor=factor+"&nbsp;X&nbsp;";interaction=interaction+1;}
factor=factor+ef.name;}}
return[factor,interaction];},getFactorNameExtra:function(analysis,resultSet){if(resultSet.experimentalFactors.size()>1){return'';}
var text='';var ef=resultSet.experimentalFactors[0];var fvu=analysis.factorValuesUsed[ef.id];if(fvu===null){return text;}
var abrLen=20;if(ef.type==='categorical'){for(var m=0;m<fvu.size();m++){if(m>0&&m<fvu.size()){text=text+"&semi;&nbsp;";}
text=text+Ext.util.Format.ellipsis(fvu[m].value,abrLen,true);}}else{var vals=[];for(var m=0;m<fvu.size();m++){vals[m]=fvu[m].value;}
if(vals.size()>1){try{vals.sort(function(a,b){return a-b;});text=Number(vals[0]).toPrecision(2)+"&nbsp;&ndash;&nbsp;"+Number(vals[vals.size()-1]).toPrecision(2);}catch(err){vals.sort();text=Ext.util.Format.ellipsis(vals[0])+"&nbsp;&ndash;&nbsp;"
+Ext.util.Format.ellipsis(vals[vals.size()-1],abrLen,true);}}}
return text;},drawPieCharts:function(){var ctx,diffExpressed,interesting;for(var i=0;i<this.contrastPercents.size();i++){var chartElement=Ext.get(this.calculateChartId(this.ee.id,i));if(chartElement){ctx=chartElement.dom.getContext("2d");if(this.totalProbes===null||this.totalProbes===0||this.contrastPercents[i]===null){drawOneColourMiniPie(ctx,12,12,14,'white',0,'grey');}else{up=this.contrastPercents[i].up;down=this.contrastPercents[i].down;diffExpressed=this.contrastPercents[i].diffExpressed;interesting=false;if(diffExpressed<0.07){diffExpressed=0.07;interesting=true;}
if(diffExpressed<0.20){interesting=true;}
if(interesting){drawOneColourMiniPie(ctx,12,12,14,'#1f6568',diffExpressed*360,'black');}else{drawOneColourMiniPie(ctx,12,12,14,'rgb(95,158,160)',diffExpressed*360,'grey');}}}}},showPValueDistributionWindow:function(factorName,imageUrl){var eeInfoTitle="P-value distribution for "
+factorName
+" in: "
+"<a ext:qtip='Click for details on experiment (opens in new window)' target='_blank'  href='/Gemma/expressionExperiment/showExpressionExperiment.html?id="
+this.ee.id+"'>"+this.ee.shortName+"</a> ("+Ext.util.Format.ellipsis(this.ee.name,35)
+")";new Ext.Window({title:eeInfoTitle,constrain:true,width:500,shadow:true,closeAction:'close',items:[{bodyStyle:'background-color: #EEEEEE; text-align: center; padding: 15px 60px 15px 15px;',html:'<img src="'+imageUrl+'">'}]}).show();}});Ext.reg('differentialExpressionAnalysesSummaryTree',Gemma.DifferentialExpressionAnalysesSummaryTree);function visualizeDiffExpressionHandler(eeid,diffResultId,factorDetails){this.visDiffWindow=new Gemma.VisualizationWithThumbsWindow({thumbnails:false,readMethod:DEDVController.getDEDVForDiffExVisualizationByThreshold,title:"Top diff. ex. probes for "+factorDetails,showLegend:false,downloadLink:String.format("/Gemma/dedv/downloadDEDV.html?ee={0}&rs={1}&thresh={2}&diffex=1",eeid,diffResultId,Gemma.DIFFEXVIS_QVALUE_THRESHOLD)});this.visDiffWindow.show({params:[diffResultId,Gemma.DIFFEXVIS_QVALUE_THRESHOLD]});};Ext.namespace('Gemma');Gemma.ExpressionExperimentPage=Ext.extend(Ext.TabPanel,{height:600,defaults:{autoScroll:true,width:850},initialTab:'details',deferredRender:true,listeners:{'tabchange':function(tabPanel,newTab){newTab.fireEvent('tabChanged');},'beforetabchange':function(tabPanel,newTab,currTab){if(currTab){return currTab.fireEvent('leavingTab');}
return true;}},checkURLforInitialTab:function(){this.loadSpecificTab=(document.URL.indexOf("?")>-1&&(document.URL.indexOf("tab=")>-1));if(this.loadSpecificTab){var param=Ext.urlDecode(document.URL.substr(document.URL.indexOf("?")+1));if(param.tab){if(this.getComponent(param.tab)!=undefined){this.initialTab=param.tab;}}}},initComponent:function(){var eeId=this.eeId;var isAdmin=Ext.get("hasAdmin").getValue()=='true';Gemma.ExpressionExperimentPage.superclass.initComponent.call(this);this.on('render',function(){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.generic,msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});}
this.loadMask.show();});ExpressionExperimentController.loadExpressionExperimentDetails(eeId,function(experimentDetails){this.initFromExperimentValueObject(experimentDetails,isAdmin);this.checkURLforInitialTab();this.setActiveTab(this.initialTab);}.createDelegate(this));Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){var appScope=this;ExpressionExperimentController.canCurrentUserEditExperiment(experimentDetails.id,{callback:function(editable){appScope.adjustForIsAdmin(isAdmin,editable);},scope:appScope});},this);Gemma.Application.currentUser.on("logOut",function(){this.adjustForIsAdmin(false,false);},this);},initFromExperimentValueObject:function(experimentDetails,isAdmin){this.experimentDetails=experimentDetails;this.editable=experimentDetails.canCurrentUserEditExperiment;this.ownedByCurrentUser=experimentDetails.doesCurrentUserOwnExperiment;if(this.loadMask){this.loadMask.hide();}
this.add(this.makeDetailsTab(experimentDetails));this.add(this.makeDesignTab(experimentDetails));this.add(this.makeVisualisationTab(experimentDetails,isAdmin));this.add(this.makeDiagnosticsTab(experimentDetails,isAdmin));this.add(new Gemma.ExpressionExperimentQuantitationTypeGrid({title:'Quantitation Types',itemId:'quantitation',eeid:experimentDetails.id}));this.adjustForIsAdmin(isAdmin,this.editable);},makeDetailsTab:function(experimentDetails){return new Gemma.ExpressionExperimentDetails({title:'Details',itemId:'details',id:'ee-details-panel',experimentDetails:experimentDetails,editable:this.editable,owned:this.ownedByCurrentUser,admin:this.admin,listeners:{'experimentDetailsReloadRequired':function(){var myMask=new Ext.LoadMask(Ext.getBody(),{msg:"Refreshing..."});myMask.show();window.location.reload(false);},scope:this}});},makeDesignTab:function(experimentDetails){var batchInfo='';if(experimentDetails.hasBatchInformation){batchInfo='<span style="font-size: smaller">This experimental design also '
+'has information on batches, not shown.</span>'+'<br />'
+'<span style="color:#DD2222;font-size: smaller"> '+experimentDetails.batchConfound
+' </span>'+'<span style="color:#DD2222;font-size: smaller"> '
+experimentDetails.batchEffect+' </span>';}
return{title:'Experimental Design',tbar:[{text:'Show Details',itemId:'design',tooltip:'Go to the design details',icon:'/Gemma/images/magnifier.png',handler:function(){window.open("/Gemma/experimentalDesign/showExperimentalDesign.html?eeid="
+experimentDetails.id);}}],html:batchInfo+'<div id="eeDesignMatrix" style="height:80%">Loading...</div>',layout:'absolute',listeners:{render:function(){DesignMatrix.init({id:experimentDetails.id});}}};},makeVisualisationTab:function(experimentDetails,isAdmin){var eeId=this.eeId;var title="Data for a 'random' sampling of probes";var downloadLink='';var geneList=[];downloadLink=String.format("/Gemma/dedv/downloadDEDV.html?ee={0}",eeId);var viz=new Gemma.VisualizationWithThumbsPanel({thumbnails:false,downloadLink:downloadLink,params:[[eeId],geneList]});viz.on('render',function(){viz.loadFromParam({params:[[eeId],geneList]});});var geneTBar=new Gemma.VisualizationWidgetGeneSelectionToolbar({eeId:eeId,visPanel:viz,taxonId:experimentDetails.parentTaxonId,showRefresh:(isAdmin||this.editable)});geneTBar.on('refreshVisualisation',function(){viz.loadFromParam({params:[[eeId],geneList]});});return{items:viz,itemId:'visualize',layout:'fit',padding:0,title:'Visualize Expression',tbar:geneTBar};},makeDiagnosticsTab:function(experimentDetails,isAdmin){var refreshDiagnosticsLink='';if(this.editable||isAdmin){refreshDiagnosticsLink='<a href="refreshCorrMatrix.html?id='+experimentDetails.id+'"><img '
+'src="/Gemma/images/icons/arrow_refresh_small.png" title="refresh" '
+'alt="refresh" />Refresh</a><br>';}
this.refreshDiagnosticsBtn=new Ext.Button({icon:'/Gemma/images/icons/arrow_refresh_small.png',text:'Refresh',handler:function(){window.location="refreshCorrMatrix.html?id="+experimentDetails.id;},hidden:(this.editable||isAdmin)});return{title:'Diagnostics',itemId:'diagnostics',items:[this.refreshDiagnosticsBtn,{html:experimentDetails.QChtml,border:false}]};},adjustForIsAdmin:function(isAdmin,isEditable){this.refreshDiagnosticsBtn.setVisible(isAdmin||isEditable);if((isAdmin||isEditable)&&!this.historyTab){this.historyTab=new Gemma.AuditTrailGrid({title:'History',itemId:'history',bodyBorder:false,collapsible:false,viewConfig:{forceFit:true},auditable:{id:this.experimentDetails.id,classDelegatingFor:"ubic.gemma.model.expression.experiment.ExpressionExperimentImpl"},loadOnlyOnRender:true});this.add(this.historyTab);}else if(this.historyTab){this.historyTab.setVisible((isAdmin||isEditable));}
if((isAdmin||isEditable)&&!this.toolTab){this.toolTab=new Gemma.ExpressionExperimentTools({experimentDetails:this.experimentDetails,title:'Admin',itemId:'admin',editable:isEditable,listeners:{'reloadNeeded':function(){var myMask=new Ext.LoadMask(Ext.getBody(),{msg:"Refreshing..."});myMask.show();var reloadToAdminTab=document.URL;reloadToAdminTab=reloadToAdminTab.replace(/&*tab=\w*/,'');reloadToAdminTab+='&tab=admin';window.location.href=reloadToAdminTab;}}});this.add(this.toolTab);}else if(this.toolTab){this.toolTab.setVisible((isAdmin||isEditable));}}});var popupImage=function(url,width,height){url=url+"&nocache="+Math.floor(Math.random()*1000);var b=new Ext.Window({modal:true,stateful:false,resizable:true,autoScroll:true,height:height,width:width||200,padding:10,html:'<img src=\"'+url+'"\" />'});b.show();};Ext.namespace('Gemma');Gemma.SessionDatasetGroupStore=function(config){this.record=Ext.data.Record.create([{name:"id",type:"int"},{name:"name",type:"string"},{name:"description",type:"string"},{name:"numExperiments",type:"int"},{name:"expressionExperimentIds"},{name:"taxonId",type:"int"},{name:"taxonName"},{name:"modifiable",type:'boolean'},{name:"publik",type:'boolean'},{name:"shared",type:'boolean'},{name:"currentUserHasWritePermission",type:'boolean'},{name:"session",type:'boolean'}]);this.reader=new Ext.data.ListRangeReader({},this.record);Gemma.SessionDatasetGroupStore.superclass.constructor.call(this,config);};Ext.extend(Gemma.SessionDatasetGroupStore,Ext.data.Store,{autoLoad:true,autoSave:false,selected:null,proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:ExpressionExperimentSetController.loadAllSessionGroups},create:{dwrFunction:ExpressionExperimentSetController.addSessionGroups},update:{dwrFunction:ExpressionExperimentSetController.updateUserAndSessionGroups},destroy:{dwrFunction:ExpressionExperimentSetController.removeUserAndSessionGroups}}}),writer:new Ext.data.JsonWriter({writeAllFields:true}),getSelected:function(){return this.selected;},setSelected:function(rec){this.previousSelection=this.getSelected();if(rec){this.selected=rec;}},getPreviousSelection:function(){return this.previousSelection;},clearSelected:function(){this.selected=null;delete this.selected;},listeners:{exception:function(proxy,type,action,options,res,arg){if(type==='remote'){Ext.Msg.show({title:'Error',msg:res.message,icon:Ext.MessageBox.ERROR});}else{Ext.Msg.show({title:'Error',msg:arg.message?arg.message:arg,icon:Ext.MessageBox.ERROR});}}}});Ext.namespace('Gemma');Ext.BLANK_IMAGE_URL='/Gemma/images/default/s.gif';Gemma.ExpressionExperimentSetSummary=Ext.extend(Ext.Panel,{layout:'vbox',layoutConfig:{align:'stretch'},dirtyForm:false,listeners:{leavingTab:function(){if(this.editModeOn&&this.dirtyForm){var leave=confirm("You are still in edit mode. Your unsaved changes will be discarded when you switch tabs. Do you want to continue?");if(leave){return true;}
return false;}
return true;},tabChanged:function(){this.fireEvent('toggleEditMode',false);}},renderStatus:function(e){var statusString="";if(!e.modifiable){statusString+="<img src='/Gemma/images/icons/shield.png' height='16' width='16' "+"title='"+Gemma.HelpText.WidgetDefaults.DatasetGroupGridPanel.protectedTT+"' />&nbsp;";}
var sl=Gemma.SecurityManager.getSecurityLink("ubic.gemma.model.analysis.expression.ExpressionExperimentSetImpl",e.id,e.publik,e.shared,e.currentUserHasWritePermission,null,null,null,e.currentUserIsOwner);statusString+=sl;return statusString;},renderNumber:function(e){var numString=""+e.numExperiments;return numString;},initComponent:function(){Gemma.ExpressionExperimentSetSummary.superclass.initComponent.call(this);var e=this.experimentSet;if(e.currentUserHasWritePermission&&e.modifiable){this.editable=true;}
var currentDescription=e.description;var currentName=e.name;save=function(){if(!this.saveMask){this.saveMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.saving});}
this.saveMask.show();var description=descriptionArea.getValue();var name=nameArea.getValue();var entity={id:e.id,description:description,name:name};ExpressionExperimentSetController.updateNameDesc(entity,function(data){nameArea.setValue(data.name);descriptionArea.setValue(data.description);currentName=data.name;currentDescription=data.description;this.dirtyForm=false;this.saveMask.hide();}.createDelegate(this));}.createDelegate(this);var descriptionArea=new Ext.form.TextArea({allowBlank:true,resizable:true,readOnly:true,disabled:true,growMin:1,growMax:150,growAppend:'',grow:true,disabledClass:'disabled-plain',fieldClass:'',emptyText:'No description provided',enableKeyEvents:true,bubbleEvents:['changeMade'],listeners:{'keyup':function(field,e){if(field.isDirty()){field.fireEvent('changeMade',field.isValid());}},'toggleEditMode':function(editOn){this.setReadOnly(!editOn);this.setDisabled(!editOn);if(editOn){this.removeClass('x-bare-field');}
else{this.addClass('x-bare-field');}}},style:'width: 100%; background-color: #f6f6f6;',value:currentDescription});var nameArea=new Ext.form.TextArea({allowBlank:false,grow:true,growMin:1,growAppend:'',readOnly:true,disabled:true,disabledClass:'disabled-plain',emptyText:'Name is required',enableKeyEvents:true,bubbleEvents:['changeMade'],listeners:{'keyup':function(field,e){if(field.isDirty()){field.fireEvent('changeMade',field.isValid());}},'toggleEditMode':function(editOn){this.setReadOnly(!editOn);this.setDisabled(!editOn);if(editOn){this.removeClass('x-bare-field');}
else{this.addClass('x-bare-field');}}},style:'font-weight: bold; font-size:1.3em; width:100%',value:currentName});resetEditableFields=function(){nameArea.setValue(currentName);descriptionArea.setValue(currentDescription);saveBtn.disable();cancelBtn.disable();};var editBtn=new Ext.Button({text:'Start editing',editOn:false,disabled:!this.editable,handler:function(button,event){this.fireEvent('toggleEditMode',true);},scope:this});var cancelBtn=new Ext.Button({text:'Cancel',disabled:true,toolTip:'Reset all fields to saved values',handler:function(){this.fireEvent('toggleEditMode',false);},scope:this});var saveBtn=new Ext.Button({text:'Save',disabled:true,handler:function(){save();this.fireEvent('toggleEditMode',false);},scope:this});var deleteEEButton=new Ext.Button({text:'Delete Experiment Group',icon:'/Gemma/images/icons/cross.png',toolTip:'Delete the experiment from the system',disabled:!this.editable,handler:this.deleteExperimentSet,scope:this});this.on('toggleEditMode',function(editOn){this.editModeOn=editOn;editBtn.setText((editOn)?'Editing mode on':'Start editing');editBtn.setDisabled(editOn);nameArea.fireEvent('toggleEditMode',editOn);descriptionArea.fireEvent('toggleEditMode',editOn);resetEditableFields();saveBtn.setDisabled(!editOn);cancelBtn.setDisabled(!editOn);if(!editOn){resetEditableFields();this.dirtyForm=false;}});this.on('changeMade',function(wasValid){saveBtn.setDisabled(!wasValid);cancelBtn.setDisabled(!wasValid);this.dirtyForm=true;});var basics=new Ext.Panel({flex:0,width:'100%',ref:'fieldPanel',collapsible:false,bodyBorder:false,frame:false,baseCls:'x-plain-panel',bodyStyle:'padding:10px',defaults:{bodyStyle:'vertical-align:top;font-size:12px;color:black',baseCls:'x-plain-panel',fieldClass:'x-bare-field'},tbar:new Ext.Toolbar({hidden:!this.editable,items:[editBtn,' ',saveBtn,' ',cancelBtn,'-',deleteEEButton]}),items:[nameArea,descriptionArea,{layout:'form',defaults:{border:false},items:[{fieldLabel:"Taxon",html:e.taxonName},{fieldLabel:'Experiments',html:this.renderNumber(e)},{fieldLabel:'Status',html:this.renderStatus(e)}]}]});this.add(basics);var experimentMembersGrid=new Gemma.ExpressionExperimentMembersGrid({title:'Experiment Group Members',name:'experimentMembersGrid',hideHeaders:true,frame:true,allowSaveToSession:false,allowRemovals:this.editable,allowAdditions:this.editable,sortableColumnsView:true,hideOkCancel:true,showSeparateSaveAs:true,enableSaveOnlyAfterModification:true,flex:1});this.experimentMembersGrid=experimentMembersGrid;experimentMembersGrid.loadExperimentSetValueObject(e,function(){this.experimentMembersGrid.hideLoadMask();}.createDelegate(this,[],false));experimentMembersGrid.on('experimentListSavedOver',function(){Ext.getBody().mask('Reloading set');window.location.reload();});experimentMembersGrid.on('experimentListCreated',function(eesvo){Ext.getBody().mask('Loading new set');window.location="/Gemma/expressionExperimentSet/showExpressionExperimentSet.html?id="+eesvo.id;});experimentMembersGrid.on('afterrender',function(){this.experimentMembersGrid.showLoadMask();}.createDelegate(this));this.add(experimentMembersGrid);Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){var appScope=this;ExpressionExperimentSetController.canCurrentUserEditGroup(this.experimentDetails.id,{callback:function(editable){appScope.adjustForIsEditable(editable);},scope:appScope});},this);Gemma.Application.currentUser.on("logOut",function(){this.adjustForIsEditable(false);},this);this.doLayout();this.fireEvent("ready");},adjustForIsEditable:function(editable){this.fieldPanel.getTopToolbar().setVisible(editable);},deleteExperimentSet:function(){var id=this.experimentSet.id;var redirectHome=true;Ext.Msg.show({title:Gemma.HelpText.CommonWarnings.Deletion.title,msg:String.format(Gemma.HelpText.CommonWarnings.Deletion.text,'set ('+this.experimentSet.name+')'),buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push([{id:id}]);if(!this.deleteMask){this.deleteMask=new Ext.LoadMask(Ext.getBody(),{msg:Gemma.StatusText.deleting});}
this.deleteMask.show();callParams.push({callback:function(data){window.location='/Gemma/home.html';}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Deletion failed",error);this.deleteMask.hide();}.createDelegate(this)});ExpressionExperimentSetController.remove.apply(this,callParams);}},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});}});Gemma.EEManager=Ext.extend(Ext.Component,{name:'eemanager',record:Ext.data.Record.create([{name:"id",type:"int"},{name:"shortName"},{name:"name"},{name:"arrayDesignCount",type:"int"},{name:"technologyType"},{name:"hasBothIntensities",type:'bool'},{name:"hasEitherIntensity",type:'bool'},{name:"bioAssayCount",type:"int"},{name:"processedExpressionVectorCount",type:"int"},{name:"externalUri"},{name:"externalDatabase"},{name:"description"},{name:"taxon"},{name:"taxonId"},{name:"numAnnotations"},{name:"numPopulatedFactors"},{name:"isPublic",type:"boolean"},{name:"isShared",type:"boolean"},{name:"currentUserHasWritePermission"},{name:"currentUserIsOwner"},{name:"sourceExperiment"},{name:"coexpressionLinkCount"},{name:"diffExpressedProbes"},{name:"validated"},{name:'validatedAnnotations'},{name:"troubled",type:"boolean"},{name:"troubleDetails",type:"string"},{name:"missingValueAnalysisEventType"},{name:"processedDataVectorComputationEventType"},{name:"dateCreated",type:'date'},{name:"dateProcessedDataVectorComputation",type:'date'},{name:"dateMissingValueAnalysis",type:'date'},{name:"dateDifferentialAnalysis",type:'date'},{name:"dateLastUpdated",type:'date'},{name:"dateLinkAnalysis",type:'date'},{name:"datePcaAnalysis",type:'date'},{name:"dateBatchFetch",type:'date'},{name:"autoTagDate",type:'date'},{name:"linkAnalysisEventType"},{name:"processedDataVectorComputationEventType"},{name:"missingValueAnalysisEventType"},{name:"differentialAnalysisEventType"},{name:"batchFetchEventType"},{name:"pcaAnalysisEventType"},{name:"differentialExpressionAnalyses"}]),updateEEReport:function(id,throbberEl){var callParams=[];callParams.push(id);callParams.push({callback:function(data){var k=new Gemma.WaitHandler({throbberEl:throbberEl});this.relayEvents(k,['done','fail']);k.handleWait(data,false);k.on('done',function(payload){this.fireEvent('reportUpdated',payload);},this);}.createDelegate(this),errorHandler:function(message,exception){Ext.Msg.alert("There was an error",message);Ext.getBody().unmask();}});ExpressionExperimentReportGenerationController.run.apply(this,callParams);},historyWindow:null,showAuditWindow:function(id){if(this.historyWindow!==null){this.historyWindow.destroy();}
this.historyWindow=new Ext.Window({layout:'fit',title:'History',modal:false,items:[new Gemma.AuditTrailGrid({title:'',collapsible:false,auditable:{id:id,classDelegatingFor:"ubic.gemma.model.expression.experiment.ExpressionExperimentImpl"}})]});this.historyWindow.show();},updateAllEEReports:function(){var callParams=[];callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);k.on('done',function(payload){this.fireEvent('reportUpdated',payload);});}.createDelegate(this),errorHandler:function(message,exception){Ext.Msg.alert("There was an error",message);Ext.getBody().unmask();}});ExpressionExperimentReportGenerationController.runAll.apply(this,callParams);},autoTag:function(id){var callParams=[];callParams.push(id);callParams.push({callback:function(data){var k=new Gemma.WaitHandler();this.relayEvents(k,['done','fail']);k.handleWait(data,false);k.on('done',function(payload){this.fireEvent('tagsUpdated',payload);});}.createDelegate(this),errorHandler:function(message,exception){Ext.Msg.alert("There was an error",message);Ext.getBody().unmask();}});AnnotationController.autoTag.apply(this,callParams);},unmatchBioAssays:function(id){Ext.Msg.show({title:'Are you sure?',msg:'Are you sure you to unmatch the bioassays? (This has no effect if there is only one platform)',buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push(id);callParams.push({callback:function(data){this.fireEvent('done');}.createDelegate(this),errorHandler:function(message,exception){Ext.Msg.alert("There was an error",message);Ext.getBody().unmask();}});ExpressionExperimentController.unmatchAllBioAssays.apply(this,callParams);}},scope:this});},tagger:function(id,taxonId,canEdit,isValidated){var annotator=new Ext.Panel({id:'annotator-wrap',collapsible:false,stateful:false,bodyBorder:false,layout:'fit',items:[new Gemma.AnnotationGrid({id:'annotator-grid',entityAnnotsAreValidated:isValidated,readMethod:ExpressionExperimentController.getAnnotation,writeMethod:AnnotationController.createExperimentTag,removeMethod:AnnotationController.removeExperimentTag,readParams:[{id:id}],editable:canEdit,showParent:false,mgedTermKey:"experiment",taxonId:taxonId,entId:id})]});this.change=false;Ext.getCmp('annotator-grid').on('refresh',function(){this.change=true;}.createDelegate(this));var w=new Ext.Window({modal:false,stateful:false,title:"Experiment tags",layout:'fit',width:600,height:200,items:[annotator],buttons:[{text:'Help',handler:function(){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.AnnotationGrid.taggingHelpTitle,Gemma.HelpText.WidgetDefaults.AnnotationGrid.taggingHelpText);}},{text:'Done',handler:function(){var r=Ext.getCmp('annotator-grid').getEditedCharacteristics();if(r.length>0){Ext.Msg.confirm(Gemma.HelpText.CommonWarnings.UnsavedChanges.title,Gemma.HelpText.CommonWarnings.UnsavedChanges.text,function(btn,txt){if(btn=='OK'){w.hide();}});}else{w.hide();}
if(this.change){this.fireEvent('tagsUpdated');}},scope:this}]});w.show();},deleteExperiment:function(id,redirectHome){Ext.Msg.show({title:Gemma.HelpText.CommonWarnings.Deletion.title,msg:String.format(Gemma.HelpText.CommonWarnings.Deletion.text,'experiment'),buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push(id);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',function(payload){this.fireEvent('deleted',redirectHome);}.createDelegate(this));}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Deletion failed",error);Ext.getBody().unmask();}.createDelegate(this)});ExpressionExperimentController.deleteById.apply(this,callParams);}},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});},deleteExperimentAnalysis:function(eeId,analysisId,redirectHome){Ext.Msg.show({title:Gemma.HelpText.CommonWarnings.Deletion.title,msg:String.format(Gemma.HelpText.CommonWarnings.Deletion.text,'analysis'),buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push(eeId);callParams.push(analysisId);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',function(payload){this.fireEvent('deletedAnalysis');}.createDelegate(this));}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Deletion failed",error);Ext.getBody().unmask();}.createDelegate(this)});DifferentialExpressionAnalysisController.remove.apply(this,callParams);}},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});},redoExperimentAnalysis:function(eeId,analysisId,redirectHome){Ext.Msg.show({title:Gemma.HelpText.CommonWarnings.Redo.title,msg:String.format(Gemma.HelpText.CommonWarnings.Redo.text,'analysis'),buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push(eeId);callParams.push(analysisId);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',function(payload){this.fireEvent('differential',payload);}.createDelegate(this));}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Redo failed",error);Ext.getBody().unmask();}.createDelegate(this)});DifferentialExpressionAnalysisController.redo.apply(this,callParams);}},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});},refreshDiffExStats:function(eeId,analysisId,redirectHome){Ext.Msg.show({title:Gemma.HelpText.CommonWarnings.RefreshStats.title,msg:String.format(Gemma.HelpText.CommonWarnings.RefreshStats.text,'analysis'),buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push(eeId);callParams.push(analysisId);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',function(payload){this.fireEvent('differential',payload);}.createDelegate(this));}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Refresh failed",error);Ext.getBody().unmask();}.createDelegate(this)});DifferentialExpressionAnalysisController.refreshStats.apply(this,callParams);}},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});},markOutlierBioAssay:function(bioAssayId){Ext.Msg.show({title:'Are you sure?',msg:'Are you sure you want to mark this bioAssay as an outlier?',buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push(bioAssayId);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Outlier marking failed",error);Ext.getBody().unmask();}.createDelegate(this)});BioAssayController.markOutlier.apply(this,callParams);};},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});},unmarkOutlierBioAssay:function(bioAssayId){Ext.Msg.show({title:'Are you sure?',msg:'Are you sure you want to revert the outlier status of this assay? This can be undone only by regenerating the "processed data".',buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push(bioAssayId);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Outlier unmarking failed",error);Ext.getBody().unmask();}.createDelegate(this)});BioAssayController.unmarkOutlier.apply(this,callParams);}},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});},doLinks:function(id){Ext.Msg.show({title:'Link analysis',msg:'Please confirm. Previous analysis results will be deleted.',buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push(id);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',function(payload){this.fireEvent('link',payload);});}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Link analysis failed",error);Ext.getBody().unmask();}.createDelegate(this)});LinkAnalysisController.run.apply(this,callParams);}},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});},doPca:function(id,hasPca){Ext.Msg.show({title:'PCA analysis',msg:'Please confirm. Any previous PCA results will be deleted',buttons:Ext.Msg.YESNO,fn:function(btn,text){var callParams=[];callParams.push(id);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',function(payload){this.fireEvent('pca',payload);});}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("PCA analysis failed",error);Ext.getBody().unmask();}.createDelegate(this)});SvdController.run.apply(this,callParams);},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});},visualizePcaHandler:function(eeid,component,count){this.vispcaWindow=new Gemma.VisualizationWithThumbsWindow({thumbnails:false,readMethod:DEDVController.getDEDVForPcaVisualization,title:"Top loaded probes for PC"+component,showLegend:false,downloadLink:String.format("/Gemma/dedv/downloadDEDV.html?ee={0}&component={1}&thresh={2}&pca=1",eeid,component,count)});this.vispcaWindow.show({params:[eeid,component,count]});},doBatchInfoFetch:function(id){Ext.Msg.show({title:'Sample batches information fetcher',msg:'Please confirm. Previous results will be deleted, including "batch" factor.',buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push(id);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',function(payload){this.fireEvent('batchinfo',payload);});}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Batch info fetch failed",error);Ext.getBody().unmask();}.createDelegate(this)});BatchInfoFetchController.run.apply(this,callParams);}},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});},doMissingValues:function(id){Ext.Msg.show({title:'Missing value analysis',msg:'Please confirm. Previous analysis results will be deleted.',buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push(id);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',function(payload){this.fireEvent('missingValue',payload);});}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Missing value analysis failed",error);Ext.getBody().unmask();}.createDelegate(this)});TwoChannelMissingValueController.run.apply(this,callParams);}},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});},doDifferential:function(id){var m=this;var customize=function(analysisInfo){var factors=analysisInfo.factors;var proposedAnalysis=analysisInfo.type;var subsetRadios=[];subsetRadios.push(new Ext.form.Radio({boxLabel:'None',name:'diff-ex-analyze-subset',id:'no-factor-subset-radio',checked:true,listeners:{check:validateFactorsChosen.createDelegate(this,[factors])}}));for(var i=0;i<factors.length;i++){var f=factors[i];if(!f.name){continue;}
subsetRadios.push(new Ext.form.Radio({boxLabel:"<b>"+f.name+"</b> ("+f.description+")",name:'diff-ex-analyze-subset',id:f.id+'-factor-subset-radio',checked:false}));}
var deasw=new Ext.Window({name:'diff-customization-window',modal:true,stateful:false,resizable:false,autoHeight:true,width:460,plain:true,border:false,title:"Differential analysis settings",padding:10,items:[{xtype:'form',bodyBorder:false,autoHeight:true,items:[{xtype:'fieldset',title:"Select factor(s) to use",autoHeight:true,labelWidth:375,id:'diff-ex-analysis-customize-factors'},{xtype:'fieldset',title:"Optional: Select a subset factor",items:[{xtype:'radiogroup',columns:1,allowBlank:true,autoHeight:true,id:'diff-ex-analysis-subset-factors',items:subsetRadios,hideLabel:true,listeners:{change:validateFactorsChosen.createDelegate(this,[factors])}}]},{xtype:'fieldset',labelWidth:375,autoHeight:true,hidden:false,items:[{xtype:'checkbox',id:'diff-ex-analysis-customize-include-interactions-checkbox',fieldLabel:'Include interactions if possible'}]}]}],buttons:[{text:"Help",id:'diff-ex-customize-help-button',disabled:false,scope:this,handler:function(){Ext.Msg.show({title:Gemma.HelpText.WidgetDefaults.EEManager.customiseDiffExHelpTitle,msg:Gemma.HelpText.WidgetDefaults.EEManager.customiseDiffExHelpText,buttons:Ext.Msg.OK,icon:Ext.MessageBox.INFO});}},{text:'Proceed',id:'diff-ex-customize-proceed-button',disabled:false,scope:this,handler:function(btn,text){var includeInteractions=Ext.getCmp('diff-ex-analysis-customize-include-interactions-checkbox').getValue();var factorsToUseIds=getFactorsToUseIds(factors);var subsetFactor=getSubsetFactorId(factors);if(factorsToUseIds.length<1){Ext.Msg.alert("Invalid selection","Please pick at least one factor.");return;}
if(subsetFactor!==null&&factorsToUseIds.indexOf(subsetFactor)>=0){Ext.Msg.alert("Invalid selection","You cannot subset on a factor included in the model.");return;}
var callParams=[];callParams.push(id);callParams.push(factorsToUseIds);callParams.push(includeInteractions);callParams.push(subsetFactor);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);m.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',function(payload){m.fireEvent('differential',payload);});}.createDelegate(m),errorHandler:function(error){Ext.Msg.alert("Differential exp. Analysis failed",error);Ext.getBody().unmask();}.createDelegate(this)});DifferentialExpressionAnalysisController.runCustom.apply(this,callParams);deasw.close();}},{text:'Cancel',handler:function(){deasw.close();}}]});deasw.doLayout();if(factors){for(var i=0;i<factors.length;i++){var f=factors[i];if(!f.name){continue;}
Ext.getCmp('diff-ex-analysis-customize-factors').add(new Ext.form.Checkbox({fieldLabel:"<b>"+f.name+"</b> ("+f.description+")",id:f.id+'-factor-checkbox',tooltip:f.name,checked:false,listeners:{check:validateFactorsChosen.createDelegate(this,[factors])}}));}}
deasw.doLayout();deasw.show();};var getFactorsToUseIds=function(factors){var factorsToUseIds=[];for(var i=0;i<factors.length;i++){var f=factors[i];if(!f.name){continue;}
var checked=Ext.getCmp(f.id+'-factor-checkbox').getValue();if(checked){factorsToUseIds.push(f.id);}}
return factorsToUseIds;};var getSubsetFactorId=function(factors){var subsetFactor=null;for(var i=0;i<factors.length;i++){var f=factors[i];if(!f.name){continue;}
var checked=Ext.getCmp(f.id+'-factor-subset-radio').getValue();if(checked){subsetFactor=f.id;break;}}
return subsetFactor;};var cb=function(analysisInfo){if(analysisInfo.type){var customizable=false;var analysisType='';if(analysisInfo.type==='TWIA'){analysisType='Two-way ANOVA with interactions';customizable=true;}else if(analysisInfo.type==='TWA'){analysisType='Two-way ANOVA without interactions';customizable=true;}else if(analysisInfo.type==='TTEST'){analysisType='T-test (two-sample)';}else if(analysisInfo.type==='OSTTEST'){analysisType='T-test (one-sample)';}else if(analysisInfo.type==='OWA'){analysisType='One-way ANOVA';}else{analysisType='Generic ANOVA/ANCOVA';customizable=true;}
var w=new Ext.Window({name:'diffex-dialog',autoCreate:true,resizable:false,constrain:true,constrainHeader:true,minimizable:false,maximizable:false,stateful:false,modal:true,shim:true,buttonAlign:"center",width:400,height:130,minHeight:80,plain:true,footer:true,closable:true,title:'Differential expression analysis',html:'Please confirm. The analysis performed will be a '
+analysisType
+'. If there is an existing analysis on the same factor(s), it will be deleted. '
+'To redo or refresh a specific analysis, use the controls on the experiment\'s main tab.',buttons:[{text:'Proceed',handler:function(btn,text){var callParams=[];callParams.push(id);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',function(payload){this.fireEvent('differential',payload);});}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert("Diff. Analysis failed",error);Ext.getBody().unmask();}.createDelegate(this)});DifferentialExpressionAnalysisController.run.apply(this,callParams);w.close();}},{text:'Cancel',handler:function(){w.close();}},{disabled:!customizable,hidden:!customizable,text:'Customize',handler:function(){w.close();customize(analysisInfo);}}],iconCls:Ext.MessageBox.QUESTION});w.show();}else{customize(analysisInfo);}};var validateFactorsChosen=function(factors){var factorsToUseIds=getFactorsToUseIds(factors);var subsetFactor=getSubsetFactorId(factors);if(factorsToUseIds.length!=2){Ext.getCmp('diff-ex-analysis-customize-include-interactions-checkbox').setValue(false);Ext.getCmp('diff-ex-analysis-customize-include-interactions-checkbox').disable();}else{Ext.getCmp('diff-ex-analysis-customize-include-interactions-checkbox').enable();}
if(subsetFactor!==null&&factorsToUseIds.indexOf(subsetFactor)>=0){Ext.getCmp(subsetFactor+'-factor-subset-radio').setValue(false);Ext.getCmp('no-factor-subset-radio').setValue(true);}};var eh=function(error){Ext.Msg.alert("There was an error",error);};DifferentialExpressionAnalysisController.determineAnalysisType(id,{callback:cb,errorhandler:eh});},doProcessedVectors:function(id){Ext.Msg.show({title:'Processed vector analysis',msg:'Please confirm. Any existing processed vectors will be deleted.',buttons:Ext.Msg.YESNO,fn:function(btn,text){if(btn=='yes'){var callParams=[];callParams.push(id);Ext.getBody().mask();callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',function(payload){this.fireEvent('processedVector',payload);});}.createDelegate(this),errorHandler:function(message,exception){Ext.Msg.alert("There was an error",message);Ext.getBody().unmask();}});ProcessedExpressionDataVectorCreateController.run.apply(this,callParams);}},scope:this,animEl:'elId',icon:Ext.MessageBox.WARNING});},initComponent:function(){Gemma.EEManager.superclass.initComponent.call(this);this.addEvents('done','reportUpdated','differential','missingValue','link','processedVector','deleted','tagsUpdated','updated','pca','batchinfo');this.save=function(id,fields){};this.on('deleted',function(redirectHome){if(redirectHome){window.location='/Gemma/home.html';}else{Ext.get('dataSetDetailsPanel').first().last().dom.innerHTML='<span></span>';}});}});Ext.namespace('Gemma');Gemma.DatasetGroupStore=function(config){this.record=Ext.data.Record.create([{name:"id",type:"int"},{name:"name",type:"string"},{name:"description",type:"string"},{name:"numExperiments",type:"int"},{name:"expressionExperimentIds"},{name:"taxonId",type:"int"},{name:"taxonName"},{name:"modifiable",type:'boolean'},{name:"publik",type:'boolean'},{name:"shared",type:'boolean'},{name:"currentUserHasWritePermission",type:'boolean'},{name:"currentUserIsOwner",type:'boolean'}]);this.reader=new Ext.data.ListRangeReader({id:"id"},this.record);Gemma.DatasetGroupStore.superclass.constructor.call(this,config);};Ext.extend(Gemma.DatasetGroupStore,Ext.data.Store,{autoLoad:true,autoSave:false,selected:null,proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:ExpressionExperimentSetController.loadAll},create:{dwrFunction:ExpressionExperimentSetController.create},update:{dwrFunction:ExpressionExperimentSetController.update},destroy:{dwrFunction:ExpressionExperimentSetController.remove}}}),writer:new Ext.data.JsonWriter({writeAllFields:true}),getSelected:function(){return this.selected;},setSelected:function(rec){this.previousSelection=this.getSelected();if(rec){this.selected=rec;}},getPreviousSelection:function(){return this.previousSelection;},clearSelected:function(){this.selected=null;delete this.selected;},listeners:{exception:function(proxy,type,action,options,res,arg){if(type==='remote'){Ext.Msg.show({title:'Error',msg:res.message,icon:Ext.MessageBox.ERROR});}else{Ext.Msg.show({title:'Error',msg:arg.message?arg.message:arg,icon:Ext.MessageBox.ERROR});}}}});Gemma.DatasetGroupEditor=Ext.extend(Ext.Panel,{id:'dataset-chooser',name:'datasetchooser',layout:'border',title:"Dataset Group Editor <a href=\"javascript:void()\" style=\"float:right\" title=\""+
Gemma.HelpText.WidgetDefaults.DatasetGroupEditor.widgetTT+"\" "+"onClick=\"window.open('"+Gemma.HelpText.WidgetDefaults.DatasetGroupEditor.helpURL+"', 'DataSetChooserHelp');\">"+"<img src=\"/Gemma/images/icons/question_blue.png\"></a>",isLoggedIn:false,initComponent:function(){Gemma.DatasetGroupEditor.superclass.initComponent.call(this);var userLoggedIn=(Ext.getDom('hasUser')&&Ext.getDom('hasUser').getValue()==='true')?true:false;this.isLoggedIn=Ext.get('loggedIn').getValue()||userLoggedIn;this.datasetGroupMembersGrid=new Gemma.ExpressionExperimentGrid({isLoggedIn:this.isLoggedIn,region:'east',title:"Datasets in current set",showAnalysisInfo:false,loadMask:{msg:'Loading datasets ...'},tbar:['->',{text:"Delete selected",icon:"/Gemma/images/icons/cross.png",handler:this.removeSelectedFromdatasetGroupMembersGrid,scope:this}],split:true,width:400,height:200,experimentNameAsLink:false});this.dataSetDetailsPanel=new Ext.Panel({region:'south',split:true,bodyStyle:'padding:8px',height:200});this.sourceDatasetsGrid=new Gemma.ExpressionExperimentGrid({editable:false,isLoggedIn:this.isLoggedIn,title:"Dataset locator",region:'center',split:true,width:400,showAnalysisInfo:true,loadMask:{msg:'Searching ...'},tbar:new Gemma.DataSetSearchAndGrabToolbar({taxonSearch:true,targetGrid:this.datasetGroupMembersGrid})});this.datasetGroupGrid=new Gemma.DatasetGroupGridPanel({region:'west',layout:'fit',split:true,collapsible:true,collapseMode:'mini',width:400,height:200,title:"Available expression experiment groups",displayGrid:this.datasetGroupMembersGrid,tbar:new Gemma.DatasetGroupEditToolbar()});if(this.datasetGroupStore){Ext.apply(this.datasetGroupGrid,{store:this.datasetGroupStore});}
this.datasetGroupGrid.on('beforeload',function(){});this.datasetGroupGrid.on('load',function(){});this.add(this.datasetGroupGrid);this.add(this.datasetGroupMembersGrid);this.add(this.sourceDatasetsGrid);this.add(this.dataSetDetailsPanel);this.sourceDatasetsGrid.getStore().on('load',function(idsFound){this.sourceDatasetsGrid.getStore().filterBy(function(record,id){var rid=record.get('id');return this.datasetGroupMembersGrid.getStore().find('id',rid)<0;},this);this.sourceDatasetsGrid.setTitle(this.sourceDatasetsGrid.title+", "+
this.sourceDatasetsGrid.getStore().getCount()+" addable");}.createDelegate(this));this.datasetGroupGrid.getTopToolbar().on("delete-set",function(rec){this.clearDisplay();this.fireEvent('delete-set');}.createDelegate(this));this.datasetGroupMembersGrid.getStore().on('remove',function(store,record,index){this.dirtySet(store);},this);this.datasetGroupMembersGrid.getStore().on('add',function(store,records,index){this.dirtySet(store);},this);this.datasetGroupGrid.getSelectionModel().on('rowselect',function(model,rowindex,record){this.display(record);},this);this.sourceDatasetsGrid.getSelectionModel().on('rowselect',this.showEEDetails,this,{buffer:100});this.datasetGroupMembersGrid.getSelectionModel().on('rowselect',this.showEEDetails,this,{buffer:100});this.addEvents({"select":true,"commit":true,'delete-set':true});},showEEDetails:function(model,rowindex,record){if(typeof this.detailsmask=='undefined'||this.detailsmask===null){this.detailsmask=new Ext.LoadMask(this.dataSetDetailsPanel.body,{msg:"Loading details ..."});}
this.detailsmask.show();ExpressionExperimentController.getDescription(record.id,{callback:function(data){Ext.DomHelper.overwrite(this.dataSetDetailsPanel.body,'<h1><a href="/Gemma/expressionExperiment/showExpressionExperiment.html?id='+record.id+'">'+
record.get('shortName')+"</a></h1><h2>"+record.get('name')+"</h2><p>"+data+"</p>");this.detailsmask.hide();}.createDelegate(this)});},dirtySet:function(store){store.clearFilter(false);var currentIds=[];store.each(function(r){currentIds.push(r.get('id'));},this);var rec=this.datasetGroupGrid.getSelectionModel().getSelected();if(rec){rec.set('expressionExperimentIds',currentIds);rec.set('numExperiments',currentIds.length);}},display:function(record){if(record&&this.datasetGroupMembersGrid){this.datasetGroupMembersGrid.getStore().removeAll();this.datasetGroupMembersGrid.getStore().load({params:[record.get("expressionExperimentIds")]});this.datasetGroupMembersGrid.setTitle(record.get("name"));}
if(record&&this.sourceDatasetsGrid){this.sourceDatasetsGrid.getTopToolbar().setTaxon(record.get("taxonId"));this.sourceDatasetsGrid.getTopToolbar().taxonCombo.disable();}},clearDisplay:function(){this.datasetGroupMembersGrid.getStore().removeAll();this.datasetGroupMembersGrid.setTitle('Set members');this.sourceDatasetsGrid.getTopToolbar().taxonCombo.enable();},removeSelectedFromdatasetGroupMembersGrid:function(){this.datasetGroupMembersGrid.removeSelected();},onCommit:function(){var rec=this.datasetGroupGrid.getStore().getSelected();var numModified=this.datasetGroupStore.getModifiedRecords().length;var canSave=this.isLoggedIn;for(var i=0;i<numModified;i++){var r=this.datasetGroupStore.getModifiedRecords()[i];if(r.get('currentUserHasWritePermission')){canSave=true;break;}}
if(numModified>0&&canSave){Ext.Msg.show({animEl:this.getEl(),title:'Save Changes?',msg:'You have unsaved changes. Would you like to save them?',buttons:{ok:'Yes',cancel:'No'},fn:function(btn,text){if(btn==='ok'){this.datasetGroupStore.commitChanges();}
if(rec){this.datasetGroupStore.setSelected(rec);this.fireEvent("select",rec);this.fireEvent("commit",rec);}
this.hide();}.createDelegate(this),scope:this,icon:Ext.MessageBox.QUESTION});}else{this.hide();if(rec){this.datasetGroupStore.setSelected(rec);this.fireEvent("select",rec);}
this.fireEvent("commit",rec);}},onHelp:function(){window.open(Gemma.HelpText.WidgetDefaults.DatasetGroupEditor.helpURL,'DataSetChooserHelp');}});Ext.namespace('Gemma');Gemma.DEFAULT_NUMBER_EXPERIMENTS=50;Gemma.MyDatasetsPanel=Ext.extend(Ext.Panel,{layout:'border',initComponent:function(){Gemma.MyDatasetsPanel.superclass.initComponent.call(this);var detailsmask=null;var showEEDetails=function(model,rowindex,record){if(detailsmask==null){detailsmask=new Ext.LoadMask(dataSetDetailsPanel.body,{msg:"Loading details ..."});}
detailsmask.show();ExpressionExperimentController.getDescription(record.id,{callback:function(data){Ext.DomHelper.overwrite(dataSetDetailsPanel.body,'<span class="big">'
+Gemma.EEReportGridColumnRenderers.shortNameRenderer(record.get('shortName'),null,record)
+'</span>&nbsp;&nbsp;<span class="medium">'
+record.get('name')
+"</span><p>"
+data
+"</p>"
+'<span class="link" onClick="Ext.getCmp(\'eemanager\').showAuditWindow('
+record.id
+');" ><img ext:qtip="Show history" src="/Gemma/images/icons/pencil.png" /></span>');detailsmask.hide();}.createDelegate(this)});};var tpl=new Ext.XTemplate('<tpl for="."><div class="itemwrap" id="{shortName}">','<p>{id} {name} {shortName} {externalUri} {[this.log(values.id)]}</p>',"</div></tpl>",{log:function(id){}});var isAdmin=(Ext.get('hasAdmin'))?Ext.get('hasAdmin').getValue():false;var limit=Gemma.DEFAULT_NUMBER_EXPERIMENTS;var queryStart=document.URL.indexOf("?");var ids=null;var taxonid=null;var filterMode=null;var showPublic=true;if(queryStart>-1){var urlParams=Ext.urlDecode(document.URL.substr(queryStart+1));ids=urlParams.ids?urlParams.ids.split(','):null;taxonid=urlParams.taxon?urlParams.taxon:null;limit=urlParams.taxon?urlParams.limit:Gemma.DEFAULT_NUMBER_EXPERIMENTS;filterMode=urlParams.filter?urlParams.filter:null;showPublic=urlParams.showPublic?urlParams.showPublic:showPublic;}
var reportGrid=new Gemma.EEReportGrid({region:'center',taxonid:taxonid,limit:limit,filterType:filterMode,ids:ids,showPublic:showPublic});reportGrid.getSelectionModel().on('rowselect',showEEDetails,this,{buffer:100});var dataSetDetailsPanel=new Ext.Panel({id:'dataSetDetailsPanel',region:'south',split:true,bodyStyle:'padding:8px',height:200,autoScroll:true});this.refreshAllLink=(isAdmin)?'<span style="font-weight:normal"> &nbsp;&nbsp | &nbsp;&nbsp; To update all reports click '
+'<span class="link" onClick="Ext.getCmp(\'eemanager\').updateAllEEReports(1)"> here </span></span>':'';var isAdmin=(Ext.getDom('hasAdmin'))?Ext.getDom('hasAdmin').getValue():false;var c=reportGrid.getColumnModel().findColumnIndex('dateBatchFetch');reportGrid.getColumnModel().setHidden(c,!isAdmin);this.add([reportGrid,dataSetDetailsPanel]);}});Gemma.EEReportGrid=Ext.extend(Ext.grid.GridPanel,{viewConfig:{autoFill:true,forceFit:true},searchForText:function(button,keyev){var text=this.searchInGridField.getValue();if(text.length<2){this.clearFilter();return;}
this.getStore().filterBy(this.getSearchFun(text),this,0);},showText:function(){var string="";var sels=this.getSelectionModel().getSelections();if(sels.length==0){this.getStore().each(function(r){string+=r.get('shortName')+"\n";});}
else{for(var i=0;i<sels.length;i++)string+=sels[i].get('shortName')+"\n";}
var w=new Ext.Window({modal:true,title:"You can copy this text",html:string,height:400,width:200,autoScroll:true,bodyCfg:{tag:'textarea',style:'background-color : white;font-size:smaller'}});w.show();},clearFilter:function(){this.getStore().clearFilter();},getSearchFun:function(text){var value=new RegExp(Ext.escapeRe(text),'i');return function(r,id){var obj=r.data;return value.match(obj.name)||value.match(obj.shortName);};},refresh:function(){this.getTopToolbar().refresh();},updateTitle:function(count){this.setTitle('Experiment Manager &nbsp;&nbsp; ( '+count+((count==1)?' row':' rows')+' )');},initComponent:function(){var manager=new Gemma.EEManager({editable:true,id:'eemanager'});this.manager=manager;var limit=(this.limit)?this.limit:Gemma.DEFAULT_NUMBER_EXPERIMENTS;var ids=(this.ids)?this.ids:null;var taxonid=(this.taxonid)?this.taxonid:null;var filterMode=(this.filterMode)?this.filterMode:null;var showPublic=(this.showPublic)?this.showPublic:false;var store=new Gemma.PagingDataStore({autoLoad:true,proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:ExpressionExperimentController.loadStatusSummaries,getDwrArgsFunction:function(request,recordDataArray){if(request.options.params&&request.options.params instanceof Array){return request.options.params;}
return[taxonid,ids,limit,filterMode,showPublic];}}}}),reader:new Ext.data.ListRangeReader({id:"id"},manager.record),remoteSort:false,sortInfo:{field:'dateLastUpdated',direction:'DESC'},sort:function(fieldName,dir){store.fireEvent('beforesort');var t=new Ext.util.DelayedTask(function(){Gemma.PagingDataStore.superclass.sort.call(store,fieldName,dir);store.fireEvent('aftersort');});t.delay(100);}});store.on('load',function(store,records,options){this.updateTitle(records.size());},this);Ext.apply(this,{header:true,store:store,loadMask:true,height:500,cm:Gemma.EEReportGridColumnModel});store.addEvents({'beforesort':true,'aftersort':true});manager.on('done',function(){store.reload();},this);manager.on('tagsUpdated',function(){store.reload();},this);var detailsmask=null;var showEEDetails=function(model,rowindex,record){if(detailsmask==null){detailsmask=new Ext.LoadMask(dataSetDetailsPanel.body,{msg:"Loading details ..."});}
detailsmask.show();ExpressionExperimentController.getDescription(record.id,{callback:function(data){Ext.DomHelper.overwrite(dataSetDetailsPanel.body,'<span class="big">'
+Gemma.EEReportGridColumnRenderers.shortNameRenderer(record.get('shortName'),null,record)
+'</span>&nbsp;&nbsp;<span class="medium">'
+record.get('name')
+"</span><p>"
+data
+"</p>"
+'<span class="link" onClick="Ext.getCmp(\'eemanager\').showAuditWindow('
+record.id
+');" ><img ext:qtip="Show history" src="/Gemma/images/icons/pencil.png" /></span>');detailsmask.hide();}.createDelegate(this)});};var tpl=new Ext.XTemplate('<tpl for="."><div class="itemwrap" id="{shortName}">','<p>{id} {name} {shortName} {externalUri} {[this.log(values.id)]}</p>',"</div></tpl>",{log:function(id){}});store.on('beforesort',function(){this.loadMask.show();},this);store.on('aftersort',function(){this.loadMask.hide();},this);var isAdmin=(Ext.get('hasAdmin'))?Ext.get('hasAdmin').getValue():false;this.refreshAllLink=(isAdmin)?'<span style="font-weight:normal"> &nbsp;&nbsp | &nbsp;&nbsp; To update all reports click '
+'<span class="link" onClick="Ext.getCmp(\'eemanager\').updateAllEEReports(1)"> here </span></span>':'';store.on("exception",function(scope,args,data,e){Ext.Msg.alert('There was an error',e+".  \nPlease try again.");});var topToolbar=new Gemma.EEReportGridToolbar({showPublic:showPublic,listeners:{'loadStore':{fn:function(paramArr){this.store.load({params:paramArr});},scope:this},'showAsText':{fn:function(){this.showText();},scope:this}}});this.searchInGridField=new Ext.form.TextField({enableKeyEvents:true,emptyText:'Search',tooltip:"Text typed here will act as a filter.",listeners:{"keyup":{fn:this.searchForText.createDelegate(this),scope:this,options:{delay:100}}}});Ext.apply(this,{tbar:topToolbar,bbar:new Ext.Toolbar({items:['->',{xtype:'button',handler:this.clearFilter.createDelegate(this),tooltip:"Show all",scope:this,cls:'x-btn-text',text:'Reset filter'},' ',this.searchInGridField]})});Gemma.EEReportGrid.superclass.initComponent.call(this);}});Gemma.EEReportGridColumnRenderers={dateRenderer:new Ext.util.Format.dateRenderer("y/M/d"),adminRenderer:function(value,metadata,record,rowIndex,colIndex,store){if(record.get("currentUserHasWritePermission")){var adminLink='<span class="link"  onClick="Ext.getCmp(\'eemanager\').updateEEReport('
+value
+')"><img src="/Gemma/images/icons/arrow_refresh_small.png" ext:qtip="Refresh statistics"  ext:qtip="refresh"/></span>';var isAdmin=Ext.get("hasAdmin").getValue()=='true';if(isAdmin){adminLink=adminLink
+'&nbsp;&nbsp;&nbsp;<span class="link" onClick="return Ext.getCmp(\'eemanager\').deleteExperiment('
+value
+')"><img src="/Gemma/images/icons/cross.png" ext:qtip="Delete the experiment from the system" ext:qtip="delete" /></span>&nbsp;';}
return adminLink;}
return"(no permission)";},shortNameRenderer:function(value,metadata,record,rowIndex,colIndex,store){return'<a href="/Gemma/expressionExperiment/showExpressionExperiment.html?id='
+(record.get("sourceExperiment")?record.get("sourceExperiment"):record.get("id"))
+'" target="_blank">'+value+'</a>';},experimentalDesignEditRenderer:function(value,metadata,record,rowIndex,colIndex,store){var id=record.get('id');var url='<a target="_blank" href="/Gemma/experimentalDesign/showExperimentalDesign.html?eeid='
+id
+'"><img src="/Gemma/images/icons/pencil.png" alt="view/edit experimental design" ext:qtip="view/edit experimental design"/></a>';return value+'&nbsp;'+url;},experimentTaggerRenderer:function(value,metadata,record,rowIndex,colIndex,store){var id=record.get('id');var taxonId=record.get('taxonId');var url='<span class="link" onClick="return Ext.getCmp(\'eemanager\').tagger('+id+','+taxonId+','
+record.get("currentUserHasWritePermission")+','+(record.get("validatedAnnotations")!==null)
+')"><img src="/Gemma/images/icons/pencil.png" alt="view tags" ext:qtip="add/view tags"/></span>';value=value+'&nbsp;'+url;if(record.get("currentUserHasWritePermission")){var turl;if(record.get('autoTagDate')){var icon="/Gemma/images/icons/wand.png";turl='<span class="link"  onClick="return Ext.getCmp(\'eemanager\').autoTag('+id+')"><img src="'
+icon+'" alt="run auto-tagger" ext:qtip="tagger was run on '
+Ext.util.Format.date(record.get('autoTagDate'),'y/M/d')+'; click to re-run"/></span>';}else{var icon="/Gemma/images/icons/wand--plus.png";turl='<span class="link"  onClick="return Ext.getCmp(\'eemanager\').autoTag('+id+')"><img src="'
+icon+'" alt="run auto-tagger" ext:qtip="add tags automatically"/></span>';}
value=value+'&nbsp;'+turl;}
return value;},linkAnalysisRenderer:function(value,metadata,record,rowIndex,colIndex,store){var id=record.get('id');var runurl="";var BIG_ENOUGH_FOR_LINKS=7;if(record.get("currentUserHasWritePermission")){runurl='<span class="link" onClick="return Ext.getCmp(\'eemanager\').doLinks('
+id
+')"><img src="/Gemma/images/icons/control_play_blue.png" ext:qtip="Run coexpression analysis"  alt="link analysis" /></span>';}
if(record.get('bioAssayCount')<BIG_ENOUGH_FOR_LINKS){return'<span style="color:#CCC;">Too small</span>&nbsp;';}
if(record.get('dateLinkAnalysis')){var type=record.get('linkAnalysisEventType');var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedLinkAnalysisEventImpl'){color='red';qtip='ext:qtip="Failed"';}else if(type=='TooSmallDatasetLinkAnalysisEventImpl'){color='#CCC';qtip='ext:qtip="Too small to perform link analysis"';suggestRun=false;}
return'<span style="color:'+color+';" '+qtip+'>'+Ext.util.Format.date(value,'y/M/d')+'&nbsp;'
+(suggestRun?runurl:'');}else{return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}},pcaDateRenderer:function(value,metadata,record,rowIndex,colIndex,store){var id=record.get('id');var runurl="";if(record.get("currentUserHasWritePermission")){runurl='<span class="link" onClick="return Ext.getCmp(\'eemanager\').doPca('
+id
+', '
+false
+')"><img src="/Gemma/images/icons/control_play_blue.png" ext:qtip="Run PCA analysis"  alt="PCA analysis" /></span>';}
if(record.get('datePcaAnalysis')){var type=record.get('pcaAnalysisEventType');var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedPCAAnalysisEventImpl'){color='red';qtip='ext:qtip="Failed"';}
runurl='<span class="link" onClick="return Ext.getCmp(\'eemanager\').doPca('
+id
+', '
+true
+')"><img src="/Gemma/images/icons/control_play_blue.png" ext:qtip="Run PCA analysis"  alt="PCA analysis" /></span>';return'<span style="color:'+color+';" '+qtip+'>'+Ext.util.Format.date(value,'y/M/d')+'&nbsp;'
+(suggestRun?runurl:'');}else{return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}},batchDateRenderer:function(value,metadata,record,rowIndex,colIndex,store){var id=record.get('id');var dataSource=record.get('externalDatabase');var runurl="";if(record.get("currentUserHasWritePermission")){runurl='<span class="link" onClick="return Ext.getCmp(\'eemanager\').doBatchInfoFetch('
+id
+')"><img src="/Gemma/images/icons/control_play_blue.png" ext:qtip="Run batch info fetch"  alt="Fetch batch information" /></span>';}
if(record.get('technologyType')=='NONE'){return'<span style="color:#CCF;" ext:qtip="Not microarray data">'+'NA'+'</span>&nbsp;';}
var hasBatchInformation=record.get('hasBatchInformation');if(record.get('dateBatchFetch')){var type=record.get('batchFetchEventType');var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedBatchInformationFetchingEventImpl'){color='red';qtip='ext:qtip="Failed"';}else if(type=='FailedBatchInformationMissingEventImpl'){if(hasBatchInformation){return'<span style="color:#000;">Provided</span>&nbsp;';}else{color='#CCF';qtip='ext:qtip="Raw data files not available from source"';suggestRun=false;}}
return'<span style="color:'+color+';" '+qtip+'>'+Ext.util.Format.date(value,'y/M/d')+'&nbsp;'
+(suggestRun?runurl:'');}else if(hasBatchInformation){return'<span style="color:#000;">Provided</span>&nbsp;';}else if(dataSource=='GEO'||dataSource=='ArrayExpress'){return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}else return'<span style="color:#CCF;" '
+'ext:qtip="Add batch information by creating a \'batch\' experiment factor">'
+'NA'+'</span>&nbsp;';},missingValueAnalysisRenderer:function(value,metadata,record,rowIndex,colIndex,store){var id=record.get('id');var runurl="";if(record.get("currentUserHasWritePermission")){runurl='<span class="link" onClick="return Ext.getCmp(\'eemanager\').doMissingValues('
+id
+')"><img src="/Gemma/images/icons/control_play_blue.png" ext:qtip="Run missing value analysis" alt="missing value computation"  /></span>';}
if(record.get('technologyType')!='ONECOLOR'&&record.get('technologyType')!='NONE'&&record.get('hasEitherIntensity')){if(record.get('dateMissingValueAnalysis')){var type=record.get('missingValueAnalysisEventType');var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedMissingValueAnalysisEventImpl'){color='red';qtip='ext:qtip="Failed"';}
return'<span style="color:'+color+';" '+qtip+'>'+Ext.util.Format.date(value,'y/M/d')
+'&nbsp;'+(suggestRun?runurl:'');}else{return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}}else{return'<span style="color:#CCF;" ext:qtip="Only relevant for two-channel microarray studies with intensity data available.">NA</span>';}},processedVectorCreateRenderer:function(value,metadata,record,rowIndex,colIndex,store){var id=record.get('id');var runurl="";if(record.get("currentUserHasWritePermission")){runurl='<span class="link" onClick="return Ext.getCmp(\'eemanager\').doProcessedVectors('
+id
+')"><img src="/Gemma/images/icons/control_play_blue.png" ext:qtip="Run processed vector generation" alt="processed vector generation"/></span>';}
if(record.get('dateProcessedDataVectorComputation')){var type=record.get('processedDataVectorComputationEventType');var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedProcessedVectorComputationEventImpl'){color='red';qtip='ext:qtip="Failed"';}
return'<span style="color:'+color+';" '+qtip+'>'+Ext.util.Format.date(value,'y/M/d')+'&nbsp;'
+(suggestRun?runurl:'');}else{return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}},differentialAnalysisRenderer:function(value,metadata,record,rowIndex,colIndex,store){var id=record.get('id');var diffIsPossible=function(record){return record.get("numPopulatedFactors")>0&&record.get("currentUserHasWritePermission");};var runurl="";if(record.get("currentUserHasWritePermission")){runurl='<span class="link" onClick="return Ext.getCmp(\'eemanager\').doDifferential('
+id
+')"><img src="/Gemma/images/icons/control_play_blue.png" alt="differential expression analysis" ext:qtip="Run differential expression analysis"/></span>';}
if(diffIsPossible(record)){if(record.get('dateDifferentialAnalysis')){var type=record.get('differentialAnalysisEventType');var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedDifferentialExpressionAnalysisEventImpl'){color='red';qtip='ext:qtip="Failed"';}else if(record.get('differentialExpressionAnalyses').length==0){return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}
return'<span style="color:'+color+';" '+qtip+'>'+Ext.util.Format.date(value,'y/M/d')
+'&nbsp;'+(suggestRun?runurl:'');}else{return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}}else{return'<span style="color:#CCF;" ext:qtip="You must create at least one experimental factor to enable this analysis.">NA</span>';}},flagRenderer:function(value,metadata,record,rowIndex,colIndex,store){var id=record.get('id');var result='';if(record.get('validated')){result=result
+'<img src="/Gemma/images/icons/emoticon_smile.png" alt="validated" ext:qtip="validated"/>';}
if(record.get('troubled')){result=result+'<img src="/Gemma/images/icons/stop.png" alt="trouble" ext:qtip="trouble: '
+record.get('troubleDetails')+'"/>';}
result=result
+Gemma.SecurityManager.getSecurityLink('ubic.gemma.model.expression.experiment.ExpressionExperimentImpl',id,record.get('isPublic'),record.get('isShared'),record.get('currentUserHasWritePermission'),null,null,null,record.get('currentUserIsOwner'));return result;}};Gemma.EEReportGridColumnModel=new Ext.grid.ColumnModel({columns:[{header:'Short Name',sortable:true,dataIndex:'shortName',renderer:Gemma.EEReportGridColumnRenderers.shortNameRenderer},{header:'Name',sortable:true,dataIndex:'name'},{header:'Taxon',sortable:true,dataIndex:'taxon',width:40},{header:'Flags',sortable:true,renderer:Gemma.EEReportGridColumnRenderers.flagRenderer,tooltip:'Status flags',width:40},{header:'#ADs',sortable:true,dataIndex:'arrayDesignCount',tooltip:"The number of different platforms used in the study",width:35},{header:'#BAs',sortable:true,dataIndex:'bioAssayCount',tooltip:'The number of samples in the study',width:35},{header:'#Prof',sortable:true,dataIndex:'processedExpressionVectorCount',tooltip:'The number of expression profiles',width:45},{header:'#Facs',sortable:true,dataIndex:'numPopulatedFactors',renderer:Gemma.EEReportGridColumnRenderers.experimentalDesignEditRenderer,tooltip:'The number of experimental factors (variables) defined for the study, excluding any batch factors',width:45},{header:'#tags',sortable:true,dataIndex:'numAnnotations',renderer:Gemma.EEReportGridColumnRenderers.experimentTaggerRenderer,tooltip:'The number of terms the experiment is tagged with',width:60},{header:'Created',sortable:true,dataIndex:'dateCreated',tooltip:'Create date',renderer:Gemma.EEReportGridColumnRenderers.dateRenderer,width:80},{header:'Updated',sortable:true,dataIndex:'dateLastUpdated',tooltip:'Update date; not all possible types of updates are considered.',renderer:Gemma.EEReportGridColumnRenderers.dateRenderer,width:80},{header:'MissingVals',sortable:true,dataIndex:'dateMissingValueAnalysis',tooltip:'Status of missing value computation (two-channel studies only)',renderer:Gemma.EEReportGridColumnRenderers.missingValueAnalysisRenderer,width:80},{header:'BatchInfo',sortable:true,dataIndex:'dateBatchFetch',tooltip:'Status of batch information',renderer:Gemma.EEReportGridColumnRenderers.batchDateRenderer,width:90},{header:'ProcProf',sortable:true,dataIndex:'dateProcessedDataVectorComputation',tooltip:'Status of processed expression profile configuration',renderer:Gemma.EEReportGridColumnRenderers.processedVectorCreateRenderer,width:80},{header:'Diff',sortable:true,dataIndex:'dateDifferentialAnalysis',tooltip:'Status of differential expression analysis. Must have factors to enable',renderer:Gemma.EEReportGridColumnRenderers.differentialAnalysisRenderer,width:90},{header:'Links',sortable:true,dataIndex:'dateLinkAnalysis',tooltip:'Status of coexpression analysis',renderer:Gemma.EEReportGridColumnRenderers.linkAnalysisRenderer,width:90},{header:'PCA',sortable:true,dataIndex:'datePcaAnalysis',tooltip:'Status of PCA analysis',renderer:Gemma.EEReportGridColumnRenderers.pcaDateRenderer,width:90},{header:'Admin',sortable:false,dataIndex:'id',renderer:Gemma.EEReportGridColumnRenderers.adminRenderer,width:60}]});Gemma.EEReportGridToolbar=Ext.extend(Ext.Toolbar,{getSearchFun:function(text){var value=new RegExp(Ext.escapeRe(text),'i');return function(r,id){var obj=r.data;return value.match(obj.name)||value.match(obj.shortName);};},refresh:function(){this.setFiltersToDefault();this.fireEvent('loadStore',[this.taxonid,this.ids,this.limit,this.filterType,this.showPublic]);},filterType:null,filterByNeed:function(box,record,index){this.filterType=record.get('filterType');this.fireEvent('loadStore',[this.taxonid,this.ids,this.limit,this.filterType,this.showPublic]);},filterByTaxon:function(box,record,index){if(record.get('commonName')=="All taxa"){this.taxonid=null;}else{this.taxonid=record.get('id');}
this.fireEvent('loadStore',[this.taxonid,this.ids,this.limit,this.filterType,this.showPublic]);},filterByLimit:function(box,record,index){this.limit=record.get('count');this.fireEvent('loadStore',[this.taxonid,this.ids,this.limit,this.filterType,this.showPublic]);},filterBySearch:function(box,record,index){this.ids=record.get('memberIds');if(this.ids===null){this.ids=[record.get('id')];}
this.fireEvent('loadStore',[this.taxonid,this.ids,Gemma.DEFAULT_NUMBER_EXPERIMENTS,this.filterType,this.showPublic]);},getBookmark:function(){var url=Gemma.BASEURL+"/expressionExperiment/showAllExpressionExperimentLinkSummaries.html?";if(this.ids){url+="&ids="+this.ids.join(",");}
if(this.taxonid){url+="&taxon="+this.taxonid;}
if(this.limit){url+="&limit="+this.limit;}
if(this.filterType){url+="&filter="+this.filterType;}
if(this.showPublic){url+="&showPublic="+this.showPublic;}
Ext.Msg.alert("Your link to this list",'<a style="background-color:white" href="'+url+'">'+url+'</a>');},initComponent:function(){this.filterCombo=new Ext.form.ComboBox({typeAhead:true,triggerAction:'all',lazyRender:true,mode:'local',defaultValue:'0',emptyText:"Filter by property",store:new Ext.data.ArrayStore({id:0,fields:['filterType','displayText'],data:[[0,'No filter'],[1,'Need diff. expression analysis'],[2,'Need coexpression analysis'],[3,'Has diff. expression analysis'],[4,'Has coexpression analysis'],[5,'Troubled'],[6,'No factors'],[7,'No tags'],[8,'Needs batch info'],[9,'Has batch info'],[10,'Needs PCA'],[11,'Has PCA']]}),valueField:'filterType',displayField:'displayText',listeners:{scope:this,'select':this.filterByNeed}});this.taxonCombo=new Gemma.TaxonCombo({isDisplayTaxonWithDatasets:true,stateId:null,emptyText:"Filter by taxon",allTaxa:true,listeners:{scope:this,'select':this.filterByTaxon}});this.limitCombo=new Gemma.DataFilterCombo({listeners:{scope:this,'select':this.filterByLimit}});this.searchCombo=new Gemma.ExperimentAndExperimentGroupCombo({width:220,emptyText:"Search for experiments",listeners:{scope:this,'select':this.filterBySearch}});var toolbarScope=this;this.showPublicCheck=new Ext.form.Checkbox({tooltip:"Show/hide your public data sets.",boxLabel:"Show your public data",checked:this.showPublic,handler:function(checkbox,event){this.showPublic=checkbox.getValue();this.fireEvent('loadStore',[this.taxonid,this.ids,this.limit,this.filterType,this.showPublic]);},scope:this});this.on('afterrender',function(){this.taxonCombo.getStore().on('doneLoading',function(){if(this.taxonid){this.taxonCombo.setValue(this.taxonid);}else{this.taxonid=(this.taxonCombo.getStore().getAt(0))?this.taxonCombo.getStore().getAt(0).get('id'):"-1";this.taxonCombo.setValue(this.taxonid);}},this);if(this.limit){this.limitCombo.setValue(this.limit);}else{this.limitCombo.setValue(this.limitCombo.defaultValue);}
if(this.filterType){this.filterCombo.setValue(this.filterType);}else{this.filterCombo.setValue(this.filterCombo.defaultValue);}},this);this.setFiltersToDefault=function(){this.taxonid=(this.taxonCombo.getStore().getAt(0))?this.taxonCombo.getStore().getAt(0).get('id'):"-1";this.taxonCombo.setValue(this.taxonid);this.limit=this.limitCombo.defaultValue;this.limitCombo.setValue(this.limit);this.filteryType=this.filterCombo.defaultValue;this.filterCombo.setValue(this.filterCombo.defaultValue);this.searchCombo.clearValue();this.ids=null;};Ext.apply(this,{items:[this.searchCombo,this.filterCombo,this.taxonCombo,this.limitCombo,{xtype:'button',minWidth:20,cls:'x-btn-icon',icon:'/Gemma/images/icons/cross.png',handler:this.refresh,tooltip:"Clear filters",scope:this},'->',this.showPublicCheck,{xtype:'button',minWidth:20,cls:'x-btn-icon',icon:'/Gemma/images/icons/link.png',handler:this.getBookmark,tooltip:"Bookmarkable link",scope:this},{xtype:'button',minWidth:20,cls:'x-btn-icon',icon:'/Gemma/images/icons/disk.png',handler:function(){this.fireEvent('showAsText',[]);}.createDelegate(this),tooltip:"Download as text",scope:this}]});Gemma.EEReportGridToolbar.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.BioAssayGrid=Ext.extend(Gemma.GemmaGridPanel,{collapsible:false,loadMask:true,defaults:{autoScroll:true},height:500,width:800,autoScroll:true,autoExpandColumn:'description',record:Ext.data.Record.create([{name:"id",type:"int"},{name:"name",type:"string"},{name:"description",type:"string"},{name:"outlier",type:"boolean"}]),initComponent:function(){Ext.apply(this,{store:new Ext.data.Store({proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:BioAssayController.getBioAssays}},getDwrArgsFunction:function(request,recordDataArray){if(request.options.params&&request.options.params instanceof Array){return request.options.params;}
return[this.eeId];}}),reader:new Ext.data.ListRangeReader({id:"id"},this.record)})});Ext.apply(this,{columns:[{id:'name',header:"Name",dataIndex:"name",tooltip:"Name of the bioassay",scope:this,width:0.15,sortable:true,renderer:this.nameRenderer},{id:'description',header:"Description",dataIndex:"description",tooltip:"The descriptive name of the assay, usually supplied by the submitter",width:0.45,sortable:true}]});var isAdmin=(Ext.get('hasAdmin'))?Ext.get('hasAdmin').getValue():false;if(isAdmin){this.columns.push({header:"Remove as outlier",dataIndex:"id",renderer:this.outlierRemoveRender,width:0.15});}
Gemma.BioAssayGrid.superclass.initComponent.call(this);this.getStore().on("load",function(store,records,options){this.doLayout.createDelegate(this);},this);if(this.eeId){this.getStore().load({params:[this.eeId]});}},nameRenderer:function(value,metadata,record,row,col,ds){return"<a href=\"/Gemma/bioAssay/showBioAssay.html?id="+record.get('id')+"\">"
+record.get('name')+"</a>";},outlierRemoveRender:function(value,metadata,record,row,col,ds){if(record.get('outlier')){return"<span class=\"link\" onClick=\"Ext.getCmp('eemanager').unmarkOutlierBioAssay("+record.get('id')
+")\"><img title=\"Click to unmark as an outlier\" src=\"/Gemma/images/icons/stop.png\"/></span>";}
return"<span class=\"link\" onClick=\"Ext.getCmp('eemanager').markOutlierBioAssay("+record.get('id')
+")\"><img title=\"Click to mark as an outlier\" src=\"/Gemma/images/icons/ok.png\"/></span>";}});Ext.namespace("Gemma");Gemma.QuantitationTypePanel=Ext.extend(Ext.form.FieldSet,{autoHeight:true,title:"Quantitation type details",initComponent:function(){Ext.apply(this,{items:[{xtype:'checkbox',id:'qtype-isratio',name:'Ratio',fieldLabel:"Ratios?",boxLabel:"Check the box if the expression values are ratios",tooltip:'Check if your input values are ratios'},{xtype:'checkbox',id:'qtype-islogged',fieldLabel:'Log transformed?',boxLabel:"Check the box if the expression values are on a log scale (log2 assumed)",tooltip:'Check if your data are on a log scale'}]});Gemma.QuantitationTypePanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.ExpressionExperimentGrid=Ext.extend(Gemma.GemmaGridPanel,{collapsible:false,readMethod:ExpressionExperimentController.loadExpressionExperiments.createDelegate(this,[],true),autoExpandColumn:'name',experimentNameAsLink:true,editable:true,stateful:false,record:Ext.data.Record.create([{name:"id",type:"int"},{name:"shortName",type:"string"},{name:"name",type:"string"},{name:"arrayDesignCount",type:"int"},{name:"bioAssayCount",type:"int"},{name:"externalUri",type:"string"},{name:"description",type:"string"},{name:"differentialExpressionAnalysisId",type:"string"},{name:'taxonId',type:'int'}]),searchForText:function(button,keyev){var text=this.searchInGridField.getValue();if(text.length<2){this.clearFilter();return;}
this.getStore().filterBy(this.getSearchFun(text),this,0);},clearFilter:function(){this.getStore().clearFilter();},getSearchFun:function(text){var value=new RegExp(Ext.escapeRe(text),'i');return function(r,id){var obj=r.data;return value.match(obj.name)||value.match(obj.shortName);};},initComponent:function(){this.searchInGridField=new Ext.form.TextField({enableKeyEvents:true,emptyText:'Filter',tooltip:"Text typed here will ",listeners:{"keyup":{fn:this.searchForText.createDelegate(this),scope:this,options:{delay:100}}}});if(!this.records){Ext.apply(this,{store:new Ext.data.Store({proxy:new Ext.data.DWRProxy(this.readMethod),reader:new Ext.data.ListRangeReader({id:"id"},this.record)})});}else{Ext.apply(this,{store:new Ext.data.Store({proxy:new Ext.data.MemoryProxy(this.records),reader:new Ext.data.ListRangeReader({},this.record)})});}
Ext.apply(this,{bbar:new Ext.Toolbar({items:['->',{xtype:'button',handler:this.clearFilter.createDelegate(this),scope:this,cls:'x-btn-text',text:'Reset filter'},' ',this.searchInGridField]})});Ext.apply(this,{columns:[{id:'shortName',header:"Dataset",dataIndex:"shortName",tooltip:"The unique short name for the dataset, often the accession number from the originating source database. Click on the name to view the details page.",renderer:this.formatEE,scope:this,width:0.15,sortable:true},{id:'name',header:"Name",dataIndex:"name",tooltip:"The descriptive name of the dataset, usually supplied by the submitter",width:0.45,sortable:true},{id:'arrays',header:"Arrays",dataIndex:"arrayDesignCount",hidden:true,tooltip:"The number of different types of array platforms used",width:0.15,sortable:true},{id:'assays',header:"Assays",dataIndex:"bioAssayCount",renderer:this.formatAssayCount,tooltip:"The number of arrays (~samples) present in the study",width:0.1,sortable:true}]});if(this.showAnalysisInfo){this.columns.push({id:'analyses',header:"Diff.An.",dataIndex:"differentialExpressionAnalysisId",tooltip:"Indicates whether differential expression data is available for the study",renderer:this.formatAnalysisInfo,sortable:true,width:0.15});}
if(this.rowExpander){Ext.apply(this,{rowExpander:new Gemma.EEGridRowExpander({tpl:""})});this.columns.unshift(this.rowExpander);Ext.apply(this,{plugins:this.rowExpander});}
Gemma.ExpressionExperimentGrid.superclass.initComponent.call(this);this.on("keypress",function(e){if(e.getCharCode()===Ext.EventObject.DELETE){this.removeSelected();}},this);this.getStore().on("load",function(store,records,options){this.doLayout.createDelegate(this);},this);if(this.eeids){this.getStore().load({params:[this.eeids]});}},afterRender:function(){Gemma.ExpressionExperimentGrid.superclass.afterRender.call(this);if(this.getTopToolbar()){this.getTopToolbar().grid=this;}},removeSelected:function(){var recs=this.getSelectionModel().getSelections();for(var x=0;x<recs.length;x++){this.getStore().remove(recs[x]);this.getView().refresh();}},formatAnalysisInfo:function(value,metadata,record,row,col,ds){var id=record.get("differentialExpressionAnalysisId");if(id){return"<img src='/Gemma/images/icons/ok.png' height='16' width='16' ext:qtip='Has differential expression analysis' />";}else{return"";}},formatAssayCount:function(value,metadata,record,row,col,ds){return record.get("bioAssayCount");},formatEE:function(value,metadata,record,row,col,ds){var eeTemplate=new Ext.XTemplate('<tpl for="."><a target="_blank" title="{name}" href="/Gemma/expressionExperiment/showExpressionExperiment.html?id=','{id}"',' ext:qtip="{name}">{shortName}</a></tpl>');return this.experimentNameAsLink?eeTemplate.apply(record.data):value;},getEEIds:function(){var result=[];this.store.each(function(rec){result.push(rec.get("id"));});return result;},isEditable:function(){return this.editable;},setEditable:function(b){this.editable=b;}});Gemma.ExpressionExperimentListView=Ext.extend(Ext.list.ListView,{columns:[{id:'shortName',header:"Dataset",dataIndex:"shortName",tooltip:"The unique short name for the dataset, often the accession number from the originating source database. Click on the name to view the details page.",width:0.2,sortable:true},{id:'name',header:"Name",dataIndex:"name",tooltip:"The descriptive name of the dataset, usually supplied by the submitter",width:0.4,sortable:true},{id:'arrays',header:"Arrays",dataIndex:"arrayDesignCount",hidden:true,tooltip:"The number of different types of array platforms used",width:0.1,sortable:true},{id:'assays',header:"Assays",dataIndex:"bioAssayCount",tooltip:"The number of arrays (~samples) present in the study",width:0.1,sortable:true}],store:new Ext.data.Store({proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:ExpressionExperimentController.loadExpressionExperiments}}}),reader:new Ext.data.ListRangeReader({id:"id",fields:[{name:"id",type:"int"},{name:"shortName",type:"string"},{name:"name",type:"string"},{name:"arrayDesignCount",type:"int"},{name:"bioAssayCount",type:"int"},{name:"externalUri",type:"string"},{name:"description",type:"string"},{name:'taxonId',type:'int'}]})})});Gemma.ExpressionExperimentGrid.updateDatasetInfo=function(datasets,eeMap){for(var i=0;i<datasets.length;++i){var ee=eeMap[datasets[i].id];if(ee){datasets[i].shortName=ee.shortName;datasets[i].name=ee.name;}}};Gemma.EEGridRowExpander=Ext.extend(Ext.grid.RowExpander,{fillExpander:function(data,body,rowIndex){Ext.DomHelper.overwrite(body,{tag:'p',html:data});},beforeExpand:function(record,body,rowIndex){Ext.DomHelper.overwrite(body,{tag:'p',html:' Loading...'});ExpressionExperimentController.getDescription(record.id,{callback:this.fillExpander.createDelegate(this,[body,rowIndex],true)});return true;}});Gemma.ExpressionExperimentQCGrid=Ext.extend(Gemma.ExpressionExperimentGrid,{loadMask:true,record:Ext.data.Record.create([{name:"id",type:"int"},{name:"shortName",type:"string"},{name:"name",type:"string"},{name:"sampleRemoved",type:"string"},{name:"batchEffect",type:"string"}]),booleanRenderer:function(value){return(value=="true")?"Yes":'<span style="color:grey">No</span>';},initComponent:function(){Gemma.ExpressionExperimentQCGrid.superclass.initComponent.call(this);var store=new Ext.data.Store({autoLoad:true,proxy:new Ext.data.DWRProxy(ExpressionExperimentController.loadExpressionExperimentsWithQcIssues),reader:new Ext.data.JsonReader({root:'records',successProperty:'success',messageProperty:'message',totalProperty:'total',idProperty:"id",fields:this.record})});store.on('load',function(store,records,options){this.setTitle(records.length+" Experiments had Samples Removed due To Outliers");},this);Ext.apply(this,{store:store});Ext.apply(this,{colModel:new Ext.grid.ColumnModel({defaults:{sortable:true},columns:[{id:'shortName',header:"Dataset",dataIndex:"shortName",tooltip:"The unique short name for the dataset, often the accession number from the originating source database. Click on the name to view the details page.",renderer:this.formatEE,scope:this,width:0.15},{id:'name',header:"Name",dataIndex:"name",tooltip:"The descriptive name of the dataset, usually supplied by the submitter",width:0.55}]})});}});Ext.namespace('Gemma');Gemma.ExperimentSetPreview=Ext.extend(Gemma.SetPreview,{loadExperimentPreviewFromIds:function(ids){this.entityIds=ids;this.totalCount=ids.length;var limit=(ids.size()<this.preview_size)?ids.size():this.preview_size;var previewIds=ids.slice(0,limit);ExpressionExperimentController.loadExpressionExperiments(previewIds,function(ees){this.loadPreview(ees,ids.length);}.createDelegate(this));},loadExperimentPreviewFromExperimentSet:function(eeSet){var ids=eeSet.expressionExperimentIds;this.entityIds=ids;this.loadExperimentPreviewFromIds(ids);this.setSelectedSetValueObject(eeSet);},loadExperimentPreviewFromExperiments:function(experiments){this.entityIds=[];Ext.each(experiments,function(item,index,allitems){this.entityIds.push(item.id);},this);this.totalCount=experiments.length;var limit=(experiments.size()<this.preview_size)?experiments.size():this.preview_size;var previewExperiments=experiments.slice(0,limit);this.loadPreview(previewExperiments,experiments.length);},updateTitle:function(name,size){if(!name&&this.selectedSetValueObject instanceof ExpressionExperimentSetValueObject){size=this.selectedSetValueObject.expressionExperimentIds.size();if(this.selectedSetValueObject instanceof DatabaseBackedExpressionExperimentSetValueObject){name='<a target="_blank" href="/Gemma/expressionExperimentSet/showExpressionExperimentSet.html?id='+
this.selectedSetValueObject.id+'">'+
this.selectedSetValueObject.name+'</a>';}else{name=this.selectedSetValueObject.name;}}else if(!name){name="Experiment Selection Preview";}
this.previewContent.setTitle('<span style="font-size:1.2em">'+name+'</span> &nbsp;&nbsp;<span style="font-weight:normal">('+
this.totalCount+
((this.totalCount>1)?" experiments)":" experiment)"));},initComponent:function(){var withinSetExperimentCombo=new Gemma.ExperimentAndExperimentGroupCombo({width:300,style:'margin:10px',hideTrigger:true,emptyText:'Add experiments to your group'});withinSetExperimentCombo.setTaxonId(this.taxonId);withinSetExperimentCombo.on('select',function(combo,record,index){var allIds=this.entityIds;var newIds=record.get('memberIds');var i;for(i=0;i<newIds.length;i++){if(allIds.indexOf(newIds[i])<0){allIds.push(newIds[i]);}}
var currentTime=new Date();var hours=currentTime.getHours();var minutes=currentTime.getMinutes();if(minutes<10){minutes="0"+minutes;}
var time='('+hours+':'+minutes+') ';var editedGroup;editedGroup=new SessionBoundExpressionExperimentSetValueObject();editedGroup.id=null;editedGroup.name=time+" Custom Experiment Group";editedGroup.description="Temporary experiment group created "+currentTime.toString();editedGroup.expressionExperimentIds=allIds;editedGroup.taxonId=record.get('taxonId');editedGroup.taxonName=record.get('taxonName');editedGroup.numExperiments=editedGroup.expressionExperimentIds.length;editedGroup.modified=true;editedGroup.publik=false;ExpressionExperimentSetController.addSessionGroups([editedGroup],true,function(newValueObjects){if(newValueObjects===null||newValueObjects.length===0){return;}else{withinSetExperimentCombo.reset();this.focus();this.loadExperimentPreviewFromIds(newValueObjects[0].expressionExperimentIds);this.setSelectedSetValueObject(newValueObjects[0]);this.updateTitle();this.fireEvent('experimentListModified',newValueObjects);this.fireEvent('doneModification');}}.createDelegate(this));},this);Ext.apply(this,{selectionEditor:new Gemma.ExpressionExperimentMembersGrid({name:'selectionEditor',hideHeaders:true,frame:false,width:500,height:500}),defaultTpl:new Ext.XTemplate('<tpl for="."><div style="padding-bottom:7px;">'+'<a target="_blank" href="/Gemma/expressionExperiment/showExpressionExperiment.html?id=','{id}"',' ext:qtip="{shortName}">{shortName}</a>&nbsp; {name} <span style="color:grey">({taxon})</span></div></tpl>'),defaultPreviewTitle:"Experiment Selection Preview",addingCombo:withinSetExperimentCombo});Gemma.ExperimentSetPreview.superclass.initComponent.call(this);this.selectionEditor.on('experimentListModified',function(newSets){var i;for(i=0;i<newSets.length;i++){if(typeof newSets[i].expressionExperimentIds!=='undefined'&&typeof newSets[i].name!=='undefined'){this.loadExperimentPreviewFromIds(newSets[i].expressionExperimentIds);this.setSelectedSetValueObject(newSets[i]);this.updateTitle();}}
this.listModified=true;this.fireEvent('experimentListModified',newSets);},this);}});Ext.reg('Gemma.ExperimentSetPreview',Gemma.ExperimentSetPreview);Gemma.DatasetGroupComboPanel=Ext.extend(Ext.Panel,{layout:'table',name:'eesetpanel',layoutConfig:{columns:2},defaults:{bodyStyle:'padding:3px'},border:false,autoWidth:true,stateful:false,getSelected:function(){return this.store.getSelected();},filterByTaxon:function(taxon){if(taxon){this.combo.filterByTaxon(taxon.id);}},initComponent:function(){if(!this.store){this.store=new Gemma.DatasetGroupStore();}
this.combo=new Gemma.DatasetGroupCombo({width:175,store:this.store});Ext.apply(this,{items:[this.combo,new Ext.Button({text:"Edit",anchor:'',tooltip:"View dataset group interface to modify or create sets",handler:function(){if(!this.dcp){this.initDatasetGroupEditor();}
this.dcp.show();},scope:this})]});Gemma.DatasetGroupComboPanel.superclass.initComponent.call(this);this.relayEvents(this.combo,['ready','select']);},initDatasetGroupEditor:function(){this.dcp=new Gemma.DatasetGroupEditor({modal:true,datasetGroupStore:this.store});this.dcp.on("select",function(sel){if(sel){this.combo.setValue(sel.get("name"));}}.createDelegate(this));this.dcp.on("delete-set",function(rec){if(this.store.getPreviousSelection()){this.combo.setValue(this.store.getPreviousSelection().get("name"));}else{this.combo.setValue("");}}.createDelegate(this));this.dcp.on("commit",function(sel){if(sel){this.combo.setValue(sel.get("name"));}}.createDelegate(this));this.relayEvents(this.dcp,['commit','select']);},selectByName:function(name){this.combo.selectByName(name);}});Ext.namespace('Gemma');Gemma.ExpressionExperimentExperimentalFactorGrid=Ext.extend(Ext.grid.PropertyGrid,{loadMask:{msg:Gemma.StatusText.Loading.experimentFactors},collapsible:true,editable:true,stateful:false,autoScroll:true,height:250,initComponent:function(){var source=[];var customEditors=[];for(i in this.data){var d=this.data[i];if(d.expressionExperiment){var s=new Ext.data.SimpleStore({fields:[{name:'id',type:'int'},{name:'name',type:'string'},{name:'category',type:'string'},{name:'categoryUri',type:'string'},{name:'factorValues',type:'string'},{name:'numValues',type:'int'}]});var myData=[];var combo=new Ext.form.ComboBox({store:s,editable:false,forceSelection:true,displayField:'name',selectOnFocus:true,triggerAction:'all',mode:'local'});for(j in d.experimentalFactors){var f=d.experimentalFactors[j];if(f.id){var row=[f.id,f.name,f.category,f.categoryUri,f.factorValues,f.numValues];myData.push(row);}}
s.on("load",function(store,records,options){if(records.length<2){this.disable();}},combo);customEditors[d.expressionExperiment.name]=new Ext.grid.GridEditor(combo);source[d.expressionExperiment.name]=d.experimentalFactors[0].name;s.loadData(myData);};};Ext.apply(this,{source:source,customEditors:customEditors});Gemma.ExpressionExperimentExperimentalFactorGrid.superclass.initComponent.call(this);this.originalTitle=this.title;this.colModel.config[0].header="Experiments";this.colModel.config[1].header="Factors";}});Ext.namespace('Gemma');Gemma.DatasetSearchField=function(config){this.eeIds=[];this.filterFrom=[];Gemma.DatasetSearchField.superclass.constructor.call(this,config);this.on('beforesearch',function(field,query){if(this.loadMask){this.loadMask.show();}
this.addClass("x-loading");this.disable();});this.on('aftersearch',function(field,results){if(this.loadMask){this.loadMask.hide();}
this.enable();this.removeClass("x-loading");});};Ext.extend(Gemma.DatasetSearchField,Ext.form.TriggerField,{loadingText:Gemma.StatusText.Searching.generic,emptyText:'Enter search term',initComponent:function(){Gemma.DatasetSearchField.superclass.initComponent.call(this);this.addEvents('beforesearch','aftersearch');if(this.initQuery){this.setValue(this.initQuery);this.findDatasets();}},triggerClass:'x-go-trigger',setFilterFrom:function(filterFrom){this.filterFrom=filterFrom;},initEvents:function(){Gemma.DatasetSearchField.superclass.initEvents.call(this);var queryTask=new Ext.util.DelayedTask(this.findDatasets,this);this.el.on("keyup",function(e){if(e.getCharCode()===Ext.EventObject.ENTER){queryTask.delay(5);}});},filterDatasets:function(){var params=[this.getValue(),this.taxon?this.taxon.id:-1];params.push(this.filterFrom);},findDatasets:function(){if(!this.taxon){Ext.Msg.alert("Sorry","Please select a taxon first");return;}
var params=[this.getValue(),this.taxon?this.taxon.id:-1];if(this.fireEvent('beforesearch',this,params)!==false){this.lastParams=params;ExpressionExperimentController.find(params[0],params[1],this.foundDatasets.createDelegate(this));}},reset:function(){this.lastParams=null;this.value="";},foundDatasets:function(results){this.eeIds=results;this.fireEvent('aftersearch',this,results);},getEeIds:function(){return this.eeIds;},setTaxon:function(taxon){if(taxon===undefined){return;}
if(taxon.id){this.taxon=taxon;}else{this.taxon={id:taxon};}},onTriggerClick:function(e){this.findDatasets();}});Ext.reg('datasetsearchfield',Gemma.DatasetSearchField);Ext.namespace('Gemma');Ext.BLANK_IMAGE_URL='/Gemma/images/default/s.gif';Gemma.ExpressionExperimentQuantitationTypeGrid=Ext.extend(Ext.grid.GridPanel,{border:false,viewConfig:{forceFit:true},stripeRows:true,eeid:null,store:new Ext.data.SimpleStore({fields:Ext.data.Record.create([{name:"name"},{name:"description"},{name:"generalType"},{name:"isBackground"},{name:"isBackgroundSubtracted"},{name:"isBatchCorrected"},{name:"isMaskPreferred"},{name:"isNormalized"},{name:"isPreferred"},{name:"isRatio"},{name:"representation"},{name:"scale"},{name:"type"}]),sortInfo:{field:'name',direction:'ASC'}}),colModel:new Ext.grid.ColumnModel({defaults:{sortable:true,renderer:function(value,metadata,record,rowIndex,colIndex,store){metadata.attr='ext:qtip="'+value+'"';if(value===true){return"yes";}
if(value===false){return"no";}
return value;}},columns:[{id:'name',header:"Name",dataIndex:"name",tooltip:'Name'},{id:'desc',header:"Description",tooltip:"Description",dataIndex:'description',width:200},{id:'ispref',header:"Pref?",tooltip:'Is Preferred?',dataIndex:'isPreferred',width:40},{id:'isratio',header:"Ratio?",tooltip:"Is Ratio?",dataIndex:'isRatio',width:45},{id:'isback',header:"Bkgrd?",tooltip:'Is Background?',dataIndex:'isBackground',width:50},{id:'isbacksub',header:"Bkgrd Sub.?",tooltip:"Is Background Subtracted?",dataIndex:'isBackgroundSubtracted',width:80},{id:'isnorm',header:"Norm?",dataIndex:'isNormalized',tooltip:'Is Normalized?',width:50},{id:'gentyp',header:"General Type",dataIndex:'generalType'},{id:'type',header:"Type",tooltip:"Type",dataIndex:'type'},{id:'repre',header:"Representation",tooltip:"Representation",dataIndex:'representation'},{id:'scale',header:"Scale",tooltip:"Scale",dataIndex:'scale'}]}),initComponent:function(){Gemma.ExpressionExperimentQuantitationTypeGrid.superclass.initComponent.call(this);this.on('render',function(){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:"Loading ..."});}
this.loadMask.show();var store=this.store;ExpressionExperimentController.loadQuantitationTypes(this.eeid,function(qts){for(var j=0;j<qts.size();j++){if(this.getStore().find("id",qts[j].id)<0){var Constructor=this.store.recordType;var record=new Constructor(qts[j]);this.getStore().add([record]);}}
this.loadMask.hide();}.createDelegate(this));},this);}});Ext.namespace('Gemma');Gemma.DatasetGroupEditToolbar=Ext.extend(Ext.Toolbar,{getCurrentSetEEIds:function(){return this.getCurrentSet().get("expressionExperimentIds");},getCurrentSet:function(){var sm=this.ownerCt.getSelectionModel();return sm.getSelected();},getCurrentSetId:function(){return this.getCurrentSet().get("id");},getNewDetails:function(){if(!this.detailsWin){this.detailsWin=new Gemma.CreateSetDetailsWindow({isDisplayTaxonWithDatasets:true,store:this.ownerCt.getStore()});}
this.detailsWin.purgeListeners();this.detailsWin.on("commit",function(args){var Constr=this.ownerCt.getStore().record;var newRec=new Constr({name:args.name,description:args.description,modifiable:true,currentUserHasWritePermission:true,expressionExperimentIds:[],numExperiments:0,publik:(args.publik)?args.publik:false,taxonName:args.taxon.get('commonName'),taxonId:args.taxon.get('id')});newRec.markDirty();this.ownerCt.getStore().add(newRec);this.ownerCt.getSelectionModel().selectRecords([newRec]);this.ownerCt.getView().focusRow(this.ownerCt.getStore().indexOf(newRec));this.commitBut.enable();this.deleteBut.enable();this.cloneBut.disable();this.resetBut.disable();},this);this.detailsWin.name='';this.detailsWin.description='';this.detailsWin.show();},afterRender:function(){Gemma.DatasetGroupEditToolbar.superclass.afterRender.call(this);this.addButton(this.newBut);this.addButton(this.commitBut);this.addButton(this.cloneBut);this.addButton(this.resetBut);this.addButton(this.deleteBut);this.addFill();this.addButton(this.clearFilterBut);},initComponent:function(){Gemma.DatasetGroupEditToolbar.superclass.initComponent.call(this);this.newBut=new Ext.Button({handler:this.initNew,scope:this,icon:"/Gemma/images/icons/add.png",disabled:false,tooltip:"Create a new set (click 'commit' when you are done)"});this.commitBut=new Ext.Button({handler:this.commit,disabled:true,scope:this,icon:"/Gemma/images/icons/database_save.png",tooltip:"Commit all changes to the database"});this.cloneBut=new Ext.Button({handler:this.copy,scope:this,disabled:true,icon:"/Gemma/images/icons/arrow_branch.png",tooltip:"Clone as a new set (click 'save' afterwards)"});this.resetBut=new Ext.Button({handler:this.reset,scope:this,disabled:true,icon:"/Gemma/images/icons/arrow_undo.png",tooltip:"Reset selected set to stored version"});this.deleteBut=new Ext.Button({handler:this.remove,scope:this,disabled:true,icon:"/Gemma/images/icons/database_delete.png",tooltip:"Delete selected set"});this.clearFilterBut=new Ext.Button({text:"Show all",handler:this.clearFilter,scope:this,disabled:true,tooltip:"Clear filters"});},onRender:function(ct,position){Gemma.DatasetGroupEditToolbar.superclass.onRender.apply(this,arguments);this.ownerCt.on('rowselect',function(selector,rowindex,record){if(!record.phantom){this.cloneBut.enable();}
if(record.get('currentUserHasWritePermission')){if(record.get('modifiable')){this.deleteBut.enable();}else{this.deleteBut.disable();}
if(record.isModified()){this.resetBut.enable();this.commitBut.enable();}}else{this.deleteBut.disable();this.commitBut.disable();this.resetBut.disable();}},this);if(this.ownerCt.getStore().isFiltered()){this.clearFilterBut.enable();}else{this.clearFilterBut.disable();}
this.ownerCt.getStore().on('update',function(store,record,operation){if(store.isFiltered()){this.clearFilterBut.enable();}else{this.clearFilterBut.disable();}
if(this.getCurrentSet&&this.getCurrentSet()&&this.getCurrentSet().dirty){this.cloneBut.enable();this.resetBut.enable();this.commitBut.enable();}},this);this.ownerCt.on('afteredit',function(e){this.resetBut.enable();this.commitBut.enable();},this);this.ownerCt.getStore().on('write',function(store,action,data,records,options){this.ownerCt.loadMask.hide();this.commitBut.disable();},this);this.ownerCt.getStore().on('exception',function(proxy,type,action,options,response,arg){this.ownerCt.loadMask.hide();},this);},initNew:function(){this.getNewDetails();},remove:function(){var rec=this.getCurrentSet();if(rec){Ext.Msg.confirm(Gemma.HelpText.CommonWarnings.Deletion.title,String.format(Gemma.HelpText.CommonWarnings.Deletion.text,'set'),function(but){if(but==='no'){return;}
this.ownerCt.loadMask.show();if(rec.phantom){this.ownerCt.getStore().remove(rec);this.ownerCt.getStore().clearSelected();this.resetBut.disable();this.deleteBut.disable();this.commitBut.disable();this.ownerCt.loadMask.hide();}else{var callback=function(data){if(data){this.ownerCt.getStore().remove(rec);this.ownerCt.getStore().clearSelected();this.resetBut.disable();this.deleteBut.disable();this.commitBut.disable();this.ownerCt.loadMask.hide();}}.createDelegate(this);ExpressionExperimentSetController.remove([rec.data],callback);}
this.fireEvent("delete-set",rec);},this);}},clearFilter:function(){this.ownerCt.getStore().clearFilter();},commit:function(){this.ownerCt.loadMask.show();var recordsToSave=this.ownerCt.getStore().getModifiedRecords();var i,rec;for(i=0;recordsToSave.length>i;i++){rec=recordsToSave[i];if(!rec.get("expressionExperimentIds")||rec.get("expressionExperimentIds").length===0){Ext.Msg.show({title:Gemma.HelpText.CommonErrors.EmptySet.title,msg:String.format(Gemma.HelpText.CommonErrors.EmptySet.text,rec.get("name")),buttons:Ext.Msg.OK,icon:Ext.MessageBox.WARNING});this.ownerCt.loadMask.hide();return;}}
this.ownerCt.getStore().save();},copy:function(){var rec=this.getCurrentSet();var Constr=this.ownerCt.getStore().record;var newRec=new Constr({name:"Copy of "+rec.get("name"),description:rec.get("description"),modifiable:true,expressionExperimentIds:rec.get("expressionExperimentIds"),numExperiments:rec.get("numExperiments"),taxonId:rec.get("taxonId"),taxonName:rec.get("taxonName")});this.ownerCt.getStore().add(newRec);this.ownerCt.getSelectionModel().selectRecords([newRec]);this.ownerCt.getView().focusRow(this.ownerCt.getStore().indexOf(newRec));this.deleteBut.enable();this.commitBut.enable();this.resetBut.disable();this.cloneBut.disable();},reset:function(){if(this.getCurrentSet()){this.getCurrentSet().reject();this.resetBut.disable();this.commitBut.disable();this.cloneBut.enable();this.ownerCt.getSelectionModel().fireEvent("rowselect",this.ownerCt.getSelectionModel(),this.ownerCt.getStore().indexOf(this.getCurrentSet()),this.getCurrentSet());}}});Gemma.DatasetGroupGridPanel=Ext.extend(Ext.grid.EditorGridPanel,{autoExpandColumn:'description',selModel:new Ext.grid.RowSelectionModel({singleSelect:true}),name:'datasetGroupGridPanel',width:400,height:250,stripeRows:true,viewConfig:{forceFit:true},colModel:new Ext.grid.ColumnModel({columns:[{header:"Name",dataIndex:"name",tooltip:'The unique name of this group',sortable:true,editable:true,width:0.17,editor:new Ext.form.TextField({allowBlank:false}),renderer:function(value,metadata,record,rowIndex,colIndex,store){if(record.data.id&&record.data.id>0){return'<a target="_blank" href="/Gemma/expressionExperimentSet/showExpressionExperimentSet.html?id='+record.data.id+'">'+value+'</a>';}
return value;}},{header:"Description",dataIndex:"description",sortable:true,editable:true,width:0.3,editor:new Ext.form.TextField({allowBlank:true})},{header:"Size",tooltip:'How many datasets make up this group',dataIndex:"numExperiments",sortable:true,editable:false,width:0.09},{header:"Taxon",dataIndex:"taxonName",sortable:true,editable:false,width:0.125},{header:"Flags",dataIndex:"modifiable",sortable:true,editable:false,tooltip:'Status including security',width:0.12,renderer:function(value,metaData,record,rowIndex,colIndex,store){var v="";if(!value){v="<img src='/Gemma/images/icons/shield.png' height='16' width='16' "+"ext:qtip='"+Gemma.HelpText.WidgetDefaults.DatasetGroupGridPanel.protectedTT+"' />";}
var canEdit=(record.get('id')&&record.get('id')>0)?record.get('currentUserHasWritePermission'):false;var isCurrentOwner=(record.get('id')&&record.get('id')>0)?record.get('currentUserIsOwner'):false;var sl=Gemma.SecurityManager.getSecurityLink("ubic.gemma.model.analysis.expression.ExpressionExperimentSetImpl",record.get('id'),record.get('publik'),record.get('shared'),canEdit,null,null,null,isCurrentOwner);v=v+"&nbsp;"+sl;return v;},scope:this},{header:"Editable",dataIndex:"currentUserHasWritePermission",sortable:true,editable:false,tooltip:'Do you have permission to edit this group?',width:0.12,renderer:function(value,metaData,record,rowIndex,colIndex,store){if(value){return"<img src='/Gemma/images/icons/ok.png' height='16' width='16' ext:qtip='You can edit this group' />";}else{return" ";}},scope:this}]}),initComponent:function(){Gemma.DatasetGroupGridPanel.superclass.initComponent.call(this);if(!this.store){Ext.apply(this,{store:new Gemma.DatasetGroupStore()});}
this.addEvents({'dirty':true});this.record=this.getStore().record;},afterRender:function(){Gemma.DatasetGroupGridPanel.superclass.afterRender.call(this);this.loadMask=new Ext.LoadMask(this.body,{msg:'Loading ...',store:this.store});this.getSelectionModel().on("rowselect",function(selmol,index,rec){this.getStore().setSelected(rec);this.fireEvent('rowselect',selmol,index,rec);},this);},updateMembers:function(store){var rec=this.getSelectionModel().getSelected();if(!rec){Ext.Msg.alert("Sorry","You must select a set or create a new set before adding experiments.",function(){store.un("remove",this.updateMembers);store.un("add",this.updateMembers);store.removeAll();});return;}
var ids=[];store.each(function(rec){ids.push(rec.get("id"));});rec.set("expressionExperimentIds",ids);rec.set("numExperiments",ids.length);this.fireEvent("dirty",rec);}});Ext.namespace('Gemma');Ext.BLANK_IMAGE_URL='/Gemma/images/default/s.gif';Gemma.ExpressionExperimentDetails=Ext.extend(Ext.Panel,{dirtyForm:false,listeners:{leavingTab:function(){if(this.editModeOn&&this.dirtyForm){var leave=confirm("You are still in edit mode. Your unsaved changes will be discarded when you switch tabs. Do you want to continue?");if(leave){return true;}
return false;}
return true;},tabChanged:function(){this.fireEvent('toggleEditMode',false);}},renderArrayDesigns:function(arrayDesigns){var result='';for(var i=0;i<arrayDesigns.length;i++){var ad=arrayDesigns[i];result=result+'<a href="/Gemma/arrays/showArrayDesign.html?id='+ad.id+'">'+ad.shortName
+'</a> - '+ad.name;if(arrayDesigns[i].troubled){result=result+'<img src="/Gemma/images/icons/stop.png" alt="trouble" ext:qtip="'
+arrayDesigns[i].troubleDetails+'"/>';}
if(i<arrayDesigns.length-1){result=result+"<br/>";}}
return result;},renderCoExpressionLinkCount:function(ee){if(ee.coexpressionLinkCount===null){return"Unavailable";}
var downloadCoExpressionDataLink=String.format("<span style='cursor:pointer'  ext:qtip='Download all coexpression  data in a tab delimited format'  "
+"onClick='fetchCoExpressionData({0})' > &nbsp; <img src='/Gemma/images/download.gif'/> &nbsp; </span>",ee.id);var count;return ee.coexpressionLinkCount+"&nbsp;"+downloadCoExpressionDataLink;},renderSourceDatabaseEntry:function(ee){var result='';var logo='';if(ee.externalDatabase=='GEO'){var acc=ee.accession;acc=acc.replace(/\.[1-9]$/,'');logo='/Gemma/images/logo/geoTiny.png';result='<a target="_blank" href="http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc='+acc
+'"><img src="'+logo+'"/></a>';}else if(ee.externalDatabase=='ArrayExpress'){logo='/Gemma/images/logo/arrayExpressTiny.png';result='<a target="_blank" href="http://www.ebi.ac.uk/microarray-as/aer/result?queryFor=Experiment&eAccession='
+ee.accession+'"><img src="'+logo+'"/></a>';}else{result="Direct upload";}
return result;},renderSamples:function(ee){var result=ee.bioAssayCount;if(this.editable){result=result
+'&nbsp;&nbsp<a href="/Gemma/expressionExperiment/showBioAssaysFromExpressionExperiment.html?id='
+ee.id
+'"><img ext:qtip="View the details of the samples" src="/Gemma/images/icons/magnifier.png"/></a>';}
return''+result;},renderStatus:function(ee){var result='';if(ee.validated){result=result+'<img src="/Gemma/images/icons/emoticon_smile.png" alt="validated" title="validated"/>';}
if(ee.troubled){result=result+'<img src="/Gemma/images/icons/stop.png" alt="trouble" ext:qtip="trouble: '
+ee.troubleDetails+'"/>';}
if(ee.hasMultiplePreferredQuantitationTypes){result=result
+'<img src="/Gemma/images/icons/stop.png" alt="trouble" '
+'title="'
+Gemma.HelpText.WidgetDefaults.ExpressionExperimentDetails.statusMultiplePreferredQuantitationTypes
+'"/>';}
if(ee.hasMultipleTechnologyTypes){result=result+'<img src="/Gemma/images/icons/stop.png" alt="trouble" '+'title="'
+Gemma.HelpText.WidgetDefaults.ExpressionExperimentDetails.statusMultipleTechnologyTypes+'"/>';}
var isUserLoggedIn=(Ext.getDom('hasUser')&&Ext.getDom('hasUser').getValue()==='true')?true:false;if(isUserLoggedIn){result=result
+Gemma.SecurityManager.getSecurityLink('ubic.gemma.model.expression.experiment.ExpressionExperimentImpl',ee.id,ee.isPublic,ee.isShared,ee.currentUserHasWritePermission,null,null,null,ee.currentUserIsOwner);}
return result||"No flags";},linkAnalysisRenderer:function(ee){var id=ee.id;var runurl='<span style="cursor:pointer" onClick="return Ext.getCmp(\''
+id
+'-eemanager\').doLinks('
+id
+')"><img src="/Gemma/images/icons/control_play_blue.png" alt="link analysis" title="link analysis"/></span>';if(ee.dateLinkAnalysis){var type=ee.linkAnalysisEventType;var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedLinkAnalysisEventImpl'){color='red';qtip='ext:qtip="Failed"';}else if(type=='TooSmallDatasetLinkAnalysisEventImpl'){color='#CCC';qtip='ext:qtip="Too small"';suggestRun=false;}
return'<span style="color:'+color+';" '+qtip+'>'
+Ext.util.Format.date(ee.dateLinkAnalysis,'y/M/d')+'&nbsp;'+(suggestRun?runurl:'');}else{return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}},missingValueAnalysisRenderer:function(ee){var id=ee.id;var runurl='<span style="cursor:pointer" onClick="return Ext.getCmp(\''
+id
+'-eemanager\').doMissingValues('
+id
+')"><img src="/Gemma/images/icons/control_play_blue.png" alt="missing value computation" title="missing value computation"/></span>';if(ee.technologyType!='ONECOLOR'&&ee.technologyType!='NONE'&&ee.hasEitherIntensity){if(ee.dateMissingValueAnalysis){var type=ee.missingValueAnalysisEventType;var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedMissingValueAnalysisEventImpl'){color='red';qtip='ext:qtip="Failed"';}
return'<span style="color:'+color+';" '+qtip+'>'
+Ext.util.Format.date(ee.dateMissingValueAnalysis,'y/M/d')+'&nbsp;'
+(suggestRun?runurl:'');}else{return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}}else{return'<span ext:qtip="Only relevant for two-channel microarray studies with intensity data available." style="color:#CCF;">NA</span>';}},processedVectorCreateRenderer:function(ee){var id=ee.id;var runurl='<span style="cursor:pointer" onClick="return Ext.getCmp(\''
+id
+'-eemanager\').doProcessedVectors('
+id
+')"><img src="/Gemma/images/icons/control_play_blue.png" alt="processed vector computation" title="processed vector computation"/></span>';if(ee.dateProcessedDataVectorComputation){var type=ee.processedDataVectorComputationEventType;var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedProcessedVectorComputationEventImpl'){color='red';qtip='ext:qtip="Failed"';}
return'<span style="color:'+color+';" '+qtip+'>'
+Ext.util.Format.date(ee.dateProcessedDataVectorComputation,'y/M/d')+'&nbsp;'
+(suggestRun?runurl:'');}else{return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}},differentialAnalysisRenderer:function(ee){var id=ee.id;var runurl='<span style="cursor:pointer" onClick="return Ext.getCmp(\''
+panelId
+'eemanager\').doDifferential('
+id
+')"><img src="/Gemma/images/icons/control_play_blue.png" alt="differential expression analysis" title="differential expression analysis"/></span>';if(ee.numPopulatedFactors>0){if(ee.dateDifferentialAnalysis){var type=ee.differentialAnalysisEventType;var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedDifferentialExpressionAnalysisEventImpl'){color='red';qtip='ext:qtip="Failed"';}else if(record.get('differentialExpressionAnalyses').length==0){return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}
return'<span style="color:'+color+';" '+qtip+'>'
+Ext.util.Format.date(ee.dateDifferentialAnalysis,'y/M/d')+'&nbsp;'
+(suggestRun?runurl:'');}else{return'<span style="color:#3A3;">Needed</span>&nbsp;'+runurl;}}else{return'<span style="color:#CCF;">NA</span>';}},renderProcessedExpressionVectorCount:function(e){return e.processedExpressionVectorCount?e.processedExpressionVectorCount:' [count not available] ';},renderEESets:function(eeSets){eeSets.sort(function(a,b){var A=a.name.toLowerCase();var B=b.name.toLowerCase();if(A<B)
return-1;if(A>B)
return 1;return 0;});var eeSetLinks=[];var i;for(i=0;i<eeSets.length;i++){if(eeSets[i]&&eeSets[i].name&&eeSets[i].id){eeSetLinks.push(' <a target="_blank" href="/Gemma/expressionExperimentSet/showExpressionExperimentSet.html?id='
+eeSets[i].id+'">'+eeSets[i].name+'</a>');}}
if(eeSetLinks.length===0){eeSetLinks.push('Not currently a member of any experiment group');}
return eeSetLinks;},initComponent:function(){this.panelId=this.getId();Gemma.ExpressionExperimentDetails.superclass.initComponent.call(this);var panelId=this.getId();var e=this.experimentDetails;var currentDescription=e.description;var currentName=e.name;var currentShortName=e.shortName;var currentPubMedId=(e.primaryCitation)?e.primaryCitation.pubmedAccession:'';var currentPrimaryCitation=e.primaryCitation;var manager=new Gemma.EEManager({editable:this.editable,id:e.id+'-eemanager'});this.manager=manager;var pubMedDisplay=new Ext.Panel({xtype:'panel',fieldLabel:'Publication',baseCls:'x-plain-panel',style:'padding-top:5px',tpl:new Ext.XTemplate(Gemma.Common.tpl.pubmedLink.complex),data:{pubAvailable:(currentPrimaryCitation)?'true':'false',primaryCitationStr:(currentPrimaryCitation)?currentPrimaryCitation.citation:'',pubmedURL:(currentPrimaryCitation)?currentPrimaryCitation.pubmedURL:''},listeners:{'toggleEditMode':function(editOn){this.setVisible(!editOn);}}});var pubMedIdField=new Ext.form.NumberField({xtype:'numberfield',allowDecimals:false,minLength:1,maxLength:9,allowNegative:false,emptyText:(this.isAdmin||this.editable)?'Enter pubmed id':'Not Available',width:100,value:currentPubMedId,enableKeyEvents:true,bubbleEvents:['changeMade'],listeners:{'keyup':function(field,event){if(field.isDirty()){field.fireEvent('changeMade',field.isValid());}},scope:this}});var pubMedDelete={xtype:'button',text:'Clear',icon:'/Gemma/images/icons/cross.png',tooltip:'Remove this experiment\'s association with this publication',bubbleEvents:['changeMade'],handler:function(){pubMedIdField.setValue('');field.fireEvent('changeMade',true);},scope:this};var pubMedForm=new Ext.Panel({fieldLabel:'Publication',xtype:'panel',layout:'hbox',hidden:true,padding:3,items:[pubMedIdField,pubMedDelete],listeners:{'toggleEditMode':function(editOn){this.setVisible(editOn);this.doLayout();}}});new Gemma.MGEDCombo({});var taggerurl='<span style="cursor:pointer" onClick="return Ext.getCmp(\''+e.id+'-eemanager\').tagger('
+e.id+','+e.taxonId+','+this.editable+','+(e.validatedAnnotations!==null)
+')"><img src="/Gemma/images/icons/pencil.png" alt="view tags" title="view tags"/></span>';tagView=new Gemma.AnnotationDataView({readParams:[{id:e.id,classDelegatingFor:"ExpressionExperimentImpl"}]});manager.on('tagsUpdated',function(){tagView.store.reload();});manager.on('done',function(){window.location.reload();});manager.on('reportUpdated',function(data){ob=data[0];var k=Ext.get('coexpressionLinkCount-region');Ext.DomHelper.overwrite(k,{html:ob.coexpressionLinkCount});k.highlight();k=Ext.get('processedExpressionVectorCount-region');Ext.DomHelper.overwrite(k,{html:ob.processedExpressionVectorCount});k.highlight();},this);manager.on('differential',function(){window.location.reload(true);});save=function(){if(!this.saveMask){this.saveMask=new Ext.LoadMask(this.getEl(),{msg:"Saving ..."});}
this.saveMask.show();var shortName=shortNameField.getValue();var description=descriptionArea.getValue();var name=nameArea.getValue();var newPubMedId=pubMedIdField.getValue();var entity={entityId:e.id};if(shortName!=currentShortName){entity.shortName=shortName;}
if(description!=currentDescription){entity.description=description;}
if(name!=currentName){entity.name=name;}
if(!newPubMedId){entity.pubMedId=currentPubMedId;entity.removePrimaryPublication=true;}else if(newPubMedId!==currentPubMedId){entity.pubMedId=newPubMedId;entity.removePrimaryPublication=false;}else{entity.removePrimaryPublication=false;}
ExpressionExperimentController.updateBasics(entity,function(data){shortNameField.setValue(data.shortName);nameArea.setValue(data.name);descriptionArea.setValue(data.description);pubMedIdField.setValue(data.pubmedId);pubMedDisplay.update({pubAvailable:(data.pubmedId)?'true':'false',primaryCitation:(data.primaryCitation)?data.primaryCitation.citation:'',pubmedURL:(data.primaryCitation)?data.primaryCitation.pubmedURL:''});currentShortName=data.shortName;currentName=data.name;currentDescription=data.description;currentPubMedId=(data.primaryCitation)?data.primaryCitation.pubmedAccession:'';currentPrimaryCitation=data.primaryCitation;this.dirtyForm=false;this.saveMask.hide();}.createDelegate(this));}.createDelegate(this);var descriptionArea=new Ext.form.TextArea({allowBlank:true,resizable:true,readOnly:true,disabled:false,growMin:1,growMax:150,growAppend:'',grow:true,disabledClass:'disabled-plain',fieldClass:'',emptyText:'No description provided',enableKeyEvents:true,bubbleEvents:['changeMade'],listeners:{'keyup':function(field,e){if(field.isDirty()){field.fireEvent('changeMade',field.isValid());}},'toggleEditMode':function(editOn){this.setReadOnly(!editOn);if(editOn){this.removeClass('x-bare-field');}else{this.addClass('x-bare-field');}}},style:'width: 100%; background-color: #fcfcfc; border: 1px solid #cccccc;',value:currentDescription});var shortNameField=new Ext.form.TextField({enableKeyEvents:true,allowBlank:false,grow:true,disabledClass:'disabled-plain',readOnly:true,style:'font-weight: bold; font-size:1.4em; height:1.5em; color:black',bubbleEvents:['changeMade'],listeners:{'keyup':function(field,e){if(field.isDirty()){field.fireEvent('changeMade',field.isValid());}},'toggleEditMode':function(editOn){this.setReadOnly(!editOn);if(editOn){this.removeClass('x-bare-field');}else{this.addClass('x-bare-field');}}},value:currentShortName});var nameArea=new Ext.form.TextArea({allowBlank:false,grow:true,growAppend:'',readOnly:true,cls:'disabled-plain',emptyText:'No description provided',enableKeyEvents:true,bubbleEvents:['changeMade'],editOn:false,listeners:{'keyup':function(field,e){if(field.isDirty()){field.fireEvent('changeMade',field.isValid());}},'focus':function(field){if(!field.editOn){this.removeClass('x-form-focus');}},'toggleEditMode':function(editOn){this.setReadOnly(!editOn);this.editOn=editOn;if(editOn){this.removeClass('x-bare-field');}else{this.addClass('x-bare-field');}}},style:'font-weight: bold; font-size:1.3em; width:100%',value:currentName});resetEditableFields=function(){shortNameField.setValue(currentShortName);nameArea.setValue(currentName);descriptionArea.setValue(currentDescription);pubMedIdField.setValue(currentPubMedId);saveBtn.disable();cancelBtn.disable();};var editBtn=new Ext.Button({text:'Start editing',editOn:false,disabled:!this.editable,handler:function(button,event){this.fireEvent('toggleEditMode',true);},scope:this});var cancelBtn=new Ext.Button({text:'Cancel',disabled:true,toolTip:'Reset all fields to saved values',handler:function(){this.fireEvent('toggleEditMode',false);},scope:this});var saveBtn=new Ext.Button({text:'Save',disabled:true,handler:function(){save();this.fireEvent('toggleEditMode',false);},scope:this});var editEEButton=new Ext.Button({text:'More edit options',icon:'/Gemma/images/icons/wrench.png',toolTip:'Go to editor page for this experiment',disabled:!this.editable,handler:function(){window.open('/Gemma/expressionExperiment/editExpressionExperiment.html?id='
+this.experimentDetails.id);},scope:this});var deleteEEButton=new Ext.Button({text:'Delete Experiment',icon:'/Gemma/images/icons/cross.png',toolTip:'Delete the experiment from the system',disabled:!this.editable,handler:function(){manager.deleteExperiment(this.experimentDetails.id,true);},scope:this});this.on('toggleEditMode',function(editOn){this.editModeOn=editOn;editBtn.setText((editOn)?'Editing mode on':'Start editing');editBtn.setDisabled(editOn);nameArea.fireEvent('toggleEditMode',editOn);descriptionArea.fireEvent('toggleEditMode',editOn);shortNameField.fireEvent('toggleEditMode',editOn);pubMedForm.fireEvent('toggleEditMode',editOn);pubMedDisplay.fireEvent('toggleEditMode',editOn);resetEditableFields();saveBtn.setDisabled(!editOn);cancelBtn.setDisabled(!editOn);if(!editOn){resetEditableFields();this.dirtyForm=false;}});this.on('changeMade',function(wasValid){saveBtn.setDisabled(!wasValid);cancelBtn.setDisabled(!wasValid);this.dirtyForm=true;});var basics=new Ext.Panel({ref:'fieldPanel',collapsible:false,bodyBorder:false,frame:false,baseCls:'x-plain-panel',bodyStyle:'padding:10px',defaults:{bodyStyle:'vertical-align:top;font-size:12px;color:black',baseCls:'x-plain-panel',fieldClass:'x-bare-field'},tbar:new Ext.Toolbar({hidden:!this.editable,items:[editBtn,' ',saveBtn,' ',cancelBtn,'-',editEEButton,'-',deleteEEButton]}),items:[shortNameField,nameArea,{layout:'form',defaults:{border:false},items:[{fieldLabel:"Taxon",html:e.taxon},{fieldLabel:'Tags&nbsp;'+taggerurl,items:[tagView]},{fieldLabel:'Experiment Groups',html:this.renderEESets(e.expressionExperimentSets).join(',')},{fieldLabel:'Samples',html:this.renderSamples(e),width:60},{fieldLabel:'Profiles',html:'<div id="downloads"> '
+this.renderProcessedExpressionVectorCount(e)
+'&nbsp;&nbsp;'
+'<i>Downloads:</i> &nbsp;&nbsp; <span class="link"  ext:qtip="Download the tab delimited data" onClick="fetchData(true,'
+e.id
+', \'text\', null, null)">Filtered</span> &nbsp;&nbsp;'
+'<span class="link" ext:qtip="Download the tab delimited data" onClick="fetchData(false,'
+e.id+', \'text\', null, null)">Unfiltered</span> &nbsp;&nbsp;'
+'<a class="helpLink" href="?" onclick="showHelpTip(event, \''
+Gemma.HelpText.WidgetDefaults.ExpressionExperimentDetails.profileDownloadTT
+'\');'+' return false"> <img src="/Gemma/images/help.png" /> </a>'+'</div>',width:400},{fieldLabel:'Platforms',html:this.renderArrayDesigns(e.arrayDesigns),width:480},{fieldLabel:'Coexpr. Links',html:this.renderCoExpressionLinkCount(e),width:80},{fieldLabel:'Differential Expr. Analyses',items:new Gemma.DifferentialExpressionAnalysesSummaryTree({experimentDetails:e,editable:this.editable,listeners:{'analysisDeleted':function(){this.fireEvent('experimentDetailsReloadRequired');},scope:this}})},{fieldLabel:'Status',html:this.renderStatus(e)}]},descriptionArea,{layout:'form',defaults:{border:false},items:[pubMedDisplay,pubMedForm,{fieldLabel:'Created',html:Ext.util.Format.date(e.dateCreated)+' from '+this.renderSourceDatabaseEntry(e)},{html:'The last time a platform associated with this experiment was updated: '
+e.lastArrayDesignUpdateDate,hidden:!e.lastArrayDesignUpdateDate}]}]});this.add(basics);Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){var appScope=this;ExpressionExperimentController.canCurrentUserEditExperiment(this.experimentDetails.id,{callback:function(editable){appScope.adjustForIsEditable(editable);},scope:appScope});},this);Gemma.Application.currentUser.on("logOut",function(){this.adjustForIsEditable(false);},this);this.doLayout();this.fireEvent("ready");},adjustForIsEditable:function(editable){this.fieldPanel.getTopToolbar().setVisible(editable);}});Ext.namespace('Gemma');Gemma.ExpressionExperimentsSummaryPanel=Ext.extend(Ext.Panel,{title:'Summary & Updates',collapsible:true,titleCollapse:true,animCollapse:false,listeners:{render:function(){if(!this.collapsed){this.loadCounts();}},expand:function(){if(!this.countsLoaded){this.loadCounts();}}},stateful:true,stateId:'showAllExpressionExperimentsSummaryGridState',getState:function(){return{collapsed:this.collapsed};},stateEvents:['collapse','expand'],constructor:function(config){Gemma.ExpressionExperimentsSummaryPanel.superclass.constructor.call(this,config);},initComponent:function(){Gemma.ExpressionExperimentsSummaryPanel.superclass.initComponent.call(this);},loadCounts:function(){if(this.getEl()&&!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:"Loading summary ...",msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});}if(this.loadMask){this.loadMask.show();}
ExpressionExperimentController.loadCountsForDataSummaryTable(function(json){json.cmpId=Ext.id(this);this.update(json);this.countsLoaded=true;if(this.loadMask){this.loadMask.hide();}}.createDelegate(this));},tpl:new Ext.XTemplate('<div id="dataSummaryTable">'+'<div class="roundedcornr_box_777249" style="margin-bottom: 15px; padding: 10px; -moz-border-radius: 15px; border-radius: 15px;">'+'<div class="roundedcornr_content_777249">'+'<td align="right" style="padding-right: 10px">'+'<div style="font-size: small; padding-bottom: 5px;">'+'<b>Data Summary</b>'+'<tpl if="drawNewColumn == true && drawUpdatedColumn == true ">'+'<b> and Changes in the Last Week:</b>'+'</tpl>'+'<tpl if="drawNewColumn == true && drawUpdatedColumn == false ">'+'<b> and Additions in the Last Week:</b>'+'</tpl>'+'<tpl if="drawNewColumn == false && drawUpdatedColumn == true ">'+'<b> and Updates in the Last Week:</b>'+'</tpl>'+'</div>'+'</td>'+'<div id="dataSummary" style="margin-left: 15px; margin-right: 15px">'+'<table style="white-space: nowrap">'+'<tr>'+'<td style="padding-right: 10px">'+'<span style="white-space: nowrap">'+'&nbsp; </span>'+'</td>'+'<td style="padding-right: 10px" align="right">'+'Total'+'</td>'+'<tpl if="drawUpdatedColumn == true">'+'<td align="right" style="padding-right: 10px">'+'Updated'+'</td>'+'</tpl>'+'<tpl if="drawNewColumn == true">'+'<td align="right" style="padding-right: 10px">'+'New'+'</td>'+'</tpl>'+'</tr><tr>'+'<td style="padding-right: 10px">'+'<span style="white-space: nowrap"> <!-- for IE --> '+'<b>Expression Experiments:</b></span>'+'</td>'+'<td align="right" style="padding-right: 10px">'+'<b><a href="/Gemma/expressionExperiment/showAllExpressionExperiments.html">{expressionExperimentCount}</b>'+'</td>'+'<td align="right" style="padding-right: 10px">'+'<b><a style="cursor:pointer" onClick="Gemma.ExpressionExperimentsSummaryPanel.handleIdsLink([{updatedExpressionExperimentIds}],\'{cmpId}\');">'+'{updatedExpressionExperimentCount}</a></b>&nbsp;&nbsp;'+'</td>'+'<td align="right">'+'<b><a style="cursor:pointer" onClick="Gemma.ExpressionExperimentsSummaryPanel.handleIdsLink([{newExpressionExperimentIds}],\'{cmpId}\');">'+'{newExpressionExperimentCount}</a></b>&nbsp;'+'</td>'+'</tr>'+'<tpl for="sortedCountsPerTaxon">'+'<tr>'+'<td style="padding-right: 10px">'+'<span style="white-space: nowrap"> <!-- for IE --> &emsp;'+'{taxonName}'+'</td><td align="right" style="padding-right: 10px">'+'<a style="cursor:pointer" onClick="Gemma.ExpressionExperimentsSummaryPanel.handleTaxonLink({taxonId},\'{parent.cmpId}\');">'+'{totalCount}</a>'+'</td><td align="right" style="padding-right: 10px">'+'<b><a style="cursor:pointer" onClick="Gemma.ExpressionExperimentsSummaryPanel.handleIdsLink([{updatedIds}],\'{parent.cmpId}\');">'+'{updatedCount}</a></b>&nbsp;&nbsp;'+'</a>'+'</td><td align="right">'+'<b><a style="cursor:pointer" onClick="Gemma.ExpressionExperimentsSummaryPanel.handleIdsLink([{newIds}],\'{parent.cmpId}\');">'+'{newCount}</a></b>&nbsp;'+'</a>'+'</td>'+'</tr>'+'</tpl>'+'<tr>'+'<td style="padding-right: 10px">'+'<span style="white-space: nowrap"> <!-- for IE -->'+'<b>Platforms:</b>  </span>'+'</td>'+'<td align="right" style="padding-right: 10px">'+'<a href="/Gemma/arrays/showAllArrayDesigns.html">'+'<b>{arrayDesignCount}</b></a>'+'</td>'+'<td align="right" style="padding-right: 10px">'+'<b>{updatedArrayDesignCount}</b>&nbsp;&nbsp;'+'</td>'+'<td align="right">'+'<b>{newArrayDesignCount}</b>&nbsp;'+'</td>'+'</tr>'+'<tr>'+'<td style="padding-right: 10px">'+'<span style="white-space: nowrap"> <!-- for IE --> <b>Assays:</b>'+'</span>'+'</td>'+'<td align="right" style="padding-right: 10px">'+'{bioAssayCount}'+'</td>'+'<td align="right" style="padding-right: 10px">'+'&nbsp;&nbsp;'+'</td>'+'<td align="right">'+'<b>{newBioAssayCount}</b>&nbsp;'+'</td>'+'</tr>'+'</table>'+'</div>'+'</div>'+'</div>'+'</div>')});Gemma.ExpressionExperimentsSummaryPanel.handleIdsLink=function(ids,cmpId){Ext.getCmp(cmpId).fireEvent('showExperimentsByIds',ids);};Gemma.ExpressionExperimentsSummaryPanel.handleTaxonLink=function(id,cmpId){Ext.getCmp(cmpId).fireEvent('showExperimentsByTaxon',id);};Ext.namespace('Gemma');Gemma.UserSessionDatasetGroupStore=function(config){this.record=Ext.data.Record.create([{name:"id",type:"int"},{name:"name",type:"string"},{name:"description",type:"string"},{name:"numExperiments",type:"int"},{name:"expressionExperimentIds"},{name:"taxonId",type:"int"},{name:"taxonName"},{name:"modifiable",type:'boolean'},{name:"publik",type:'boolean'},{name:"shared",type:'boolean'},{name:"currentUserHasWritePermission",type:'boolean'},{name:"session",type:'boolean'}]);this.reader=new Ext.data.ListRangeReader({},this.record);Gemma.UserSessionDatasetGroupStore.superclass.constructor.call(this,config);};Ext.extend(Gemma.UserSessionDatasetGroupStore,Ext.data.Store,{autoLoad:true,autoSave:false,selected:null,proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:ExpressionExperimentSetController.loadAllUserAndSessionGroups},create:{dwrFunction:ExpressionExperimentSetController.addUserAndSessionGroups},update:{dwrFunction:ExpressionExperimentSetController.updateUserAndSessionGroups},destroy:{dwrFunction:ExpressionExperimentSetController.removeUserAndSessionGroups}}}),writer:new Ext.data.JsonWriter({writeAllFields:true}),getSelected:function(){return this.selected;},setSelected:function(rec){this.previousSelection=this.getSelected();if(rec){this.selected=rec;}},getPreviousSelection:function(){return this.previousSelection;},clearSelected:function(){this.selected=null;delete this.selected;},listeners:{exception:function(proxy,type,action,options,res,arg){if(type==='remote'){Ext.Msg.show({title:'Error',msg:res.message,icon:Ext.MessageBox.ERROR});}else{Ext.Msg.show({title:'Error',msg:arg.message?arg.message:arg,icon:Ext.MessageBox.ERROR});}}}});Ext.namespace('Gemma');Gemma.DatasetGroupCombo=Ext.extend(Gemma.StatefulRemoteCombo,{displayField:'name',valueField:'id',editable:false,loadingText:Gemma.StatusText.Loading.generic,listWidth:250,triggerAction:'all',forceSelection:true,lastQuery:'',emptyText:'Select scope',suppressFiltering:false,stateId:'dataset-group-combo-state',filterByTaxon:function(taxonId){if(this.suppressFiltering){return;}
if(taxonId===-1){this.store.clearFilter();return;}
this.doQueryBy(function(record,id){if(!record.get("taxonId")){return true;}else if(taxonId===record.get("taxonId")){return true;}else{return false;}});if(this.store.getSelected()&&this.store.getSelected().get("taxonId")!==taxonId){this.setValue("");}},doQueryBy:function(fn){this.store.clearFilter();this.store.filterBy(fn,this);this.onLoad();},selectByName:function(name){if(name===undefined||!name){return null;}
this.store.clearFilter(false);this.suppressFiltering=true;var index=this.store.findBy(function(record,i){return record.get("name").toLowerCase()===name.toLowerCase();});if(index>=0){var rec=this.store.getAt(index);this.setValue(rec.get("id"));this.store.setSelected(rec);this.suppressFiltering=false;this.filterByTaxon(rec.get('taxonId'));this.fireEvent("select",this,rec,index);return rec;}else{return null;}},initComponent:function(){if(!this.store){this.store=new Gemma.DatasetGroupStore();}
this.tpl=new Ext.XTemplate('<tpl for="."><div ext:qtip="{description} ({numExperiments} members)" class="x-combo-list-item">{name}{[ values.taxon ? " (" + values.taxon.scientificName + ")" : "" ]}</div></tpl>');this.tpl.compile();Gemma.DatasetGroupCombo.superclass.initComponent.call(this);if(this.allExperiments){this.store.load({params:[],add:false,callback:function(){var allExperimentsRecord=new this.recordType({id:'-1',name:'All Experiments',description:'All expression experiments in the database.',numExperiments:-10,currentUserHasWritePermission:false},0);this.insert(0,allExperimentsRecord);}});}else{this.store.load({params:[],add:false});}
this.on("select",function(cb,rec,index){this.store.setSelected(rec);});}});Ext.namespace('Gemma');Gemma.ExpressionExperimentMembersGrid=Ext.extend(Ext.grid.GridPanel,{collapsible:false,readMethod:ExpressionExperimentController.loadExpressionExperiments.createDelegate(this,[],true),autoExpandColumn:'name',stripeRows:true,changeMade:false,editable:true,stateful:false,layout:'fit',viewConfig:{forceFit:true},queryText:'',addExperiments:true,taxonId:null,allowSaveToSession:true,allowAdditions:true,allowRemovals:true,sortableColumnsView:false,hideOkCancel:false,showSeparateSaveAs:false,enableSaveOnlyAfterModification:false,setSelectedExpressionExperimentValueObject:function(eesvo){this.selectedExpressionExperimentValueObject=eesvo;},getSelectedExpressionExperimentSetValueObject:function(){return this.selectedExpressionExperimentValueObject;},getSelectedExperimentSet:function(){return this.getSelectedExpressionExperimentSetValueObject();},loadSetValueObject:function(eesvo,callback,args){this.loadExperimentSetValueObject(eesvo,callback,args);},loadExperimentSetValueObject:function(eesvo,callback,args){this.setTitle("Edit your experiment selection, from group: \""+eesvo.name+"\"");this.setSelectedExpressionExperimentValueObject(eesvo);this.loadExperiments(eesvo.expressionExperimentIds,callback,args);},loadEntities:function(eeIds,callback,args){this.loadExperiments(eeIds,callback,args);},loadExperiments:function(eeIds,callback,args){if(!eeIds||eeIds.length===0){return;}
ExpressionExperimentController.loadExpressionExperiments(eeIds,function(ees){var eeData=[];var i;var taxonId=(ees[0])?ees[0].taxonId:-1;for(i=0;i<ees.length;++i){eeData.push([ees[i].id,ees[i].shortName,ees[i].name,ees[i].arrayDesignCount,ees[i].bioAssayCount]);if(taxonId!=ees[i].taxonId){var taxonId=-1;}}
if(taxonId!=-1){this.setTaxonId(taxonId);}
this.getStore().loadData(eeData);if(callback){callback(args);}
this.fireEvent('experimentsLoaded');}.createDelegate(this));},addExperiments:function(eeSearchResult){if(!eeSearchResult){return;}
var id=eeSearchResult.id;var name=eeSearchResult.name;var eeIdsToAdd=[];eeIdsToAdd=eeSearchResult.memberIds;if(!eeIdsToAdd||eeIdsToAdd===null||eeIdsToAdd.length===0){return;}
ExpressionExperimentController.loadExpressionExperiments(eeIdsToAdd,function(ees){for(var j=0;j<ees.size();j++){if(this.getStore().find("id",ees[j].id)<0){var Constructor=this.store.recordType;var record=new Constructor(ees[j]);this.getStore().add([record]);}}}.createDelegate(this));},setTaxonId:function(taxonId){this.taxonId=taxonId;if(this.getTopToolbar()){Ext.apply(this.getTopToolbar().eeCombo,{taxonId:taxonId});}},initComponent:function(){var extraButtons=[];if(this.allowRemovals){var removeSelectedBtn=new Ext.Button({text:'Remove Selected',icon:"/Gemma/images/icons/cross.png",hidden:true,handler:function(){var records=this.getSelectionModel().getSelections();this.getStore().remove(records);removeSelectedBtn.setVisible(false);},scope:this});extraButtons=[removeSelectedBtn];this.getSelectionModel().on('rowselect',function(selModel){removeSelectedBtn.setVisible(selModel.getCount()>1);},this);}
Ext.apply(this,{tbar:new Gemma.ExperimentAndGroupAdderToolbar({extraButtons:extraButtons,ref:'eeAdderTBar',eeGrid:this,allowAdditions:this.allowAdditions})});var columns=[];if(this.sortableColumnsView){Ext.apply(this,{hideHeaders:false});columns.push({header:"Short Name",dataIndex:"shortName",renderer:function(value,metadata,record,row,col,ds){return String.format("<a target='_blank' href='/Gemma/expressionExperiment/showExpressionExperiment.html?id={0}'>{1}</a>",record.data.id,record.data.shortName);},sortable:true,width:40});columns.push({id:'name',header:"Name",dataIndex:"name",sortable:true,width:150});}else{columns.push({id:'shortName',header:"Dataset",dataIndex:"shortName",renderer:function(value,metadata,record,row,col,ds){return String.format("<a target='_blank' href='/Gemma/expressionExperiment/showExpressionExperiment.html?id={0}'>{1}</a>"+"<br><span style='font-color:grey;white-space:normal !important;'>{2}</span> ",record.data.id,record.data.shortName,record.data.name);},sortable:true});}
if(this.allowRemovals){this.action=new Ext.ux.grid.RowActions({header:'Remove',keepSelection:true,tooltip:'Remove experiment',actions:[{iconCls:'icon-cross',tooltip:'Remove experiment'}],callbacks:{'icon-cross':function(grid,record,action,row,col){}}});this.action.on({action:function(grid,record,action,row,col){if(action==='icon-cross'){this.changeMade=true;grid.getStore().remove(record);}},beforeaction:function(grid,record,action,row,col){if(grid.getStore().getCount()==1&&action==='icon-cross'){return false;}
return true;}});columns.push(this.action);Ext.apply(this,{plugins:[this.action]});}
Ext.apply(this,{colModel:new Ext.grid.ColumnModel({defaults:{sortable:true},columns:columns})});this.saveAsButton=new Ext.Button({text:"Save As",handler:this.saveAsBtnHandler,qtip:'Save your selection as a new set.',scope:this,disabled:!this.showSeparateSaveAs,hidden:!this.showSeparateSaveAs});this.saveButton=new Ext.Button({text:"Save...",handler:this.saveBtnHandler,qtip:'Save your selection before returning to search.',scope:this,disabled:this.enableSaveOnlyAfterModification});this.okButton=new Ext.Button({text:"OK",handler:this.okHandler,scope:this,disabled:(!this.allowSaveToSession||this.hideOkCancel),hidden:(!this.allowSaveToSession||this.hideOkCancel)});this.cancelButton=new Ext.Button({text:"Cancel",handler:this.cancel,scope:this,hidden:(this.allowSaveToSession||this.hideOkCancel),disabled:(this.allowSaveToSession||this.hideOkCancel)});this.exportButton=new Ext.Button({icon:"/Gemma/images/download.gif",tooltip:"Export to text",handler:this.exportToTxt,scope:this,disabled:false});Ext.apply(this,{buttonAlign:'left',buttons:[this.exportButton,'->',this.saveButton,this.saveAsButton,this.okButton,this.cancelButton]});this.saveButton.show();Ext.apply(this,{store:new Ext.data.SimpleStore({fields:[{name:"id",type:"int"},{name:"shortName",type:"string"},{name:"name",type:"string"},{name:"arrayDesignCount",type:"int"},{name:"bioAssayCount",type:"int"}],sortInfo:{field:'shortName',direction:'ASC'}})});this.ajaxLogin=null;this.ajaxRegister=null;Gemma.ExpressionExperimentMembersGrid.superclass.initComponent.call(this);this.on('doneModification',function(){this.changesMade=false;});this.getStore().on("remove",function(){this.changesMade=true;this.saveButton.enable();},this);this.getStore().on("add",function(){this.changesMade=true;this.saveButton.enable();},this);this.getStore().on("load",function(store,records,options){this.doLayout.createDelegate(this);},this);if(this.selectedExpressionExperimentSetValueObject){this.loadExperimentSet(this.selectedExpressionExperimentSetValueObject);}else if(this.eeids){this.loadExperiments(this.eeids);}
this.on('experimentsLoaded',function(){if(this.getSelectedExperimentSet()){ExpressionExperimentSetController.canCurrentUserEditGroup(this.getSelectedExperimentSet(),function(response){var dataMsg=Ext.util.JSON.decode(response);if(!dataMsg.userCanEditGroup||!dataMsg.groupIsDBBacked){if(this.showSeparateSaveAs){this.saveButton.hide().disable();}else{this.saveButton.setText("Save As");}}else{this.saveButton.setText("Save...");}}.createDelegate(this));}});},showLoadMask:function(){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:"Loading experiments ..."});this.loadMask.show();},hideLoadMask:function(){if(this.loadMask){this.loadMask.hide();}},formatEE:function(value,metadata,record,row,col,ds){var eeTemplate=new Ext.XTemplate('<tpl for="."><a target="_blank" title="{name}" href="/Gemma/expressionExperiment/showExpressionExperiment.html?id=','{[values.sourceExperiment ? values.sourceExperiment : values.id]}"',' ext:qtip="{name}">{shortName}</a></tpl>');return eeTemplate.apply(record.data);},getEEIds:function(){var result=[];this.store.each(function(rec){result.push(rec.get("id"));});return result;},isEditable:function(){return this.editable;},setEditable:function(b){this.editable=b;},cancel:function(){this.fireEvent('doneModification');},createDetails:function(){if(!this.getSelectedExperimentSet()&&(!this.groupName||this.groupName===null||this.groupName==='')){this.newGroupName="Experiment group created: "+(new Date()).toString();}else{var groupName=(this.getSelectedExperimentSet()&&this.getSelectedExperimentSet().name)?this.getSelectedExperimentSet().name:this.groupName;var currentTime=new Date();var hours=currentTime.getHours();var minutes=currentTime.getMinutes();if(minutes<10){minutes="0"+minutes;}
var time='('+hours+':'+minutes+') ';this.newGroupName=time+"Custom Experiment Group";}
if(!this.newGroupDescription||this.newGroupDescription===null){this.newGroupDescription="Temporary experiment group created "+(new Date()).toString();}},login:function(){window.open("/Gemma/login.jsp");},okHandler:function(){if(this.changesMade&&this.allowSaveToSession){this.prepareAndSaveToSession();}else{this.cancel();}},prepareAndSaveToSession:function(){if(this.getStore().getRange()&&this.getStore().getRange().length===0){Ext.Msg.alert('Cannot use empty set','You are trying to use an empty set. '+'Please add some experiments and try again.');return;}
this.createDetails();this.saveToSession();},exportToTxt:function(){var downloadLink=String.format("/Gemma/expressionExperiment/downloadExpressionExperimentList.html?e={0}",this.getEEIds());window.open(downloadLink);},launchRegisterWidget:function(){if(this.ajaxRegister==null){var otherOpenRegister=Ext.getCmp('_ajaxRegister');if(otherOpenRegister!=null){otherOpenRegister.fireEvent("register_cancelled");}
this.ajaxRegister=new Gemma.AjaxRegister({name:'ajaxRegister',closable:false,title:'Please Register'});this.ajaxRegister.on("register_cancelled",function(){this.ajaxRegister.destroy();this.ajaxRegister=null;this.getEl().unmask();},this);this.ajaxRegister.on("register_success",function(){this.ajaxRegister.destroy();this.ajaxRegister=null;this.getEl().unmask();},this);}
this.getEl().mask();this.ajaxRegister.show();},saveBtnHandler:function(){SignupController.loginCheck({callback:function(result){if(result.loggedIn){this.loggedInSaveHandler();}
else{this.promptLoginForSave('save');}}.createDelegate(this)});},saveAsBtnHandler:function(){SignupController.loginCheck({callback:function(result){if(result.loggedIn){this.createDetails();this.saveAsHandler();}
else{this.promptLoginForSave('saveAs');}}.createDelegate(this)});},promptLoginForSave:function(save){var otherOpenLogin=Ext.getCmp('_ajaxLogin');if(otherOpenLogin!=null){otherOpenLogin.fireEvent("login_cancelled");}
Gemma.AjaxLogin.showLoginWindowFn();Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){Ext.getBody().unmask();if(save==='save'){this.saveBtnHandler();}else{this.saveAsHandler();}},this);},loggedInSaveHandler:function(){if(this.getStore().getRange()&&this.getStore().getRange().length===0){Ext.Msg.alert('Cannot save empty set','You are trying to save an empty set. '+'Please add some experiments and try again.');return;}
this.createDetails();if(this.getSelectedExperimentSet()){ExpressionExperimentSetController.canCurrentUserEditGroup(this.getSelectedExperimentSet(),function(response){var dataMsg=Ext.util.JSON.decode(response);if(dataMsg.userCanEditGroup&&dataMsg.groupIsDBBacked){Ext.Msg.show({title:'Save Changes?',msg:'You have edited an <b>existing group</b>, '+'how would you like to save your changes?<br>',buttons:{ok:'Save over',yes:'Save as...',no:'Cancel'},fn:function(btnId){if(btnId==='ok'){this.saveHandler();}else if(btnId==='yes'){this.saveAsHandler();}else if(btnId==='no'){}},scope:this,icon:Ext.MessageBox.QUESTION});}else{this.saveAsHandler();}}.createDelegate(this));}else{this.saveAsHandler();}},saveAsHandler:function(){var detailsWin=new Gemma.CreateSetDetailsWindow({title:'Provide or edit experiment group details'});detailsWin.lockInTaxonId(this.taxonId,true);detailsWin.on("hide",function(args){this.close();});detailsWin.on("commit",function(args){this.newGroupName=args.name;this.newGroupDescription=args.description;this.newGroupPublik=args.publik;this.newGroupTaxon=args.taxon;this.createInDatabase();},this);detailsWin.name=this.groupName;detailsWin.description='Edited search results for: "'+this.groupName+'". Created: '+
(new Date()).toString();detailsWin.show();},saveHandler:function(){this.updateDatabase();},saveToSession:function(){var editedGroup;editedGroup=new SessionBoundExpressionExperimentSetValueObject();editedGroup.id=null;editedGroup.name=this.newGroupName;editedGroup.description=this.newGroupDescription;editedGroup.expressionExperimentIds=this.getEEIds();editedGroup.taxonId=this.taxonId;editedGroup.numExperiments=this.getEEIds().length;editedGroup.modified=true;editedGroup.publik=false;ExpressionExperimentSetController.addSessionGroups([editedGroup],true,function(newValueObjects){if(newValueObjects===null||newValueObjects.length===0){return;}else{this.fireEvent('experimentListModified',newValueObjects);this.fireEvent('doneModification');}}.createDelegate(this));},createInDatabase:function(){var editedGroup;if(this.getSelectedExperimentSet()===null||typeof this.getSelectedExperimentSet()==='undefined'||!(this.getSelectedExperimentSet()instanceof DatabaseBackedExpressionExperimentSetValueObject)){editedGroup=new DatabaseBackedExpressionExperimentSetValueObject();}
else{editedGroup=Object.clone(this.getSelectedExperimentSet());}
editedGroup.id=null;editedGroup.name=this.newGroupName;editedGroup.description=this.newGroupDescription;editedGroup.expressionExperimentIds=this.getEEIds();editedGroup.numExperiments=this.getEEIds().length;editedGroup.publik=this.newGroupPublik;editedGroup.taxonId=(this.newGroupTaxon)?this.newGroupTaxon.id:this.taxonId;ExpressionExperimentSetController.create([editedGroup],function(newValueObjects){if(newValueObjects===null||newValueObjects.length===0){return;}
else{Ext.MessageBox.alert('Save Successful','Group saved',function(){this.fireEvent('experimentListModified',newValueObjects);this.fireEvent('experimentListCreated',newValueObjects[0]);this.fireEvent('doneModification');}.createDelegate(this));}}.createDelegate(this));this.fireEvent('doneModification');},updateDatabase:function(){var id=this.getSelectedExperimentSet().id;var eeIds=this.getEEIds();ExpressionExperimentSetController.updateMembers(id,eeIds,function(msg){Ext.MessageBox.alert('Save Successful','Group saved',function(){this.getSelectedExperimentSet().expressionExperimentIds=eeIds;this.fireEvent('experimentListModified',[this.getSelectedExperimentSet()]);this.fireEvent('experimentListSavedOver');this.fireEvent('doneModification');}.createDelegate(this));}.createDelegate(this));},filter:function(){var text=Ext.getCmp('ee-search-in-grid').getValue();var value;if(text&&text.length>1){value=new RegExp(Ext.escapeRe(text),'i');}
return function(r,id){if(!value){return true;}else{var exshortname=(r.get("shortName"));var exname=(r.get("name"));if(value.test(exshortname)||value.test(exname)){return true;}}
return false;};}});Gemma.ExperimentAndGroupAdderToolbar=Ext.extend(Ext.Toolbar,{extraButtons:[],initComponent:function(){Gemma.ExperimentAndGroupAdderToolbar.superclass.initComponent.call(this);this.searchTextField=new Ext.form.TextField({ref:'eesearchInGrid',id:'ee-search-in-grid',enableKeyEvents:true,emptyText:'Find experiment in results',listeners:{"keyup":{fn:function(button,keyev){this.ownerCt.getStore().filterBy(this.ownerCt.filter(),this,0);},scope:this,delay:400}}});this.eeCombo=new Gemma.ExperimentAndExperimentGroupCombo({typeAhead:false,width:300,emptyText:'Search for an experiment or group to add',listeners:{'select':{fn:function(combo,rec,index){this.addBtn.enable();if(rec.data.size===1){this.addBtn.setText('Add 1 experiment');}
else{this.addBtn.setText('Add '+rec.data.size+' experiments');}}.createDelegate(this)}}});this.addBtn=new Ext.Toolbar.Button({icon:"/Gemma/images/icons/add.png",cls:"x-btn-text-icon",tooltip:"Add selected experiment(s) to the list",text:'Add',disabled:true,handler:function(){this.eeGrid.addExperiments(this.eeCombo.getExpressionExperimentGroup());this.eeCombo.reset();this.addBtn.setText('Add');this.addBtn.disable();}.createDelegate(this)});},afterRender:function(c,l){Gemma.ExperimentAndGroupAdderToolbar.superclass.afterRender.call(this,c,l);this.add(this.searchTextField,new Ext.Spacer({width:10}));if(this.allowAdditions){this.add(this.eeCombo,this.addBtn);}
this.addButton(this.extraButtons);}});Ext.namespace('Gemma');Gemma.ExpressionExperimentSetPage=Ext.extend(Ext.TabPanel,{defaults:{autoScroll:true},deferredRender:true,listeners:{'tabchange':function(tabPanel,newTab){newTab.fireEvent('tabChanged');},'beforetabchange':function(tabPanel,newTab,currTab){if(currTab){return currTab.fireEvent('leavingTab');}
return true;}},invalidIdHandler:function(msg){this.items.add(new Ext.Panel({html:"Error in loading experiment group due to invalid id. "+msg}));},initComponent:function(){if(!this.eeSetId&&document.URL.indexOf("?")>-1&&(document.URL.indexOf("id=")>-1)){var subsetDetails=document.URL.substr(document.URL.indexOf("?")+1);var param=Ext.urlDecode(subsetDetails);if(param.id){var ids=param.id.split(',');if(ids.length===1){this.eeSetId=ids[0];}else{this.invalidIdHandler("Id was: "+param.id);Gemma.ExpressionExperimentSetPage.superclass.initComponent.call(this);return;}}else{this.invalidIdHandler("Missing \"id\" parameter.");Gemma.ExpressionExperimentSetPage.superclass.initComponent.call(this);return;}}
Gemma.ExpressionExperimentSetPage.superclass.initComponent.call(this);this.on('render',function(){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:"Loading ...",msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});}
this.loadMask.show();if(this.eeSetId){ExpressionExperimentSetController.load(this.eeSetId,this.eeSetCb.createDelegate(this));}else if(this.eeSetName){ExpressionExperimentSetController.findByName(this.eeSetName,this.eeSetCb.createDelegate(this));}else{}});},isAdmin:Ext.get("hasAdmin")!==null&&Ext.get("hasAdmin").getValue()=='true',eeSetCb:function(experimentSetVO){this.experimentSet=experimentSetVO;this.editable=experimentSetVO.currentUserHasWritePermission;this.loadMask.hide();this.add(new Gemma.ExpressionExperimentSetSummary({title:'Summary',experimentSet:experimentSetVO,editable:this.editable,admin:this.isAdmin}));this.adjustForIsAdmin(this.editable);Gemma.Application.currentUser.on("logIn",function(userName){var appScope=this;ExpressionExperimentController.canCurrentUserEditGroup(experimentDetails.id,{callback:function(editable){appScope.adjustForIsAdmin(editable);},scope:appScope});},this);Gemma.Application.currentUser.on("logOut",function(){this.isAdmin=false;this.adjustForIsAdmin(false);},this);this.setActiveTab(0);},adjustForIsAdmin:function(isEditable){}});Ext.namespace('Gemma');Ext.BLANK_IMAGE_URL='/Gemma/images/default/s.gif';Gemma.ExpressionExperimentTools=Ext.extend(Ext.Panel,{experimentDetails:null,border:false,tbar:new Ext.Toolbar(),defaultType:'box',defaults:{border:false},padding:10,initComponent:function(){Gemma.ExpressionExperimentTools.superclass.initComponent.call(this);var manager=new Gemma.EEManager({editable:this.editable});manager.on('reportUpdated',function(){this.fireEvent('reloadNeeded');},this);var refreshButton=new Ext.Button({text:'Refresh',icon:'/Gemma/images/icons/arrow_refresh_small.png',tooltip:'Refresh statistics (not including the differential expression ones)',handler:function(){manager.updateEEReport(this.experimentDetails.id);},scope:this});this.getTopToolbar().addButton(refreshButton);this.add({html:'<h4>Preprocessing:<br></h4>'});var missingValueInfo=this.missingValueAnalysisPanelRenderer(this.experimentDetails,manager);this.add(missingValueInfo);var processedVectorInfo=this.processedVectorCreatePanelRenderer(this.experimentDetails,manager);this.add(processedVectorInfo);var pcaInfo=this.pcaPanelRenderer(this.experimentDetails,manager);this.add(pcaInfo);var batchInfo=this.batchPanelRenderer(this.experimentDetails,manager);this.add(batchInfo);this.add({html:'&nbsp;<h4>Analyses:<br></h4>'});var differentialAnalysisInfo=this.differentialAnalysisPanelRenderer(this.experimentDetails,manager);this.add(differentialAnalysisInfo);var linkAnalysisInfo=this.linkAnalysisPanelRenderer(this.experimentDetails,manager);this.add(linkAnalysisInfo);},linkAnalysisPanelRenderer:function(ee,manager){var panel=new Ext.Panel({layout:'hbox',defaults:{border:false,padding:2},items:[{html:'Link Analysis: '}]});var id=ee.id;var runBtn=new Ext.Button({icon:'/Gemma/images/icons/control_play_blue.png',tooltip:'missing value computation',handler:manager.doLinks.createDelegate(this,[id]),scope:this,cls:'transparent-btn'});if(ee.dateLinkAnalysis){var type=ee.linkAnalysisEventType;var color="#000";var suggestRun=true;var qtip='ext:qtip="Analysis was OK"';if(type=='FailedLinkAnalysisEventImpl'){color='red';qtip='ext:qtip="Analysis failed"';}else if(type=='TooSmallDatasetLinkAnalysisEventImpl'){color='#CCC';qtip='ext:qtip="Analysis was too small"';suggestRun=false;}
panel.add({html:'<span style="color:'+color+';" '+qtip+'>'
+Ext.util.Format.date(ee.dateLinkAnalysis,'y/M/d')});if(suggestRun){panel.add(runBtn);}
return panel;}else{panel.add({html:'<span style="color:#3A3;">Needed</span>&nbsp;'});panel.add(runBtn);return panel;}},missingValueAnalysisPanelRenderer:function(ee,manager){var panel=new Ext.Panel({layout:'hbox',defaults:{border:false,padding:2},items:[{html:'Missing values: '}]});var id=ee.id;var runBtn=new Ext.Button({icon:'/Gemma/images/icons/control_play_blue.png',tooltip:'missing value computation',handler:manager.doMissingValues.createDelegate(this,[id]),scope:this,cls:'transparent-btn'});if(ee.technologyType!='ONECOLOR'&&ee.technologyType!='NONE'&&ee.hasEitherIntensity){if(ee.dateMissingValueAnalysis){var type=ee.missingValueAnalysisEventType;var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedMissingValueAnalysisEventImpl'){color='red';qtip='ext:qtip="Failed"';}
panel.add({html:'<span style="color:'+color+';" '+qtip+'>'
+Ext.util.Format.date(ee.dateMissingValueAnalysis,'y/M/d')+'&nbsp;'});if(suggestRun){panel.add(runBtn);}
return panel;}else{panel.add({html:'<span style="color:#3A3;">Needed</span>&nbsp;'});panel.add(runBtn);return panel;}}else{panel.add({html:'<span ext:qtip="Only relevant for two-channel microarray studies with intensity data available." style="color:#CCF;">NA</span>'});return panel;}},processedVectorCreatePanelRenderer:function(ee,manager){var panel=new Ext.Panel({layout:'hbox',defaults:{border:false,padding:2},items:[{html:'Processed Vector Computation: '}]});var id=ee.id;var runBtn=new Ext.Button({icon:'/Gemma/images/icons/control_play_blue.png',tooltip:'processed vector computation',handler:manager.doProcessedVectors.createDelegate(this,[id]),scope:this,cls:'transparent-btn'});if(ee.dateProcessedDataVectorComputation){var type=ee.processedDataVectorComputationEventType;var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedProcessedVectorComputationEventImpl'){color='red';qtip='ext:qtip="Failed"';}
panel.add({html:'<span style="color:'+color+';" '+qtip+'>'
+Ext.util.Format.date(ee.dateProcessedDataVectorComputation,'y/M/d')+'&nbsp;'});if(suggestRun){panel.add(runBtn);}
return panel;}else{panel.add({html:'<span style="color:#3A3;">Needed</span>&nbsp;'});panel.add(runBtn);return panel;}},differentialAnalysisPanelRenderer:function(ee,manager){var panel=new Ext.Panel({layout:'hbox',defaults:{border:false,padding:2},items:[{html:'Differential Expression Analysis: '}]});var id=ee.id;var runBtn=new Ext.Button({icon:'/Gemma/images/icons/control_play_blue.png',tooltip:'differential expression analysis',handler:manager.doDifferential.createDelegate(this,[id]),scope:this,cls:'transparent-btn'});if(ee.numPopulatedFactors>0){if(ee.dateDifferentialAnalysis){var type=ee.differentialAnalysisEventType;var color="#000";var suggestRun=true;var qtip='ext:qtip="OK"';if(type=='FailedDifferentialExpressionAnalysisEventImpl'){color='red';qtip='ext:qtip="Failed"';}
panel.add({html:'<span style="color:'+color+';" '+qtip+'>'
+Ext.util.Format.date(ee.dateDifferentialAnalysis,'y/M/d')+'&nbsp;'});if(suggestRun){panel.add(runBtn);}
return panel;}else{panel.add({html:'<span style="color:#3A3;">Needed</span>&nbsp;'});panel.add(runBtn);return panel;}}else{panel.add({html:'<span style="color:#CCF;">NA</span>'});return panel;}},renderProcessedExpressionVectorCount:function(e){return e.processedExpressionVectorCount?e.processedExpressionVectorCount:' [count not available] ';},pcaPanelRenderer:function(ee,manager){var panel=new Ext.Panel({layout:'hbox',defaults:{border:false,padding:2},items:[{html:'Principal Component Analysis: '}]});var id=ee.id;var runBtn=new Ext.Button({icon:'/Gemma/images/icons/control_play_blue.png',tooltip:'principal component analysis',handler:manager.doPca.createDelegate(this,[id,true]),scope:this,cls:'transparent-btn'});if(ee.datePcaAnalysis){var type=ee.pcaAnalysisEventType;var color="#000";var qtip='ext:qtip="OK"';var suggestRun=true;if(type=='FailedPCAAnalysisEventImpl'){color='red';qtip='ext:qtip="Failed"';}
panel.add({html:'<span style="color:'+color+';" '+qtip+'>'
+Ext.util.Format.date(ee.datePcaAnalysis,'y/M/d')+'&nbsp;'});}else
panel.add({html:'<span style="color:#3A3;">Needed</span>&nbsp;'});panel.add(runBtn);return panel;},batchPanelRenderer:function(ee,manager){var panel=new Ext.Panel({layout:'hbox',defaults:{border:false,padding:2},items:[{html:'Batch Information: '}]});var id=ee.id;var hasBatchInformation=ee.hasBatchInformation;var technologyType=ee.technologyType;var runBtn=new Ext.Button({icon:'/Gemma/images/icons/control_play_blue.png',tooltip:'batch information',handler:manager.doBatchInfoFetch.createDelegate(this,[id]),scope:this,cls:'transparent-btn'});if(technologyType=='NONE'){panel.add({html:'<span style="color:#CCF; "ext:qtip="Not microarray data">'
+'NA'+'</span>&nbsp;'});return panel;};if(ee.dateBatchFetch){var type=ee.batchFetchEventType;var color="#000";var qtip='ext:qtip="OK"';if(type=='FailedBatchInformationFetchingEventImpl'){color='red';qtip='ext:qtip="Failed"';}else if(type=='FailedBatchInformationMissingEventImpl'){color='#CCC';qtip='ext:qtip="Raw data files not available from source"';}
panel.add({html:'<span style="color:'+color+';" '+qtip+'>'
+Ext.util.Format.date(ee.dateBatchFetch,'y/M/d')+'&nbsp;'});panel.add(runBtn);}else if(hasBatchInformation){panel.add({html:'<span style="color:#000;">Provided</span>'});}else if(ee.externalDatabase=="GEO"||ee.externalDatabase=="ArrayExpress"){panel.add({html:'<span style="color:#3A3;">Needed</span>&nbsp;'});panel.add(runBtn);}else panel.add({html:'<span style="color:#CCF; "'
+'ext:qtip="Add batch information by creating a \'batch\' experiment factor">'
+'NA'+'</span>&nbsp;'});return panel;}});Ext.namespace('Gemma');Gemma.DatasetSearchToolBar=Ext.extend(Ext.Toolbar,{taxonSearch:true,initComponent:function(){Gemma.DatasetSearchToolBar.superclass.initComponent.call(this);this.addEvents("after.tbsearch");},setTaxon:function(taxon){this.taxonCombo.setValue(taxon);this.eeSearchField.setTaxon(taxon);},filterTaxon:function(taxon){this.taxonCombo.filter(taxon);},afterRender:function(){Gemma.DatasetSearchToolBar.superclass.afterRender.call(this);if(this.taxonSearch){this.taxonCombo=new Gemma.TaxonCombo({emptyText:'Select a taxon',isDisplayTaxonWithDatasets:true,width:110,listeners:{'select':{fn:function(combo,record,index){var taxon=record.data;this.eeSearchField.setTaxon(taxon);},scope:this},'ready':{fn:function(taxon){this.eeSearchField.setTaxon(taxon);},scope:this}}});this.add(this.taxonCombo);this.addSpacer();}
this.eeSearchField=new Gemma.DatasetSearchField({fieldLabel:"Experiment keywords",filtering:this.filtering,listeners:{'beforesearch':{fn:function(){if(this.grid){this.grid.setTitle("Dataset locator");}}.createDelegate(this)},'aftersearch':{fn:function(field,results){this.fireEvent('after.tbsearch',results);if(this.grid){this.grid.setTitle("Dataset locator - "+results.length+" found");this.grid.getStore().load({params:[results]});}}.createDelegate(this)}}});this.addField(this.eeSearchField);},updateDatasets:function(){if(this.eeSearchField.filtering){this.eeSearchField.setFilterFrom(this.container.getEEIds());}}});Gemma.DataSetSearchAndGrabToolbar=Ext.extend(Gemma.DatasetSearchToolBar,{initComponent:function(){Gemma.DataSetSearchAndGrabToolbar.superclass.initComponent.call(this);this.addEvents("grabbed");},addSelections:function(sels){if(sels.length>0){this.targetGrid.getStore().insert(0,sels);this.grid.getStore().remove(sels);}},afterRender:function(){Gemma.DataSetSearchAndGrabToolbar.superclass.afterRender.call(this);var grabber=new Ext.Button({id:'grabber',disabled:false,text:"Grab >>",tooltip:"Transfer selected items to the set",handler:function(button,ev){var selmo=this.grid.getSelectionModel();var sels=selmo.getSelections();this.addSelections(sels);}.createDelegate(this),scope:this});var allGrabber=new Ext.Button({id:'all-grabber',disabled:false,text:"Grab All",tooltip:"Transfer all the results to the set",handler:function(button,ev){var sels=this.grid.getStore().getRange();this.addSelections(sels);},scope:this});this.addSpacer();this.addSpacer();this.addSeparator();this.addSpacer();this.addSpacer();this.add(allGrabber);this.addSeparator();this.add(grabber);this.targetGrid.getStore().on("add",function(store,recs,index){this.targetGrid.getView().refresh();this.fireEvent("grabbed",recs);}.createDelegate(this));}});Ext.namespace('Gemma');Gemma.ExperimentPagingStore=Ext.extend(Ext.data.Store,{constructor:function(config){Gemma.ExperimentPagingStore.superclass.constructor.call(this,config);},initComponent:function(){Gemma.ExperimentPagingStore.superclass.initComponent.call(this);},paramNames:{start:'start',limit:'limit',sort:'sort',dir:'dir'},remoteSort:true,proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:ExpressionExperimentController.browse,getDwrArgsFunction:function(request){var params=request.params;return[params];}}}}),reader:new Ext.data.JsonReader({root:'records',successProperty:'success',messageProperty:'message',totalProperty:'totalRecords',idProperty:"id",adjustedStart:'adjustedStart',sortInfo:{field:"dateLastUpdated",direction:"DESC"},fields:[{name:"id",type:"int"},{name:"name",type:"string"},{name:"shortName",type:"string"},{name:"bioAssayCount",type:"int"},{name:"taxon",type:"string"},{name:"dateCreated",type:"date",sortDir:'DESC'},{name:"troubled",sortDir:'DESC'},{name:"troubleDetails"},{name:"dateLastUpdated",type:"date",sortDir:'DESC'}]}),writer:new Ext.data.JsonWriter({writeAllFields:true})});Gemma.ExperimentPagingStoreSelectedIds=Ext.extend(Gemma.ExperimentPagingStore,{initComponent:function(){Gemma.ExperimentPagingStoreSelectedIds.superclass.initComponent.call(this);},proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:ExpressionExperimentController.browseSpecificIds,getDwrArgsFunction:function(request){var params=request.params;var ids=params.ids;delete params.ids;return[params,ids];}}}})});Gemma.ExperimentPagingStoreTaxon=Ext.extend(Gemma.ExperimentPagingStore,{initComponent:function(){Gemma.ExperimentPagingStoreSelectedIds.superclass.initComponent.call(this);},proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:ExpressionExperimentController.browseByTaxon,getDwrArgsFunction:function(request){var params=request.params;var taxonId=params.taxonId;delete params.taxonId;return[params,taxonId];}}}})});Gemma.ExperimentPagingGrid=Ext.extend(Ext.grid.GridPanel,{loadMask:true,autoScroll:true,stripeRows:true,rowExpander:true,emptyText:Gemma.HelpText.WidgetDefaults.ExperimentPagingGrid.emptyText,viewConfig:{forceFit:true},myPageSize:20,title:'Expression Experiments',columns:[{id:'name',header:"Dataset Name",dataIndex:'name',sortable:true,width:0.5,renderer:function(value,metaData,record,rowIndex,colIndex,store){return(value&&record)?'<a href="/Gemma/expressionExperiment/showExpressionExperiment.html?id='
+record.id+'" title="'+value+'">'+value+'</a>':'';}},{header:"Updated",dataIndex:'dateLastUpdated',sortable:true,width:0.06,hidden:true,renderer:function(value,metaData,record,rowIndex,colIndex,store){return(value)?Ext.util.Format.date(value,"Y/m/d"):'?';}},{header:"Status",dataIndex:'troubled',sortable:true,width:0.03,hidden:true,renderer:function(value,metaData,record,rowIndex,colIndex,store){return(value)?'<img title="'+record.troubleDetails+'" src="/Gemma/images/icons/warning.png"/>':'';}},{header:"Short Name",dataIndex:'shortName',sortable:true,width:0.1},{header:"Assay Count",dataIndex:'bioAssayCount',sortable:true,width:0.1,tooltip:"View bioassays",renderer:function(value,metaData,record,rowIndex,colIndex,store){return(value&&record)?'<a title="View bioassays" href="/Gemma/expressionExperiment/showBioAssaysFromExpressionExperiment.html?id='
+record.id+'">'+value+'</a>':'';}},{header:"Species",dataIndex:'taxon',sortable:true,width:0.1}],getIdsStore:function(ids){var pageSize=this.myPageSize;var pageStore=new Gemma.ExperimentPagingStoreSelectedIds({autoLoad:{params:{start:0,limit:pageSize}},baseParams:{ids:ids}});pageStore.setDefaultSort('dateLastUpdated');return pageStore;},loadExperimentsById:function(eeIds){var idsStore=this.getIdsStore(eeIds);this.getBottomToolbar().bind(idsStore);this.reconfigure(idsStore,this.getColumnModel());this.setShowAsTextParams(null,eeIds);this.nowSubset();},getTaxonStore:function(id){var pageSize=this.myPageSize;var pageStore=new Gemma.ExperimentPagingStoreTaxon({autoLoad:{params:{start:0,limit:pageSize}},baseParams:{taxonId:id}});this.setTitle("Expression Experiments For Taxon");pageStore.on('load',function(store,records,options){if(records[0]){this.setTitle("Expression Experiments For Taxon: "+records[0].get('taxon'));}},this);return pageStore;},getDownloadStore:function(){var pageStore=null;if(this.downloadAsTextTaxonId){pageStore=new Gemma.ExperimentPagingStoreTaxon({autoLoad:{params:{start:0,limit:0}},baseParams:{taxonId:this.downloadAsTextTaxonId}});}else if(this.downloadAsTextSpecificIds){pageStore=new Gemma.ExperimentPagingStoreSelectedIds({autoLoad:{params:{start:0,limit:0}},baseParams:{ids:this.downloadAsTextSpecificIds}});}else{pageStore=new Gemma.ExperimentPagingStore({autoLoad:{params:{start:0,limit:0}}});}
pageStore.on('load',function(store,records,options){var gses="";store.each(function(ee){gses+=ee.get('shortName')+"\t"+ee.get('taxon')+"\t"+ee.get('bioAssayCount')+"\t"+ee.get('name')+"\n";});var popup=new Ext.Window({modal:true,title:"You can copy this text",html:gses,height:400,width:500,autoScroll:true,bodyCfg:{tag:'textarea',style:'background-color : white;font-size:smaller'}});popup.show();this.downloadAsTextButton.setDisabled(false);this.downloadAsTextButton.setText("");},this);return pageStore;},loadExperimentsByTaxon:function(taxonId){var store=this.getTaxonStore(taxonId);this.getBottomToolbar().bind(store);this.reconfigure(store,this.getColumnModel());this.setShowAsTextParams(taxonId,null);this.nowSubset();},setShowAsTextParams:function(taxonId,specificIds){this.downloadAsTextTaxonId=taxonId;this.downloadAsTextSpecificIds=specificIds;},showAsText:function(){this.downloadAsTextButton.setDisabled(true);this.downloadAsTextButton.setText("Loading");var downloadStore=this.getDownloadStore();},initComponent:function(){this.showAll=!(document.URL.indexOf("?")>-1&&(document.URL.indexOf("id=")>-1||document.URL.indexOf("taxonId=")>-1));this.idSubset=[];var myPageSize=this.myPageSize;var filterById=false;var filterByTaxon=false;if(!this.showAll){var subsetDetails=document.URL.substr(document.URL.indexOf("?")+1);var param=Ext.urlDecode(subsetDetails);if(param.id){this.idSubset=param.id.split(',');filterById=true;}else if(param.taxonId){this.taxonId=param.taxonId;filterByTaxon=true;}else{this.showAll=true;}}
var pageStore;if(filterById){pageStore=this.getIdsStore(this.idSubset);}else if(filterByTaxon){pageStore=this.getTaxonStore(this.taxonId);}else{this.setTitle("All Expression Experiments");pageStore=new Gemma.ExperimentPagingStore({autoLoad:{params:{start:0,limit:myPageSize}}});}
pageStore.setDefaultSort('dateLastUpdated');pageStore.on('load',function(store,records,options){},this);var eeCombo=new Gemma.ExperimentAndExperimentGroupCombo({width:310,hideTrigger:true});eeCombo.on("recordSelected",function(selectedGroup){if(selectedGroup!==null){this.showAll=false;filterById=true;var ids=selectedGroup.memberIds;this.loadExperimentsById(ids);var totalCount=this.getStore().getTotalCount();this.setTitle("Displaying set: &quot;"+selectedGroup.name+"&quot;");}},this);var editMine=new Ext.Button({text:'Edit my datasets',cls:'x-toolbar-standardbutton',handler:function(){window.location="/Gemma/expressionExperiment/showAllExpressionExperimentLinkSummaries.html";},hidden:true});var subsetText=new Ext.BoxComponent({xtype:'box',html:'Viewing subset',border:false,style:'padding-right:10px;padding-left:10px',hidden:this.showAll});var showAllButton=new Ext.Button({text:'Show All Experiments',cls:'x-toolbar-standardbutton',handler:function(){window.location="/Gemma/expressionExperiment/showAllExpressionExperiments.html";},hidden:this.showAll});var QClinkButton=new Ext.Button({text:'Experiment QC',cls:'x-toolbar-standardbutton',handler:function(){window.location="/Gemma/expressionExperimentsWithQC.html";}});var asTextButton=new Ext.Button({icon:'/Gemma/images/icons/disk.png',handler:function(){this.showAsText();}.createDelegate(this),tooltip:"Download as text",});this.downloadAsTextButton=asTextButton;this.downloadAsTextTaxonId=null;this.downloadAsTextSpecificIds=null;this.nowSubset=function(){subsetText.show();showAllButton.show();};var mybbar=new Ext.PagingToolbar({store:pageStore,displayInfo:true,pageSize:myPageSize,plugins:[new Ext.ux.PageSizePlugin()]});Ext.apply(this,{store:pageStore,tbar:[eeCombo,'->',subsetText,showAllButton,'-',asTextButton,'-',editMine,QClinkButton],bbar:mybbar});if(this.rowExpander){Ext.apply(this,{rowExpander:new Gemma.EEGridRowExpander({tpl:""})});this.columns.unshift(this.rowExpander);Ext.apply(this,{plugins:this.rowExpander});}
Gemma.ExperimentPagingGrid.superclass.initComponent.call(this);var isAdmin=(Ext.getDom('hasAdmin'))?Ext.getDom('hasAdmin').getValue():false;this.adjustForIsAdmin(isAdmin);Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){this.adjustForIsAdmin(isAdmin);this.getStore().reload(this.getStore().lastOptions);},this);Gemma.Application.currentUser.on("logOut",function(){this.adjustForIsAdmin(false);this.getStore().reload(this.getStore().lastOptions);},this);},adjustForIsAdmin:function(isAdmin){if(isAdmin){var index=this.getColumnModel().findColumnIndex('troubled');this.getColumnModel().setHidden(index,!isAdmin);index=this.getColumnModel().findColumnIndex('dateLastUpdated');this.getColumnModel().setHidden(index,!isAdmin);}}});Ext.namespace('Gemma');Gemma.ExperimentAndExperimentGroupComboRecord=Ext.data.Record.create([{name:"name",type:"string"},{name:"description",type:"string"},{name:"isGroup",type:"boolean"},{name:"size",type:"int"},{name:"taxonId",type:"int",defaultValue:"-1"},{name:"taxonName",type:"string",defaultValue:""},{name:"memberIds",defaultValue:[]},{name:"resultValueObject"},{name:"userOwned",type:"boolean"}]);Gemma.ExperimentAndExperimentGroupCombo=Ext.extend(Ext.form.ComboBox,{name:'experimentAndExperimentGroupCombo',displayField:'name',width:160,listWidth:450,lazyInit:false,triggerAction:'all',allQuery:'',enableKeyEvents:true,loadingText:'Searching...',emptyText:"Find experiments by keyword",listEmptyTextBlankQuery:'Enter text to search for experiments',listEmptyText:'No results found',minChars:3,selectOnFocus:false,autoSelect:false,forceSelection:true,typeAhead:false,taxonId:null,lastQuery:null,mode:'remote',queryDelay:800,listeners:{specialkey:function(formField,e){if(e.getKey()===e.TAB||e.getKey()===e.RIGHT||e.getKey()===e.DOWN){this.expand();}else if(e.getKey()===e.ENTER){if(this.getValue()&&this.getValue()!==null){this.doQuery(this.getValue(),true);}else{this.doQuery('',true);}}else if(e.getKey()===e.ESC){this.collapse();}},beforequery:function(qe){delete qe.combo.lastQuery;}},onLoad:function(){if(!this.hasFocus){return;}
if(this.store.getCount()>0||this.listEmptyText){this.expand();this.restrictHeight();if(this.lastQuery==this.allQuery){if(this.editable){}
if(this.autoSelect!==false&&!this.selectByValue(this.value,true)){this.select(0,true);}}else{if(this.autoSelect!==false){this.selectNext();}
if(this.typeAhead&&this.lastKey!=Ext.EventObject.BACKSPACE&&this.lastKey!=Ext.EventObject.DELETE){this.taTask.delay(this.typeAheadDelay);}}}else{this.collapse();}},getParams:function(query){return[query,this.taxonId];},initComponent:function(){var eeTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#ECF4FF" class="x-combo-list-item" '+'ext:qtip="{name}: {description} ({taxonName})"><b>{name}</b>: {description} <span style="color:grey">({taxonName})</span></div>');var modifiedSessionTpl=new Ext.XTemplate(' <div style="font-size:11px;background-color:#FFFFFF" class="x-combo-list-item" ext:qtip="{name}:'+' {description} ({size}) ({taxonName})"><b>{name}</b>:  <span style="color:red">Unsaved</span> {description} ({size}) <span style="color:grey">({taxonName})</span></div>');var freeTxtTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#FFFFE3" class="x-combo-list-item" ext:qtip="{name}: {description} ({size}) ({taxonName})">'+'<b>{name}</b>: {description} ({size}) <span style="color:grey">({taxonName})</span></div>');var userOwnedDbSetTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#FFECEC" class="x-combo-list-item" ext:qtip="{name}: {description} ({size}) ({taxonName})">'+'<b>{name}</b>: {description} ({size}) <span style="color:grey">({taxonName})</span></div>');var dbSetTpl=new Ext.XTemplate('<div style="font-size:11px;background-color:#EBE3F6" class="x-combo-list-item" ext:qtip="{name}: {description} ({size}) ({taxonName})">'+'<b>{name}</b>: {description} ({size}) <span style="color:grey">({taxonName})</span></div>');var sessionSetTpl=dbSetTpl;var defaultTpl=dbSetTpl;this.urlInitiatedQuery=false;Ext.apply(this,{tpl:new Ext.XTemplate('<tpl for=".">'+'{[ this.renderItem(values) ]}'+'</tpl>',{renderItem:function(values){if(values.resultValueObject instanceof DatabaseBackedExpressionExperimentSetValueObject){if(values.userOwned){return userOwnedDbSetTpl.apply(values);}else{return dbSetTpl.apply(values);}}else if(values.resultValueObject instanceof FreeTextExpressionExperimentResultsValueObject){return freeTxtTpl.apply(values);}else if(values.resultValueObject instanceof SessionBoundExpressionExperimentSetValueObject){if(values.resultValueObject.modified){return modifiedSessionTpl.apply(values);}else{return sessionSetTpl.apply(values);}}else if(values.resultValueObject instanceof ExpressionExperimentValueObject){return eeTpl.apply(values);}
return defaultTpl.apply(values);}}),store:{reader:new Ext.data.ListRangeReader({},Gemma.ExperimentAndExperimentGroupComboRecord),proxy:new Ext.data.DWRProxy(ExpressionExperimentController.searchExperimentsAndExperimentGroups),autoLoad:false}});Gemma.ExperimentAndExperimentGroupCombo.superclass.initComponent.call(this);this.on('select',this.setExpressionExperimentGroup,this);this.on('keypress',function(textfield,eventObj){this.displayingComboValueToQueryMatch=false;});this.getStore().on('load',function(store,records,options){var query=(options.params)?options.params[0]:null;if(this.urlInitiatedQuery){this.fireEvent("select",this,records[0]);this.urlInitiatedQuery=false;this.fireEvent("experimentGroupUrlSelectionComplete");}
else if(this.getValue()!==query){store.removeAll();if(this.prevQuery===this.getValue()){store.add(this.prevRecords);}
if(!this.displayingComboValueToQueryMatch){this.innerList.update(this.loadingText?''+this.loadingText+'':'');this.restrictHeight();this.selectedIndex=-1;}}else{this.displayingComboValueToQueryMatch=true;this.prevRecords=this.store.getRange();this.prevQuery=(options.params)?options.params[0]:null;if(this.store.getCount()===0&&(this.prevQuery===''||this.prevQuery===null)){this.innerList.update(this.listEmptyTextBlankQuery?''+this.listEmptyTextBlankQuery+'':'');}}},this);this.on('focus',function(field){if(this.getValue()===''){this.doQuery('',true);this.lastQuery=null;}},this);this.addEvents("experimentGroupUrlSelectionComplete");},reset:function(){Gemma.ExperimentAndExperimentGroupCombo.superclass.reset.call(this);delete this.selectedExpressionExperimentGroup;this.lastQuery=null;if(this.tooltip){this.tooltip.destroy();}},getExpressionExperimentGroup:function(){if(this.getRawValue()===''){return null;}
return this.selectedExpressionExperimentGroup;},getSelected:function(){return this.getExpressionExperimentGroup();},setExpressionExperimentGroup:function(combo,expressionExperimentGroup,index){this.selectedExpressionExperimentGroup=expressionExperimentGroup.data;this.lastQuery=null;this.fireEvent("recordSelected",this.getExpressionExperimentGroup());},setTaxonId:function(id){this.taxonId=id;},getAllTaxonGroup:function(taxon){var urlparams=Ext.urlDecode(location.search.substring(1));this.urlInitiatedQuery=true;if(isNaN(urlparams.taxon)){Ext.Msg.alert(Gemma.HelpText.CommonErrors.MissingInput.title,Gemma.HelpText.CommonErrors.MissingInput.taxon);return;}
ExpressionExperimentController.getAllTaxonExperimentGroup(urlparams.taxon,function(records){this.store.loadData(records);}.createDelegate(this));}});Ext.namespace('Gemma');Gemma.ExperimentSearchAndPreview=Ext.extend(Ext.Panel,{width:330,taxonId:null,listModified:false,getSelectedExperimentOrExperimentSetValueObject:function(){return(this.selectedExperimentOrGroup)?this.selectedExperimentOrGroup.resultValueObject:null;},setSelectedExpressionExperimentSetValueObject:function(eesvo){this.selectedExpressionExperimentSetValueObject=eesvo;this.isExperimentSet=true;this.isExperiment=false;},getSelectedExpressionExperimentSetValueObject:function(){return this.selectedExpressionExperimentSetValueObject;},resetExperimentPreview:function(){this.preview.resetPreview();},showExperimentPreview:function(){this.preview.showPreview();},collapsePreview:function(){if(typeof this.preview!=='undefined'){this.preview.collapsePreview();}},maskExperimentPreview:function(){if(!this.loadMask&&this.getEl()){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.experiments});}
if(this.loadMask){this.loadMask.show();}},loadExperimentOrGroup:function(record,query){this.selectedExperimentOrGroup=record.data;if(this.selectedExperimentOrGroup.resultValueObject instanceof ExpressionExperimentSetValueObject){this.setSelectedExpressionExperimentSetValueObject(this.selectedExperimentOrGroup.resultValueObject);this.isExperiment=false;this.isExperimentSet=true;}else if(this.selectedExperimentOrGroup.resultValueObject instanceof ExpressionExperimentValueObject){delete this.selectedExpressionExperimentSetValueObject;this.isExperiment=true;this.isExperimentSet=false;}
var id=record.get("resultValueObject").id;this.queryUsedToGetSessionGroup=(id===null||id===-1)?query:null;var isGroup=record.get("isGroup");var type=record.get("type");var resultValueObject=record.get("resultValueObject");var name=record.get("name");var taxonId=record.get("taxonId");var taxonName=record.get("taxonName");if(id===null||id===-1){var queryToGetSelected=name;if(resultValueObject instanceof FreeTextExpressionExperimentResultsValueObject&&name.indexOf(query)!=-1){queryToGetSelected="taxon:"+taxonId+"query:"+query;}
this.queryUsedToGetSessionGroup=queryToGetSelected;}
if(this.isExperimentSet){var eeIds=this.getSelectedExpressionExperimentSetValueObject().expressionExperimentIds;this.experimentGroupId=id;if(!eeIds||eeIds===null||eeIds.length===0){return;}
this.preview.setTaxonId(taxonId);this.preview.loadExperimentPreviewFromExperimentSet(this.selectedExperimentOrGroup.resultValueObject);}
else{this.experimentIds=[id];this.selectedExperimentOrGroup.memberIds=[id];this.resetExperimentPreview();this.preview.setTaxonId(taxonId);this.preview.loadExperimentPreviewFromExperiments([this.selectedExperimentOrGroup.resultValueObject]);}},loadExperiments:function(ids){this.searchForm.experimentIds.push(ids);this.experimentIds=ids;this.preview.loadExperimentPreviewFromIds(ids);},initComponent:function(){this.newBoxTriggered=false;this.experimentCombo=new Gemma.ExperimentAndExperimentGroupCombo({width:310,taxonId:this.taxonId,hideTrigger:true});this.experimentCombo.on('select',function(combo,record,index){this.searchForm.taxonChanged(record.get("taxonId"),record.get("taxonName"));this.preview.setTaxonId(record.get("taxonId"));var query=combo.store.baseParams.query;this.loadExperimentOrGroup(record,query);this.preview.showPreview();if(combo.startValue===''&&this.newBoxTriggered===false){this.fireEvent('madeFirstSelection');this.newBoxTriggered=true;this.helpBtn.hide();}
combo.disable().hide();this.helpBtn.hide();this.doLayout();},this);this.preview=new Gemma.ExperimentSetPreview();this.preview.on('experimentListModified',function(newSets){var i;for(i=0;i<newSets.length;i++){if(typeof newSets[i].expressionExperimentIds!=='undefined'&&typeof newSets[i].name!=='undefined'){this.selectedExperimentOrGroup.resultValueObject=newSets[i];this.setSelectedExpressionExperimentSetValueObject(newSets[i]);}}},this);this.preview.on('maskParentContainer',function(){this.searchForm.getEl().mask();},this);this.preview.on('unmaskParentContainer',function(){this.searchForm.getEl().unmask();},this);this.preview.on('removeMe',function(){this.fireEvent('removeExperiment');},this);this.helpBtn=new Gemma.InlineHelpIcon({tooltipText:Gemma.HelpText.WidgetDefaults.ExperimentSearchAndPreview.widgetHelpTT});Ext.apply(this,{frame:false,border:false,hideBorders:true,items:[{layout:'hbox',hideBorders:true,items:[this.experimentCombo,this.helpBtn]},this.preview]});Gemma.ExperimentSearchAndPreview.superclass.initComponent.call(this);}});Ext.reg('experimentSearchAndPreview',Gemma.ExperimentSearchAndPreview);Ext.namespace('Gemma');Gemma.MetaAnalysisManagerGridPanel=Ext.extend(Ext.grid.GridPanel,{title:"Meta-analysis Manager",autoScroll:true,stripeRows:true,loadMask:true,viewConfig:{forceFit:true,deferEmptyText:false,emptyText:'No meta-analysis to display'},initComponent:function(){var DEFAULT_THRESHOLD=new Gemma.MetaAnalysisUtilities().getDefaultThreshold();var metaAnalysisCache=[];var metaAnalysisWindow;Gemma.Application.currentUser.on("logIn",function(){this.getStore().reload();},this);Gemma.Application.currentUser.on("logOut",function(){this.getStore().reload();},this);var generateLink=function(methodWithArguments,imageSrc,description,width,height){return'<span class="link" onClick="return Ext.getCmp(\''+this.getId()+'\').'+methodWithArguments+'"><img src="'+imageSrc+'" alt="'+description+'" ext:qtip="'+description+'" '+
((width&&height)?'width="'+width+'" height="'+height+'" ':'')+'/></span>';}.createDelegate(this);var generateLinkPlaceholder=function(){return'<img src="/Gemma/images/s.gif" height="16" width="16">';}
var showLoadMask=function(msg){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl());}
this.loadMask.msg=msg?msg:"Loading ...";this.loadMask.show();}.createDelegate(this);var hideLoadMask=function(){this.loadMask.hide();}.createDelegate(this);var numberColumnRenderer=function(value,metaData,record,rowIndex,colIndex,store){metaData.attr='style="padding-right: 15px;"';return value;};var showLogInWindow=function(callback,args){Gemma.AjaxLogin.showLoginWindowFn();Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){callback.apply(this,args);},this,{single:true});};var showMetaAnalysisWindow=function(metaAnalysis,analysisName,numGenesAnalyzed){metaAnalysis.name=analysisName;metaAnalysis.numGenesAnalyzed=numGenesAnalyzed;var viewMetaAnalysisWindow=new Gemma.MetaAnalysisWindow({title:'View Meta-analysis for '+analysisName,metaAnalysis:metaAnalysis,defaultQvalueThreshold:DEFAULT_THRESHOLD});viewMetaAnalysisWindow.show();};var showViewEvidenceWindow=function(metaAnalysis,id){var record=this.getStore().getById(id);if(record!=null){metaAnalysis.name=record.data.name;metaAnalysis.numGenesAnalyzed=record.data.numGenesAnalyzed;var viewEvidenceWindow=new Gemma.MetaAnalysisEvidenceWindow({metaAnalysisId:id,metaAnalysis:metaAnalysis,showActionButton:record.data.editable,title:'View Neurocarta evidence for '+record.data.name,diffExpressionEvidence:record.data.diffExpressionEvidence,modal:false,listeners:{evidenceRemoved:function(){this.store.reload();},scope:this}});viewEvidenceWindow.show();}};var processMetaAnalysis=function(id,errorDialogTitle,callback,args){var metaAnalysisFound=metaAnalysisCache[id];if(metaAnalysisFound){args.splice(0,0,metaAnalysisFound);callback.apply(this,args);}else{showLoadMask();DiffExMetaAnalyzerController.findDetailMetaAnalysisById(id,function(baseValueObject){hideLoadMask();if(baseValueObject.errorFound){Gemma.alertUserToError(baseValueObject,errorDialogTitle);}else{metaAnalysisCache[id]=baseValueObject.valueObject;args.splice(0,0,metaAnalysisCache[id]);callback.apply(this,args);}}.createDelegate(this));}}.createDelegate(this);Ext.apply(this,{store:new Ext.data.JsonStore({autoLoad:true,proxy:new Ext.data.DWRProxy(DiffExMetaAnalyzerController.loadAllMetaAnalyses),fields:['id',{name:'name',sortType:Ext.data.SortTypes.asUCString},'description','numGenesAnalyzed','numResults','numResultSetsIncluded','editable','ownedByCurrentUser','public','shared','diffExpressionEvidence'],idProperty:'id',sortInfo:{field:'name',direction:'ASC'}}),eval:function(request){eval(request);},showSaveAsEvidenceWindow:function(id){var doShowForLoggedInUser=function(id){var showSaveAsEvidenceWindowHelper=function(metaAnalysis){var record=this.getStore().getById(id);if(record!=null){metaAnalysis.name=record.data.name;metaAnalysis.numGenesAnalyzed=record.data.numGenesAnalyzed;var saveAsEvidenceWindow=new Gemma.MetaAnalysisEvidenceWindow({metaAnalysisId:id,metaAnalysis:metaAnalysis,showActionButton:record.data.ownedByCurrentUser,defaultQvalueThreshold:DEFAULT_THRESHOLD,title:'Save '+record.data.name+' as Neurocarta evidence',listeners:{evidenceSaved:function(){this.store.reload();},scope:this}});saveAsEvidenceWindow.show();}}.createDelegate(this);var metaAnalysisFound=metaAnalysisCache[id];if(metaAnalysisFound){showSaveAsEvidenceWindowHelper(metaAnalysisFound);}else{showLoadMask();DiffExMetaAnalyzerController.findDetailMetaAnalysisById(id,function(baseValueObject){hideLoadMask();if(baseValueObject.errorFound){Gemma.alertUserToError(baseValueObject,'Cannot save meta-analysis as Neurocarta evidence');}else{metaAnalysisCache[id]=baseValueObject.valueObject;showSaveAsEvidenceWindowHelper(metaAnalysisCache[id]);}}.createDelegate(this));}}.createDelegate(this);SignupController.loginCheck({callback:function(result){if(result.loggedIn){doShowForLoggedInUser(id);}
else{showLogInWindow.call(this,doShowForLoggedInUser,[id]);}}.createDelegate(this)});},removeMetaAnalysis:function(id){var doRemoveForLoggedInUser=function(id){var record=this.getStore().getById(id);if(record!=null){if(record.data.diffExpressionEvidence){Ext.MessageBox.alert(Gemma.HelpText.WidgetDefaults.MetaAnalysisManagerGridPanel.ErrorTitle.removeMetaAnalysis,Gemma.HelpText.WidgetDefaults.MetaAnalysisManagerGridPanel.ErrorMessage.evidenceExist);}else{Ext.MessageBox.confirm('Confirm','Are you sure you want to remove meta-analysis "'+record.data.name+'"?',function(button){if(button==='yes'){showLoadMask("Removing analysis ...");DiffExMetaAnalyzerController.removeMetaAnalysis(id,function(baseValueObject){hideLoadMask();if(baseValueObject.errorFound){Gemma.alertUserToError(baseValueObject,Gemma.HelpText.WidgetDefaults.MetaAnalysisManagerGridPanel.ErrorTitle.removeMetaAnalysis);}else{this.store.reload();}}.createDelegate(this));}},this);}}}.createDelegate(this);SignupController.loginCheck({callback:function(result){if(result.loggedIn){doRemoveForLoggedInUser(id);}
else{showLogInWindow.call(this,doRemoveForLoggedInUser,[id]);}}.createDelegate(this)});},columns:[{header:'Name',dataIndex:'name',width:0.3,renderer:function(value,metadata,record,rowIndex,colIndex,store){return value+' '+generateLink('eval(\'processMetaAnalysis('+
record.data.id+', '+'\\\'Cannot view meta-analysis\\\', '+'showMetaAnalysisWindow, '+'[ \\\''+record.data.name+'\\\', '+record.data.numGenesAnalyzed+' ])\');','/Gemma/images/icons/magnifier.png','View included result sets and results',10,10);}},{header:'Description',dataIndex:'description',width:0.4},{header:'Genes analyzed',align:"right",dataIndex:'numGenesAnalyzed',width:0.2,renderer:numberColumnRenderer},{header:'Genes with q-value < '+DEFAULT_THRESHOLD,align:"right",dataIndex:'numResults',width:0.25,renderer:numberColumnRenderer},{header:'Result sets included',align:"right",dataIndex:'numResultSetsIncluded',width:0.2,renderer:numberColumnRenderer},{header:'Admin',id:'id',width:0.15,renderer:function(value,metadata,record,rowIndex,colIndex,store){var adminLinks='';if(record.data.diffExpressionEvidence==null){if(record.data.ownedByCurrentUser){adminLinks+=generateLink('showSaveAsEvidenceWindow('+record.data.id+');','/Gemma/images/icons/neurocarta-add.png','Save as Neurocarta evidence');}else{adminLinks+=generateLinkPlaceholder();}}else{adminLinks+=generateLink('eval(\'processMetaAnalysis('+
record.data.id+', '+'\\\'Cannot view Neurocarta evidence\\\', '+'showViewEvidenceWindow, '+'[ '+record.data.id+' ])\');','/Gemma/images/icons/neurocarta-check.png','View Neurocarta evidence');}
adminLinks+=' ';if(record.data.editable){adminLinks+=generateLink('removeMetaAnalysis('+record.data.id+');','/Gemma/images/icons/cross.png','Remove meta-analysis');}else{adminLinks+=generateLinkPlaceholder();}
adminLinks+=' ';if(Ext.get("hasUser")!=null&&Ext.get("hasUser").getValue()){adminLinks+=Gemma.SecurityManager.getSecurityLink('ubic.gemma.model.analysis.expression.diff.GeneDifferentialExpressionMetaAnalysisImpl',record.data.id,record.data.public,record.data.shared,record.data.editable,null,null,null,record.data.ownedByCurrentUser);}
return adminLinks;},sortable:false}],tbar:[{handler:function(){var showAddMetaAnalysisWindowForLoggedInUser=function(){if(!metaAnalysisWindow||metaAnalysisWindow.hidden){metaAnalysisWindow=new Gemma.MetaAnalysisWindow({title:'Add New Meta-analysis',defaultQvalueThreshold:DEFAULT_THRESHOLD,listeners:{resultSaved:function(){metaAnalysisWindow.close();this.store.reload();},scope:this}});}
metaAnalysisWindow.show();}.createDelegate(this);SignupController.loginCheck({callback:function(result){if(result.loggedIn){showAddMetaAnalysisWindowForLoggedInUser();}
else{showLogInWindow.call(this,showAddMetaAnalysisWindowForLoggedInUser,[]);}}.createDelegate(this)});},scope:this,icon:"/Gemma/images/icons/add.png",tooltip:"Add new meta-analysis"}]});Gemma.MetaAnalysisManagerGridPanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.MetaAnalysisSelectFactorPanel=Ext.extend(Gemma.WizardTabPanelItemPanel,{nextButtonText:'Run meta-analysis',listeners:{render:function(thisPanel){if(!thisPanel.loadMask){var element=thisPanel.getEl();element.setHeight(thisPanel.height/2+200);thisPanel.loadMask=new Ext.LoadMask(element,{msg:"Loading ..."});}
thisPanel.loadMask.show();}},initComponent:function(){var experimentSelectedCount=0;var nextButton=this.createNextButton();nextButton.disable();var generateExperimentComponents=function(experimentDetails){var radioGroup=new Ext.form.RadioGroup({items:[]});var experimentTitle='<b>'+'<a ext:qtip="Click for details on experiment (opens in new window)" target="_blank"  href="/Gemma/expressionExperiment/showExpressionExperiment.html?id='
+experimentDetails.id+'">'
+experimentDetails.shortName+'</a> '
+experimentDetails.name+'</b>';var experimentTitleComponent;if(this.metaAnalysis){experimentTitleComponent=new Ext.form.DisplayField({style:'margin: 10px 0 0 20px;',html:experimentTitle});}else{experimentTitleComponent=new Ext.form.Checkbox({style:'margin: 10px 0 0 10px;',boxLabel:experimentTitle,listeners:{check:function(checkbox,checked){if(checked){experimentSelectedCount++;if(radioGroup.getValue()==null){for(var i=0;i<radioGroup.items.length;i++){if(!radioGroup.items[i].disabled){radioGroup.items[i].setValue(true);break;}}}}else{experimentSelectedCount--;radioGroup.reset();}
nextButton.setDisabled(experimentSelectedCount<2);}}});}
var experimentResultSetsPanel=new Ext.Panel({bodyStyle:'background-color: transparent; padding: 0 0 20px 40px;',border:false});var totalSuitableResultSetCount=0;if(experimentDetails.differentialExpressionAnalyses.length==0){experimentResultSetsPanel.add(new Ext.form.Label({style:'font-style: italic; ',disabled:true,html:'No differential expression analysis available'+'<br />'}));}else{var analysesSummaryTree=new Gemma.DifferentialExpressionAnalysesSummaryTree({experimentDetails:experimentDetails,editable:false,style:'padding-bottom: 20px;'});var generateResultSetComponent=function(text,marginLeft,notSuitableForAnalysisMessage,inputValue,shouldResultSetSelected){var resultSetComponent;var resultSetRadio=null;if(this.metaAnalysis){resultSetComponent={xtype:'displayfield',value:(shouldResultSetSelected?'<img src="/Gemma/images/icons/ok16.png" width="16" height="16" />':'<span style="margin-left: 16px;" />')+'&nbsp;'+
text+
(notSuitableForAnalysisMessage?' <i>'+notSuitableForAnalysisMessage+'</i>':''),style:'margin-left: '+marginLeft+'px;'+
(notSuitableForAnalysisMessage?' color: gray; opacity: 0.6;':'')};}else{var indexOfFirstSpan=text.indexOf('<span');resultSetRadio=new Ext.form.Radio({checked:shouldResultSetSelected,boxLabel:text.substring(0,indexOfFirstSpan),name:(this.metaAnalysis?this.metaAnalysis.id+'-'+experimentDetails.id:experimentDetails.id),style:'margin-left: '+marginLeft+'px;',disabled:notSuitableForAnalysisMessage!=null,inputValue:inputValue,listeners:{check:function(radio,checked){if(checked){if(experimentTitleComponent.isXType(Ext.form.Checkbox)){experimentTitleComponent.setValue(true);}}}}});resultSetComponent=[resultSetRadio,{xtype:'displayfield',value:text.substring(indexOfFirstSpan)+
(notSuitableForAnalysisMessage?' <i>'+notSuitableForAnalysisMessage+'</i>':''),style:'margin-top: -5px;'+
(notSuitableForAnalysisMessage?' color: gray; opacity: 0.6;':'')}];}
return{border:false,bodyStyle:'background-color: transparent;',layout:'hbox',getRadio:function(){return resultSetRadio;},items:resultSetComponent};}.createDelegate(this);var checkSuitableForAnalysis=function(attributes){var notSuitableForAnalysisMessage=null;if(attributes.numberOfFactors>1){notSuitableForAnalysisMessage='(Not suitable - Analysis used more than 1 factor)';}else if(attributes.numberOfFactorValues==null||attributes.numberOfFactorValues>2){notSuitableForAnalysisMessage='(Not suitable - Analysis based on more than 2 groups)';}
return notSuitableForAnalysisMessage;};analysesSummaryTree.root.childNodes.sort(function(group1,group2){var strippedText1=Ext.util.Format.stripTags(group1.text);var strippedText2=Ext.util.Format.stripTags(group2.text);return(strippedText1<strippedText2?-1:strippedText1>strippedText2?1:0);});var checkResultSetAvailability=function(analysisId,resultSetId){var shouldResultSetCreated=true;var shouldResultSetSelected=false;if(this.metaAnalysis){for(var i=0;i<this.metaAnalysis.includedResultSetsInfo.length;i++){var currIncludedResultSetsInfo=this.metaAnalysis.includedResultSetsInfo[i];if(currIncludedResultSetsInfo.experimentId==experimentDetails.id){shouldResultSetCreated=(currIncludedResultSetsInfo.analysisId===analysisId);shouldResultSetSelected=(currIncludedResultSetsInfo.resultSetId===resultSetId);break;}}}
return{shouldResultSetCreated:shouldResultSetCreated,shouldResultSetSelected:shouldResultSetSelected};}.createDelegate(this);Ext.each(analysesSummaryTree.root.childNodes,function(resultSetParent,unusedI){if(resultSetParent.childNodes.length>0){var label=new Ext.form.Label({html:resultSetParent.text+'<br />'});experimentResultSetsPanel.add(label);var currSuitableResultSetCount=0;var currCreatedResultSetCount=0;Ext.each(resultSetParent.childNodes,function(resultSet,unusedJ){radioAvailability=checkResultSetAvailability(resultSet.attributes.analysisId,resultSet.attributes.resultSetId);if(radioAvailability.shouldResultSetCreated){currCreatedResultSetCount++;var notSuitableForAnalysisMessage=checkSuitableForAnalysis(resultSet.attributes);if(notSuitableForAnalysisMessage==null){currSuitableResultSetCount++;totalSuitableResultSetCount++;}
var resultSetComponent=generateResultSetComponent(resultSet.text,15,notSuitableForAnalysisMessage,resultSet.attributes.resultSetId,radioAvailability.shouldResultSetSelected);var resultSetRadio=resultSetComponent.getRadio();if(resultSetRadio!=null){radioGroup.items.push(resultSetRadio);}
experimentResultSetsPanel.add(resultSetComponent);}},this);label.setDisabled(currSuitableResultSetCount===0);if(currCreatedResultSetCount===0){experimentResultSetsPanel.remove(label);}}else{radioAvailability=checkResultSetAvailability(resultSetParent.attributes.analysisId,resultSetParent.attributes.resultSetId);if(radioAvailability.shouldResultSetCreated){var notSuitableForAnalysisMessage=checkSuitableForAnalysis(resultSetParent.attributes);if(notSuitableForAnalysisMessage==null){totalSuitableResultSetCount++;}
var resultSetComponent=generateResultSetComponent(resultSetParent.text,0,notSuitableForAnalysisMessage,resultSetParent.attributes.resultSetId,radioAvailability.shouldResultSetSelected);var resultSetRadio=resultSetComponent.getRadio();if(resultSetRadio!=null){radioGroup.items.push(resultSetRadio);}
experimentResultSetsPanel.add(resultSetComponent);}}},this);experimentResultSetsPanel.on('afterlayout',function(){analysesSummaryTree.drawPieCharts();},analysesSummaryTree,{single:true,delay:100});}
if(totalSuitableResultSetCount===0){experimentTitleComponent.setDisabled(true);}
return{hasEnabledRadioButtons:(totalSuitableResultSetCount>0),experimentTitleComponent:experimentTitleComponent,experimentResultSetsPanel:experimentResultSetsPanel}}.createDelegate(this);var showExperiments=function(expressionExperimentIds){this.maskWindow();analyzableExperimentsPanel.removeAll();nonAnalyzableExperimentsPanel.removeAll();nextButton.setDisabled(true);ExpressionExperimentController.loadExpressionExperiments(expressionExperimentIds,function(experiments){experiments.sort(function(experiment1,experiment2){return experiment1.shortName.localeCompare(experiment2.shortName);});var nonAnalyzableExperimentComponents=[];var addExperimentComponentsToPanel=function(experimentComponents,containerPanel,componentIndex){var panel=new Ext.Panel({border:false,bodyStyle:(componentIndex%2===0?'background-color: #FAFAFA;':'background-color: #FFFFFF;')});panel.add(experimentComponents.experimentTitleComponent);panel.add(experimentComponents.experimentResultSetsPanel);containerPanel.add(panel);};var i;var analyzableExperimentsPanelIndex=0;for(i=0;i<experiments.length;i++){var experimentComponents=generateExperimentComponents(experiments[i]);if(experimentComponents.hasEnabledRadioButtons){addExperimentComponentsToPanel(experimentComponents,analyzableExperimentsPanel,analyzableExperimentsPanelIndex);analyzableExperimentsPanelIndex++;}else{nonAnalyzableExperimentComponents.push(experimentComponents);}}
for(var j=0;j<nonAnalyzableExperimentComponents.length;j++){addExperimentComponentsToPanel(nonAnalyzableExperimentComponents[j],nonAnalyzableExperimentsPanel,j);}
this.doLayout();this.unmaskWindow();this.loadMask.hide();}.createDelegate(this));}.createDelegate(this);var analyzableExperimentsPanel=new Ext.Panel({header:(!this.metaAnalysis),title:'Analyzable experiments',region:'center',autoScroll:true,border:false});var nonAnalyzableExperimentsPanel=new Ext.Panel({title:'Non-analyzable experiments',region:'south',autoScroll:true,border:false,split:true,height:200});var setDisabledChildComponentsVisible=function(container,visible){if(container.items&&container.items.length>0){Ext.each(container.items.items,function(item,index){if(item){if(item.items&&item.items.length>0){setDisabledChildComponentsVisible(item,visible);}else if(item.disabled&&item instanceof Ext.form.Radio){item.ownerCt.setVisible(visible);}}});}};var findSelectedResultSetIds=function(resultSetIds,container){if(container.items&&container.items.length>0){Ext.each(container.items.items,function(item,index){if(item){if(item.items&&item.items.length>0){findSelectedResultSetIds(resultSetIds,item);}else if(item instanceof Ext.form.Radio&&item.getValue()){resultSetIds.push(item.inputValue);}}});}};var setPanelReadOnly=function(panel,isReadOnly){var radioButtons=panel.findByType('radio');Ext.each(radioButtons,function(radio,index){if(isReadOnly){radio.el.parent().mask();}else{radio.el.parent().unmask();}});var checkboxButtons=panel.findByType('checkbox');Ext.each(checkboxButtons,function(checkbox,index){if(isReadOnly){checkbox.el.parent().mask();}else{checkbox.el.parent().unmask();}});}
var buttonPanel=new Ext.Panel({region:'south',border:false,height:40,padding:'10px 0 0 10px',items:[nextButton]});var thisPanelItems;if(this.metaAnalysis){var expressionExperimentIds=[];Ext.each(this.metaAnalysis.includedResultSetsInfo,function(includedResultSetInfo,index){expressionExperimentIds.push(includedResultSetInfo.experimentId);});showExperiments(expressionExperimentIds);thisPanelItems=[analyzableExperimentsPanel];}else{thisPanelItems=[{region:'center',layout:'border',items:[analyzableExperimentsPanel,nonAnalyzableExperimentsPanel]},buttonPanel];}
Ext.apply(this,{height:600,layout:'border',title:(this.metaAnalysis?'Selected':'Select')+' factors',getSelectedResultSetIds:function(){var selectedResultSetIds=[];findSelectedResultSetIds(selectedResultSetIds,this);return selectedResultSetIds;},items:thisPanelItems,setSelectedExperimentIds:function(expressionExperimentIds){showExperiments(expressionExperimentIds);},setPanelReadOnly:function(msg,msgCls){if(analyzableExperimentsPanel.header){analyzableExperimentsPanel.header.mask(msg,msgCls);}
setPanelReadOnly(analyzableExperimentsPanel,true);if(!this.metaAnalysis){buttonPanel.body.mask();}},unsetPanelReadOnly:function(){analyzableExperimentsPanel.header.unmask();buttonPanel.body.unmask();setPanelReadOnly(analyzableExperimentsPanel,false);setPanelReadOnly(nonAnalyzableExperimentsPanel,false);}});if(!this.metaAnalysis){Ext.apply(this,{tbar:[{xtype:'checkbox',boxLabel:'Hide non-analyzable experiments and factors',listeners:{check:function(checkbox,checked){nonAnalyzableExperimentsPanel.setVisible(!checked);setDisabledChildComponentsVisible(this,!checked);this.doLayout();},scope:this}}]});}
Gemma.MetaAnalysisSelectFactorPanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.MetaAnalysisEvidenceWindow=Ext.extend(Ext.Window,{metaAnalysisId:null,metaAnalysis:null,showActionButton:false,diffExpressionEvidence:null,defaultQvalueThreshold:null,layout:'fit',modal:true,constrain:true,width:900,height:500,shadow:true,closeAction:'close',initComponent:function(){var HORIZONTAL_ANCHOR='-15';var currentThreshold=this.defaultQvalueThreshold;var hasErrorMessages=false;var phenotypeErrorMessages=[];var thresholdErrorMessage='';var updateErrorMessages=function(){var allErrorMessages=[].concat(phenotypeErrorMessages);if(thresholdErrorMessage!=''){allErrorMessages.push(thresholdErrorMessage);}
hasErrorMessages=allErrorMessages.length>0;if(hasErrorMessages){var formattedErrorMessages='';for(var i=0;i<allErrorMessages.length;i++){formattedErrorMessages+=allErrorMessages[i];if(i<allErrorMessages.length-1){formattedErrorMessages+='<br />';}}
errorPanel.showError(formattedErrorMessages);}else{errorPanel.hide();}}
var submitEvidenceSavingForm=function(){if(formPanel.getForm().isValid()){var selectedPhenotypes=phenotypesSearchPanel.getSelectedPhenotypes();if(selectedPhenotypes!=null&&selectedPhenotypes.length>0){showLoadMask('Saving Neurocarta evidence ...');PhenotypeController.makeDifferentialExpressionEvidencesFromDiffExpressionMetaAnalysis(this.metaAnalysisId,selectedPhenotypes,thresholdTextField.getValue(),function(validateEvidenceValueObject){hideLoadMask();if(validateEvidenceValueObject==null){this.fireEvent('evidenceSaved');this.close();}else{Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.MetaAnalysisManagerGridPanel.ErrorTitle.saveMetaAnalysisAsEvidence,Gemma.convertToEvidenceError(validateEvidenceValueObject).errorMessage,function(){if(validateEvidenceValueObject.userNotLoggedIn){Gemma.AjaxLogin.showLoginWindowFn();}});}}.createDelegate(this));}}}.createDelegate(this);var removeEvidence=function(){var numGenes=resultPanel.getTotalNumberOfResults();Ext.MessageBox.confirm('Confirm','Are you sure you want to remove Neurocarta evidence for '+
(numGenes===1?'this 1 gene?':'these '+numGenes+' genes?'),function(button){if(button==='yes'){showLoadMask('Removing Neurocarta evidence ...');PhenotypeController.removeAllEvidenceFromMetaAnalysis(this.metaAnalysisId,function(validateEvidenceValueObject){hideLoadMask();if(validateEvidenceValueObject==null){this.fireEvent('evidenceRemoved');this.close();}else{Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.MetaAnalysisEvidenceWindow.ErrorTitle.removeEvidence,Gemma.convertToEvidenceError(validateEvidenceValueObject).errorMessage,function(){if(validateEvidenceValueObject.userNotLoggedIn){Gemma.AjaxLogin.showLoginWindowFn();}});}}.createDelegate(this));}},this);}.createDelegate(this);var showLoadMask=function(msg){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl());}
this.loadMask.msg=msg?msg:"Loading ...";this.loadMask.show();}.createDelegate(this);var hideLoadMask=function(){this.loadMask.hide();}.createDelegate(this);var errorPanel=new Gemma.PhenotypeAssociationForm.ErrorPanel({region:'north'});var phenotypesSearchPanel=new Gemma.PhenotypeAssociationForm.PhenotypesSearchPanel({anchor:HORIZONTAL_ANCHOR,listeners:{validtyStatusChanged:function(isModifying,errorMessages){phenotypeErrorMessages=errorMessages;updateErrorMessages();},scope:this}});var thresholdTextField=new Ext.form.NumberField({fieldLabel:'q-value threshold',decimalPrecision:10,value:this.defaultQvalueThreshold,minValue:0,maxValue:this.defaultQvalueThreshold?this.defaultQvalueThreshold:Number.MAX_VALUE,minLength:1,maxLength:12,allowBlank:false,allowDecimals:true,allowNegative:false,width:100,enableKeyEvents:true,initComponent:function(){Ext.apply(this,{autoCreate:{tag:'input',type:'text',size:'20',autocomplete:'off',maxlength:this.maxLength},listeners:{keyup:function(numberField,event){var threshold=numberField.getValue();if(currentThreshold!=null&&threshold!=currentThreshold){if(threshold>numberField.minValue&&threshold<=numberField.maxValue){thresholdErrorMessage='';resultPanel.showResults(threshold);}else{thresholdErrorMessage=String.format(Gemma.HelpText.WidgetDefaults.MetaAnalysisEvidenceWindow.ErrorMessage.qvalueThresholdOutOfRange,numberField.minValue,numberField.maxValue);resultPanel.clear();}
updateErrorMessages();currentThreshold=threshold;}}}});this.superclass().initComponent.call(this);}});var resultPanel=new Gemma.MetaAnalysisResultPanel({anchor:HORIZONTAL_ANCHOR+' -110',metaAnalysis:this.metaAnalysis,defaultQvalueThreshold:this.defaultQvalueThreshold,showLimitDisplayCombo:false,showDownloadButton:true});var formPanelButtons=[{text:'Cancel',handler:function(){this.close();},scope:this}];if(this.showActionButton){formPanelButtons.splice(0,0,{text:(this.diffExpressionEvidence?'Remove evidence':'Save as Neurocarta evidence'),formBind:true,handler:function(){if(this.diffExpressionEvidence){removeEvidence();}else{submitEvidenceSavingForm();}},scope:this});}
var formPanel=new Ext.form.FormPanel({layout:'border',monitorValid:true,items:[errorPanel,{xtype:'panel',region:'center',layout:'form',border:false,autoScroll:true,defaults:{blankText:'This field is required',labelWidth:120},padding:'15px 0px 8px 15px',items:[{xtype:'textfield',hidden:true,validator:function(){return!hasErrorMessages&&resultPanel.getTotalNumberOfResults()>0;}},phenotypesSearchPanel,thresholdTextField,resultPanel]}],buttons:formPanelButtons});if(this.diffExpressionEvidence){phenotypesSearchPanel.selectPhenotypes(this.diffExpressionEvidence.phenotypes,null);thresholdTextField.setValue(this.diffExpressionEvidence.selectionThreshold);resultPanel.showResults(this.diffExpressionEvidence.selectionThreshold);formPanel.on('render',function(thisPanel){var setChildrenReadOnly=function(container){if(container.items&&container.items.length>0){Ext.each(container.items.items,function(item,index){if(item){if(item.items&&item.items.length>0){setChildrenReadOnly(item);}else if(item instanceof Ext.Button){item.disable();}else if(item instanceof Ext.form.TextField){item.setReadOnly(true);}}});}};setChildrenReadOnly(phenotypesSearchPanel);thresholdTextField.setReadOnly(true);});}
Ext.apply(this,{items:[formPanel]});Gemma.MetaAnalysisEvidenceWindow.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.MetaAnalysisWindow=Ext.extend(Ext.Window,{metaAnalysis:null,defaultQvalueThreshold:null,layout:'fit',constrain:true,width:900,height:600,shadow:true,closeAction:'close',initComponent:function(){var selectExperimentPanel;if(!this.metaAnalysis){selectExperimentPanel=new Gemma.MetaAnalysisSelectExperimentPanel({listeners:{nextButtonClicked:function(panel){var experimentOrExperimentSet=this.getSelectedExperimentOrExperimentSetValueObject();selectFactorPanel.setSelectedExperimentIds(experimentOrExperimentSet.expressionExperimentIds?experimentOrExperimentSet.expressionExperimentIds:[experimentOrExperimentSet.id]);}}});}
var selectFactorPanel=new Gemma.MetaAnalysisSelectFactorPanel({metaAnalysis:this.metaAnalysis,listeners:{nextButtonClicked:function(panel){showResultPanel.setResultSetIds(this.getSelectedResultSetIds());var maskMessage='Read-only. To modify selection, click the "Modify selection" button in the Results section.';selectExperimentPanel.body.mask(maskMessage,'read-only-warning');selectFactorPanel.setPanelReadOnly(maskMessage,'read-only-warning');}}});var showResultPanel=new Gemma.MetaAnalysisShowResultPanel({metaAnalysis:this.metaAnalysis,defaultQvalueThreshold:this.defaultQvalueThreshold,listeners:{modifySelectionButtonClicked:function(){selectExperimentPanel.body.unmask();selectFactorPanel.unsetPanelReadOnly();var indexOfTabToBeActivated=1;tabPanel.setActiveTab(indexOfTabToBeActivated);for(var i=indexOfTabToBeActivated+1;i<tabPanel.items.length;i++){tabPanel.getComponent(i).disable();}}}});this.relayEvents(showResultPanel,['resultSaved']);var tabPanelItems=this.metaAnalysis?[selectFactorPanel,showResultPanel]:[selectExperimentPanel,selectFactorPanel,showResultPanel];var tabPanel=new Gemma.WizardTabPanel({useCustomInsteadOfTabIcons:(!this.metaAnalysis),enableOnlyFirstTab:(!this.metaAnalysis),items:tabPanelItems});Ext.apply(this,{items:[tabPanel]});Gemma.MetaAnalysisWindow.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.MetaAnalysisShowResultPanel=Ext.extend(Gemma.WizardTabPanelItemPanel,{title:'Results',metaAnalysis:null,defaultQvalueThreshold:null,numResultsLimit:500,nextButtonText:'Save results',layout:'border',initComponent:function(){var nextButton=this.createNextButton();var resultPanel=new Gemma.MetaAnalysisResultPanel({region:'center',metaAnalysis:this.metaAnalysis,defaultQvalueThreshold:this.defaultQvalueThreshold,showLimitDisplayCombo:true,showDownloadButton:true});var thisPanelItems=[resultPanel];if(!this.metaAnalysis){thisPanelItems.push({region:'south',layout:'hbox',border:false,height:40,padding:'10px 0 0 10px',items:[nextButton,{xtype:'button',margins:'0 0 0 10',text:'Modify selection',handler:function(){Ext.MessageBox.show({title:'Modify selection',msg:'If you proceed, you will lose your current results.',buttons:Ext.MessageBox.OKCANCEL,fn:function(button){if(button==='ok'){this.fireEvent('modifySelectionButtonClicked');}},scope:this});},scope:this}]});}
var resultSetIdsToBeSaved=[];Ext.apply(this,{nextButtonHandler:function(){var saveResultWindow=new Gemma.MetaAnalysisSaveResultWindow({listeners:{okButtonClicked:function(name,description){var callParams=[];callParams.push(resultSetIdsToBeSaved);callParams.push(name);callParams.push(description);callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);k.on('done',function(metaAnalysisReturned){if(metaAnalysisReturned==null){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.MetaAnalysisShowResultPanel.ErrorTitle.resultSetsNotSaved,Gemma.HelpText.CommonErrors.errorUnknown);}else{this.fireEvent('resultSaved');}}.createDelegate(this));k.on('fail',function(data){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.MetaAnalysisShowResultPanel.ErrorTitle.resultSetsNotSaved,data);}.createDelegate(this));}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.MetaAnalysisShowResultPanel.ErrorTitle.resultSetsNotSaved,error);}.createDelegate(this)});DiffExMetaAnalyzerController.saveResultSets.apply(this,callParams);},scope:this}});saveResultWindow.show();},items:thisPanelItems,setResultSetIds:function(resultSetIds){resultSetIdsToBeSaved=resultSetIds;resultPanel.clear();var callParams=[];callParams.push(resultSetIds);callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,true);k.on('done',function(metaAnalysisReturned){resultPanel.setMetaAnalysis(metaAnalysisReturned);nextButton.setDisabled(!metaAnalysisReturned);}.createDelegate(this));k.on('fail',function(data){resultPanel.clear(Gemma.HelpText.WidgetDefaults.MetaAnalysisShowResultPanel.ErrorMessage.resultSetsNotAnalyzed);nextButton.setDisabled(true);}.createDelegate(this));}.createDelegate(this),errorHandler:function(error){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.MetaAnalysisShowResultPanel.ErrorTitle.resultSetsNotAnalyzed,error);}.createDelegate(this)});DiffExMetaAnalyzerController.analyzeResultSets.apply(this,callParams);}});Gemma.MetaAnalysisShowResultPanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.MetaAnalysisUtilities=Ext.extend(Object,{constructor:function(){var DEFAULT_THRESHOLD=0.1;var DIRECTION_UP_STYLE='style="font-size: 12px; color: #0B6138;"';var DIRECTION_DOWN_STYLE='style="font-size: 12px; color: #FF0000;"';Ext.apply(this,{getDefaultThreshold:function(){return DEFAULT_THRESHOLD;},generateDirectionHtml:function(isUp){return'<span '+
(isUp?DIRECTION_UP_STYLE+'>&uarr;':DIRECTION_DOWN_STYLE+'>&darr;')+'</span>';}});}});Ext.namespace('Gemma');Gemma.MetaAnalysisSelectExperimentPanel=Ext.extend(Gemma.WizardTabPanelItemPanel,{title:'Select experiments',nextButtonText:'Select factors',initComponent:function(){var experimentSearchAndPreview;var contentPanel=new Ext.Panel({border:false,taxonChanged:function(taxonId,taxonName){}});var initContentPanel=function(){contentPanel.removeAll();experimentSearchAndPreview=new Gemma.ExperimentSearchAndPreview({width:884,searchForm:contentPanel,listeners:{madeFirstSelection:function(){nextButton.enable();resetButton.enable();}}});contentPanel.add(experimentSearchAndPreview);contentPanel.doLayout();};var nextButton=this.createNextButton();nextButton.disable();var resetButton=new Ext.Button({disabled:true,icon:'/Gemma/images/icons/arrow_refresh_small.png',margins:'0 0 0 10',text:'Reset',handler:function(button,eventObject){initContentPanel();nextButton.disable();resetButton.disable();}});initContentPanel();Ext.apply(this,{border:false,items:[contentPanel,{border:false,layout:{type:'hbox',padding:'10 0 0 10'},items:[nextButton,resetButton]}],getSelectedExperimentOrExperimentSetValueObject:function(){return experimentSearchAndPreview.getSelectedExperimentOrExperimentSetValueObject();}});Gemma.MetaAnalysisSelectExperimentPanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.MetaAnalysisResultPanel=Ext.extend(Ext.Panel,{metaAnalysis:null,defaultQvalueThreshold:null,showLimitDisplayCombo:true,showDownloadButton:true,numResultsLimit:500,border:false,layout:'border',initComponent:function(){var GENE_SYMBOL_COLUMN_TITLE='Symbol';var GENE_NAME_COLUMN_TITLE='Name';var P_VALUE_COLUMN_TITLE='p-value';var Q_VALUE_COLUMN_TITLE='q-value';var DIRECTION_COLUMN_TITLE='Direction';var MAX_CHARACTERS_IN_COLUMN=100;var totalNumberOfResults=0;var currentThreshold=null;var summaryLabel=new Ext.form.Label();var metaAnalysisUtilities=new Gemma.MetaAnalysisUtilities();var limitDisplayCombo=this.showLimitDisplayCombo?new Ext.form.ComboBox({width:180,editable:false,triggerAction:'all',mode:'local',store:new Ext.data.ArrayStore({fields:['shouldLimit','displayText'],data:[[true,'Display top '+this.numResultsLimit+' results'],[false,'Display all results']]}),value:true,valueField:'shouldLimit',displayField:'displayText',listeners:{select:function(combo,record,index){this.showResults();},scope:this}}):null;var downloadButton=this.showDownloadButton?new Ext.Button({text:'<b>Download</b>',icon:'/Gemma/images/download.gif',handler:function(){var downloadData=[[GENE_SYMBOL_COLUMN_TITLE,GENE_NAME_COLUMN_TITLE,P_VALUE_COLUMN_TITLE,Q_VALUE_COLUMN_TITLE,DIRECTION_COLUMN_TITLE]];for(var i=0;i<this.metaAnalysis.results.length;i++){var resultRow=getResultRow(i);if(currentThreshold==null||resultRow.metaQvalue<currentThreshold){downloadData.push([resultRow.geneSymbol,resultRow.geneName,resultRow.metaPvalue,resultRow.metaQvalue,resultRow.upperTail?'up':'down']);}}
var downloadDataHeader='Results for Meta-analysis '+
(this.metaAnalysis.name==null?'':this.metaAnalysis.name)+' (q-value < '+
(currentThreshold==null?this.defaultQvalueThreshold:currentThreshold)+')';var textWindow=new Gemma.DownloadWindow({windowTitleSuffix:downloadDataHeader,downloadDataHeader:downloadDataHeader,downloadData:downloadData,modal:true});textWindow.convertToText();textWindow.show();},scope:this}):null;var headerPanelItems=[summaryLabel];if(this.showDownloadButton){headerPanelItems.push(downloadButton);}
if(this.showLimitDisplayCombo){headerPanelItems.push(limitDisplayCombo);}
var headerPanel=new Ext.Panel({region:'north',layout:'vbox',align:'stretch',border:false,height:90,defaults:{margins:'10 0 0 10',style:'white-space: nowrap;'},items:headerPanelItems});var resultLabel=new Ext.form.Label({region:'center',autoScroll:true,style:'background-color: #FFFFFF;'});var getResultRow=function(index){var result=this.metaAnalysis.results[index];var row={geneSymbol:result.geneSymbol,geneName:result.geneName,metaPvalue:result.metaPvalue.toExponential(2),metaQvalue:result.metaQvalue.toExponential(2),upperTail:result.upperTail};return row;}.createDelegate(this);var showResultsWithoutMask=function(threshold){currentThreshold=threshold;var resultText='';if(resultLabel.loadMask){resultLabel.loadMask.hide();}
if(this.metaAnalysis){if(threshold!=null&&threshold<=0){resultLabel.setText('');summaryLabel.setText('');}else{this.metaAnalysis.results.sort(function(result1,result2){return result1.metaPvalue<result2.metaPvalue?-1:result1.metaPvalue==result2.metaPvalue?0:1;});var shouldLimitDisplayComboBeShown=this.showLimitDisplayCombo&&this.metaAnalysis.results.length>this.numResultsLimit;var height=40;if(this.showDownloadButton){height+=40;downloadButton.show();}
if(shouldLimitDisplayComboBeShown){height+=40;limitDisplayCombo.show();}else if(limitDisplayCombo){limitDisplayCombo.hide();}
headerPanel.setHeight(height);var stringStyle='style="padding: 0 10px 0 10px; vertical-align: top;"';var numberStyle='style="padding: 0 10px 0 10px; vertical-align: top; text-align: right; white-space: nowrap;"';var directionStyle='style="padding: 0 10px 0 10px; text-align: center; vertical-align: top;"';resultText+='<table>'+'<tr>'+'<th '+stringStyle+'>'+GENE_SYMBOL_COLUMN_TITLE+'</th>'+'<th '+stringStyle+'>'+GENE_NAME_COLUMN_TITLE+'</th>'+'<th '+numberStyle+'>'+P_VALUE_COLUMN_TITLE+'</th>'+'<th '+numberStyle+'>'+Q_VALUE_COLUMN_TITLE+'</th>'+'<th '+stringStyle+'>'+DIRECTION_COLUMN_TITLE+'</th>'+'</tr>';var metaAnalysisMaxIndex=shouldLimitDisplayComboBeShown&&limitDisplayCombo.getValue()?this.numResultsLimit:this.metaAnalysis.results.length;var numResultsDisplayed=0;for(var i=0;i<metaAnalysisMaxIndex;i++){var resultRow=getResultRow(i);if(threshold==null||resultRow.metaQvalue<threshold){numResultsDisplayed++;resultText+='<tr>'+'<td '+stringStyle+'>'+resultRow.geneSymbol+'</td>'+'<td '+stringStyle+'>'+Ext.util.Format.ellipsis(resultRow.geneName,MAX_CHARACTERS_IN_COLUMN,true)+'</td>'+'<td '+numberStyle+'>'+resultRow.metaPvalue+'</td>'+'<td '+numberStyle+'>'+resultRow.metaQvalue+'</td>'+'<td '+directionStyle+'>'+metaAnalysisUtilities.generateDirectionHtml(resultRow.upperTail)+'</td>'+'</tr>';}}
resultText+='</table>';resultLabel.setText(resultText,false);totalNumberOfResults=(threshold==null?this.metaAnalysis.results.length:numResultsDisplayed);downloadButton.setDisabled(totalNumberOfResults<=0);summaryLabel.setText('<b>Number of genes analyzed</b>: '+this.metaAnalysis.numGenesAnalyzed+'<br />'+'<b>Number of genes with q-value < '+
(threshold==null?this.defaultQvalueThreshold:threshold)+'</b>: '+
totalNumberOfResults,false);}}else{summaryLabel.setText('<b>No results were significant.</b>',false);}
this.doLayout();}.createDelegate(this);Ext.apply(this,{getTotalNumberOfResults:function(){return totalNumberOfResults;},setMetaAnalysis:function(metaAnalysis){this.metaAnalysis=metaAnalysis;showResultsWithoutMask();},clear:function(errorMessage){summaryLabel.setText(errorMessage?'<b>'+errorMessage+'</b>':'',false);resultLabel.setText('',false);if(limitDisplayCombo){limitDisplayCombo.hide();}
if(downloadButton){downloadButton.hide();}
this.doLayout();},showResults:function(threshold){if(resultLabel.getEl()){if(!resultLabel.loadMask){resultLabel.loadMask=new Ext.LoadMask(resultLabel.getEl(),{msg:"Loading ..."});}
resultLabel.loadMask.show();Ext.defer(showResultsWithoutMask,10,this,[threshold]);}else{showResultsWithoutMask(threshold);}},items:[headerPanel,resultLabel]});if(this.metaAnalysis){showResultsWithoutMask();}
Gemma.MetaAnalysisResultPanel.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.MetaAnalysisSaveResultWindow=Ext.extend(Ext.Window,{title:'Save results',modal:true,constrain:true,width:500,shadow:true,closeAction:'close',initComponent:function(){var nameTextField=new Ext.form.TextField({maxLength:255,allowBlank:false,fieldLabel:'Name',anchor:'100%'});var descriptionTextArea=new Ext.form.TextArea({maxLength:65535,fieldLabel:'Description',anchor:'100%',initComponent:function(){Ext.apply(this,{autoCreate:{tag:'textarea',rows:'4',maxlength:this.maxLength}});this.superclass().initComponent.call(this);}});Ext.apply(this,{items:[{xtype:'form',monitorValid:true,padding:'15px',items:[nameTextField,descriptionTextArea],buttons:[{text:'OK',formBind:true,handler:function(){this.fireEvent('okButtonClicked',nameTextField.getValue(),descriptionTextArea.getValue());this.close();},scope:this},{text:'Cancel',handler:function(){this.close();},scope:this}]}]});Gemma.MetaAnalysisSaveResultWindow.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.AnalysisResultsSearchExamples=Ext.extend(Ext.Panel,{exampleQueries:{diffEx:[{goId:"GO_0021766",eeSetId:'6112',taxonId:'1',backupGeneIds:[175764,57412,33449,22652,172517,365527,154351,164380,163012,36178,258329,325340,119501,161166,169774,43145,12948,74699,203063,120960,33479,322804,88959,12966,7187,136503,33369,57883,73088,174546,74174,57397,36158]},{goId:"GO_0021879",eeSetId:'6110',taxonId:'2',backupGeneIds:[500611,534025,574982,633950,550316,534368,537487,574759,556740,583115,634211,534401,500595]}],coex:[{goId:"GO_0051302",eeSetName:'Master set for yeast',taxonId:'11',backupGeneIds:[7678763,7678783,7676882,7694443,7685764,7667629,7672893,7673265,7686100,7697083,7670169,7692953]},{goId:"GO_0035418",eeSetId:'737',taxonId:'1',backupGeneIds:[269935,194669,232747,36104,316763]}]},isCollapsed:false,colspan:4,cls:'left-align-btn transparent-btn transparent-btn-link',initComponent:function(){Gemma.AnalysisResultsSearchExamples.superclass.initComponent.call(this);this.add([{ref:'examplesTitle',tpl:'Example Queries: <a href="javascript:void(0);">[ {sign} ]</a>',data:{sign:'-'},border:false,hidingExamples:false,listeners:{'render':function(){this.body.on('click',function(e){e.stopEvent();this.fireEvent('toggleHideExamples');},this,{delegate:'a'});},'toggleHideExamples':{fn:this.collapseExamples,scope:this}}},{ref:'diffExExamples',border:false,hidden:!this.defaultIsDiffEx,items:[{xtype:'button',ref:'diffExExample1',text:Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.Examples.diffEx1Text,tooltip:Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.Examples.diffEx1TT,listeners:{click:function(){this.runExampleQuery(this.exampleQueries.diffEx[0]);},scope:this}},{xtype:'button',ref:'diffExExample2',text:Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.Examples.diffEx2Text,tooltip:Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.Examples.diffEx2TT,listeners:{click:function(){this.runExampleQuery(this.exampleQueries.diffEx[1]);},scope:this}}]},{ref:'coexExamples',border:false,hidden:this.defaultIsDiffEx,items:[{xtype:'button',ref:'coexExample1',text:Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.Examples.coex1Text,tooltip:Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.Examples.coex1TT,listeners:{click:function(){this.runExampleQuery(this.exampleQueries.coex[0]);},scope:this}}]}]);this.doLayout();},showDiffExExamples:function(){this.diffExExamples.show();this.coexExamples.hide();},showCoexExamples:function(){this.diffExExamples.hide();this.coexExamples.show();},collapseExamples:function(show){if(show===undefined){show=this.isCollapsed;}
this.diffExExamples.diffExExample1.setVisible(show);this.diffExExamples.diffExExample2.setVisible(show);this.coexExamples.coexExample1.setVisible(show);if(show){this.examplesTitle.update({sign:'-'});this.isCollapsed=false;}else{this.examplesTitle.update({sign:'+'});this.isCollapsed=true;}},eeSetCb:function(eeSet){var record=new Gemma.ExperimentAndExperimentGroupComboRecord({name:eeSet.name,description:eeSet.descrption,isGroup:true,size:eeSet.expressionExperimentIds.length,taxonId:eeSet.taxonId,taxonName:eeSet.taxonName,memberIds:eeSet.expressionExperimentIds,resultValueObject:eeSet,userOwned:false});this.fireEvent('eeExampleReady',record);},getExperimentSet:function(setId,setName){if(setId){ExpressionExperimentSetController.load(setId,this.eeSetCb.createDelegate(this));}else if(setName){ExpressionExperimentSetController.loadByName(setName,this.eeSetCb.createDelegate(this));}else{}},getGOGeneSet:function(goName,taxonId,backupGeneIds){var myscope=this;GenePickerController.getGeneSetByGOId(goName,taxonId,function(geneSet){if(geneSet===null){geneSet=myscope.makeSessionBoundGeneSet(backupGeneIds,taxonId,'Backup gene list for '+goName,'GO database unavailable, using backup list');}
var record=new Gemma.GeneAndGeneGroupComboRecord({name:geneSet.name,description:geneSet.descrption,isGroup:true,size:geneSet.geneIds.length,taxonId:geneSet.taxonId,taxonName:geneSet.taxonName,memberIds:geneSet.geneIds,resultValueObject:geneSet,comboText:geneSet.name+": "+geneSet.description,userOwned:false});myscope.fireEvent('geneExampleReady',record);});},makeSessionBoundGeneSet:function(geneIds,taxonId,name,description){var newGeneSet=new SessionBoundGeneSetValueObject();newGeneSet.modified=false;newGeneSet.geneIds=geneIds;newGeneSet.taxonId=taxonId;newGeneSet.name=name;newGeneSet.description=description,newGeneSet.size=geneIds.length;newGeneSet.id=null;return newGeneSet;},runExampleQuery:function(exampleConfig){this.fireEvent('startingExample');var goName=exampleConfig.goId;var eeSetId=exampleConfig.eeSetId;var eeSetName=exampleConfig.eeSetName;var taxonId=exampleConfig.taxonId;var backupGeneIds=exampleConfig.backupGeneIds;this.getExperimentSet(eeSetId,eeSetName);this.getGOGeneSet(goName,taxonId,backupGeneIds);var queryRun=false;var geneExampleReady=false;var eeExampleReady=false;this.on('geneExampleReady',function(record){geneExampleReady=true;this.geneExampleRecord=record;if(eeExampleReady&&!queryRun){queryRun=true;this.fireEvent('examplesReady',taxonId,this.geneExampleRecord,this.experimentExampleRecord);}});this.on('eeExampleReady',function(record){eeExampleReady=true;this.experimentExampleRecord=record;if(geneExampleReady&&!queryRun){queryRun=true;this.fireEvent('examplesReady',taxonId,this.geneExampleRecord,this.experimentExampleRecord);}});}});Ext.namespace('Gemma');Gemma.MIN_STRINGENCY=2;Gemma.MAX_GENES_PER_CLASSIC_DIFFEX_QUERY=20;Gemma.MAX_GENES_PER_DIFF_EX_VIZ_QUERY=100;Gemma.MAX_EXPERIMENTS_PER_DIFF_EX_VIZ_QUERY=100;Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY=20;Gemma.MAX_EXPERIMENTS_CO_DIFF_EX_VIZ_QUERY=100000;Gemma.AnalysisResultsSearchMethods=Ext.extend(Ext.util.Observable,{taxonId:null,DEFAULT_STRINGENCY:2,DEFAULT_forceProbeLevelSearch:false,DEFAULT_useMyDatasets:false,DEFAULT_queryGenesOnly:false,geneIds:[],geneGroupId:null,experimentIds:[],hidingExamples:false,searchCoexpression:function(geneSetValueObjects,experimentSetValueObjects){this.runningCoex=true;this.runningDiffEx=false;this.geneSetValueObjects=geneSetValueObjects;this.experimentSetValueObjects=experimentSetValueObjects;this.validateSearch(geneSetValueObjects,experimentSetValueObjects);},searchDifferentialExpression:function(geneSetValueObjects,experimentSetValueObjects){this.runningCoex=false;this.runningDiffEx=true;this.geneSetValueObjects=geneSetValueObjects;this.experimentSetValueObjects=experimentSetValueObjects;this.validateSearch(geneSetValueObjects,experimentSetValueObjects);},getGeneIds:function(){var geneIds=[];var i;var j;var selectedVOs=this.geneSetValueObjects;for(i=0;i<selectedVOs.length;i++){var vo=selectedVOs[i];if(vo instanceof GeneValueObject){geneIds.push(vo.id);}else if(vo instanceof GeneSetValueObject){geneIds=geneIds.concat(vo.geneIds);}}
return geneIds;},getExperimentIds:function(){var eeIds=[];var i;var j;var selectedVOs=this.experimentSetValueObjects;for(i=0;i<selectedVOs.length;i++){var vo=selectedVOs[i];if(vo instanceof ExpressionExperimentValueObject){eeIds.push(vo.id);}else if(vo instanceof ExpressionExperimentSetValueObject){eeIds=eeIds.concat(vo.expressionExperimentIds);}}
return eeIds;},validateSearch:function(geneSetValueObjects,experimentSetValueObjects){if(geneSetValueObjects.length===0){Ext.Msg.alert("Error","Gene(s) must be selected before continuing.");this.fireEvent('searchAborted');return;}else if(geneSetValueObjects[0].geneIds&&geneSetValueObjects[0].geneIds.length==0){Ext.Msg.alert("Error","Gene(s) must be selected before continuing.");this.fireEvent('searchAborted');return;}
if(experimentSetValueObjects.length===0){Ext.Msg.alert("Error","Experiment(s) must be selected before continuing.");this.fireEvent('searchAborted');return;}
var i;var vo;var geneCount=0;for(i=0;i<geneSetValueObjects.length;i++){vo=geneSetValueObjects[i];if(vo.geneIds){geneCount+=vo.geneIds.length;}}
var experimentCount=0;for(i=0;i<experimentSetValueObjects.length;i++){vo=experimentSetValueObjects[i];if(vo.expressionExperimentIds){experimentCount+=vo.expressionExperimentIds.length;}}
var stateText="";var maxText="";var maxNumGenes=this.getMaxNumGenes();var maxNumExperiments=this.getMaxNumExperiments();if(geneCount>maxNumGenes&&experimentCount>maxNumExperiments){stateText=geneCount+" genes and "+experimentCount+" experiments";maxText=maxNumGenes+" genes and "+maxNumExperiments+" experiments";}
else if(experimentCount>maxNumExperiments){stateText=experimentCount+" experiments";maxText=maxNumExperiments+" experiments";}
else if(geneCount>maxNumGenes){stateText=geneCount+" genes";maxText=maxNumGenes+" genes";}
if((!this.runningCoex&&!this.showClassicDiffExResults)&&(geneCount>maxNumGenes||experimentCount>maxNumExperiments)){Ext.getBody().mask();var warningWindow=new Ext.Window({width:450,height:200,closable:false,bodyStyle:'padding:7px;background: white; font-size:1.1em',title:Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.trimmingWarningTitle,html:String.format(Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.trimmingWarningText,stateText,maxText),buttons:[{text:'Trim',tooltip:'Your query will be trimmed to '+maxText,handler:function(){if(geneCount>this.getMaxNumGenes()){geneSetValueObjects=this.trimGeneValObjs(geneSetValueObjects,this.getMaxNumGenes());}
if(experimentCount>this.getMaxNumExperiments()){experimentSetValueObjects=this.trimExperimentValObjs(experimentSetValueObjects,this.getMaxNumExperiments());}
this.fireEvent('beforesearch');this.doSearch(geneSetValueObjects,experimentSetValueObjects);warningWindow.close();return;},scope:this},{text:'Don\'t trim',tooltip:'Continue with your search as is',handler:function(){this.fireEvent('beforesearch');this.doSearch(geneSetValueObjects,experimentSetValueObjects);warningWindow.close();return;},scope:this},{text:'Cancel',handler:function(){warningWindow.close();this.fireEvent('searchAborted');return;},scope:this}]});warningWindow.show();warningWindow.on('close',function(){Ext.getBody().unmask();});}else{this.fireEvent('beforesearch');this.doSearch(geneSetValueObjects,experimentSetValueObjects);return;}},getMaxNumGenes:function(){return(this.runningCoex)?Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY:(this.showClassicDiffExResults)?Gemma.MAX_GENES_PER_CLASSIC_DIFFEX_QUERY:Gemma.MAX_GENES_PER_DIFF_EX_VIZ_QUERY;},getMaxNumExperiments:function(){return(this.runningCoex)?Gemma.MAX_EXPERIMENTS_PER_CO_EX_VIZ_QUERY:Gemma.MAX_EXPERIMENTS_PER_DIFF_EX_VIZ_QUERY;},trimGeneValObjs:function(valueObjects,max){var runningCount=0;var i;var valObj;var trimmedValueObjects=[];for(i=0;i<valueObjects.length;i++){valObj=valueObjects[i];if(valObj.geneIds&&(runningCount+valObj.geneIds.length)<max){runningCount+=valObj.geneIds.length;trimmedValueObjects.push(valObj);}else if(valObj.geneIds){var trimmedIds=valObj.geneIds.slice(0,(max-runningCount));var trimmedValObj=Object.clone(valObj);trimmedValObj.geneIds=trimmedIds;trimmedValObj.id=null;trimmedValObj.name="Trimmed "+valObj.name;trimmedValObj.description="Trimmed "+valObj.name+" for search";trimmedValObj.modified=true;trimmedValueObjects.push(trimmedValObj);return trimmedValueObjects;}}
return trimmedValueObjects;},trimExperimentValObjs:function(valueObjects,max){var runningCount=0;var i;var valObj;var trimmedValueObjects=[];for(i=0;i<valueObjects.length;i++){valObj=valueObjects[i];if(valObj.expressionExperimentIds&&(runningCount+valObj.expressionExperimentIds.length)<max){runningCount+=valObj.expressionExperimentIds.length;trimmedValueObjects.push(valObj);}else if(valObj.expressionExperimentIds){var trimmedIds=valObj.expressionExperimentIds.slice(0,(max-runningCount));var trimmedValObj=Object.clone(valObj);trimmedValObj.expressionExperimentIds=trimmedIds;trimmedValObj.id=null;trimmedValObj.name="Trimmed "+valObj.name;trimmedValObj.description="Trimmed "+valObj.name+" for search";trimmedValObj.modified=true;trimmedValueObjects.push(trimmedValObj);return trimmedValueObjects;}}
return trimmedValueObjects;},doSearch:function(geneSetValueObjects,experimentSetValueObjects){this.doneCoex=false;this.doneDiffEx=false;var geneSetValObjsToRegister=[];var geneSetValObjsAlreadyRegistered=[];var i;var j;var gsvo;for(i=0;i<geneSetValueObjects.length;i++){gsvo=geneSetValueObjects[i];if(typeof gsvo!=='undefined'&&(gsvo.id===null||gsvo.id===-1)){var gsvoClone=Object.clone(gsvo);delete gsvoClone.memberIds;geneSetValObjsToRegister.push(gsvoClone);}else{geneSetValObjsAlreadyRegistered.push(gsvo);}}
if(geneSetValObjsToRegister.length>0){geneSetValueObjects=geneSetValObjsAlreadyRegistered;this.waitingForGeneSessionGroupBinding=true;GeneSetController.addSessionGroups(geneSetValObjsToRegister,false,function(geneSets){if(geneSets===null||geneSets.length===0){return;}else{for(j=0;j<geneSets.length;j++){geneSetValueObjects.push(geneSets[j]);}}
this.waitingForGeneSessionGroupBinding=false;this.doSearch(geneSetValueObjects,experimentSetValueObjects);return;}.createDelegate(this));return;}
var experimentGroupsToRegister=[];var experimentGroupsAlreadyRegistered=[];var esvo;for(i=0;i<experimentSetValueObjects.length;i++){esvo=experimentSetValueObjects[i];if(typeof esvo!=='undefined'&&(esvo.id===-1||esvo.id===null)){experimentGroupsToRegister.push(esvo);}else{experimentGroupsAlreadyRegistered.push(esvo);}}
if(experimentGroupsToRegister.length>0){experimentSetValueObjects=experimentGroupsAlreadyRegistered;this.waitingForExperimentSessionGroupBinding=true;ExpressionExperimentSetController.addSessionGroups(experimentGroupsToRegister,false,function(datasetSets){if(datasetSets===null||datasetSets.length===0){return;}else{for(j=0;j<datasetSets.length;j++){experimentSetValueObjects.push(datasetSets[j]);}}
this.doSearch(geneSetValueObjects,experimentSetValueObjects);return;}.createDelegate(this));return;}
if(this.runningDiffEx){if(this.showClassicDiffExResults){this.doDifferentialExpressionSearch();}else{var data=this.getDataForDiffVisualization(geneSetValueObjects,experimentSetValueObjects);this.fireEvent('showDiffExResults',null,data);}}
else if(this.runningCoex){this.doCoexpressionSearch();}},getCoexpressionSearchCommand:function(){var newCsc={};if(this.csc){newCsc=this.csc;}
Ext.apply(newCsc,{geneIds:this.getGeneIds(),stringency:this.DEFAULT_STRINGENCY,forceProbeLevelSearch:this.DEFAULT_forceProbeLevelSearch,useMyDatasets:this.DEFAULT_useMyDatasets,queryGenesOnly:this.DEFAULT_queryGenesOnly,taxonId:this.taxonId});if(this.getExperimentIds().length>0){newCsc.eeIds=this.getExperimentIds();newCsc.eeSetName=null;newCsc.eeSetId=null;}
return newCsc;},getLastCoexpressionSearchCommand:function(){return this.lastCSC;},doCoexpressionSearch:function(csc){if(!csc){csc=this.getCoexpressionSearchCommand();}
this.fireEvent('clearError');var msg=this.validateCoexSearch(csc);if(msg.length===0){var errorHandler=function(msg,e){this.fireEvent('error',msg,e);};this.restrictCoexSearch(csc);this.lastCSC=csc;if(csc.taxonId==1||csc.taxonId==2){var callParams=[];callParams.push(csc);callParams.push({callback:function(data){var k=new Gemma.WaitHandler();k.handleWait(data,false,true,true);this.relayEvents(k,['done','fail']);Ext.getBody().unmask();k.on('done',this.returnFromCoexSearch.createDelegate(this));k.on('fail',this.cancelFromCoexSearch.createDelegate(this));}.createDelegate(this),errorHandler:this.timeoutFromCoexSearch.createDelegate(this)});ExtCoexpressionSearchController.doBackgroundCoexSearch.apply(this,callParams);}else{ExtCoexpressionSearchController.doSearchQuick2(csc,{callback:this.returnFromCoexSearch.createDelegate(this),timeout:420000,errorHandler:this.timeoutFromCoexSearch.createDelegate(this)});}}else{this.fireEvent('error',msg);}
if(typeof pageTracker!=='undefined'){pageTracker._trackPageview("/Gemma/coexpressionSearch.doCoexpressionSearch");}},getLastCSC:function(){return this.lastCSC;},restrictCoexSearch:function(csc){var k=50;var numDatasets=csc.eeIds.length;var displayStringency=2;if(numDatasets>k){displayStringency=2+Math.round(numDatasets/k);}
if(displayStringency>20){displayStringency=20;}
csc.displayStringency=displayStringency;csc.stringency=Gemma.MIN_STRINGENCY;},validateCoexSearch:function(csc){if(csc.queryGenesOnly&&csc.geneIds.length<2){return"You must select more than one query gene to use 'search among query genes only'";}else if(!csc.geneIds||csc.geneIds.length===0){return"We couldn't figure out which gene you want to query. Please use the search functionality to find genes.";}else if(csc.stringency<Gemma.MIN_STRINGENCY){return"Minimum stringency is "+Gemma.MIN_STRINGENCY;}else if(csc.eeIds&&csc.eeIds.length<1){return"There are no datasets that match your search terms";}else if(!csc.eeIds&&!csc.eeSetId){return"Please select an analysis. Taxon, gene(s), and scope must be specified.";}else if(csc.geneIds.length>this.getMaxNumGenes()){csc.geneIds=csc.geneIds.slice(0,this.getMaxNumGenes());this.fireEvent('warning',"Coexpression searches are limited to "+Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY+" query genes. Your query has been trimmed.<br>");return"";}else{return"";}},getDiffSearchCommand:function(){var newDsc={};if(this.dsc){newDsc=this.dsc;}
var dsfcs=[];if(!this.efChooserPanel){this.initChooserPanel();}
var efMap=this.efChooserPanel.eeFactorsMap;Ext.apply(newDsc,{geneIds:this.getGeneIds(),selectedFactors:efMap,threshold:Gemma.DEFAULT_THRESHOLD,taxonId:this.taxonId});if(this.getExperimentIds().length>0){newDsc.eeIds=this.getExperimentIds();newDsc.eeSetName=null;newDsc.eeSetId=null;}
return newDsc;},initChooserPanel:function(){this.efChooserPanel=new Gemma.ExperimentalFactorChooserPanel({modal:true});},chooseFactors:function(){if(this.getExperimentIds().length===0){Ext.Msg.alert("Warning","You should select at least one experiment to analyze");}else{var eeIds=this.getExperimentIds();if(!this.efChooserPanel){this.initChooserPanel();}
this.efChooserPanel.show(eeIds);}},doDifferentialExpressionSearch:function(dsc){this.fireEvent('clearError');if(!dsc){dsc=this.getDiffSearchCommand();}
var msg=this.validateDiffExSearch(dsc);if(msg.length!==0){this.fireEvent('error',msg);return;}else{this.chooseFactors();this.efChooserPanel.on("factors-chosen",function(efmap){dsc.selectedFactors=efmap;var errorHandler=function(msg,e){this.fireEvent('error',msg,e);}
DifferentialExpressionSearchController.getDiffExpressionForGenes(dsc,{callback:this.returnFromDiffExSearch.createDelegate(this),errorHandler:errorHandler.createDelegate(this)});if(typeof pageTracker!=='undefined'){pageTracker._trackPageview("/Gemma/differentialExpressionSearch.doSearch");}},this,{single:true});}},getDiffExBookmarkableLink:function(dsc){if(!dsc){dsc=this.getDiffSearchCommand();}
var msg=this.validateDiffExSearch(dsc);if(msg.length!==0){this.fireEvent('error',msg);return;}
var queryStart=document.URL.indexOf("?");var url=queryStart>-1?document.URL.substr(0,queryStart):document.URL;url+=String.format("?g={0}&thres={1}&t={2}",dsc.geneIds.join(","),dsc.threshold,dsc.taxonId);if(dsc.eeIds){url+=String.format("&ees={0}",dsc.eeIds.join(","));}
if(dsc.selectedFactors){url+="&fm=";var i;for(i in dsc.selectedFactors){var o=dsc.selectedFactors[i];if(!o.eeId){continue;}
url+=o.eeId+"."+o.efId+",";}}
url=url.replace("home","diff/diffExpressionSearch");return url;},validateDiffExSearch:function(dsc){if(!dsc.geneIds||dsc.geneIds.length===0){return"We couldn't figure out which gene you want to query. Please use the search functionality to find genes.";}else if(dsc.threshold<Gemma.MIN_THRESHOLD){return"Minimum threshold is "+Gemma.MIN_THRESHOLD;}else if(dsc.threshold>Gemma.MAX_THRESHOLD){return"Maximum threshold is "+Gemma.MAX_THRESHOLD;}else if(dsc.eeIds&&dsc.eeIds.length<1){return"There are no datasets that match your search terms";}else if(!dsc.eeIds&&!dsc.eeSetId){return"Please select an analysis. Taxon, gene(s), and scope must be specified.";}else if(dsc.geneIds.length>Gemma.MAX_GENES_PER_CLASSIC_DIFFEX_QUERY){dsc.geneIds=dsc.geneIds.slice(0,Gemma.MAX_GENES_PER_CLASSIC_DIFFEX_QUERY);this.fireEvent('warning',String.format(Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.autoTrimmingText,Gemma.MAX_GENES_PER_CLASSIC_DIFFEX_QUERY,'genes'));return"";}else{return"";}},getDataForDiffVisualization:function(geneSetValueObjects,experimentSetValueObjects){var geneNames=[];var geneResultValueObjects=[];var i;if(geneSetValueObjects.length>0){for(i=0;i<geneSetValueObjects.length;i++){geneNames.push(geneSetValueObjects[i].name);}}
var experimentNames=[];var experimentCount=0;if(experimentSetValueObjects.length>0){for(i=0;i<experimentSetValueObjects.length;i++){experimentNames.push(experimentSetValueObjects[i].name);experimentCount+=experimentSetValueObjects[i].expressionExperimentIds.size();}}
var data={experimentSetValueObjects:experimentSetValueObjects,geneSetValueObjects:geneSetValueObjects,geneNames:geneNames,datasetNames:experimentNames,taxonId:this.taxonId,taxonName:this.taxonName,pvalue:Gemma.DEFAULT_THRESHOLD,datasetCount:experimentCount};return data;},cancelFromCoexSearch:function(result){this.doneCoex=true;this.fireEvent('aftersearch',result,true);},returnFromCoexSearch:function(result){this.doneCoex=true;if(this.runningDiffEx&&this.runningCoex){if(!this.doneDiffEx){return;}else{this.fireEvent('showDiffExResults',result,data);}}
this.fireEvent('aftersearch',result);this.fireEvent('showCoexResults',result);var csc=this.lastCSC;},timeoutFromCoexSearch:function(result){this.doneCoex=true;if(this.runningDiffEx&&this.runningCoex){if(!this.doneDiffEx){return;}else{this.fireEvent('showDiffExResults',result,data);}}
this.fireEvent('aftersearch',result);Ext.Msg.alert(Gemma.HelpText.CommonWarnings.Timeout.title,Gemma.HelpText.CommonWarnings.Timeout.text);},returnFromDiffExSearch:function(result){this.doneDiffEx=true;if(this.runningDiffEx&&this.runningCoex){if(!this.doneCoex){return;}else{this.fireEvent('showCoexResults',result);}}
this.fireEvent('aftersearch',result);var data;if(!this.showClassicDiffExResults){}else{data=null;}
this.fireEvent('showDiffExResults',result,data);},initComponent:function(){Gemma.AnalysisResultsSearchMethods.superclass.initComponent.call(this);},constructor:function(configs){if(typeof configs!=='undefined'){Ext.apply(this,configs);}
Gemma.AnalysisResultsSearchMethods.superclass.constructor.call(this);}});Ext.namespace('Gemma');Gemma.AnalysisResultsSearch=Ext.extend(Ext.Panel,{SEARCH_FORM_WIDTH:900,autoScroll:true,initComponent:function(){Gemma.AnalysisResultsSearch.superclass.initComponent.call(this);this.admin=(Ext.get('hasAdmin')!==null)?Ext.get('hasAdmin').getValue():null;this.user=(Ext.get('hasUser')!==null)?Ext.get('hasUser').getValue():null;var errorPanel=new Ext.Panel({tpl:'<img src="/Gemma/images/icons/warning.png">{msg}',border:false,hidden:true});this.add(errorPanel);var redirectToClassic=false;var browserWarning="";if(!document.createElement("canvas").getContext){redirectToClassic=true;if(Ext.isIE8){browserWarning=Gemma.HelpText.CommonWarnings.BrowserWarnings.ie8;}else if(Ext.isIE){browserWarning=Gemma.HelpText.CommonWarnings.BrowserWarnings.ieNot8;}else{browserWarning=Gemma.HelpText.CommonWarnings.BrowserWarnings.generic;}}
var searchForm=new Gemma.AnalysisResultsSearchForm({width:this.SEARCH_FORM_WIDTH,showClassicDiffExResults:redirectToClassic,bodyStyle:'text-align:left;',style:'text-align:left'});var diffExResultsDiv=new Ext.Panel();var coexResultsTabPanel=new Ext.TabPanel({border:true,bodyStyle:'text-align:left;',style:'text-align:left',hidden:true});this.searchPanel=new Ext.Panel({items:[searchForm],title:'Search Form',collapsible:true,titleCollapse:true,border:false,bodyStyle:'margin-left:auto;margin-right:auto;width:'+this.SEARCH_FORM_WIDTH+'px;'});this.add(this.searchPanel);this.add(new Ext.Panel({items:[coexResultsTabPanel],title:'Results',layout:'fit'}));this.add(diffExResultsDiv);this.doLayout();this.diffVisualizer=null;if(browserWarning!==""){errorPanel.on('render',function(){this.update('<img src="/Gemma/images/icons/warning.png">'+browserWarning);this.show();});}
searchForm.on("beforesearch",function(panel){var flashPanel=coexResultsTabPanel.getItem('cytoscaperesults');if(flashPanel){flashPanel.stopRender=true;}
coexResultsTabPanel.removeAll();panel.clearError();errorPanel.update();errorPanel.hide();coexResultsTabPanel.doLayout();coexResultsTabPanel.hide();this.remove(diffExResultsDiv.getId());diffExResultsDiv=new Ext.Panel();this.add(diffExResultsDiv);this.doLayout();},this);searchForm.on("handleError",function(msg){errorPanel.update({msg:msg});errorPanel.show();});searchForm.on("showCoexResults",function(formPanel,result){this.showCoExResults(searchForm,result,coexResultsTabPanel,this.searchPanel);},this);searchForm.on("showOptions",function(stringency,forceProbeLevelSearch,queryGenesOnly){if(this.admin){coexResultsTabPanel.insert(1,{border:false,html:'<h4>Refinements Used:</h4>Stringency = '+stringency+'<br>Probe-level search: '+
forceProbeLevelSearch+"<br>Results only among query genes: "+
queryGenesOnly+'<br>'});}
else{coexResultsTabPanel.insert(1,{border:false,html:'<h4>Refinements Used:</h4>Stringency = '+stringency+"<br>Results only among query genes: "+
queryGenesOnly+'<br>'});}
coexResultsTabPanel.doLayout();},this);searchForm.on("showDiffExResults",function(formPanel,result,data){if(!redirectToClassic){Ext.apply(data,{applyTo:diffExResultsDiv.getId()});Ext.apply(data,{showTutorial:false});this.diffVisualizer=new Gemma.MetaHeatmapDataSelection(data);this.diffVisualizer.on('visualizationLoaded',function(){this.searchPanel.collapse();formPanel.loadMask.hide();},this);}
else{var diffExResultsGrid=new Gemma.DiffExpressionGrid({renderTo:diffExResultsDiv.getId(),title:"Differentially expressed genes",searchPanel:formPanel,viewConfig:{forceFit:true},width:'auto',style:'width:100%'});diffExResultsGrid.loadData(result);var link=formPanel.getDiffExBookmarkableLink();diffExResultsGrid.setTitle(String.format("Differentially expressed genes <a target='_blank' href='{0}&export'>(export as text)</a>",link));}},this);},showCoExResults:function(searchForm,result,coexResultsTabPanel,searchPanel){var coexOptions=new Gemma.CoexpressionSearchOptions();coexOptions.on('rerunSearch',function(stringency,forceProbe,queryGenesOnly){coexOptions.hide();var flashPanel=coexResultsTabPanel.getItem('cytoscaperesults');if(flashPanel){flashPanel.stopRender=true;}
coexResultsTabPanel.removeAll();searchForm.redoRecentCoexpressionSearch(stringency,forceProbe,queryGenesOnly);},this);if(result.errorState){var emptyPanel=new Ext.Panel({html:"<br> "+result.errorState,border:false,title:"No Coexpression Search Results"});coexResultsTabPanel.add(emptyPanel);coexResultsTabPanel.show();coexResultsTabPanel.doLayout();emptyPanel.show();return;}
var coexpressionSearchData=new Gemma.CoexpressionSearchData({coexGridCoexCommand:searchForm.getLastCoexpressionSearchCommand(),cytoscapeCoexCommand:Gemma.CytoscapePanelUtil.getCoexVizCommandFromCoexGridCommand(searchForm.getLastCoexpressionSearchCommand()),coexGridResults:result});var displayedResults=Gemma.CoexValueObjectUtil.combineKnownGeneResultsAndQueryGeneOnlyResults(result.knownGeneResults,result.queryGenesOnlyResults);var highestResultStringency=Gemma.CoexValueObjectUtil.getHighestResultStringencyUpToInitialDisplayStringency(displayedResults,coexpressionSearchData.coexGridCoexCommand.displayStringency);if(coexpressionSearchData.coexGridCoexCommand.displayStringency>highestResultStringency){coexpressionSearchData.coexGridCoexCommand.displayStringency=highestResultStringency;coexpressionSearchData.cytoscapeCoexCommand.displayStringency=highestResultStringency;coexpressionSearchData.cytoscapeCoexCommand.stringency=Gemma.CytoscapePanelUtil.restrictResultsStringency(highestResultStringency);}
var knownGeneGrid=new Gemma.CoexpressionGrid({width:900,height:400,title:"Table",ref:'coexGridResults',id:'coexGridResults',colspan:2,user:this.user,tabPanelViewFlag:true,layoutOnTabChange:true,hideMode:'offsets',coexpressionSearchData:coexpressionSearchData});var cytoscapePanel=new Gemma.CytoscapePanel({id:"cytoscaperesults",ref:'coexCytoscapeResults',title:"Visualization",height:Ext.getBody().getHeight()>500?Ext.getBody().getHeight()-150:500,taxonId:searchForm.getTaxonId(),taxonName:searchForm.getTaxonName(),hideMode:'visibility',coexpressionSearchData:coexpressionSearchData,knownGeneGrid:knownGeneGrid,searchPanel:searchForm});searchPanel.collapse();coexResultsTabPanel.add(knownGeneGrid);coexResultsTabPanel.add(cytoscapePanel);coexResultsTabPanel.show();coexResultsTabPanel.doLayout();knownGeneGrid.loadData(result.isCannedAnalysis,2,displayedResults,result.knownGeneDatasets);knownGeneGrid.refreshGridFromCoexpressionSearchData();knownGeneGrid.show();}});Ext.namespace('Gemma');Gemma.AnalysisResultsSearchForm=Ext.extend(Ext.FormPanel,{layout:'table',layoutConfig:{columns:5},width:900,frame:false,border:false,bodyBorder:false,bodyStyle:"backgroundColor:white",defaults:{border:false},ctCls:'titleBorderBox',stateful:false,stateEvents:["beforesearch"],eeSetReady:false,taxonId:null,defaultIsDiffEx:true,geneIds:[],geneGroupId:null,experimentIds:[],handleWarning:function(msg,e){if(Ext.get("analysis-results-search-form-messages")){Ext.DomHelper.overwrite("analysis-results-search-form-messages",{tag:'img',src:'/Gemma/images/icons/warning.png'});if(!(msg.length===0)){Ext.DomHelper.append("analysis-results-search-form-messages",{tag:'span',html:"&nbsp;&nbsp;"+msg});}
else{Ext.DomHelper.append("analysis-results-search-form-messages",{tag:'span',html:"&nbsp;&nbsp;Error retrieving results."});}}
else{if(!(msg.length===0)){this.fireEvent("handleError",msg);}
else{this.fireEvent("handleError","Error retrieving results.");}}},handleError:function(msg,e){this.handleWarning(msg,e);this.loadMask.hide();this.fireEvent('aftersearch',this,e);if(e&&!(msg.length===0)){Ext.Msg.alert("Error",e+"/n"+msg);}},clearError:function(){if(Ext.get("analysis-results-search-form-messages")){Ext.DomHelper.overwrite("analysis-results-search-form-messages","");}},wereSelectionsModified:function(){var wereModified=false;this.geneChoosers.items.each(function(){if(this instanceof Gemma.GeneSearchAndPreview&&this.getSelectedGeneOrGeneSetValueObject()){if(this.listModified){wereModified=true;}}});if(!wereModified){this.experimentChoosers.items.each(function(){if(this instanceof Gemma.ExperimentSearchAndPreview&&this.getSelectedExperimentOrExperimentSetValueObject()){if(this.listModified){wereModified=true;}}});}
return wereModified;},getGeneSessionGroupQueries:function(){var queries=[];this.geneChoosers.items.each(function(){if(this instanceof Gemma.GeneSearchAndPreview&&this.getSelectedGeneOrGeneSetValueObject()){if(this.queryUsedToGetSessionGroup!==null){queries.push(this.queryUsedToGetSessionGroup);}}});return queries;},getExperimentSessionGroupQueries:function(){var queries=[];this.experimentChoosers.items.each(function(){if(this instanceof Gemma.ExperimentSearchAndPreview&&this.getSelectedExperimentOrExperimentSetValueObject()){if(this.queryUsedToGetSessionGroup!==null){queries.push(this.queryUsedToGetSessionGroup);}}});return queries;},getSelectedGeneAndGeneSetValueObjects:function(){var selectedVOs=[];this.geneChoosers.items.each(function(){if(this instanceof Gemma.GeneSearchAndPreview&&this.getSelectedGeneOrGeneSetValueObject()){selectedVOs.push(this.getSelectedGeneOrGeneSetValueObject());}});return selectedVOs;},getSelectedAsGeneSetValueObjects:function(){var selectedVOs=this.getSelectedGeneAndGeneSetValueObjects();var selectedAsGeneSets=[];var i;for(i=0;i<selectedVOs.length;i++){if(selectedVOs[i]instanceof GeneValueObject){var gene=selectedVOs[i];var singleGeneSet=new SessionBoundGeneSetValueObject();singleGeneSet.id=null;singleGeneSet.geneIds=[gene.id];singleGeneSet.name=gene.officialSymbol;singleGeneSet.description=gene.officialName;singleGeneSet.size=gene.size;singleGeneSet.taxonName=gene.taxonCommonName;singleGeneSet.taxonId=gene.taxonId;singleGeneSet.modified=false;selectedAsGeneSets.push(singleGeneSet);}else{selectedAsGeneSets.push(selectedVOs[i]);}}
return selectedAsGeneSets;},getSelectedExperimentAndExperimentSetValueObjects:function(){var selectedVOs=[];this.experimentChoosers.items.each(function(){if(this instanceof Gemma.ExperimentSearchAndPreview&&this.getSelectedExperimentOrExperimentSetValueObject()){selectedVOs.push(this.getSelectedExperimentOrExperimentSetValueObject());}});return selectedVOs;},getSelectedAsExperimentSetValueObjects:function(){var selectedVOs=this.getSelectedExperimentAndExperimentSetValueObjects();var selectedAsExperimentSets=[];var i;for(i=0;i<selectedVOs.length;i++){if(selectedVOs[i]instanceof ExpressionExperimentValueObject){var ee=selectedVOs[i];var singleExperimentSet=new SessionBoundExpressionExperimentSetValueObject();singleExperimentSet.id=null;singleExperimentSet.expressionExperimentIds=[ee.id];singleExperimentSet.name=ee.shortName;singleExperimentSet.description=ee.name;singleExperimentSet.size=ee.numExperiments;singleExperimentSet.taxonName=ee.taxon;singleExperimentSet.taxonId=ee.taxonId;singleExperimentSet.modified=false;selectedAsExperimentSets.push(singleExperimentSet);}else{selectedAsExperimentSets.push(selectedVOs[i]);}}
return selectedAsExperimentSets;},getExperimentIds:function(){var eeIds=[];var i;var j;var selectedVOs=this.getSelectedExperimentAndExperimentSetValueObjects();for(i=0;i<selectedVOs.length;i++){var vo=selectedVOs[i];if(vo instanceof ExpressionExperimentValueObject){eeIds.push(vo.id);}else if(vo instanceof ExpressionExperimentSetValueObject){eeIds=eeIds.concat(vo.expressionExperimentIds);}}
return eeIds;},getGeneIds:function(){var geneIds=[];var i;var j;var selectedVOs=this.getSelectedGeneAndGeneSetValueObjects();for(i=0;i<selectedVOs.length;i++){var vo=selectedVOs[i];if(vo instanceof GeneValueObject){geneIds.push(vo.id);}else if(vo instanceof GeneSetValueObject){geneIds=geneIds.concat(vo.geneIds);}}
return geneIds;},runSearch:function(){this.searchMethods=new Gemma.AnalysisResultsSearchMethods({taxonId:this.getTaxonId(),taxonName:this.getTaxonName(),showClassicDiffExResults:this.showClassicDiffExResults});this.searchMethods.on('beforesearch',function(){this.fireEvent('beforesearch',this);},this);this.searchMethods.on('showDiffExResults',function(result,data){Ext.apply(data,{geneSessionGroupQueries:this.getGeneSessionGroupQueries(),experimentSessionGroupQueries:this.getExperimentSessionGroupQueries(),selectionsModified:this.wereSelectionsModified(),showTutorial:this.runningExampleQuery});this.fireEvent('showDiffExResults',this,result,data);},this);this.searchMethods.on('showCoexResults',function(result){this.fireEvent('showCoexResults',this,result,this.runningExampleQuery);},this);this.searchMethods.on('aftersearch',function(result,suppressNextEvent){this.loadMask.hide();this.fireEvent('aftersearch',this,result);},this);this.searchMethods.on('warning',function(msg,e){this.handleWarning(msg,e);},this);this.searchMethods.on('error',function(msg,e){this.handleError(msg,e);},this);this.searchMethods.on('clearerror',function(){this.clearError();},this);this.searchMethods.on('searchAborted',function(){this.loadMask.hide();},this);this.collapsePreviews();this.collapseExamples();if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Searching.analysisResults,msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});}
this.loadMask.show();if(this.coexToggle.pressed){this.searchMethods.searchCoexpression(this.getSelectedAsGeneSetValueObjects(),this.getSelectedAsExperimentSetValueObjects());}else{this.searchMethods.searchDifferentialExpression(this.getSelectedAsGeneSetValueObjects(),this.getSelectedAsExperimentSetValueObjects());}},redoRecentCoexpressionSearch:function(stringency,probeLevel,queryGenesOnly){if(!this.searchMethods||this.searchMethods.getLastCSC()===null){return"No search to repeat";}
this.clearError();var lastCSC=this.searchMethods.getLastCSC();Ext.apply(lastCSC,{stringency:stringency,forceProbeLevelSearch:probeLevel,queryGenesOnly:queryGenesOnly});this.searchMethods.doCoexpressionSearch(lastCSC);return"";},getLastCoexpressionSearchCommand:function(){return(this.searchMethods)?this.searchMethods.getLastCoexpressionSearchCommand():null;},initComponent:function(){this.experimentChoosers=new Ext.Panel({frame:false,bodyStyle:'background-color:transparent',defaults:{border:false,bodyStyle:'background-color:transparent'},style:'padding-bottom: 10px',autoDestroy:true});this.experimentChooserIndex=-1;this.initialExperimentChooser=this.addExperimentChooser();this.geneChoosers=new Ext.Panel({frame:false,defaults:{border:false},style:'padding-bottom: 10px;',autoDestroy:true});this.geneChooserIndex=-1;this.initialGeneChooser=this.addGeneChooser();this.coexToggle=new Ext.Button({text:"<span style=\"font-size:1.3em\">Coexpression</span>",cls:'highlightToggle',scale:'medium',width:150,enableToggle:true,pressed:!this.defaultIsDiffEx});this.coexToggle.on('click',function(){this.coexToggle.toggle(true);this.diffExToggle.toggle(false);},this);this.diffExToggle=new Ext.Button({text:"<span style=\"font-size:1.3em\">Differential Expression</span>",scale:'medium',cls:'highlightToggle',width:150,enableToggle:true,pressed:this.defaultIsDiffEx});this.diffExToggle.on('click',function(){this.diffExToggle.toggle(true);this.coexToggle.toggle(false);},this);this.searchBar=new Ext.Panel({border:false,layout:'table',layoutConfig:{columns:5},width:490,style:'margin: 0 7px',defaults:{border:false},items:[{html:'Test for ',style:'white-space: nowrap;text-align:center;vertical-align:middle;font-size:1.7em;margin-top:7px'},this.coexToggle,{html:'or',style:'white-space: nowrap;text-align:center;vertical-align:middle;font-size:1.7em;margin-top:7px'},this.diffExToggle,{html:'of:',style:'white-space: nowrap;text-align:center;vertical-align:middle;font-size:1.7em;margin-top:7px'}]});this.theseExperimentsPanel=new Ext.Panel({html:'these experiments',style:'text-align:center;font-size:1.4em;',tpl:new Ext.XTemplate('these <span class="blue-text-not-link" style="font-weight:bold " ','ext:qtip="'+Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.taxonModeTT+'">','{taxonCommonName} </span> experiments ','<img src="/Gemma/images/icons/question_blue.png" title="'+
Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.taxonModeTT+'"/> '),tplWriteMode:'overwrite'});this.theseGenesPanel=new Ext.Panel({html:'these genes',style:'text-align:center;font-size:1.4em;',tpl:new Ext.XTemplate('these <span class="blue-text-not-link" style="font-weight:bold " ','ext:qtip="'+Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.taxonModeTT+'">','{taxonCommonName}</span> genes ','<img src="/Gemma/images/icons/question_blue.png" title="'+
Gemma.HelpText.WidgetDefaults.AnalysisResultsSearchForm.taxonModeTT+'"/> '),tplWriteMode:'overwrite'});this.searchExamples=new Gemma.AnalysisResultsSearchExamples({ref:'searchExamples',defaultIsDiffEx:true});this.searchExamples.on('startingExample',function(){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Searching.analysisResults,msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});}
this.loadMask.show();},this);this.searchExamples.on('examplesReady',function(taxonId,geneSetExampleRecord,experimentSetExampleRecord){this.runExampleQuery(taxonId,geneSetExampleRecord,experimentSetExampleRecord);},this);this.diffExToggle.on('toggle',function(){if(this.diffExToggle.pressed){this.searchExamples.showDiffExExamples();}
else{this.searchExamples.showCoexExamples();}},this);Ext.apply(this,{style:'',items:{xtype:'fieldset',title:'&nbsp;',border:true,searchBar:this.searchBar,listeners:{render:function(c){var floatType=Ext.isIE?'styleFloat':'cssFloat';c.header.child('span').applyStyles(floatType+':left;padding:5px 5px 0 0');this.searchBar.render(c.header,1);c.on('destroy',function(){this.searchBar.destroy();},c,{single:true});}},items:[{layout:'table',layoutConfig:{columns:4},width:850,border:false,defaults:{border:false,bodyStyle:'padding: 0px;margin:0px'},items:[{defaults:{border:false},items:[this.theseGenesPanel,this.geneChoosers]},{html:'in ',style:'white-space: nowrap;font-size:1.7em;padding-top: 32px;padding-right:5px;'},{defaults:{border:false},items:[this.theseExperimentsPanel,this.experimentChoosers]},{style:'padding:20 0 0 0px;margin:0px;',items:[{xtype:'button',text:"<span style=\"font-size:1.3em;padding-top:15px\">Go!</span>",width:55,tooltip:'Run the search',scale:'medium',listeners:{click:function(){this.runningExampleQuery=false;this.runSearch();}.createDelegate(this,[],false)}},{xtype:'button',width:55,icon:'/Gemma/images/icons/arrow_refresh_small.png',style:'margin-top: 8px',text:'Reset',tooltip:'Clear all selections and reset the taxon mode ',handler:this.reset.createDelegate(this)}]},this.searchExamples]}]}});Gemma.AnalysisResultsSearchForm.superclass.initComponent.call(this);this.on('queryUpdateFromCoexpressionViz',function(genesToPreview,genesToPreviewIds,taxonId,taxonName){this.getEl().unmask();this.geneChoosers.items.each(function(){if(this instanceof Gemma.GeneSearchAndPreview){if(this.preview){this.preview.selectionEditorWindow.hide();}}});this.experimentChoosers.items.each(function(){if(this instanceof Gemma.ExperimentSearchAndPreview){if(this.preview){this.preview.selectionEditorWindow.hide();}}});this.geneChoosers.removeAll();var geneChooser=this.addGeneChooser();geneChooser.getGenesFromGeneValueObjects(genesToPreview,genesToPreviewIds,taxonId,taxonName);},this);this.addEvents('beforesearch','aftersearch','showDiffExResults','showCoexResults');this.relayEvents(this.initialExperimentChooser.experimentCombo,['experimentGroupUrlSelectionComplete']);this.relayEvents(this.initialGeneChooser,['geneListUrlSelectionComplete']);this.on('experimentGroupUrlSelectionComplete',function(){this.experimentGroupUrlSelectionComplete=true;this.initiateSearch();},this);this.on('geneListUrlSelectionComplete',function(){this.geneListUrlSelectionComplete=true;this.initiateSearch();},this);this.doLayout();},checkUrlParams:function(){var urlparams=Ext.urlDecode(location.search.substring(1));if(urlparams.geneList&&urlparams.taxon){this.coexToggle.toggle(true);this.diffExToggle.toggle(false);this.initialGeneChooser.getGenesFromUrl();this.initialExperimentChooser.experimentCombo.getAllTaxonGroup();}},initiateSearch:function(){if(this.experimentGroupUrlSelectionComplete&&this.geneListUrlSelectionComplete){this.runSearch();}},reset:function(){this.geneChoosers.removeAll();this.experimentChoosers.removeAll();this.taxonId=null;this.addGeneChooser();this.addExperimentChooser();Ext.DomHelper.overwrite(this.theseGenesPanel.body,{cn:'these genes'});Ext.DomHelper.overwrite(this.theseExperimentsPanel.body,{cn:'these experiments'});},getTaxonId:function(){return this.taxonId;},setTaxonId:function(taxonId){this.taxonId=taxonId;this.geneChoosers.items.each(function(){if(this instanceof Gemma.GeneSearchAndPreview){this.geneCombo.setTaxonId(taxonId);}});this.experimentChoosers.items.each(function(){if(this instanceof Gemma.ExperimentSearchAndPreview){this.experimentCombo.setTaxonId(taxonId);}});},getTaxonName:function(){return this.taxonName;},setTaxonName:function(taxonName){this.taxonName=taxonName;this.theseExperimentsPanel.update({taxonCommonName:taxonName});this.theseGenesPanel.update({taxonCommonName:taxonName});},taxonChanged:function(taxonId,taxonName){if(taxonId&&this.getTaxonId()&&(this.getTaxonId()===taxonId)){return;}
else if(taxonId){this.setTaxonId(taxonId);this.setTaxonName(taxonName);}
this.fireEvent("taxonchanged",taxonId);},collapsePreviews:function(){this.collapseGenePreviews();this.collapseExperimentPreviews();},collapseGenePreviews:function(){if(typeof this.geneChoosers.items!=='undefined'){this.geneChoosers.items.each(function(){if(this instanceof Gemma.GeneSearchAndPreview){this.collapsePreview(false);}});}},collapseExperimentPreviews:function(){if(typeof this.experimentChoosers.items!=='undefined'){this.experimentChoosers.items.each(function(){if(this instanceof Gemma.ExperimentSearchAndPreview){this.collapsePreview(false);}});}},addGeneChooser:function(){this.geneChooserIndex++;var chooser=new Gemma.GeneSearchAndPreview({searchForm:this,style:'padding-top:10px;',id:'geneChooser'+this.geneChooserIndex,taxonId:this.taxonId,listeners:{madeFirstSelection:function(){},removeGene:function(){this.searchForm.removeGeneChooser(this.getId());}}});this.geneChoosers.add(chooser);if(typeof Ext.getCmp('geneChooser'+(this.geneChooserIndex-1)+'Button')!=='undefined'){Ext.getCmp('geneChooser'+(this.geneChooserIndex-1)+'Button').show().setIcon('/Gemma/images/icons/delete.png').setTooltip('Remove this gene or group from your search').setHandler(this.removeGeneChooser.createDelegate(this,['geneChooserPanel'+
(this.geneChooserIndex-1)],false));}
this.geneChoosers.doLayout();return chooser;},removeGeneChooser:function(panelId){this.geneChoosers.remove(panelId,true);this.geneChoosers.doLayout();if(this.getSelectedExperimentAndExperimentSetValueObjects().length===0&&this.getSelectedGeneAndGeneSetValueObjects().length===0){this.reset();}},addExperimentChooser:function(){this.experimentChooserIndex++;var chooser=new Gemma.ExperimentSearchAndPreview({searchForm:this,taxonId:this.taxonId,style:'padding-top:10px;',id:'experimentChooser'+this.experimentChooserIndex,listeners:{madeFirstSelection:function(){},removeExperiment:function(){this.searchForm.removeExperimentChooser(this.getId());}}});this.experimentChoosers.add(chooser);this.experimentChoosers.doLayout();return chooser;},removeExperimentChooser:function(panelId){this.experimentChoosers.remove(panelId,true);this.experimentChoosers.doLayout();if(this.getSelectedExperimentAndExperimentSetValueObjects().length===0&&this.getSelectedGeneAndGeneSetValueObjects().length===0){this.reset();}},collapseExamples:function(){this.searchExamples.collapseExamples(false);},showExampleQueries:function(){this.searchExamples.show();},setFirstExperimentSet:function(record){var chooser=this.experimentChoosers.getComponent(0);var eeCombo=chooser.experimentCombo;eeCombo.getStore().insert(0,record);eeCombo.fireEvent('select',eeCombo,record,0);},setFirstGeneSet:function(record){var chooser=this.geneChoosers.getComponent(0);var geneCombo=chooser.geneCombo;geneCombo.fireEvent('select',geneCombo,record,0);},runExampleQuery:function(taxonId,geneSetRecord,experimentSetRecord){this.reset();this.setTaxonId(taxonId);this.setFirstExperimentSet(experimentSetRecord);this.setFirstGeneSet(geneSetRecord);this.runningExampleQuery=true;this.runSearch();}});Ext.reg('analysisResultsSearchForm',Gemma.AnalysisResultsSearchForm);Gemma.ExperimentalFactorCombo=Ext.extend(Ext.form.ComboBox,{displayField:'name',tpl:new Ext.XTemplate('<tpl for="."><div class="x-combo-list-item">{name} <tpl if="name != description && description" > ({description})</tpl></div></tpl>'),listWidth:250,record:Ext.data.Record.create([{name:"id",type:"int"},{name:"name",type:"string"},{name:"description",type:"string"},{name:"category",type:"string"},{name:"categoryUri",type:"string"}]),valueField:"id",editable:false,mode:"local",triggerAction:"all",initComponent:function(){this.experimentalDesign={id:this.edId,classDelegatingFor:"ExperimentalDesign"};Ext.apply(this,{store:new Ext.data.Store({proxy:new Ext.data.DWRProxy(ExperimentalDesignController.getExperimentalFactors),reader:new Ext.data.ListRangeReader({id:"id"},this.record),remoteSort:false,sortInfo:{field:"name"}})});Gemma.ExperimentalFactorCombo.superclass.initComponent.call(this);this.store.load({params:[this.experimentalDesign]});}});Ext.namespace("Gemma");Gemma.MGEDCombo=Ext.extend(Ext.form.ComboBox,{editable:true,mode:'local',selectOnFocus:true,triggerAction:'all',typeAhead:true,forceSelection:true,displayField:'term',record:Ext.data.Record.create([{name:"uri"},{name:"term"},{name:"comment"}]),getTerm:function(){return this.selectedTerm;},initComponent:function(){if(this.termKey){this.dwrMethod=MgedOntologyService.getMgedTermsByKey;this.dwrParams=[this.termKey];}else{this.dwrMethod=MgedOntologyService.getUsefulMgedTerms;this.dwrParams=[];}
this.store=new Ext.data.Store({proxy:new Ext.data.DWRProxy(this.dwrMethod),reader:new Ext.data.ListRangeReader({id:"uri"},this.record),remoteSort:false,sortInfo:{field:"term"}});Gemma.MGEDCombo.superclass.initComponent.call(this);this.on("change",function(combo){if(this.getValue()){var ix=this.getStore().find("term",this.getValue());var rec=this.getStore().getAt(ix);this.select(ix,true);this.fireEvent('select',this,rec,ix);}});this.on("select",function(combo,record,index){this.selectedTerm=record.data;});this.store.load({params:this.dwrParams});}});Ext.namespace('Gemma');Gemma.BioMaterialEditor=function(config){this.originalConfig=config;this.expressionExperiment={id:config.eeId,classDelegatingFor:"ExpressionExperiment"};Gemma.BioMaterialEditor.superclass.constructor.call(this,config);};Ext.extend(Gemma.BioMaterialEditor,Ext.Panel,{firstInitDone:false,firstCallback:function(data){ExperimentalDesignController.getExperimentalFactors(this.expressionExperiment,function(factorData){config={factors:factorData,bioMaterials:data};Ext.apply(config,this.originalConfig);this.grid=new Gemma.BioMaterialGrid(config);this.grid.init=this.init.createDelegate(this);this.add(this.grid);this.loadMask.hide();this.doLayout(false,true);this.firstInitDone=true;}.createDelegate(this));},init:function(){var loadMaskTarget=this.el!==null?this.el:Ext.getBody();this.loadMask=new Ext.LoadMask(loadMaskTarget,{msg:Gemma.StatusText.waiting});this.loadMask.show();ExperimentalDesignController.getBioMaterials(this.expressionExperiment,this.firstCallback.createDelegate(this));}});Gemma.BioMaterialGrid=Ext.extend(Gemma.GemmaGridPanel,{loadMask:true,autoExpandColumn:'bm-column',fvMap:{},rowsExpanded:false,createColumns:function(factors){var columns=[this.rowExpander,{id:"bm-column",header:"BioMaterial",dataIndex:"bmName",sortable:true,width:120,tooltip:'BioMaterial (sample) name/details'},{id:"ba-column",header:"BioAssay",width:150,dataIndex:"baName",sortable:true,tooltip:'BioAssay name/details'}];this.factorValueEditors=[];factors.sort(function(a,b){return a.id-b.id});for(var i=0;i<factors.length;i++){var factor=factors[i];var factorId="factor"+factor.id;var editor;var continuous=factor.type=="continuous";if(continuous){editor=new Ext.form.NumberField({id:factorId+'-valueeditor',lazyInit:false,lazyRender:true,record:this.fvRecord,continuous:continuous,data:factor.values});}else{editor=new Gemma.FactorValueCombo({id:factorId+'-valueeditor',lazyInit:false,lazyRender:true,record:this.fvRecord,continuous:continuous,data:factor.values});}
this.factorValueEditors[factorId]=editor;if(factor.values){for(var j=0;j<factor.values.length;j++){fv=factor.values[j];var fvs=fv.factorValue;this.fvMap["fv"+fv.id]=fvs;}}
var rend=null;rend=this.createValueRenderer();var ue=null;if(this.editable){ue=editor;}
var label=factor.description?factor.description:factor.name+
(factor.name===factor.description||factor.description===""?"":" ("+factor.description+")");columns.push({id:factorId,header:label,dataIndex:factorId,renderer:rend,editor:ue,width:120,tooltip:label,sortable:true,continuous:continuous});}
return columns;},createRecord:function(){var fields=[{name:"id",type:"int"},{name:"bmName",type:"string"},{name:"bmDesc",type:"string"},{name:"bmChars",type:"string"},{name:"baName",type:"string"},{name:"baDesc",type:"string"}];if(this.factors){for(var i=0;i<this.factors.length;i++){var factor=this.factors[i];var o={name:"factor"+factor.id,type:"string"};fields.push(o);}}
var record=Ext.data.Record.create(fields);return record;},initComponent:function(){this.record=this.createRecord();var data=this.transformData();Ext.apply(this,{plugins:this.rowExpander,store:new Ext.data.Store({proxy:new Ext.data.MemoryProxy(data),reader:new Ext.data.ArrayReader({},this.record)})});Ext.apply(this,{columns:this.createColumns(this.factors)});this.tbar=new Gemma.BioMaterialToolbar({edId:this.edId,editable:this.editable});Gemma.BioMaterialGrid.superclass.initComponent.call(this);this.getTopToolbar().on("toggleExpand",function(){if(this.rowsExpanded){this.rowExpander.collapseAll();this.getTopToolbar().expandButton.setText("Expand all");this.rowsExpanded=false;}else{this.rowExpander.expandAll();this.getTopToolbar().expandButton.setText("Collapse all");this.rowsExpanded=true;}},this);this.getTopToolbar().on("refresh",function(){if(this.store.getModifiedRecords().length>0){Ext.Msg.confirm(Gemma.HelpText.CommonWarnings.LoseChanges.title,Gemma.HelpText.CommonWarnings.LoseChanges.text,function(but){if(but=='yes'){this.init();}}.createDelegate(this));}else{this.init();}},this);this.getTopToolbar().on("filter",function(text){this.searchForText(text);},this);if(this.editable){this.on("afteredit",function(e){var factorId=this.getColumnModel().getColumnId(e.column);var editor=this.factorValueEditors[factorId];if(editor.continuous){}else{var fvvo=editor.getFactorValue();e.record.set(factorId,fvvo.id);}
this.getTopToolbar().saveButton.enable();this.getView().refresh();},this);this.getTopToolbar().on("apply",function(factor,factorValue){var selected=this.getSelectionModel().getSelections();for(var i=0;i<selected.length;++i){selected[i].set(factor,factorValue);}
this.getView().refresh();},this);this.getTopToolbar().on("save",function(){this.loadMask.show();var edited=this.getEditedRecords();var bmvos=[];for(var i=0;i<edited.length;++i){var row=edited[i];var bmvo={id:row.id,factorIdToFactorValueId:{}};for(var j in row){if(typeof j=='string'&&j.indexOf("factor")>=0){bmvo.factorIdToFactorValueId[j]=row[j];}}
bmvos.push(bmvo);}
var callback=this.init;ExperimentalDesignController.updateBioMaterials(bmvos,callback);}.createDelegate(this),this);this.getSelectionModel().on("selectionchange",function(model){var selected=model.getSelections();this.getTopToolbar().revertButton.disable();for(var i=0;i<selected.length;++i){if(selected[i].dirty){this.getTopToolbar().revertButton.enable();break;}}}.createDelegate(this),this);this.getSelectionModel().on("selectionchange",function(model){this.enableApplyOnSelect(model);}.createDelegate(this.getTopToolbar()),this.getTopToolbar());this.getTopToolbar().on("undo",this.revertSelected,this);}
this.getStore().load({params:{},callback:function(){this.getStore().sort("bmName");this.getStore().fireEvent("datachanged");},scope:this});},transformData:function(incoming){var data=[];for(var i=0;i<this.bioMaterials.length;++i){var bmvo=this.bioMaterials[i];data[i]=[bmvo.id,bmvo.name,bmvo.description,bmvo.characteristics,bmvo.assayName,bmvo.assayDescription];var factors=bmvo.factors;for(var j=0;j<this.factors.length;j++){var factor=this.factors[j];var factorId="factor"+factor.id;var k=bmvo.factorIdToFactorValueId[factorId];if(k){data[i].push(k);}else{data[i].push("");}}}
return data;},fvRecord:Ext.data.Record.create([{name:"charId",type:"int"},{name:"id",type:"string",convert:function(v){return"fv"+v;}},{name:"factor",type:'string'},{name:"category",type:"string"},{name:"categoryUri",type:"string"},{name:"value",type:"string"},{name:"valueUri",type:"string"},{name:"factorValue",type:"string"}]),reloadFactorValues:function(){for(var i in this.factorValueEditors){var factorId=this.factorValueEditors[i];if(typeof factorId=='string'&&factorId.substring(0,6)=="factor"){var editor=this.factorValueEditors[factorId];var column=this.getColumnModel().getColumnById(factorId);if(editor.setExperimentalFactor){editor.setExperimentalFactor(editor.experimentalFactor.id,function(r,options,success){this.fvMap={};for(var i=0;i<r.length;++i){var rec=r[i];this.fvMap["fv"+rec.get("id")]=rec.get("factorValue");}
var renderer=this.createValueRenderer();column.renderer=renderer;this.getView().refresh();}.createDelegate(this));}}}
this.getTopToolbar().factorValueCombo.store.reload();},createValueRenderer:function(){return function(value,metadata,record,row,col,ds){if(!value){return"-";}
var k=this.fvMap[value];return k?k:value;}.createDelegate(this);},rowExpander:new Ext.grid.RowExpander({tpl:new Ext.Template("<dl style='background-color:#EEE;padding:2px;margin-left:1em;margin-bottom:2px;'><dt>BioMaterial {bmName}</dt><dd>{bmDesc}<br>{bmChars}</dd>","<dt>BioAssay {baName}</dt><dd>{baDesc}</dd></dl>")}),searchForText:function(text){if(text.length<1){this.getStore().clearFilter();return;}
this.getStore().filterBy(this.filter(text),this,0);},filter:function(text){var valueRegEx=new RegExp(Ext.escapeRe(text),'i');var fvColumnRegEx=new RegExp(/^fv\d+$/);var columnArr=this.getColumnModel().config;return function(r,id){var fields=r.fields;var found=false;var value;fields.each(function(item,index,length){if(!found){value=r.get(item.name);if(fvColumnRegEx.test(value)){value=(this.fvMap[value])?this.fvMap[value]:value;}
if(item.name!=="id"&&item.name!=="bmDesc"&&item.name!=="bmChars"&&item.name!=="baDesc"&&valueRegEx.test(value)){found=true;}}},this);return found;};}});Gemma.BioMaterialToolbar=Ext.extend(Ext.Toolbar,{initComponent:function(){this.items=[];if(this.editable){this.saveButton=new Ext.Toolbar.Button({text:"Save",tooltip:"Save changed biomaterials",disabled:true,handler:function(){this.fireEvent("save");this.saveButton.disable();},scope:this});this.revertButton=new Ext.Toolbar.Button({text:"Undo",tooltip:"Undo changes to selected biomaterials",disabled:true,handler:function(){this.fireEvent("undo");},scope:this});this.factorCombo=new Gemma.ExperimentalFactorCombo({width:200,emptyText:"select a factor",edId:this.edId});this.factorCombo.on("select",function(combo,record,index){this.factorValueCombo.setExperimentalFactor(record.id);this.factorValueCombo.enable();},this);this.factorValueCombo=new Gemma.FactorValueCombo({emptyText:"Select a factor value",disabled:true,width:200});this.factorValueCombo.on("select",function(combo,record,index){this.applyButton.enable();},this);this.applyButton=new Ext.Toolbar.Button({text:"Apply",tooltip:"Apply this value to selected biomaterials",disabled:true,width:100,handler:function(){var factor="factor"+this.factorCombo.getValue();var factorValue="fv"+this.factorValueCombo.getValue();this.fireEvent("apply",factor,factorValue);this.saveButton.enable();},scope:this});this.items=[this.saveButton,' ',this.revertButton,'-',"Bulk changes:",' ',this.factorCombo,' ',this.factorValueCombo,this.applyButton];}
var textFilter=new Ext.form.TextField({ref:'searchInGrid',tabIndex:1,enableKeyEvents:true,emptyText:'Filter samples',listeners:{"keyup":{fn:function(textField){this.fireEvent('filter',textField.getValue());},scope:this,options:{delay:100}}}});var refreshButton=new Ext.Toolbar.Button({text:"Refresh",tooltip:"Reload the data",handler:function(){this.fireEvent("refresh");}.createDelegate(this)});var expandButton=new Ext.Toolbar.Button({ref:'expandButton',text:"Expand all",tooltip:"Show/hide all biomaterial details",handler:function(){this.fireEvent("toggleExpand");}.createDelegate(this)});this.items.push('->');this.items.push(textFilter);this.items.push(refreshButton);this.items.push(expandButton);Gemma.BioMaterialToolbar.superclass.initComponent.call(this);this.addEvents("revertSelected","toggleExpand","apply","save","refresh","undo");},enableApplyOnSelect:function(model){var selected=model.getSelections();if(selected.length>0&&this.factorValueCombo.getValue()){this.applyButton.enable();}else{this.applyButton.disable();}}});Ext.namespace('Gemma');Gemma.FactorValueRecord=Ext.data.Record.create([{name:"charId"},{name:"id"},{name:"category",type:"string"},{name:"categoryUri",type:"string"},{name:"value",type:"string"},{name:"measurement",type:"bool"},{name:"valueUri",type:"string"},{name:"factorValue",type:"string"}]);Gemma.FactorValueGrid=Ext.extend(Gemma.GemmaGridPanel,{loadMask:true,viewConfig:{forceFit:false},taxonId:null,disabledClass:'.x-factor-grid-disabled',record:Gemma.FactorValueRecord,categoryStyler:function(value,metadata,record,row,col,ds){return Gemma.GemmaGridPanel.formatTermWithStyle(value,record.data.categoryUri);},valueStyler:function(value,metadata,record,row,col,ds){if(value){return Gemma.GemmaGridPanel.formatTermWithStyle(value,record.data.valueUri);}else{return'<span style="color:grey">'+((this.editable)?'Double-click to define the value':'(no value)')+'</span>';}},createNew:function(){var ef=this.experimentalFactor;var oldmsg=this.loadMask.msg;this.loadMask.msg="Creating new factor value";this.loadMask.show();var callback=function(){this.loadMask.hide();this.loadMask.msg=oldmsg;this.factorValueCreated(ef);this.getTopToolbar().characteristicToolbar.setExperimentalFactor(ef.id);}.createDelegate(this);var errorHandler=function(er){this.loadMask.hide();this.loadMask.msg=oldmsg;Ext.Msg.alert("Error",er);}.createDelegate(this);ExperimentalDesignController.createFactorValue(this.experimentalFactor,{callback:callback,errorHandler:errorHandler});},initComponent:function(){this.columns=[{header:"FactorValue",dataIndex:"id"},{header:"Category",dataIndex:"category",renderer:this.categoryStyler,width:120},{header:"Value",dataIndex:"value",renderer:this.valueStyler},{header:"Summary",dataIndex:"factorValue",hidden:true}];this.experimentalDesign={id:this.edId,classDelegatingFor:"ExperimentalDesign"};this.experimentalFactor={id:this.efId,classDelegatingFor:"ExperimentalFactor"};this.categoryCombo=new Gemma.MGEDCombo({lazyRender:true,termKey:"factorvalue"});var categoryEditor=new Ext.grid.GridEditor(this.categoryCombo);this.categoryCombo.on("select",function(combo,record,index){categoryEditor.completeEdit();});this.valueCombo=new Gemma.CharacteristicCombo({lazyRender:true,taxonId:this.taxonId});var valueEditor=new Ext.grid.GridEditor(this.valueCombo);this.valueCombo.on("select",function(combo,record,index){valueEditor.completeEdit();});this.store=new Ext.data.GroupingStore({proxy:new Ext.data.DWRProxy(ExperimentalDesignController.getFactorValuesWithCharacteristics),reader:new Ext.data.ListRangeReader({id:"charId"},this.record),groupField:"id",});var groupTextTpl=this.editable?'<input id="{[ values.rs[0].data.id ]}" type="checkbox"'
+' name="selectedFactorValues" value="{[ values.rs[0].data.id ]}" />&nbsp;&nbsp; ':'';groupTextTpl=groupTextTpl+'{[ values.rs[0].data.factorValue ]}';this.view=new Ext.grid.GroupingView({enableGroupingMenu:false,enableNoGroups:false,groupTextTpl:groupTextTpl,hideGroupedColumn:true,showGroupName:true,startCollapsed:true});this.tbar=new Gemma.FactorValueToolbar({editable:this.editable,experimentalDesign:this.experimentalDesign});var FACTOR_VALUE_COLUMN=0;var CATEGORY_COLUMN=1;var VALUE_COLUMN=2;this.autoExpandColumn=VALUE_COLUMN;Gemma.FactorValueGrid.superclass.initComponent.call(this);this.addEvents('factorvaluecreate','factorvaluechange','factorvaluedelete');if(this.editable){this.getColumnModel().setEditor(CATEGORY_COLUMN,categoryEditor);this.getColumnModel().setEditor(VALUE_COLUMN,valueEditor);this.on("afteredit",function(e){var col=this.getColumnModel().getColumnId(e.column);if(col==CATEGORY_COLUMN){var term=this.categoryCombo.getTerm.call(this.categoryCombo);e.record.set("category",term.term);e.record.set("categoryUri",term.uri);}else if(col==VALUE_COLUMN){var c=this.valueCombo.getCharacteristic.call(this.valueCombo);e.record.set("value",c.value);e.record.set("valueUri",c.valueUri);}
this.getView().refresh();});this.getSelectionModel().on("selectionchange",function(model){var selected=model.getSelections();this.revertButton.disable();for(var i=0;i<selected.length;++i){if(selected[i].dirty){this.revertButton.enable();break;}}
if(selected.length>0){this.characteristicToolbar.deleteButton.enable();}else{this.characteristicToolbar.deleteButton.disable();}},this.getTopToolbar());this.on('groupclick',function(grid,groupField,groupValue,e){var el=Ext.get(grid.getView().getGroupId(groupValue));var cb=el.dom.getElementsByTagName('input')[0];if(cb.checked){this.deleteFactorValueButton.enable();}else{this.deleteFactorValueButton.disable();}},this.getTopToolbar());this.on("afteredit",function(model){this.saveButton.enable();this.revertButton.enable();},this.getTopToolbar());this.getTopToolbar().on("create",function(){if(this.store.getModifiedRecords().length>0){Ext.Msg.confirm('Unsaved changes!','You should save your changes before creating new values. Are you sure you want to erase them?',function(but){if(but=='yes'){this.store.rejectChanges();this.createNew();}}.createDelegate(this));}else{this.createNew();}}.createDelegate(this));this.getTopToolbar().on("delete",function(){var selectedIds=this.getSelectedFactorValues();if(selectedIds&&selectedIds.length>0){Ext.Msg.confirm(Gemma.HelpText.WidgetDefaults.ExperimentalFactorToolbar.deleteFactorWarningTitle,Gemma.HelpText.WidgetDefaults.ExperimentalFactorToolbar.deleteFactorWarningText,function(but){if(but=='yes'){Ext.getCmp('factor-value-delete-button').disable();var ef=this.experimentalFactor;this.getEl().mask();var callback=function(){this.factorValuesDeleted(selectedIds);}.createDelegate(this);ExperimentalDesignController.deleteFactorValues(ef,selectedIds,callback,this);}},this);}else{Ext.Msg.alert("Nothing selected","You have not checked any factor values for deletion");}}.createDelegate(this),this);this.getTopToolbar().on("save",function(){var edited=this.getEditedRecords();var callback=function(){this.factorValuesChanged(edited);}.createDelegate(this);ExperimentalDesignController.updateFactorValueCharacteristics(edited,callback);},this);this.getTopToolbar().on("undo",this.revertSelected.createDelegate(this),this);this.getTopToolbar().on("refresh",function(){this.getStore().reload();},this);}
this.getTopToolbar().on("toggleExpand",function(){this.getView().toggleAllGroups(true);}.createDelegate(this),this);this.getTopToolbar().on("toggleCollapse",function(){this.getView().toggleAllGroups(false);}.createDelegate(this),this);if(this.experimentalFactor.id){this.store.load({params:[this.experimentalFactor]});}},onRender:function(c,p){Gemma.FactorValueGrid.superclass.onRender.call(this,c,p);var ct=this.getTopToolbar().characteristicToolbar;if(ct){ct.on("create",function(f,c){var callback=function(){ct.factorValueCombo.store.reload();this.factorValuesChanged.call(this,[]);}.createDelegate(this);ExperimentalDesignController.createFactorValueCharacteristic(f,c,callback);}.createDelegate(this),this);ct.on("delete",function(){var selected=this.getSelectedRecords();this.store.reload();var callback=function(){this.factorValuesChanged.call(this,selected);}.createDelegate(this);ExperimentalDesignController.deleteFactorValueCharacteristics(selected,callback);}.createDelegate(this),this);}},factorValueCreated:function(ef){this.refresh();var fvs=[];var ct=this.getTopToolbar().characteristicToolbar;ct.factorValueCombo.store.reload();this.fireEvent('factorvaluecreate',this,fvs);},factorValuesChanged:function(fvs){this.refresh();this.store.rejectChanges();var ct=this.getTopToolbar().characteristicToolbar;ct.factorValueCombo.store.reload();this.fireEvent('factorvaluechange',this,fvs);},factorValuesDeleted:function(fvIds){var ct=this.getTopToolbar().characteristicToolbar;var i;var matchIds=function(record,id){var z=fvIds.indexOf(record.data.id+"");return(fvIds.indexOf(record.data.id+"")>-1);};for(i=0;i<fvIds.length;i++){var fvId=fvIds[i];var indexToRemove;while(ct.factorValueCombo.getStore().findBy(matchIds)>-1){indexToRemove=ct.factorValueCombo.getStore().findBy(matchIds);ct.factorValueCombo.getStore().removeAt(indexToRemove);}
while(this.store.findBy(matchIds)>-1){indexToRemove=this.store.findBy(matchIds);this.store.removeAt(indexToRemove);}}
this.getEl().unmask();this.fireEvent('factorvaluedelete',this,fvIds);},changeExperimentalFactor:function(efId){this.experimentalFactor.id=efId;this.store.rejectChanges();if(efId===null){this.store.removeAll();}else{this.refresh([this.experimentalFactor]);}
this.getTopToolbar().setExperimentalFactor(efId);},setExperimentalFactor:function(efId){if(this.store.getModifiedRecords().length>0){Ext.Msg.confirm('Unsaved changes!','You should save your changes before switching to another factor. Are you sure you want to lose your changes?',function(but){if(but=='yes'){this.changeExperimentalFactor(efId);}}.createDelegate(this));}else{this.changeExperimentalFactor(efId);}},getSelectedFactorValues:function(){if(this.form){var f=document.forms[this.form];var checkboxes=f.selectedFactorValues;if(!checkboxes.length){checkboxes=[checkboxes];}
var values=[];for(var i=0;i<checkboxes.length;++i){if(checkboxes[i].checked){values.push(checkboxes[i].value);}}
return values;}}});Gemma.FactorValueToolbar=Ext.extend(Ext.Toolbar,{initComponent:function(){Gemma.FactorValueToolbar.superclass.initComponent.call(this);this.addEvents("create","save","delete","undo","refresh","toggleExpand","toggleCollapse");},onRender:function(c,p){Gemma.FactorValueToolbar.superclass.onRender.call(this,c,p);this.createFactorValueButton=new Ext.Toolbar.Button({text:"Create",id:'factor-value-create-button',tooltip:"Create a new factor value for the current factor",disabled:true,handler:function(){this.fireEvent("create");this.deleteFactorValueButton.enable();},scope:this});this.deleteFactorValueButton=new Ext.Toolbar.Button({text:"Delete",id:'factor-value-delete-button',tooltip:"Delete checked factor values",disabled:true,handler:function(){this.fireEvent("delete");}.createDelegate(this)});this.saveButton=new Ext.Toolbar.Button({text:"Save",id:'factor-value-save-button',tooltip:"Commit changes to factor values",disabled:true,handler:function(){this.saveButton.disable();this.fireEvent("save");}.createDelegate(this)});this.revertButton=new Ext.Toolbar.Button({text:"Undo",id:'factor-value-undo-button',tooltip:"Undo changes to selected factor values",disabled:true,handler:function(){this.fireEvent("undo");},scope:this});this.refreshButton=new Ext.Toolbar.Button({icon:'/Gemma/images/icons/arrow_refresh_small.png',tooltip:'Refresh the factor values',handler:function(){this.fireEvent("refresh");},scope:this});if(this.editable){this.addButton(this.createFactorValueButton);this.addSeparator();this.addButton(this.deleteFactorValueButton);this.addSpacer();this.addButton(this.saveButton);this.addSpacer();this.addButton(this.revertButton);this.addSpacer();this.addButton(this.refreshButton);}
this.collapseButton=new Ext.Toolbar.Button({text:"Collapse all",tooltip:"Hide all factor value details",handler:function(){this.fireEvent("toggleCollapse");},scope:this});this.addFill();this.addButton(this.collapseButton);this.expandButton=new Ext.Toolbar.Button({text:"Expand all",tooltip:"Show all factor value details",handler:function(){this.fireEvent("toggleExpand");},scope:this});this.addFill();this.addButton(this.expandButton);if(this.editable){this.characteristicToolbar=new Gemma.FactorValueCharacteristicToolbar({id:'fv-char-toolbar',renderTo:this.ownerCt.tbar});}},setExperimentalFactor:function(efId){this.efId=efId;if(efId!=null){this.createFactorValueButton.enable();}
if(this.characteristicToolbar){this.characteristicToolbar.setExperimentalFactor(efId);}}});Gemma.FactorValueCharacteristicToolbar=Ext.extend(Ext.Toolbar,{initComponent:function(){Gemma.FactorValueCharacteristicToolbar.superclass.initComponent.call(this);Ext.apply(this,{factorValue:{id:-1,classDelegatingFor:"FactorValue"},experimentalFactor:{id:-1,classDelegatingFor:"ExperimentalFactor"}});this.addEvents("create","delete");},onRender:function(c,l){Gemma.FactorValueCharacteristicToolbar.superclass.onRender.call(this,c,l);this.factorValueCombo=new Gemma.FactorValueCombo({id:'fv-char-toolbar-fvcombo',disabled:this.experimentalFactor.id>=0?false:true,efId:this.experimentalFactor.id>=0?this.experimentalFactor.id:null});this.factorValueCombo.on("select",function(combo,record,index){this.factorValue.id=record.get("id");this.mgedCombo.enable();}.createDelegate(this));this.mgedCombo=new Gemma.MGEDCombo({disabled:true,emptyText:"Select a category",termKey:"factorvalue"});this.mgedCombo.on("select",function(combo,record,index){this.charCombo.setCategory(record.get("term"),record.get("uri"));this.charCombo.enable();this.createButton.enable();}.createDelegate(this));this.charCombo=new Gemma.CharacteristicCombo({disabled:true});this.createButton=new Ext.Toolbar.Button({text:"Add",tooltip:"Add the new characteristic to the selected factor value",disabled:true,handler:function(){var c=this.charCombo.getCharacteristic();if(!this.factorValue||!c){Ext.Msg.alert("You must select a factor value and set a characteristic.");}else{this.createButton.disable();this.charCombo.reset();this.fireEvent("create",this.factorValue,c);}},scope:this});this.charCombo.on("select",function(){this.createButton.enable();}.createDelegate(this));this.charCombo.on("change",function(){this.createButton.enable();}.createDelegate(this));this.deleteButton=new Ext.Toolbar.Button({text:"Remove Characteristic",tooltip:"Delete the selected characteristic(s) from factor values",disabled:true,handler:function(){this.deleteButton.disable();this.fireEvent("delete");},scope:this});this.addText("Append a characteristic to:");this.add(this.factorValueCombo);this.addSpacer();this.addText(" with category:");this.add(this.mgedCombo);this.addSpacer();this.addText(" and value:");this.add(this.charCombo);this.addSpacer();this.addButton(this.createButton);this.addSpacer();this.addButton(this.deleteButton);},setExperimentalFactor:function(efId){this.experimentalFactor.id=efId;this.factorValueCombo.setExperimentalFactor(efId,function(){this.factorValueCombo.enable();this.mgedCombo.enable();this.charCombo.enable();}.createDelegate(this));}});Ext.namespace('Gemma');Gemma.AnnotationDataView=Ext.extend(Ext.DataView,{readMethod:ExpressionExperimentController.getAnnotation,record:Ext.data.Record.create([{name:"id",type:"int"},{name:"classUri"},{name:"className"},{name:"termUri"},{name:"termName"},{name:"evidenceCode"},{name:"objectClass"}]),getReadParams:function(){return(typeof this.readParams=="function")?this.readParams():this.readParams;},tpl:new Ext.XTemplate('<tpl for=".">','<span class="ann-wrap" ext:qtip="{className}" ><span  class="x-editable">'+'<a ext:qtip="{className} : {termUri}" href="/Gemma/searcher.html?query={termName}&amp;termUri={termUri}&amp;scope=E" style="text-decoration:underline;">{termName}</a></span></span>&nbsp;&nbsp;','</tpl>'),itemSelector:'ann-wrap',emptyText:'No tags',initComponent:function(){Ext.apply(this,{store:new Ext.data.Store({proxy:new Ext.data.DWRProxy(this.readMethod),reader:new Ext.data.ListRangeReader({id:"id"},this.record)})});Gemma.AnnotationDataView.superclass.initComponent.call(this);this.store.load({params:this.getReadParams()});}});Gemma.CharacteristicPagingStore=Ext.extend(Ext.data.Store,{constructor:function(config){Gemma.CharacteristicPagingStore.superclass.constructor.call(this,config);},remoteSort:true,proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:CharacteristicBrowserController.browse,getDwrArgsFunction:function(request){var params=request.params;return[params];}}}}),reader:new Ext.data.JsonReader({root:'records',successProperty:'success',messageProperty:'message',totalProperty:'totalRecords',idProperty:"id",fields:[{name:"id",type:"int"},{name:"objectClass"},{name:"classUri"},{name:"className"},{name:"termUri"},{name:"termName"},{name:"parentLink"},{name:"parentDescription"},{name:"parentOfParentLink"},{name:"parentOfParentDescription"},{name:"evidenceCode"}]}),writer:new Ext.data.JsonWriter({writeAllFields:true})});Gemma.AnnotationGrid=Ext.extend(Gemma.GemmaGridPanel,{width:500,height:200,stateful:false,taxonId:null,name:'AnnotationGrid',entityAnnotsAreValidated:false,viewConfig:{enableRowBody:true,emptyText:'No annotations',showDetails:false,getRowClass:function(record,index,p,store){if(this.showDetails){p.body="<p class='characteristic-body' >"+
String.format("From {0}",record.data.parentOfParentLink)+"</p>";}
return'';}},loadMask:{msg:Gemma.StatusText.processing,store:this.store},forceValidation:true,useDefaultToolbar:true,record:Ext.data.Record.create([{name:"id",type:"int"},{name:"objectClass"},{name:"classUri"},{name:"className"},{name:"termUri"},{name:"termName"},{name:"parentLink"},{name:"parentDescription"},{name:"parentOfParentLink"},{name:"parentOfParentDescription"},{name:"evidenceCode"}]),parentStyler:function(value,metadata,record,row,col,ds){return this.formatParentWithStyle(record.id,record.expanded,record.data.parentLink,record.data.parentDescription,record.data.parentOfParentLink,record.data.parentOfParentDescription);},formatParentWithStyle:function(id,expanded,parentLink,parentDescription,parentOfParentLink,parentOfParentDescription){var value;value=(parentLink?(parentLink+"&nbsp;&nbsp;"):"")+
(parentDescription?parentDescription:"");if(parentOfParentLink){value=value+"&nbsp;&laquo;&nbsp;"+parentOfParentLink;}
return expanded?value.concat(String.format("<div style='white-space: normal;'>{0}</div>",parentDescription)):value;},termStyler:function(value,metadata,record,row,col,ds){return Gemma.GemmaGridPanel.formatTermWithStyle(value,record.data.termUri);},initComponent:function(){Ext.apply(this,{columns:[{header:"Category",dataIndex:"className",sortable:true},{header:"Term",dataIndex:"termName",renderer:this.termStyler.createDelegate(this),sortable:true},{header:"Annotation belongs to:",dataIndex:"parentLink",renderer:this.parentStyler.createDelegate(this),tooltip:Gemma.HelpText.WidgetDefaults.AnnotationGrid.parentLinkDescription,hidden:this.showParent?false:true,sortable:false},{header:"Evidence",dataIndex:"evidenceCode",sortable:true}]});if(this.store==null){Ext.apply(this,{store:new Ext.data.Store({proxy:new Ext.data.DWRProxy(this.readMethod),reader:new Ext.data.ListRangeReader({id:"id"},this.record)})});}
if(this.editable&&this.useDefaultToolbar){Ext.apply(this,{tbar:new Gemma.AnnotationToolBar({annotationGrid:this,showValidateButton:true,isValidated:this.entityAnnotsAreValidated,createHandler:function(characteristic,callback){this.writeMethod(characteristic,this.entId,callback);}.createDelegate(this),deleteHandler:function(ids,callback){this.removeMethod(ids,this.entId,callback);}.createDelegate(this),mgedTermKey:"experiment",taxonId:this.taxonId})});}
Gemma.AnnotationGrid.superclass.initComponent.call(this);this.getStore().setDefaultSort('className');this.loadMask.store=this.getStore();this.autoExpandColumn=this.showParent?2:1;this.getColumnModel().defaultSortable=true;if(this.editable){var CATEGORY_COLUMN=0;var VALUE_COLUMN=1;var PARENT_COLUMN=2;var EVIDENCE_COLUMN=3;this.categoryCombo=new Gemma.MGEDCombo({lazyRender:true,termKey:this.mgedTermKey});var categoryEditor=new Ext.grid.GridEditor(this.categoryCombo);this.categoryCombo.on("select",function(combo,record,index){categoryEditor.completeEdit();});this.getColumnModel().setEditor(CATEGORY_COLUMN,categoryEditor);this.valueCombo=new Gemma.CharacteristicCombo({taxonId:this.taxonId});var valueEditor=new Ext.grid.GridEditor(this.valueCombo);this.valueCombo.on("select",function(combo,record,index){valueEditor.completeEdit();});this.getColumnModel().setEditor(VALUE_COLUMN,valueEditor);this.evidenceCombo=new Gemma.EvidenceCodeCombo({lazyRender:true});var evidenceEditor=new Ext.grid.GridEditor(this.evidenceCombo);this.evidenceCombo.on("select",function(combo,record,index){evidenceEditor.completeEdit();});this.getColumnModel().setEditor(EVIDENCE_COLUMN,evidenceEditor);this.on("beforeedit",function(e){var row=e.record.data;var col=this.getColumnModel().getColumnId(e.column);if(col==VALUE_COLUMN){this.valueCombo.setCategory.call(this.valueCombo,row.className,row.classUri);}});if(this.getTopToolbar().deleteButton){this.getSelectionModel().on("selectionchange",function(model){var selected=model.getSelections();if(selected.length>0){this.getTopToolbar().deleteButton.enable();}else{this.getTopToolbar().deleteButton.disable();}},this);}
this.on("afteredit",function(e){var col=this.getColumnModel().getColumnId(e.column);if(col==CATEGORY_COLUMN){var term=this.categoryCombo.getTerm.call(this.categoryCombo);e.record.set("className",term.term);e.record.set("classUri",term.uri);}else if(col==VALUE_COLUMN){var c=this.valueCombo.getCharacteristic.call(this.valueCombo);e.record.set("termName",c.value);e.record.set("termUri",c.valueUri);}else if(col==EVIDENCE_COLUMN){var c=this.evidenceCombo.getCode.call(this.evidenceCombo);e.record.set("evidenceCode",c.code);}
this.getView().refresh();});}
this.on("celldblclick",function(grid,rowIndex,cellIndex){var record=grid.getStore().getAt(rowIndex);var column=grid.getColumnModel().getColumnId(cellIndex);if(column==PARENT_COLUMN){record.expanded=record.expanded?0:1;grid.getView().refresh(true);}},this);if(!this.noInitialLoad){this.getStore().load({params:this.getReadParams()});}},getReadParams:function(){return(typeof this.readParams=="function")?this.readParams():this.readParams;},getSelectedCharacteristics:function(){var selected=this.getSelectionModel().getSelections();var chars=[];for(var i=0;i<selected.length;++i){var row=selected[i].data;chars.push(row);}
return chars;},getEditedCharacteristics:function(){var chars=[];this.getStore().each(function(record){if(record.dirty){var row=record.data;chars.push(row);}}.createDelegate(this),this);return chars;},setEEId:function(id){this.eeId=id;}});Ext.namespace('Gemma');Gemma.ExperimentalFactorGrid=Ext.extend(Gemma.GemmaGridPanel,{loadMask:true,record:Ext.data.Record.create([{name:"id",type:"int"},{name:"name",type:"string"},{name:"description",type:"string"},{name:"category",type:"string"},{name:"categoryUri",type:"string"},{name:'type',type:'string'}]),categoryStyler:function(value,metadata,record,row,col,ds){return Gemma.GemmaGridPanel.formatTermWithStyle(value,record.get("categoryUri"));},initComponent:function(){this.experimentalDesign={id:this.edId,classDelegatingFor:"ExperimentalDesign"};Ext.apply(this,{columns:[{header:"Name",dataIndex:"name",sortable:true},{header:"Category",dataIndex:"category",renderer:this.categoryStyler,sortable:true},{header:"Description",dataIndex:"description",sortable:true},{header:"Type",dataIndex:'type'}]});this.store=new Ext.data.Store({proxy:new Ext.data.DWRProxy(ExperimentalDesignController.getExperimentalFactors),reader:new Ext.data.ListRangeReader({id:"id"},this.record)});if(this.editable){this.tbar=new Gemma.ExperimentalFactorToolbar({store:this.store});}
Gemma.ExperimentalFactorGrid.superclass.initComponent.call(this);this.addEvents('experimentalfactorchange','experimentalfactorselected');this.getSelectionModel().on("selectionchange",function(model){var selected=model.getSelections();if(selected.length==1){this.fireEvent("experimentalfactorselected",selected[0].data);}}.createDelegate(this));this.store.load({params:[this.experimentalDesign]});},onRender:function(c,l){Gemma.ExperimentalFactorGrid.superclass.onRender.call(this,c,l);var NAME_COLUMN=0;var CATEGORY_COLUMN=1;var DESCRIPTION_COLUMN=2;var TYPE_COLUMN=3;this.autoExpandColumn=DESCRIPTION_COLUMN;this.nameField=new Ext.form.TextField({});var nameEditor=new Ext.grid.GridEditor(this.nameField);this.categoryCombo=new Gemma.MGEDCombo({lazyRender:true,termKey:"factor"});this.descriptionField=new Ext.form.TextField({allowBlank:false});if(this.editable){var categoryEditor=new Ext.grid.GridEditor(this.categoryCombo);this.categoryCombo.on("select",function(combo,record,index){categoryEditor.completeEdit();});var descriptionEditor=new Ext.grid.GridEditor(this.descriptionField);this.factorTypeCombo=new Ext.form.ComboBox({triggerAction:'all',lazyRender:true,width:120,mode:'local',store:new Ext.data.ArrayStore({id:0,fields:['type','display'],data:[['continuous','continuous'],['categorical','categorical']]}),valueField:'type',displayField:'display'});var typeEditor=new Ext.grid.GridEditor(this.factorTypeCombo);this.factorTypeCombo.on("select",function(combo,record,index){typeEditor.completeEdit();});this.getColumnModel().setEditor(NAME_COLUMN,nameEditor);this.getColumnModel().setEditor(CATEGORY_COLUMN,categoryEditor);this.getColumnModel().setEditor(DESCRIPTION_COLUMN,descriptionEditor);this.getColumnModel().setEditor(TYPE_COLUMN,typeEditor);this.getTopToolbar().on("create",function(newFactorValue){var oldmsg=this.loadMask.msg;this.loadMask.msg=String.format(Gemma.StatusText.creating,'experimental factor');this.loadMask.show();var callback=function(){this.factorCreated(newFactorValue);this.loadMask.hide();this.loadMask.msg=oldmsg;}.createDelegate(this);var errorHandler=function(er){this.loadMask.hide();this.loadMask.msg=oldmsg;Ext.Msg.alert("Error",er);}.createDelegate(this);ExperimentalDesignController.createExperimentalFactor(this.experimentalDesign,newFactorValue,{callback:callback,errorHandler:errorHandler});}.createDelegate(this));this.getTopToolbar().on("delete",function(){var selected=this.getSelectedIds();var oldmsg=this.loadMask.msg;this.loadMask.msg=String.format(Gemma.StatusText.deletingSpecific,'experimental factor');this.loadMask.show();var callback=function(){this.idsDeleted(selected);this.loadMask.hide();this.loadMask.msg=oldmsg;}.createDelegate(this);var errorHandler=function(er){this.loadMask.hide();this.loadMask.msg=oldmsg;Ext.Msg.alert("Error",er);}.createDelegate(this);ExperimentalDesignController.deleteExperimentalFactors(this.experimentalDesign,selected,{callback:callback,errorHandler:errorHandler});}.createDelegate(this));this.getTopToolbar().on("save",function(){var edited=this.getEditedRecords();var oldmsg=this.loadMask.msg;this.loadMask.msg=Gemma.StatusText.saving;this.loadMask.show();var callback=function(){this.recordsChanged(edited);this.loadMask.hide();this.loadMask.msg=oldmsg;}.createDelegate(this);var errorHandler=function(er){this.loadMask.hide();this.loadMask.msg=oldmsg;Ext.Msg.alert("Error",er);}.createDelegate(this);ExperimentalDesignController.updateExperimentalFactors(edited,callback);}.createDelegate(this));this.getTopToolbar().on("undo",this.revertSelected.createDelegate(this));this.on("afteredit",function(e){var col=this.getColumnModel().getColumnId(e.column);if(col==CATEGORY_COLUMN){var f=this.categoryCombo.getTerm.bind(this.categoryCombo);var term=f();e.record.set("category",term.term);e.record.set("categoryUri",term.uri);}}.createDelegate(this));this.on("afteredit",function(model){this.saveButton.enable();this.revertButton.enable();},this.getTopToolbar());this.getSelectionModel().on("selectionchange",function(model){if(model){var selected=model.getSelections();if(selected.length>0){this.deleteButton.enable();}else{this.deleteButton.disable();}
this.revertButton.disable();for(var i=0;i<selected.length;++i){if(selected[i].dirty){this.revertButton.enable();break;}}}},this.getTopToolbar());}},factorCreated:function(factor){this.refresh();this.fireEvent('experimentalfactorselected',factor);},recordsChanged:function(records){this.refresh();var efs=[];for(var i=0;i<records.length;++i){efs.push(records[i].data);}
var selModel=this.getSelectionModel();var selected=(selModel.hasSelection())?selModel.getSelected():selModel.selectFirstRow().getSelected();this.fireEvent('experimentalfactorchange',this,efs,selected);},idsDeleted:function(ids){this.refresh();var efs=[];for(var i=0;i<ids.length;++i){efs.push(this.store.getById(ids[i]).data);}
this.fireEvent('experimentalfactorchange',this,efs);}});Gemma.ExperimentalFactorAddWindow=Ext.extend(Ext.Window,{modal:true,closeAction:'close',title:"Fill in new factor details",width:400,initComponent:function(){Ext.apply(this,{items:[{xtype:'form',width:400,bodyStyle:"padding:10px",monitorValid:true,id:'factor-create-form',items:[new Gemma.MGEDCombo({id:'factor-mged-combo',emptyText:"Select a category",fieldLabel:"Category",allowBlank:false,termKey:"factor"}),{xtype:'textfield',width:250,id:'factor-description-field',allowBlank:false,fieldLabel:"Description",validator:function(value){return this.store.findExact('description',value)<0?true:Gemma.HelpText.WidgetDefaults.ExperimentalFactorAddWindow.descriptionUnique;}.createDelegate(this),emptyText:Gemma.HelpText.WidgetDefaults.ExperimentalFactorAddWindow.emptyText},{xtype:'checkbox',id:'factor-type-checkbox',fieldLabel:'Continuous',tooltip:Gemma.HelpText.WidgetDefaults.ExperimentalFactorAddWindow.continuousCheckboxTT}]}],buttons:[{text:"Create",id:'factor-create-button',tooltip:"Create the new experimental factor",disabled:true,handler:function(){this.fireEvent("done",this.getExperimentalFactorValueObject());this.close();},scope:this},{text:"Cancel",handler:function(){this.close();},scope:this}]});Gemma.ExperimentalFactorAddWindow.superclass.initComponent.call(this);this.addEvents("done");Ext.getCmp('factor-create-form').on('clientvalidation',function(form,valid){if(valid){Ext.getCmp('factor-create-button').enable();}else{Ext.getCmp('factor-create-button').disable();}});},getExperimentalFactorValueObject:function(){var category=Ext.getCmp('factor-mged-combo').getTerm();var description=Ext.getCmp('factor-description-field').getValue();return{name:category.term,description:description,category:category.term,categoryUri:category.uri,type:Ext.getCmp('factor-type-checkbox').getValue()?"continuous":"categorical"};}});Gemma.ExperimentalFactorToolbar=Ext.extend(Ext.Toolbar,{onRender:function(c,l){Gemma.ExperimentalFactorToolbar.superclass.onRender.call(this,c,l);this.createButton=new Ext.Toolbar.Button({text:"Add new",tooltip:"Add a new experimental factor to the design",disabled:false,handler:function(){var w=new Gemma.ExperimentalFactorAddWindow({store:this.store});w.on('done',function(object){this.fireEvent('create',object);}.createDelegate(this));w.show();},scope:this});this.deleteButton=new Ext.Toolbar.Button({text:"Delete",tooltip:"Delete the selected experimental factor(s)",disabled:true,handler:function(){Ext.Msg.confirm(Gemma.HelpText.WidgetDefaults.ExperimentalFactorToolbar.deleteFactorWarningTitle,Gemma.HelpText.WidgetDefaults.ExperimentalFactorToolbar.deleteFactorWarningText,function(but){if(but=='yes'){this.deleteButton.disable();this.fireEvent("delete");}}.createDelegate(this));},scope:this});this.revertButton=new Ext.Toolbar.Button({text:"Undo",tooltip:"Undo changes to the selected experimental factors",disabled:true,handler:function(){this.fireEvent("undo");},scope:this});this.saveButton=new Ext.Toolbar.Button({text:"Save",tooltip:"Commit changes",disabled:true,handler:function(){this.saveButton.disable();this.revertButton.disable();this.fireEvent("save");},scope:this});this.addButton(this.createButton);this.addSeparator();this.addButton(this.deleteButton);this.addSeparator();this.addButton(this.saveButton);this.addSeparator();this.addButton(this.revertButton);},initComponent:function(){Gemma.ExperimentalFactorToolbar.superclass.initComponent.call(this);this.addEvents("create","save","undo","delete");}});Ext.namespace("Gemma");Gemma.CharacteristicCombo=Ext.extend(Ext.form.ComboBox,{loadingText:"Searching...",minChars:2,selectOnFocus:true,listWidth:350,taxonId:null,name:'characteristicCombo',lazyInit:false,initComponent:function(){Ext.apply(this,{record:Ext.data.Record.create([{name:"id",type:"int"},{name:"value",type:"string"},{name:"valueUri",type:"string"},{name:"categoryUri",type:"string"},{name:"category",type:"string"},{name:"description",mapping:"this",convert:this.getHover.createDelegate(this)},{name:"style",mapping:"this",convert:this.getStyle.createDelegate(this)}])});Ext.apply(this,{store:new Ext.data.Store({proxy:new Ext.data.DWRProxy({apiActionToHandlerMap:{read:{dwrFunction:AnnotationController.findTerm,getDwrArgsFunction:function(request){return[request.params[0],this.characteristic.categoryUri,this.taxonId];}.createDelegate(this)}}}),reader:new Ext.data.ListRangeReader({id:"id"},this.record),remoteSort:true})});Gemma.CharacteristicCombo.superclass.initComponent.call(this);this.tpl=new Ext.XTemplate('<tpl for="."><div ext:qtip="{description}"  style="font-size:11px" class="x-combo-list-item {style}">{value}</div></tpl>');this.tpl.compile();this.characteristic={category:null,categoryUri:null,value:null,valueUri:null};this.on("select",function(combo,record,index){this.characteristic.value=record.data.value;this.characteristic.valueUri=record.data.valueUri;combo.setValue(record.data.value+"\t");});},getParams:function(query){return[query,this.characteristic.categoryUri,this.taxonId];},getCharacteristic:function(){if(this.getValue()!=this.characteristic.value+"\t"){this.characteristic.value=this.getValue();this.characteristic.valueUri=null;}
return(this.characteristic.valueUri!==null||this.characteristic.categoryUri!==null)?this.characteristic:{category:this.characteristic.category,value:this.characteristic.value};},setCharacteristic:function(value,valueUri,category,categoryUri){this.characteristic.value=value;this.characteristic.valueUri=valueUri;this.characteristic.category=category;this.characteristic.categoryUri=categoryUri;this.setValue(value);},setCategory:function(category,categoryUri){this.characteristic.category=category;this.characteristic.categoryUri=categoryUri;},getHover:function(value,record){return(record.valueUri&&record.valueUri!=null&&record.valueUri!="")?record.valueUri:(record.category&&record.category!=null&&record.category!="")?record.category:'';},getStyle:function(value,record){var isUsed=record.alreadyPresentInDatabase?'used':'unused';var hasURI=(record.valueUri&&record.valueUri!=null&&record.valueUri!="")?"WithUri":"NoUri";return isUsed+hasURI;}});Ext.namespace("Gemma");Gemma.EvidenceCodeCombo=Ext.extend(Ext.form.ComboBox,{editable:true,mode:'local',selectOnFocus:true,triggerAction:'all',forceSelection:true,displayField:'code',getCode:function(){return this.selectedCode;},initComponent:function(){this.store=new Ext.data.Store({proxy:new Ext.data.MemoryProxy([["IEA"],["IC"]]),reader:new Ext.data.ArrayReader({},[{name:"code"}])});Gemma.EvidenceCodeCombo.superclass.initComponent.call(this);this.store.load();this.on("select",function(combo,record,index){this.selectedCode=record.data;});}});Ext.namespace('Gemma');Gemma.FactorValueCombo=Ext.extend(Ext.form.ComboBox,{displayField:"factorValue",valueField:"id",editable:false,mode:"local",triggerAction:"all",listWidth:200,record:Gemma.FactorValueRecord,initComponent:function(){if(this.data){this.store=new Ext.data.Store({proxy:new Ext.data.MemoryProxy(this.data),reader:new Ext.data.JsonReader({},this.record)});}else{this.store=new Ext.data.Store({proxy:new Ext.data.DWRProxy(ExperimentalDesignController.getFactorValues),reader:new Ext.data.ListRangeReader({id:"id"},this.record),remoteSort:false,sortInfo:{field:"id"}});}
Gemma.FactorValueCombo.superclass.initComponent.call(this);if(this.efId){this.store.load({params:[{id:this.efId,classDelegatingFor:"ExperimentalFactor"}]});}else{this.store.load();}
this.on("select",function(combo,record,index){this.selectedValue=record.data;});},setExperimentalFactor:function(efId,callback){if(efId==null){this.store.removeAll();return;}
var options={params:[{id:efId,classDelegatingFor:"ExperimentalFactor"}]};if(callback){options.callback=callback;}
this.store.load(options);},getFactorValue:function(){return this.selectedValue;}});Ext.namespace('Gemma');Gemma.AnnotationToolBar=Ext.extend(Ext.Toolbar,{taxonId:null,showValidateButton:false,initComponent:function(){if(this.annotationGrid.editable&&!this.saveHandler){this.saveHandler=CharacteristicBrowserController.updateCharacteristics;}
var charComboOpts={emptyText:'Enter term',width:140,taxonId:this.taxonId};if(this.charComboWidth){charComboOpts.width=this.charComboWidth;}
var mgedComboOpts={emptyText:"Select a category",width:130};if(this.mgedComboWidth){mgedComboOpts.width=this.mgedComboWidth;}
if(this.mgedTermKey){mgedComboOpts.termKey=this.mgedTermKey;}
this.charCombo=new Gemma.CharacteristicCombo(charComboOpts);this.mgedCombo=new Gemma.MGEDCombo(mgedComboOpts);this.mgedCombo.on("select",function(combo,record,index){this.charCombo.setCategory(record.data.term,record.data.uri);this.createButton.enable();},this);this.descriptionField=new Ext.form.TextField({allowBlank:true,invalidText:"Enter a description",blankText:"Add a simple description",emptyText:"Description",width:75});if(this.createHandler){this.createButton=new Ext.Toolbar.Button({text:"create",tooltip:"Adds the new annotation",disabled:true,handler:function(){var characteristic=this.charCombo.getCharacteristic();if(this.addDescription){characteristic.description=this.descriptionField.getValue();}
this.annotationGrid.loadMask.show();this.createHandler(characteristic,this.annotationGrid.refresh.createDelegate(this.annotationGrid));this.charCombo.reset();this.descriptionField.reset();},scope:this});}
if(this.deleteHandler){this.deleteButton=new Ext.Toolbar.Button({text:"delete",tooltip:"Removes the selected annotation",disabled:true,handler:function(){this.deleteButton.disable();this.annotationGrid.loadMask.show();this.deleteHandler(this.annotationGrid.getSelectedIds(),this.annotationGrid.refresh.createDelegate(this.annotationGrid));},scope:this});}
if(this.saveHandler){this.saveButton=new Ext.Toolbar.Button({text:"save",tooltip:"Saves the updated annotations",disabled:true,handler:function(){this.annotationGrid.loadMask.show();this.saveHandler(this.annotationGrid.getEditedCharacteristics(),this.annotationGrid.refresh.createDelegate(this.annotationGrid));this.saveButton.disable();},scope:this});this.annotationGrid.on("afteredit",function(model){this.saveButton.enable();}.createDelegate(this));}
Gemma.AnnotationToolBar.superclass.initComponent.call(this);},afterRender:function(l,r){this.add(this.mgedCombo);this.addSpacer();this.add(this.charCombo);this.addSpacer();if(this.addDescription){this.add(this.descriptionField);}
if(this.createHandler){this.add(this.createButton);}
if(this.deleteHandler){this.add(this.deleteButton);}
if(this.saveHandler){this.add(this.saveButton);}
this.addFill();Gemma.AnnotationToolBar.superclass.afterRender.call(this,l,r);}});Ext.namespace('Gemma');Gemma.DiffExpressionGrid=Ext.extend(Ext.grid.GridPanel,{width:800,height:400,collapsible:true,editable:false,style:"margin-bottom: 1em;",stateful:false,viewConfig:{forceFit:true,emptyText:"Results will be displayed here"},record:Ext.data.Record.create([{name:"gene"},{name:"fisherPValue",type:"float"},{name:"activeExperiments"},{name:"numSearchedExperiments",type:"int"},{name:"numExperimentsInScope",type:"int"},{name:"numMetThreshold",type:"int"},{name:"sortKey",type:"string"},{name:"probeResults"}]),initComponent:function(){Ext.apply(this,{store:new Ext.data.Store({proxy:new Ext.data.MemoryProxy(this.records),reader:new Ext.data.ListRangeReader({},this.record)})});Ext.apply(this,{columns:[{id:'details',header:"Details",dataIndex:'details',renderer:this.detailsStyler.createDelegate(this),tooltip:"Links for probe-level details",sortable:false,width:30},{id:'visualize',header:"Visualize",dataIndex:'visualize',renderer:this.visStyler.createDelegate(this),tooltip:"Links for visualizing raw data",sortable:false,width:30},{id:'gene',dataIndex:"gene",header:"Query Gene",renderer:function(value,metadata,record,row,col,ds){return String.format(" &nbsp; <a href='/Gemma/gene/showGene.html?id={0}' ext:qtip='{1}'> {2} </a> ",value.id,value.officialName,value.officialSymbol);},sortable:false},{id:'fisherPValue',dataIndex:"fisherPValue",header:"Meta P-Value",tooltip:"Combined p-value for the datasets you chose, using Fisher's method.",renderer:function(p){if(p<0.001){return sprintf("%.3e",p);}else{return sprintf("%.3f",p);}},sortable:true,width:75},{id:'activeExperiments',dataIndex:"activeExperiments",header:"# Datasets Tested In",sortable:false,width:75,tooltip:"# datasets testing the gene  / # with diff analysis / # in set",renderer:this.supportStyler},{id:'numSignificant',dataIndex:"numMetThreshold",header:"# Significant",sortable:true,width:75,tooltip:"How many datasets met the q-value threshold you selected / # testing gene",renderer:this.metThresholdStyler},{id:'linkOut',dataIndex:"gene",header:"Out links",sortable:false,width:30,tooltip:"Links to other websites for more relevent information (if relevent and/or available)",renderer:this.linkOutStyler}]});Gemma.DiffExpressionGrid.superclass.initComponent.call(this);this.originalTitle=this.title;this.on("cellclick",this.rowClickHandler.createDelegate(this),this);},rowClickHandler:function(grid,rowIndex,columnIndex,e){if(this.getSelectionModel().hasSelection()){var record=this.getStore().getAt(rowIndex);var fieldName=this.getColumnModel().getDataIndex(columnIndex);var gene=record.data.gene;if(fieldName=='visualize'){var activeExperiments=record.data.activeExperiments;var activeExperimentIds=[];for(var i=0;i<activeExperiments.size();i++){activeExperimentIds.push(activeExperiments[i].sourceExperiment?activeExperiments[i].sourceExperiment:activeExperiments[i].id);}
var downloadDedvLink=String.format("/Gemma/dedv/downloadDEDV.html?ee={0}&g={1}",activeExperimentIds.join(','),gene.id);var visWindow=new Gemma.VisualizationDifferentialWindow({cascadeOnFirstShow:true,readMethod:DEDVController.getDEDVForDiffExVisualization,downloadLink:downloadDedvLink,title:"Differential expression of "+gene.officialSymbol});visWindow.show({params:[activeExperimentIds,[gene.id],Ext.getCmp('thresholdField').getValue(),this.searchPanel.efChooserPanel.eeFactorsMap]});}else if(fieldName=='details'){if(this.detailsWindow){this.detailsWindow.close();}
var diffExGrid=new Gemma.ProbeLevelDiffExGrid({width:750,height:300});this.detailsWindow=new Ext.Window({modal:false,layout:'fit',title:'Details for '+gene.officialSymbol,closeAction:'close',items:[diffExGrid],width:750,height:400});this.detailsWindow.show();var supporting=record.data.probeResults;diffExGrid.getStore().loadData(supporting);}}},loadData:function(results){this.getStore().proxy.data=results;this.getStore().reload({resetPage:true});this.getView().refresh(true);},linkOutStyler:function(value,metadata,record,row,col,ds){var popUpWin="LinkOutController.getAllenBrainAtlasLink('"+value.officialSymbol
+"',Gemma.DiffExpressionGrid.linkOutPopUp)";return String.format('<a title="Allen Brain Atlas Image"  onClick="{0}"> <img src="/Gemma/images/logo/aba-icon.png" ext:qtip="Link to Allen Brain Atlas details" /> </a>',popUpWin);},metThresholdStyler:function(value,metadata,record,row,col,ds){var d=record.data;return String.format("{0}/{1}",d.numMetThreshold,d.activeExperiments.size());},supportStyler:function(value,metadata,record,row,col,ds){var d=record.data;return String.format("{0}/{1}/{2}",d.activeExperiments.size(),d.numSearchedExperiments,d.numExperimentsInScope);},anchor_test:function(){window.alert("This is an anchor test.");},visStyler:function(value,metadata,record,row,col,ds){return"<img src='/Gemma/images/icons/chart_curve.png' ext:qtip='Visualize the data' />";},detailsStyler:function(value,metadata,record,row,col,ds){return"<img src='/Gemma/images/icons/magnifier.png' ext:qtip='Show probe-level details' />";},downloadDedv:function(value,metadata,record,row,col,ds){var d=record.data;var activeExperimentsString="";var activeExperimentsSize=record.data.activeExperiments.size();for(var i=0;i<activeExperimentsSize;i++){if(i===0){activeExperimentsString=record.data.activeExperiments[i].id;}else{activeExperimentsString=String.format("{0}, {1}",activeExperimentsString,record.data.activeExperiments[i].id);}}
var geneId=record.data.probeResults[0].gene.id;return String.format("<a href='/Gemma/dedv/downloadDEDV.html?ee={0} &g={1}' > <img src='/Gemma/images/download.gif'/> </a>",activeExperimentsString,geneId);}});Gemma.DiffExpressionGrid.linkOutPopUp=function(linkOutValueObject){var popUpHtml;if(linkOutValueObject===null){window.alert("No Allen Brain Atlas details available for this gene");return;}else{popUpHtml=String.format("<a href='{0}' target='_blank' > <img height=200 width=400 src={1}> </a>",linkOutValueObject.abaGeneUrl,linkOutValueObject.abaGeneImageUrls[0]);}
var abaWindowId="diffExpressionAbaWindow";var popUpLinkOutWin=Ext.getCmp(abaWindowId);if(popUpLinkOutWin!==null){popUpLinkOutWin.close();popUpLinkOutWin=null;}
popUpLinkOutWin=new Ext.Window({id:abaWindowId,stateful:false,html:popUpHtml,resizable:false});popUpLinkOutWin.setTitle("<img height=15 src=/Gemma/images/abaExpressionLegend.gif>");popUpLinkOutWin.show(this);};Gemma.MIN_THRESHOLD=0.00;Gemma.MAX_THRESHOLD=1.0;Gemma.DEFAULT_THRESHOLD=0.01;Gemma.DiffExpressionSearchForm=Ext.extend(Ext.Panel,{title:"Search configuration",layout:'border',defaults:{collapsible:true,bodyStyle:"padding:10px"},taxonComboReady:false,eeSetReady:false,width:390,height:430,frame:true,stateful:true,stateEvents:['beforesearch'],stateId:"Gemma.DiffSearch",applyState:function(state,config){if(state){this.dsc=state;}},getState:function(){var currentState=this.getDiffSearchCommand();delete currentState.eeIds;return currentState;},onRender:function(){Gemma.DiffExpressionSearchForm.superclass.onRender.apply(this,arguments);Ext.apply(this,{loadMask:new Ext.LoadMask(this.getEl(),{msg:"Loading Differential Interface  ..."})});this.loadMask.show();},restoreState:function(){if(this.eeSetReady&&this.taxonComboReady){this.loadMask.hide();this.loadMask=new Ext.LoadMask(this.getEl(),{msg:"Searching for differential expression ..."});var queryStart=document.URL.indexOf("?");if(queryStart>-1){this.initializeFromQueryString(document.URL.substr(queryStart+1));}else if(this.dsc&&queryStart<0){this.initializeFromDiffSearchCommand(this.dsc);}}},getDiffSearchCommand:function(){var newDsc={};if(this.dsc){newDsc=this.dsc;}
var dsfcs=[];var efMap=this.efChooserPanel.eeFactorsMap;Ext.apply(newDsc,{geneIds:this.geneChooserPanel.getGeneIds(),selectedFactors:efMap,threshold:Ext.getCmp('thresholdField').getValue(),taxonId:this.geneChooserPanel.getTaxonId()});if(this.currentSet){newDsc.eeIds=this.getActiveEeIds();newDsc.eeSetName=this.currentSet.get("name");newDsc.eeSetId=this.currentSet.get("id");newDsc.dirty=this.currentSet.dirty;}
return newDsc;},getDiffSearchCommandFromQuery:function(query){var param=Ext.urlDecode(query);var dsc={geneIds:param.g?param.g.split(','):[],threshold:param.thres?param.thres:Gemma.MIN_THRESHOLD,eeQuery:param.eeq?param.eeq:"",taxonId:param.t};if(param.ees){dsc.eeIds=param.ees.split(',');}
if(param.a>=0){dsc.eeSetId=param.a;}else{dsc.eeSetId=-1;}
if(param.setName){dsc.eeSetName=param.setName;}
if(param.fm){var fss=param.fm.split(",");var factorMap=[];for(var i in fss){var fm=fss[i];if(typeof fm!='string'){continue;}
var m=fm.split(".");if(m.length==2){factorMap.push({eeId:m[0],efId:m[1]});}}
dsc.selectedFactors=factorMap;this.efChooserPanel.eeFactorsMap=factorMap;}
return dsc;},initializeFromQueryString:function(query){this.initializeFromDiffSearchCommand(this.getDiffSearchCommandFromQuery(query),true);},initializeGenes:function(dsc,doSearch){if(dsc.geneIds.length>1){this.geneChooserPanel.loadGenes(dsc.geneIds,this.maybeDoSearch.createDelegate(this,[dsc,doSearch]));}else{this.geneChooserPanel.setGene(dsc.geneIds[0],this.maybeDoSearch.createDelegate(this,[dsc,doSearch]));}},initializeFromDiffSearchCommand:function(dsc,doSearch){this.geneChooserPanel=Ext.getCmp('gene-chooser-panel');this.thresholdField=Ext.getCmp('thresholdField');if(dsc.taxonId){this.geneChooserPanel.getTopToolbar().taxonCombo.setTaxon(dsc.taxonId);}
if(dsc.eeSetName){this.eeSetChooserPanel.selectByName(dsc.eeSetName);if(this.currentSet){dsc.eeSetId=this.currentSet.get("id");}}else if(dsc.eeSetId>=0){this.eeSetChooserPanel.selectById(dsc.eeSetId,false);}
if(dsc.threshold){this.thresholdField.setValue(dsc.threshold);}
this.initializeGenes(dsc,doSearch);},maybeDoSearch:function(dsc,doit){if(doit){this.doSearch(dsc);}},chooseFactors:function(){if(!this.currentSet){Ext.Msg.alert("Warning","You must select an expression experiment group before choosing factors. Scope must be specified.");}else if(this.currentSet.get("expressionExperimentIds").length==0){Ext.Msg.alert("Warning","You should select at least one experiment to analyze");}else{var eeIds=this.currentSet.get("expressionExperimentIds");this.efChooserPanel.show(eeIds);}},getBookmarkableLink:function(dsc){if(!dsc){dsc=this.getDiffSearchCommand();}
var queryStart=document.URL.indexOf("?");var url=queryStart>-1?document.URL.substr(0,queryStart):document.URL;url+=String.format("?g={0}&thres={1}&t={2}",dsc.geneIds.join(","),dsc.threshold,dsc.taxonId);if(dsc.eeSetId>=0){url+=String.format("&a={0}",dsc.eeSetId);}
if(dsc.eeSetName){url+=String.format("&setName={0}",dsc.eeSetName);}
if(dsc.selectedFactors){url+="&fm=";for(var i in dsc.selectedFactors){var o=dsc.selectedFactors[i];if(!o.eeId){continue;}
url+=o.eeId+"."+o.efId+",";}}
return url;},doSearch:function(dsc){if((dsc&&!dsc.selectedFactors)||(!dsc&&!this.efChooserPanel.eeFactorsMap)){this.efChooserPanel.on("factors-chosen",function(efmap){this.doSearch();},this,{single:true});this.chooseFactors();}else{if(!dsc){dsc=this.getDiffSearchCommand();}
this.clearError();var msg=this.validateSearch(dsc);if(msg.length===0){if(this.fireEvent('beforesearch',this,dsc)!==false){this.loadMask.show();var errorHandler=this.handleError.createDelegate(this,[],true);DifferentialExpressionSearchController.getDiffExpressionForGenes(dsc,{callback:this.returnFromSearch.createDelegate(this),errorHandler:errorHandler});}
if(typeof pageTracker!='undefined'){pageTracker._trackPageview("/Gemma/differentialExpressionSearch.doSearch");}}else{this.handleError(msg);}}},handleError:function(msg,e){Ext.DomHelper.overwrite("diffExpression-messages",{tag:'img',src:'/Gemma/images/icons/warning.png'});Ext.DomHelper.append("diffExpression-messages",{tag:'span',html:"&nbsp;&nbsp;"+msg});this.loadMask.hide();},clearError:function(){Ext.DomHelper.overwrite("diffExpression-messages","");},validateSearch:function(dsc){if(!dsc.geneIds||dsc.geneIds.length===0){return"We couldn't figure out which gene you want to query. Please use the search functionality to find genes.";}else if(dsc.threshold<Gemma.MIN_THRESHOLD){return"Minimum threshold is "+Gemma.MIN_THRESHOLD;}else if(dsc.threshold>Gemma.MAX_THRESHOLD){return"Maximum threshold is "+Gemma.MAX_THRESHOLD;}else if(dsc.eeIds&&dsc.eeIds.length<1){return"There are no datasets that match your search terms";}else if(!dsc.eeIds&&!dsc.eeSetId){return"Please select an analysis. Taxon, gene(s), and scope must be specified.";}else{return"";}},returnFromSearch:function(result){this.loadMask.hide();this.fireEvent('aftersearch',this,result);},updateDatasetsToBeSearched:function(datasets,eeSet,dirty){var numDatasets=0;if(!datasets){if(this.currentSet)
numdatasets=this.currentSet.get("expressionExperimentIds").length;}else
numDatasets=datasets.length;Ext.getCmp('analysis-options-wrapper').setTitle(String.format("Analysis options - Up to {0} datasets will be analyzed",numDatasets));},getActiveEeIds:function(){if(this.currentSet){return this.currentSet.get("expressionExperimentIds");}
return[];},initComponent:function(){this.geneChooserPanel=new Gemma.GeneGrid({id:'gene-chooser-panel',region:'center',height:400,width:230});Ext.apply(this.geneChooserPanel.getTopToolbar().taxonCombo,{stateId:"",stateful:false,stateEvents:[]});this.eeSetChooserPanel=new Gemma.DatasetGroupComboPanel();this.efChooserPanel=new Gemma.ExperimentalFactorChooserPanel({modal:true});this.geneChooserPanel.on("taxonchanged",function(taxon){this.eeSetChooserPanel.filterByTaxon(taxon);}.createDelegate(this));this.eeSetChooserPanel.on("select",function(combo,eeSetRecord,index){this.currentSet=eeSetRecord;this.updateDatasetsToBeSearched(eeSetRecord.get("expressionExperimentIds"),eeSetRecord);this.geneChooserPanel.taxonChanged({id:eeSetRecord.get("taxonId"),name:eeSetRecord.get("taxonName")});this.efChooserPanel.reset(eeSetRecord.get("name"));}.createDelegate(this));this.eeSetChooserPanel.on("ready",function(){this.eeSetReady=true;this.restoreState();}.createDelegate(this));this.eeSetChooserPanel.on('commit',function(eeSetRecord){if(!eeSetRecord){return;}
this.currentSet=eeSetRecord;this.chooseFactors();}.createDelegate(this));Ext.apply(this,{items:[this.geneChooserPanel,{xtype:'panel',region:'south',title:'Analysis options',collapsedTitle:'[Analysis options]',id:'analysis-options-wrapper',width:250,height:180,cmargins:'5 0 0 0 ',margins:'5 0 0 0 ',items:[{xtype:'fieldset',defaults:{bodyStyle:'padding:3px'},id:'diff-ex-analysis-options',autoHeight:true,height:90,items:[{xtype:'numberfield',id:'thresholdField',allowBlank:false,allowDecimals:true,allowNegative:false,minValue:Gemma.MIN_THRESHOLD,maxValue:Gemma.MAX_THRESHOLD,fieldLabel:'Threshold',invalidText:"Minimum threshold is "+Gemma.MIN_THRESHOLD+".  Max threshold is "
+Gemma.MAX_THRESHOLD,value:Gemma.DEFAULT_THRESHOLD,width:60,tooltip:"Only genes with a qvalue less than this threshold are returned."},this.eeSetChooserPanel,{xtype:'button',id:'showFactorChooserButton',text:"Factor chooser",tooltip:"Show experimental factor chooser",handler:this.chooseFactors,scope:this}]}]}],buttons:[{text:"Find Differential Expression",handler:this.doSearch.createDelegate(this,[],false)}]});Gemma.DiffExpressionSearchForm.superclass.initComponent.call(this);this.addEvents('beforesearch','aftersearch');this.geneChooserPanel.getTopToolbar().taxonCombo.on("ready",function(taxon){this.taxonComboReady=true;this.restoreState(this);}.createDelegate(this),this);}});Gemma.DiffExpressionGridRowExpander=function(config){this.expandedElements=[];Gemma.DiffExpressionGridRowExpander.superclass.constructor.call(this,config);};Ext.extend(Gemma.DiffExpressionGridRowExpander,Ext.grid.RowExpander,{beforeExpand:function(record,body,rowIndex){if(this.fireEvent('beforeexpand',this,record,body,rowIndex)!==false){var bodyEl=new Ext.Element(body);Ext.DomHelper.overwrite(bodyEl,"<div height='300'></div>");var diffExGrid=new Gemma.ProbeLevelDiffExGrid({width:750,title:"Probe-level results for "+record.get("gene"),renderTo:bodyEl});var supporting=this.getDatasetRecords(record);diffExGrid.getStore().loadData(supporting);diffExGrid.getEl().swallowEvent(['mouseover','mousedown','click','dblclick']);return true;}
return false;},getDatasetRecords:function(record){return record.data.probeResults;},clearCache:function(){for(var i=0;i<this.expandedElements.length;++i){if(this.expandedElements[i]){for(var j=0;j<this.expandedElements[i].length;++j){try{this.expandedElements[i][j].destroy();}catch(e){}}
this.expandedElements[i]=null;}}}});Ext.namespace('Gemma');Gemma.ProbeLevelDiffExGrid=Ext.extend(Ext.grid.GridPanel,{autoExpandColumn:'efs',height:300,stateful:false,viewConfig:{forceFit:true,emptyText:'No differential expression to display'},readMethod:DifferentialExpressionSearchController.getDifferentialExpressionWithoutBatch,convertEE:function(s){return s.shortName;},convertEF:function(s){return s[0].name;},getEEName:function(v,record){return record.expressionExperiment.name;},initComponent:function(){Ext.apply(this,{record:Ext.data.Record.create([{name:"expressionExperiment",sortType:this.convertEE},{name:"gene"},{name:"expressionExperimentName",convert:this.getEEName},{name:"probe"},{name:"experimentalFactors",sortType:this.convertEF},{name:"metThreshold",type:"boolean"},{name:"fisherContribution",type:"boolean"},{name:"p",type:"float"}])});this.searchInGridField=new Ext.form.TextField({enableKeyEvents:true,emptyText:'Filter',tooltip:"Text typed here will ",listeners:{"keyup":{fn:this.searchForText.createDelegate(this),scope:this,options:{delay:100}}}});Ext.apply(this,{store:new Ext.data.Store({proxy:new Ext.data.DWRProxy(this.readMethod),reader:new Ext.data.ListRangeReader({},this.record),sortInfo:{field:"p",direction:"ASC"}})});Ext.apply(this,{bbar:new Ext.Toolbar({items:['->',{xtype:'button',handler:this.clearFilter.createDelegate(this),scope:this,cls:'x-btn-text',text:'Reset filter'},' ',this.searchInGridField]})});Ext.apply(this,{columns:[{id:'expressionExperiment',header:"Dataset",dataIndex:"expressionExperiment",tooltip:"The study/expression experiment the result came from",sortable:true,renderer:Gemma.ProbeLevelDiffExGrid.getEEStyler(),width:50},{id:'visualize',hidden:true,header:"Visualize",dataIndex:"visualize",renderer:this.visStyler.createDelegate(this),tooltip:"Link for visualizing raw data",sortable:false,width:30},{id:'expressionExperimentName',header:"Name",width:100,dataIndex:"expressionExperimentName",tooltip:"The experiment name (abbreviated)",sortable:true,renderer:function(value,metadata,record,row,col,ds){return'<span ext:qtip="'+record.get('expressionExperiment').name+'">'
+Ext.util.Format.ellipsis(record.get('expressionExperiment').name,70)
+'</span>';}.createDelegate(this)},{id:'probe',header:"Probe",dataIndex:"probe",width:80,tooltip:"The specific probe; shown in color if it was used for the Meta-P-value computation",renderer:Gemma.ProbeLevelDiffExGrid.getProbeStyler(),sortable:true},{id:'efs',header:"Factor",tooltip:"The factor that was examined",dataIndex:"experimentalFactors",renderer:Gemma.ProbeLevelDiffExGrid.getEFStyler(),sortable:true},{id:'p',header:"Sig. (q-value)",tooltip:"The significance measure of the result for the probe, shown in color if it met threshold",dataIndex:"p",width:80,renderer:function(p,metadata,record){if(record.get("metThreshold")){metadata.css="metThreshold";}
if(p<0.001){return sprintf("%.3e",p);}else{return sprintf("%.3f",p);}},sortable:true}]});Gemma.ProbeLevelDiffExGrid.superclass.initComponent.call(this);this.on("cellclick",this.rowClickHandler.createDelegate(this),this);this.store.on("load",this.validate.createDelegate(this));},validate:function(){if(this.store.getCount()==0){this.handleError("No differential expression results available");}},handleError:function(errorMessage){if(Ext.get("diffExpression-msg")){Ext.DomHelper.applyStyles("diffExpression-msg","height: 2.2em");Ext.DomHelper.overwrite("diffExpression-msg",[{tag:'img',src:'/Gemma/images/icons/information.png'},{tag:'span',html:"&nbsp;&nbsp;"+errorMessage}]);}else{Ext.Msg.alert("Warning",errorMessage);this.getView().refresh();}},searchForText:function(button,keyev){var text=this.searchInGridField.getValue();if(text.length<2){this.getStore().clearFilter();return;}
this.getStore().filterBy(this.getSearchFun(text),this,0);},clearFilter:function(){this.searchInGridField.setValue("");this.getStore().clearFilter();},getSearchFun:function(text){var value=new RegExp(Ext.escapeRe(text),'i');return function(r,id){var obj=r.data;return value.match(obj.expressionExperiment.name)||value.match(obj.expressionExperiment.shortName)||value.match(obj.experimentalFactors[0].name);};},getEEIds:function(){var result=[];this.store.each(function(rec){result.push(rec.get("id"));});return result;},isEditable:function(){return this.editable;},setEditable:function(b){this.editable=b;},metThresholdStyler:function(value,metadata,record,row,col,ds){if(value){return"&bull;";}else{return"";}},visStyler:function(value,metadata,record,row,col,ds){return"<span style='cursor:pointer' ><img src='/Gemma/images/icons/chart_curve.png' ext:qtip='Visualize the data' /></span>";},rowClickHandler:function(grid,rowIndex,columnIndex,e){if(!this.getSelectionModel().hasSelection())
return;var record=this.getStore().getAt(rowIndex);var fieldName=this.getColumnModel().getDataIndex(columnIndex);if(fieldName=='visualize'){var ee=record.data.expressionExperiment;var gene=record.data.gene;var geneId;if(gene!=null){geneId=gene.id;}else{geneId=dwr.util.getValue("gene");}
var title="Visualization of Probes ";var visDifWindow=new Gemma.VisualizationDifferentialWindow({cascadeOnFirstShow:true,title:title,thumbnails:false,downloadLink:String.format('/Gemma/dedv/downloadDEDV.html?ee={0}&g={1}',ee.id,geneId),readMethod:DEDVController.getDEDVForDiffExVisualizationByExperiment});visDifWindow.show({params:[ee.id,geneId,null,ee.sourceExperiment!=null]});}}});Gemma.ProbeLevelDiffExGrid.getEEStyler=function(){if(Gemma.ProbeLevelDiffExGrid.eeNameStyler===undefined){Gemma.ProbeLevelDiffExGrid.eeNameTemplate=new Ext.XTemplate('<tpl for="."><a target="_blank" title="{name}" href="/Gemma/expressionExperiment/showExpressionExperiment.html?id=','{[values.sourceExperiment ? values.sourceExperiment : values.id]}"',' ext:qtip="{name}">{shortName}</a></tpl>');Gemma.ProbeLevelDiffExGrid.eeNameStyler=function(value,metadata,record,row,col,ds){var ee=record.data.expressionExperiment;return Gemma.ProbeLevelDiffExGrid.eeNameTemplate.apply(ee);};}
return Gemma.ProbeLevelDiffExGrid.eeNameStyler;};Gemma.ProbeLevelDiffExGrid.getEENameStyler=function(){if(Gemma.ProbeLevelDiffExGrid.eeStyler===undefined){Gemma.ProbeLevelDiffExGrid.eeTemplate=new Ext.Template("{name}");Gemma.ProbeLevelDiffExGrid.eeStyler=function(value,metadata,record,row,col,ds){var ee=record.data.expressionExperiment;return Gemma.ProbeLevelDiffExGrid.eeTemplate.apply(ee);};}
return Gemma.ProbeLevelDiffExGrid.eeStyler;};Gemma.ProbeLevelDiffExGrid.getProbeStyler=function(){if(Gemma.ProbeLevelDiffExGrid.probeStyler===undefined){Gemma.ProbeLevelDiffExGrid.probeStyler=function(value,metadata,record,row,col,ds){var probe=record.data.probe;if(record.data.fisherContribution){return"<span style='color:#3A3'>"+probe+"</span>";}else{return"<span style='color:#808080'>"+probe+"</span>";}};}
return Gemma.ProbeLevelDiffExGrid.probeStyler;};Gemma.ProbeLevelDiffExGrid.getEFStyler=function(){if(Gemma.ProbeLevelDiffExGrid.efStyler===undefined){Gemma.ProbeLevelDiffExGrid.efTemplate=new Ext.XTemplate('<tpl for=".">',"<div ext:qtip='{factorValues}'>{name}</div>",'</tpl>');Gemma.ProbeLevelDiffExGrid.efStyler=function(value,metadata,record,row,col,ds){var efs=record.data.experimentalFactors;return Gemma.ProbeLevelDiffExGrid.efTemplate.apply(efs);};}
return Gemma.ProbeLevelDiffExGrid.efStyler;};Ext.namespace('Gemma');Gemma.CoexpressionDatasetGrid=Ext.extend(Gemma.GemmaGridPanel,{collapsible:true,collapsed:true,hidden:true,title:'Dataset information',style:"margin-top: 1em; margin-bottom: .5em;",autoScroll:true,height:250,stateful:false,record:Ext.data.Record.create([{name:"id",type:"int"},{name:"shortName",type:"string"},{name:"name",type:"string"},{name:"coexpressionLinkCount",type:"int"},{name:"probeSpecificForQueryGene"},{name:"arrayDesignCount",type:"int"},{name:"bioAssayCount",type:"int"},{name:"queryGene",type:"string"}]),loadData:function(d){var datasets={},numDatasets=0;for(var i=0;i<d.length;++i){if(!datasets[d[i].id]){datasets[d[i].id]=1;++numDatasets;}}
var title=String.format("{0} dataset{1} relevant{2} coexpression data",numDatasets,numDatasets==1?" has":"s have",this.adjective?" "+this.adjective:"");this.setTitle(title);this.show();this.getStore().proxy.data=d;this.getStore().reload();},initComponent:function(){Ext.apply(this,{store:new Ext.data.GroupingStore({proxy:new Ext.data.MemoryProxy([]),reader:new Ext.data.ListRangeReader({},this.record),groupField:'queryGene',sortInfo:{field:'coexpressionLinkCount',direction:'DESC'}}),view:new Ext.grid.GroupingView({hideGroupedColumn:true}),columns:[{id:' shortName ',header:"Dataset",dataIndex:"shortName",sortable:true,tooltip:"Dataset short name"},{id:'name',header:"Name",dataIndex:"name",tooltip:"Dataset long name",sortable:true,width:230},{id:' queryGene ',header:"Query Gene",dataIndex:"queryGene",hidden:true,sortable:true},{header:" Contributing Links ",dataIndex:"coexpressionLinkCount",tooltip:"# contributions to confirmed links",align:'center',sortable:true},{id:'assays',header:" Assays ",dataIndex:"bioAssayCount",tooltip:"# of samples in the study",align:'center',sortable:true}]});Gemma.CoexpressionDatasetGrid.superclass.initComponent.call(this);},assayCountStyler:function(value,metadata,record,row,col,ds){return String.format("{0}&nbsp;<a href='/Gemma/expressionExperiment/showBioAssaysFromExpressionExperiment.html?id={1}'>"
+"<img src='/Gemma/images/icons/magnifier.png' height='10' width='10'/></a>",record.data.bioAssayCount,record.data.id);},booleanStyler:function(value,metadata,record,row,col,ds){if(value){return"<img src='/Gemma/images/icons/ok.png' height='10' width='10' />";}
return"";},eeTemplate:new Ext.Template("<a target='_blank' "
+"href='/Gemma/expressionExperiment/showExpressionExperiment.html?id={id}' ext:qtip='{name}'>{shortName}</a>"),eeStyler:function(value,metadata,record,row,col,ds){this.eeTemplate.apply(record.data);}});Gemma.CoexpressionDatasetGrid.updateDatasetInfo=function(datasets,eeMap){for(var i=0;i<datasets.length;++i){var ee=eeMap[datasets[i].id];if(ee){datasets[i].shortName=ee.shortName;datasets[i].name=ee.name;}}};Ext.namespace('Gemma');Gemma.CoexpressionSearchData=Ext.extend(Ext.util.Observable,{coexGridResults:{},cytoscapeResults:{},coexGridCoexCommand:{},cytoscapeCoexCommand:{},coexSearchTimeout:420000,initComponent:function(){Gemma.CoexpressionSearchData.superclass.initComponent.call(this);this.addEvents('searchForCoexGridDataComplete','searchForCytoscapeDataComplete','searchErrorFromCoexpressionSearchData');},constructor:function(configs){if(typeof configs!=='undefined'){Ext.apply(this,configs);}
Gemma.CoexpressionSearchData.superclass.constructor.call(this);},searchForCoexGridDataAndCytoscapeData:function(){ExtCoexpressionSearchController.doSearchQuick2(this.coexGridCoexCommand,{callback:function(result){this.coexGridResults=result;this.fireEvent('searchForCoexGridDataComplete');this.searchForCytoscapeData();}.createDelegate(this),timeout:this.coexSearchTimeout,errorHandler:function(result){this.fireEvent('searchErrorFromCoexpressionSearchData',result);}.createDelegate(this)});},searchForCytoscapeData:function(){Gemma.CytoscapePanelUtil.restrictQueryGenesForCytoscapeQuery(this);if(this.cytoscapeCoexCommand.geneIds.length<2){this.cytoscapeResults.knownGeneResults=[];this.fireEvent('searchForCytoscapeDataComplete');return;}
Ext.apply(this.cytoscapeCoexCommand,{queryGenesOnly:true});ExtCoexpressionSearchController.doSearchQuick2Complete(this.cytoscapeCoexCommand,this.coexGridCoexCommand.geneIds,{callback:function(results){this.cytoscapeResults=results;this.fireEvent('searchForCytoscapeDataComplete');}.createDelegate(this),timeout:this.coexSearchTimeout,errorHandler:function(result){this.fireEvent('searchErrorFromCoexpressionSearchData',result);}.createDelegate(this)});}});Gemma.DIFF_THRESHOLD=0.01;Gemma.MAX_DIFF_RESULTS=25;Gemma.CoexpressionGridRowExpander=Ext.extend(Ext.grid.RowExpander,{expandedElements:[],beforeExpand:function(record,body,rowIndex){if(this.fireEvent('beforeexpand',this,record,body,rowIndex)!==false){var gene=record.data.foundGene;var bodyEl=new Ext.Element(body);Ext.DomHelper.overwrite(bodyEl,"");var supportingDsGridEl=bodyEl.createChild({});supportingDsGridEl.addClass("x-hide-display");var diffExGridEl=bodyEl.createChild({});diffExGridEl.addClass("x-hide-display");var supporting=this.getSupportingDatasetRecords(record);var dsGrid=new Gemma.ExpressionExperimentGrid({records:supporting,width:750,renderTo:supportingDsGridEl});dsGrid.getStore().load();var diffExGrid=new Gemma.ProbeLevelDiffExGrid({geneId:gene.id,threshold:0.01,width:750,renderTo:diffExGridEl});var tabPanel=new Ext.TabPanel({renderTo:bodyEl,layoutOnTabChange:true,width:750,activeTab:0,items:[{title:"Supporting datasets",contentEl:supportingDsGridEl},{title:"Differential expression of "+gene.officialSymbol,contentEl:diffExGridEl,loaded:false,listeners:{"activate":{fn:function(){if(!this.loaded){diffExGrid.getStore().load({params:[gene.id,Gemma.DIFF_THRESHOLD,Gemma.MAX_DIFF_RESULTS]});}
this.loaded=true;}}}}]});dsGrid.getEl().swallowEvent(['mouseover','mousedown','click','dblclick']);diffExGrid.getEl().swallowEvent(['mouseover','mousedown','click','dblclick']);return true;}
return false;},getSupportingDatasetRecords:function(record){var ids=record.data.supportingExperiments;var supporting=[];var ind=0;for(var i=0;i<ids.length;++i){var id=ids[i];for(var j=0;j<this.grid.datasets.length;j++){var index=this.grid.datasets[j].id;if(index===id){supporting.push(this.grid.datasets[j]);break;}}}
return supporting;},clearCache:function(){for(var i=0;i<this.expandedElements.length;++i){if(this.expandedElements[i]){for(var j=0;j<this.expandedElements[i].length;++j){try{this.expandedElements[i][j].destroy();}catch(e){}}
this.expandedElements[i]=null;}}}});Gemma.CoexpressionSearchForm=Ext.extend(Ext.Panel,{layout:'border',width:390,height:480,frame:true,stateful:true,stateEvents:["beforesearch"],taxonComboReady:false,eeSetReady:false,stateId:"Gemma.CoexpressionSearch",defaults:{collapsible:true,bodyStyle:"padding:10px"},applyState:function(state,config){if(state){this.csc=state;}},getState:function(){var currentState=this.getCoexpressionSearchCommand();delete currentState.eeIds;return currentState;},restoreState:function(){if(this.eeSetReady&&this.taxonComboReady){this.loadMask.hide();this.loadMask=new Ext.LoadMask(this.getEl(),{msg:"Searching for coexpressions ..."});var queryStart=document.URL.indexOf("?");if(queryStart>-1){this.initializeFromQueryString(document.URL.substr(queryStart+1));}else if(this.csc&&queryStart<0){this.initializeFromCoexpressionSearchCommand(this.csc);}}},getCoexpressionSearchCommand:function(){var newCsc={};if(this.csc){newCsc=this.csc;}
Ext.apply(newCsc,{geneIds:this.geneChooserPanel.getGeneIds(),stringency:Ext.getCmp('stringencyfield').getValue(),forceProbeLevelSearch:Ext.getCmp('forceProbeLevelSearch').getValue(),useMyDatasets:Ext.getCmp('forceUseMyDatasets').getValue(),taxonId:this.geneChooserPanel.getTaxonId(),queryGenesOnly:Ext.getCmp('querygenesonly').getValue()});if(this.currentSet){newCsc.eeIds=this.getActiveEeIds();newCsc.eeSetName=this.currentSet.get("name");newCsc.eeSetId=this.currentSet.get("id");newCsc.dirty=this.currentSet.dirty;}
return newCsc;},getCoexpressionSearchCommandFromQuery:function(query){var param=Ext.urlDecode(query);var eeQuery=param.eeq||"";var csc={geneIds:param.g?param.g.split(','):[],stringency:param.s||Gemma.MIN_STRINGENCY,eeQuery:param.eeq,taxonId:param.t};if(param.q){csc.queryGenesOnly=true;}
if(param.ees){csc.eeIds=param.ees.split(',');}
if(param.dirty){csc.dirty=true;}
if(param.a){csc.eeSetId=param.a;}else{csc.eeSetId=-1;}
if(param.an){csc.eeSetName=param.an;}
if(param.setName){csc.eeSetName=param.setName;}
return csc;},initializeFromQueryString:function(query){this.csc=this.getCoexpressionSearchCommandFromQuery(query);this.initializeFromCoexpressionSearchCommand(this.csc,true);},initializeGenes:function(csc,doSearch){if(csc.geneIds.length>1){this.geneChooserPanel.loadGenes(csc.geneIds,this.maybeDoSearch.createDelegate(this,[csc,doSearch]));}else{this.geneChooserPanel.setGene(csc.geneIds[0],this.maybeDoSearch.createDelegate(this,[csc,doSearch]));}},initializeFromCoexpressionSearchCommand:function(csc,doSearch){this.geneChooserPanel=Ext.getCmp('gene-chooser-panel');if(csc.dirty){}
if(csc.taxonId){this.geneChooserPanel.getTopToolbar().taxonCombo.setTaxon(csc.taxonId);}
if(csc.eeSetName){this.currentSet=this.eeSetChooserPanel.selectByName(csc.eeSetName);if(this.currentSet){csc.eeSetId=this.currentSet.get("id");}}else if(csc.eeSetId>=0){this.eeSetChooserPanel.selectById(csc.eeSetId,false);}
if(csc.stringency){Ext.getCmp('stringencyfield').setValue(csc.stringency);}
if(csc.geneIds.length>1){Ext.getCmp("querygenesonly").enable();}
if(csc.queryGenesOnly){Ext.getCmp("querygenesonly").setValue(true);}
this.initializeGenes(csc,doSearch);},maybeDoSearch:function(csc,doit){if(doit){this.doSearch(csc);}},getBookmarkableLink:function(csc){if(!csc){csc=this.getCoexpressionSearchCommand();}
var queryStart=document.URL.indexOf("?");var url=queryStart>-1?document.URL.substr(0,queryStart):document.URL;url+=String.format("?g={0}&s={1}&t={2}",csc.geneIds.join(","),csc.stringency,csc.taxonId);if(csc.queryGenesOnly){url+="&q";}
if(csc.eeSetId>=0)
url+=String.format("&a={0}",csc.eeSetId);if(csc.eeSetName)
url+=String.format("&an={0}",csc.eeSetName);if(csc.dirty){url+="&dirty=1";}
return url;},doSearch:function(csc){if(!csc){csc=this.getCoexpressionSearchCommand();}
this.clearError();var msg=this.validateSearch(csc);if(msg.length===0){if(this.fireEvent('beforesearch',this,csc)!==false){this.loadMask.show();var errorHandler=this.handleError.createDelegate(this,[],true);ExtCoexpressionSearchController.doSearch(csc,{callback:this.returnFromSearch.createDelegate(this),errorHandler:errorHandler});}
if(typeof pageTracker!=='undefined'){pageTracker._trackPageview("/Gemma/coexpressionSearch.doSearch");}}else{this.handleError(msg);}},handleError:function(msg,e){Ext.DomHelper.overwrite("coexpression-messages",{tag:'img',src:'/Gemma/images/icons/warning.png'});Ext.DomHelper.append("coexpression-messages",{tag:'span',html:"&nbsp;&nbsp;"+msg});this.returnFromSearch({errorState:msg});},clearError:function(){Ext.DomHelper.overwrite("coexpression-messages","");},validateSearch:function(csc){if(csc.queryGenesOnly&&csc.geneIds.length<2){return"You must select more than one query gene to use 'search among query genes only'";}else if(!csc.geneIds||csc.geneIds.length===0){return"We couldn't figure out which gene you want to query. Please use the search functionality to find genes.";}else if(csc.stringency<Gemma.MIN_STRINGENCY){return"Minimum stringency is "+Gemma.MIN_STRINGENCY;}else if(csc.eeIds&&csc.eeIds.length<1){return"There are no datasets that match your search terms";}else if(!csc.eeIds&&!csc.eeSetId){return"Please select an analysis. Taxon, gene(s), and scope must be specified.";}else{return"";}},returnFromSearch:function(result){this.loadMask.hide();this.fireEvent('aftersearch',this,result);},updateDatasetsToBeSearched:function(datasets,eeSetName,dirty){var numDatasets=0;if(!datasets){if(this.currentSet)
numdatasets=this.currentSet.get("expressionExperimentIds").length;}else
numDatasets=datasets.length;if(numDatasets!==0)
Ext.getCmp('stringencyfield').maxValue=numDatasets;Ext.getCmp('analysis-options').setTitle(String.format("Analysis options - Up to {0} datasets will be analyzed",numDatasets));},getActiveEeIds:function(){if(this.currentSet){return this.currentSet.get("expressionExperimentIds");}
return[];},searchForGene:function(geneId){this.geneChooserPanel.setGene.call(this.geneChooserPanel,geneId,this.doSearch.createDelegate(this));},initComponent:function(){this.geneChooserPanel=new Gemma.GeneGrid({height:400,width:230,region:'center',id:'gene-chooser-panel'});Ext.apply(this.geneChooserPanel.getTopToolbar().taxonCombo,{stateId:"",stateful:false,stateEvents:[]});this.eeSetChooserPanel=new Gemma.DatasetGroupComboPanel();this.geneChooserPanel.on("taxonchanged",function(taxon){this.eeSetChooserPanel.filterByTaxon(taxon);}.createDelegate(this));this.eeSetChooserPanel.on("select",function(combo,eeSetRecord,index){if(eeSetRecord===null||eeSetRecord===undefined){return;}
this.currentSet=eeSetRecord;this.updateDatasetsToBeSearched(eeSetRecord.get("expressionExperimentIds"),eeSetRecord);this.geneChooserPanel.taxonChanged({id:this.currentSet.get("taxonId"),name:this.currentSet.get("taxonName")});}.createDelegate(this));this.eeSetChooserPanel.on("ready",function(){this.eeSetReady=true;this.restoreState();}.createDelegate(this));Ext.apply(this,{title:"Search configuration",items:[this.geneChooserPanel,{xtype:'panel',title:'Analysis options',id:'analysis-options',region:'south',frame:true,cmargins:'5 0 0 0 ',margins:'5 0 0 0 ',width:250,height:230,items:[{xtype:'fieldset',autoHeight:true,height:90,items:[{xtype:'numberfield',id:'stringencyfield',allowBlank:false,allowDecimals:false,allowNegative:false,minValue:Gemma.MIN_STRINGENCY,maxValue:999,fieldLabel:'Stringency',invalidText:"Minimum stringency is "+Gemma.MIN_STRINGENCY,value:2,width:60,tooltip:"The minimum number of datasets that must show coexpression for a result to appear"},{xtype:'checkbox',id:'forceProbeLevelSearch',fieldLabel:'Force Probe query',disabled:!this.admin,hidden:!this.admin,hideLabel:!this.admin,tooltip:"Always do the query at the level of probes. May be slower but always gets most current information from newly-processed data sets."},{xtype:'checkbox',id:'forceUseMyDatasets',fieldLabel:'Use my data',disabled:!this.user,hidden:!this.user,hideLabel:!this.user,tooltip:"Add your data sets to the search, if available (and for the selected taxon)"},{xtype:'checkbox',id:'querygenesonly',fieldLabel:'My genes only',disabled:true,tooltip:"Restrict the output to include only links among the listed query genes"},this.eeSetChooserPanel]}]}],buttons:[{text:"Find coexpressed genes",handler:this.doSearch.createDelegate(this,[],false)}]});Gemma.CoexpressionSearchForm.superclass.initComponent.call(this);this.addEvents('beforesearch','aftersearch');this.geneChooserPanel.on("addgenes",function(geneids){if(this.geneChooserPanel.getGeneIds().length>1){var cmp=Ext.getCmp("querygenesonly");cmp.enable();}},this);this.geneChooserPanel.on("removegenes",function(){if(this.geneChooserPanel.getGeneIds().length<2){var cmp=Ext.getCmp("querygenesonly");cmp.setValue(false);cmp.disable();}else{}},this);this.on('afterrender',function(){Ext.apply(this,{loadMask:new Ext.LoadMask(this.getEl(),{msg:"Preparing Coexpression Interface  ..."})});this.loadMask.show();});this.geneChooserPanel.getTopToolbar().taxonCombo.on("ready",function(taxon){this.taxonComboReady=true;this.restoreState(this);}.createDelegate(this),this);}});Ext.namespace('Gemma');Gemma.SHOW_ONLY_MINE="Show only my data";Gemma.SHOW_ALL="Show all results";Gemma.CoexpressionGrid=Ext.extend(Ext.grid.GridPanel,{collapsible:false,editable:false,style:"margin-bottom: 1em;",height:300,autoScroll:true,stateful:false,lite:false,noSmallGemma:false,coexpressionSearchData:{},viewConfig:{forceFit:true,emptyText:'No coexpressed genes to display'},initComponent:function(){var si;if(this.lite){this.autoScroll=true;this.height=300;si={field:'posSupp',direction:'DESC'};}else{si={field:'sortKey',direction:'ASC'};}
this.ds=new Ext.data.Store({proxy:new Ext.data.MemoryProxy([]),reader:new Ext.data.ListRangeReader({id:"id"},this.record),sortInfo:si});var columns;if(this.lite){columns=[{id:'query',header:"Query Gene",hidden:true,dataIndex:"queryGene",tooltip:"Query Gene",renderer:this.queryGeneStyler.createDelegate(this),sortable:true},{id:'visualize',header:"Visualize",dataIndex:"visualize",renderer:this.visStyler.createDelegate(this),tooltip:"Link for visualizing raw data",sortable:false,width:35},{id:'found',header:"Coexpressed Gene",dataIndex:"foundGene",renderer:this.foundGeneStyler.createDelegate(this),tooltip:"Coexpressed Gene",sortable:true},{id:'support',header:"Support",dataIndex:"supportKey",width:70,renderer:this.supportStyler.createDelegate(this),tooltip:Gemma.HelpText.WidgetDefaults.CoexpressionGrid.supportColumnTT,sortable:true},{id:'gene2GeneProteinAssociationStringUrl',header:"PPI",dataIndex:"gene2GeneProteinAssociationStringUrl",width:30,renderer:this.proteinlinkStyler.createDelegate(this),tooltip:"Evidence for interactions from external sources",sortable:true,hidden:true},{id:'nodeDegree',header:"Specificity",dataIndex:"foundGeneNodeDegree",width:60,renderer:this.nodeDegreeStyler.createDelegate(this),tooltip:"Specificity",sortable:true}];}else{columns=[{id:'query',header:"Query Gene",hidden:true,dataIndex:"queryGene",tooltip:"Query Gene",renderer:this.queryGeneStyler.createDelegate(this),sortable:true},{id:'details',header:"Details",dataIndex:'details',renderer:this.detailsStyler.createDelegate(this),tooltip:"Links for probe-level details",sortable:false,width:30,hidden:this.tabPanelViewFlag},{id:'found',header:"Coexpressed Gene",dataIndex:"foundGene",renderer:this.foundGeneStyler.createDelegate(this),tooltip:"Coexpressed Gene",sortable:true},{id:'support',header:"Support",dataIndex:"supportKey",width:75,renderer:this.supportStyler.createDelegate(this),tooltip:Gemma.HelpText.WidgetDefaults.CoexpressionGrid.supportColumnTT,sortable:true},{id:'nodeDegree',header:"Specificity",dataIndex:"foundGeneNodeDegree",width:60,renderer:this.nodeDegreeStyler.createDelegate(this),tooltip:"Specificity",sortable:true},{id:'visualize',header:"Visualize",dataIndex:"visualize",renderer:this.visStyler.createDelegate(this),tooltip:"Link for visualizing raw data",sortable:false,width:35},{id:'gene2GeneProteinAssociationStringUrl',header:"PPI",dataIndex:"gene2GeneProteinAssociationStringUrl",width:30,renderer:this.proteinlinkStyler.createDelegate(this),tooltip:"Evidence for interactions from external sources",sortable:true,hidden:true},{id:'go',header:"GO Overlap",dataIndex:"goSim",width:75,renderer:this.goStyler.createDelegate(this),tooltip:"GO Similarity Score",sortable:true,hidden:true},{id:'linkOut',dataIndex:"foundGene",header:"More",sortable:false,width:30,tooltip:"Links to other websites for more information",renderer:this.linkOutStyler,hidden:true}];}
Ext.apply(this,{columns:columns});if(!this.lite){Ext.apply(this,{tbar:new Ext.Toolbar({items:[{xtype:'tbtext',text:'Stringency:'},{xtype:'tbspacer'},{xtype:'spinnerfield',itemId:'stringencySpinner',decimalPrecision:1,incrementValue:1,accelerate:false,ref:'stringencyfield',allowBlank:false,allowDecimals:false,allowNegative:false,minValue:Gemma.MIN_STRINGENCY,maxValue:999,fieldLabel:'Stringency ',value:this.coexpressionSearchData.coexGridCoexCommand.displayStringency,width:60,enableKeyEvents:true,listeners:{"keyup":{fn:this.stringencyChange.createDelegate(this),scope:this,delay:500}}},{xtype:'label',html:'&nbsp&nbsp<img ext:qtip="'+
Gemma.HelpText.WidgetDefaults.CoexpressionGrid.stringencySpinnerTT
+'" src="/Gemma/images/icons/question_blue.png"/>',height:15},{xtype:'tbspacer'},' ',' ',{xtype:'textfield',ref:'searchInGrid',id:this.id+'-search-in-grid',tabIndex:1,enableKeyEvents:true,emptyText:'Find gene in results',listeners:{"keyup":{fn:function(button,keyev){this.fireEvent('textBoxMatchFromCoexGrid',this.getTopToolbar().getComponent(this.id+'-search-in-grid').getValue());this.refreshGridFromCoexpressionSearchData();},scope:this,delay:400}}},' ',' ',{xtype:'checkbox',itemId:'queryGenesOnly',boxLabel:'Query Genes Only',handler:function(){this.myGenesOnlyChange();},checked:false,scope:this},{xtype:'tbspacer',width:'180',ref:'arbitraryTutorialTooltip1'},{xtype:'tbspacer',width:'180',ref:'arbitraryTutorialTooltip2'},{xtype:'tbspacer',ref:'arbitraryTutorialTooltip3'},'->','-',{xtype:'button',text:'<b>Download</b>',tooltip:Gemma.HelpText.WidgetDefaults.CytoscapePanel.widgetHelpTT,handler:this.exportData,scope:this}]}),bbar:[{xtype:'tbtext',text:'',itemId:'bbarStatus'},'->',{xtype:'button',icon:"/Gemma/images/icons/cross.png",itemId:'bbarClearButton',handler:function(){this.hideBottomToolbar();},scope:this}]});}
Gemma.CoexpressionGrid.superclass.initComponent.call(this);this.on('afterrender',function(){if(!this.lite){if(this.coexpressionSearchData.coexGridCoexCommand.geneIds.length<2){this.getTopToolbar().getComponent('queryGenesOnly').setDisabled(true);}
if(this.coexpressionSearchData.coexGridCoexCommand.displayStringency>Gemma.MIN_STRINGENCY){var bbarText=this.getBottomToolbar().getComponent('bbarStatus');this.currentbbarText="Display Stringency set to "+this.coexpressionSearchData.coexGridCoexCommand.displayStringency+" based on number of experiments chosen.";bbarText.setText(this.currentbbarText);}
else{this.hideBottomToolbar();}}});this.on("cellclick",this.rowClickHandler.createDelegate(this),this);this.on('stringencyUpdateFromCoexpressionViz',function(displayStringency){this.coexStringencyUpdate(displayStringency);},this);this.on('queryGenesOnlyUpdateFromCoexpressionViz',function(checked){this.getTopToolbar().getComponent('queryGenesOnly').setValue(checked);this.refreshGridFromCoexpressionSearchData();},this);this.on('textBoxMatchFromCoexpressionViz',function(text){this.getTopToolbar().getComponent(this.id+'-search-in-grid').setValue(text);this.refreshGridFromCoexpressionSearchData();},this);this.on('searchForCoexGridDataComplete',function(){if(this.coexpressionSearchData.coexGridCoexCommand.geneIds.length<2){this.getTopToolbar().getComponent('queryGenesOnly').setDisabled(true);this.getTopToolbar().getComponent('queryGenesOnly').setValue(false);}else{this.getTopToolbar().getComponent('queryGenesOnly').setDisabled(false);}
var combinedData=this.coexpressionSearchData.coexGridResults.knownGeneResults;if(this.coexpressionSearchData.coexGridResults.queryGenesOnlyResults){combinedData=Gemma.CoexValueObjectUtil.combineKnownGeneResultsAndQueryGeneOnlyResults(this.coexpressionSearchData.coexGridResults.knownGeneResults,this.coexpressionSearchData.coexGridResults.queryGenesOnlyResults);}
this.loadData(false,2,combinedData,null);this.coexStringencyUpdate(this.coexpressionSearchData.coexGridCoexCommand.displayStringency);this.hideBottomToolbar();},this);if(!this.lite){this.getTopToolbar().getComponent('stringencySpinner').addListener('spin',function(ev){this.stringencyChange();},this);}},stringencyChange:function(){var spinnerValue=this.getTopToolbar().getComponent('stringencySpinner').getValue();if(Ext.isNumber(spinnerValue)&&spinnerValue>1){this.stringencyChangeHandler(spinnerValue);if(this.tabPanelViewFlag){this.fireEvent('stringencyUpdateFromCoexGrid');}}},coexStringencyUpdate:function(displayStringency){if(this.getTopToolbar()){this.getTopToolbar().getComponent('stringencySpinner').setValue(displayStringency);}
this.stringencyChangeHandler(displayStringency);},stringencyChangeHandler:function(stringencyValue){this.hideBottomToolbar();this.coexpressionSearchData.coexGridCoexCommand.displayStringency=stringencyValue;this.refreshGridFromCoexpressionSearchData();},myGenesOnlyChange:function(){this.fireEvent('queryGenesOnlyUpdateFromCoexGrid',this.getTopToolbar().getComponent('queryGenesOnly').getValue());this.refreshGridFromCoexpressionSearchData();},refreshGridFromCoexpressionSearchData:function(){this.getStore().filterBy(this.filter(),this,0);},hideBottomToolbar:function(){if(!this.getBottomToolbar.hidden){this.currentbbarText="";this.getBottomToolbar().hide();this.doLayout();}},getSupportingDatasetRecords:function(record,grid){var ids=record.data.supportingExperiments;var supporting=[];var ind=0;var i;var j;for(i=0;i<ids.length;++i){var id=ids[i];for(j=0;j<grid.datasets.length;j++){var index=grid.datasets[j].id;if(index===id){supporting.push(grid.datasets[j]);break;}}}
return supporting;},loadData:function(isCannedAnalysis,numQueryGenes,data,datasets){var queryIndex=this.getColumnModel().getIndexById('query');if(numQueryGenes>1){this.getColumnModel().setHidden(queryIndex,false);}else{this.getColumnModel().setHidden(queryIndex,true);}
this.getStore().proxy.data=data;this.getStore().reload({resetPage:true});if(!this.lite){this.datasets=datasets;if(!this.tabPanelViewFlag){this.resizeDatasetColumn();}}
if(this.loadMask){this.loadMask.hide();}},loadDataCb:function(result){if(result.errorState){this.handleError(result.errorState);}else{this.loadData(result.isCannedAnalysis,result.queryGenes.length,result.knownGeneResults,result.knownGeneDatasets);}},doSearch:function(csc){Ext.apply(this,{loadMask:new Ext.LoadMask(this.getEl(),{msg:"Loading ..."})});this.loadMask.show();var errorHandler=this.handleError.createDelegate(this);ExtCoexpressionSearchController.doSearch(csc,{callback:this.loadDataCb.createDelegate(this),errorHandler:errorHandler});},handleError:function(errorMessage){if(Ext.get('coexpression-msg')){Ext.DomHelper.applyStyles("coexpression-msg","height: 2.2em");Ext.DomHelper.overwrite("coexpression-msg",[{tag:'img',src:'/Gemma/images/icons/information.png'},{tag:'span',html:"&nbsp;&nbsp;"+errorMessage}]);}else{Ext.Msg.alert("Warning",errorMessage);this.getView().refresh();}
this.loadMask.hide();},clearError:function(){Ext.DomHelper.overwrite("coexpression-messages","");},toggleMyData:function(btn,pressed){var buttonText=btn.getText();if(buttonText==Gemma.SHOW_ALL){this.getStore().clearFilter();btn.setText(Gemma.SHOW_ONLY_MINE);}else{this.getStore().filterBy(function(r,id){return r.get("containsMyData");},this,0);btn.setText(Gemma.SHOW_ALL);}},filter:function(){var text=Ext.getCmp(this.id+'-search-in-grid').getValue();var stringency=this.coexpressionSearchData.coexGridCoexCommand.displayStringency;var queryGenesOnly=this.getTopToolbar().getComponent('queryGenesOnly').checked;var value;if(text&&text.length>1){value=new RegExp(Ext.escapeRe(text),'i');}
return function(r,id){if(r.get("supportKey")<stringency){return false;}
if(queryGenesOnly&&(this.coexpressionSearchData.coexGridCoexCommand.geneIds.indexOf(r.get('queryGene').id)==-1||this.coexpressionSearchData.coexGridCoexCommand.geneIds.indexOf(r.get('foundGene').id)==-1)){return false;}
if(!value){return true;}else{var foundGene=(r.get("foundGene"));var queryGene=(r.get("queryGene"));if(value.test(foundGene.officialSymbol)||value.test(queryGene.officialSymbol)||value.test(foundGene.officialName)||value.test(queryGene.officialName)){return true;}}
return false;};},record:Ext.data.Record.create([{name:"queryGene",sortType:function(g){return g.officialSymbol;}},{name:"foundGene",sortType:function(g){return g.officialSymbol;}},{name:"sortKey",type:"string"},{name:"supportKey",type:"int",sortType:Ext.data.SortTypes.asInt,sortDir:"DESC"},{name:"posSupp",type:"int"},{name:"negSupp",type:"int"},{name:"numTestedIn",type:"int"},{name:"nonSpecPosSupp",type:"int"},{name:"nonSpecNegSupp",type:"int"},{name:"hybWQuery",type:"boolean"},{name:"goSim",type:"int"},{name:"maxGoSim",type:"int"},{name:"datasetVector",type:"string"},{name:"supportingExperiments"},{name:"gene2GeneProteinAssociationStringUrl",type:"string"},{name:"gene2GeneProteinInteractionEvidence",type:"string"},{name:"gene2GeneProteinInteractionConfidenceScore",type:"string"},{name:"foundGeneNodeDegree",type:"float"},{name:"queryGeneNodeDegree",type:"float"},{name:"containsMyData",type:"boolean"},{name:"foundRegulatesQuery",type:"boolean"},{name:"queryRegulatesFound",type:"boolean"}]),linkOutStyler:function(value,metadata,record,row,col,ds){var call="Gemma.CoexpressionGrid.getAllenAtlasImage(\'"+value.officialSymbol+"\')";return String.format('<span onClick="{0}" id="aba-{1}-button"><img height=15 width =15 src="/Gemma/images/logo/aba-icon.png" ext:qtip="Link to expression data from the Allen Brain Atlas for {2}" /> </span>',call,value.officialSymbol,value.officialSymbol);},proteinlinkStyler:function(value,metadata,record,row,col,ds){var d=record.data;var result="";if(d.gene2GeneProteinAssociationStringUrl){result=String.format('<span> <a href="{0}"  target="_blank" class="external"><img src="/Gemma/images/logo/string_logo.gif" ext:qtip="Click to view the protein protein interaction obtained from {1} evidence with a combined association score of {2} from STRING" /></a> </span>',d.gene2GeneProteinAssociationStringUrl,d.gene2GeneProteinInteractionEvidence,d.gene2GeneProteinInteractionConfidenceScore);}
if(d.queryRegulatesFound){result=result+" "+'<span> <img height="16" width = "16" src="/Gemma/images/logo/pazar-icon.png" ext:qtip="Query may regulate the coexpressed gene, according to Pazar" />  </span>';}else if(d.foundRegulatesQuery){result=result+" "+'<span> <img height="16" width = "16" src="/Gemma/images/logo/pazar-icon.png" ext:qtip="The query may be regulated by the coexpressed gene, according to Pazar" />  </span>';}
return result;},nodeDegreeStyler:function(value,metadata,record,row,col,ds){var d=record.data;var displayedNodeDegree;if(d.foundGeneNodeDegree==null){return 0;}else if(d.queryGeneNodeDegree>d.foundGeneNodeDegree){displayedNodeDegree=d.queryGeneNodeDegree;}else{displayedNodeDegree=d.foundGeneNodeDegree;}
return Gemma.CytoscapePanelUtil.nodeDegreeBinMapper(displayedNodeDegree);},supportStyler:function(value,metadata,record,row,col,ds){var d=record.data;if(d.posSupp||d.negSupp){var s="";if(d.posSupp){s=s
+String.format("<span class='positiveLink'>{0}{1}</span> ",d.posSupp,this.getSpecificLinkString(d.posSupp,d.nonSpecPosSupp));}
if(d.negSupp){s=s
+String.format("<span class='negativeLink'>{0}{1}</span> ",d.negSupp,this.getSpecificLinkString(d.negSupp,d.nonSpecNegSupp));}
if(d.numTestedIn){s=s+String.format("/ {0}",d.numTestedIn);}
return s;}else{return"-";}},goStyler:function(value,metadata,record,row,col,ds){var d=record.data;if(d.goSim||d.maxGoSim){return String.format("{0}/{1}",d.goSim,d.maxGoSim);}else{return"-";}},getSpecificLinkString:function(total,nonSpecific){return nonSpecific?String.format("<span class='specificLink'> ({0})</span>",total-nonSpecific):"";},foundGeneStyler:function(value,metadata,record,row,col,ds){var g=record.data.foundGene;if(g.officialName===null){g.officialName="";}
if(g.taxonId!==null){g.taxonId=g.taxonId;g.taxonName=g.taxonCommonName;}else{g.taxonId=-1;g.taxonName="?";}
if(this.tabPanelViewFlag){if(this.coexpressionSearchData.coexGridCoexCommand.geneIds.indexOf(g.id)!==-1){g.fontWeight='bold';}
return this.foundGeneTemplateNoGemma.apply(g);}
if(this.noSmallGemma){return this.foundGeneTemplateNoGemma.apply(g);}
return this.foundGeneTemplate.apply(g);},foundGeneTemplate:new Ext.Template("<a href='/Gemma/searchCoexpression.html?g={id}&s=3&t={taxonId}&an=All {taxonName}'> <img src='/Gemma/images/logo/gemmaTiny.gif' ext:qtip='Make {officialSymbol} the query gene' /> </a>"," &nbsp; ","<a target='_blank' href='/Gemma/gene/showGene.html?id={id}'>{officialSymbol}</a> {officialName}"),foundGeneTemplateNoGemma:new Ext.Template("<a style='font-weight:{fontWeight};' target='_blank' href='/Gemma/gene/showGene.html?id={id}'>{officialSymbol}</a> {officialName}"),queryGeneStyler:function(value,metadata,record,row,col,ds){var g=record.data.queryGene;if(g.officialName===null){g.officialName="";}
g.abaGeneUrl=record.data.abaQueryGeneUrl;if(this.tabPanelViewFlag){g.fontWeight='bold';return this.foundGeneTemplateNoGemma.apply(g);}
return this.foundGeneTemplate.apply(g);},bitImageStyler:function(value,metadata,record,row,col,ds){var bits=record.data.datasetVector;var width=bits.length*Gemma.CoexpressionGrid.bitImageBarWidth;var gap=0;var s='';var maxheight=0;var i;for(i=0;i<bits.length;++i){if(i>0){s=s+",";}
var state=bits.charAt(i);var b="";if(state==="0"){b="0";}else if(state==="1"){b="2";if(2>maxheight){maxheight=2;}}else if(state==="2"){b="10";if(10>maxheight){maxheight=10;}}else if(state==="3"){maxheight=Gemma.CoexpressionGrid.bitImageBarHeight;b=Gemma.CoexpressionGrid.bitImageBarHeight;}
s=s+b;}
var result='<span style="margin:0;padding-top:'+(Gemma.CoexpressionGrid.bitImageBarHeight-maxheight)
+'px;height:'+Gemma.CoexpressionGrid.bitImageBarHeight+';background-color:#EEEEEE" >'
+'<img style="vertical-align:bottom" src="/Gemma/spark?type=bar&width='+width+'&height='
+maxheight+'&highcolor=black&color=black&spacing='+gap+'&data=';result=result+s+'" usemap="#eeMap" /></span>';return result;},visStyler:function(value,metadata,record,row,col,ds){return"<img src='/Gemma/images/icons/chart_curve.png' ext:qtip='Visualize the data' />";},detailsStyler:function(value,metadata,record,row,col,ds){return"<img src='/Gemma/images/icons/magnifier.png' ext:qtip='Show probe-level details' /> ";},downloadDedvStyler:function(value,metadata,record,row,col,ds){var queryGene=record.data.queryGene;var foundGene=record.data.foundGene;var activeExperimentsString="";var activeExperimentsSize=record.data.supportingExperiments.size();var i;for(i=0;i<activeExperimentsSize;i++){if(i===0){activeExperimentsString=record.data.supportingExperiments[i];}else{activeExperimentsString=String.format("{0}, {1}",activeExperimentsString,record.data.supportingExperiments[i]);}}
return String.format("<a href='/Gemma/dedv/downloadDEDV.html?ee={0} &g={1},{2}' > download </a>",activeExperimentsString,queryGene.id,foundGene.id);},resizeDatasetColumn:function(){var first=this.getStore().getAt(0);if(first){var cm=this.getColumnModel();var c=cm.getIndexById('datasets');var headerWidth=this.view.getHeaderCell(c).firstChild.scrollWidth;var imageWidth=Gemma.CoexpressionGrid.bitImageBarWidth*first.data.datasetVector.length;cm.setColumnWidth(c,imageWidth<headerWidth?headerWidth:imageWidth);}},rowClickHandler:function(grid,rowIndex,columnIndex,e){if(this.getSelectionModel().hasSelection()){var record=this.getStore().getAt(rowIndex);var fieldName=this.getColumnModel().getDataIndex(columnIndex);var queryGene=record.get("queryGene");var foundGene=record.get("foundGene");if(fieldName=='foundGene'&&columnIndex!=7){}else if(fieldName=='visualize'){var foundGene=record.data.foundGene;var activeExperiments=record.data.supportingExperiments;var coexpVisWindow=new Gemma.CoexpressionVisualizationWindow({cascadeOnFirstShow:true,admin:false,experiments:activeExperiments,queryGene:queryGene,foundGene:foundGene,downloadLink:String.format("/Gemma/dedv/downloadDEDV.html?ee={0}&g={1},{2}",activeExperiments.join(','),queryGene.id,foundGene.id),title:"Coexpression for:  "+queryGene.name+" + "+foundGene.name});var params=[];params.push(activeExperiments);params.push(queryGene.id);params.push(foundGene.id);coexpVisWindow.show({params:params});}else if(fieldName=='details'&&!this.lite){var supporting=this.getSupportingDatasetRecords(record,grid);var dsGrid=new Gemma.ExpressionExperimentGrid({records:supporting,stateful:false});if(this.detailsWindow!==undefined&&this.detailsWindow!==null){this.detailsWindow.close();}
var diffExGrid=new Gemma.ProbeLevelDiffExGrid({geneId:foundGene.id,threshold:0.01,stateful:false});var detailsTP=new Ext.TabPanel({layoutOnTabChange:true,activeTab:0,stateful:false,items:[{title:"Supporting datasets",items:[dsGrid],layout:'fit',autoScroll:true},{title:"Differential expression of "+foundGene.officialSymbol,items:[diffExGrid],layout:'fit',autoScroll:true,loaded:false,listeners:{"activate":{fn:function(){if(!this.loaded){diffExGrid.getStore().load({params:[foundGene.id,Gemma.DIFF_THRESHOLD,Gemma.MAX_DIFF_RESULTS]});}
this.loaded=true;}}}}]});this.detailsWindow=new Ext.Window({modal:false,layout:'fit',title:'Details for '+foundGene.officialSymbol,closeAction:'close',items:[{items:[detailsTP],layout:'fit'}],width:760,height:400,stateful:false});dsGrid.getStore().load();this.detailsWindow.show();diffExGrid.getStore().loadData(supporting);}}},exportData:function(){var win=new Gemma.CoexpressionGrid.DownloadWindow({title:"Coexpression Data"});var filteredData;var queryGenesOnlyControl=this.getTopToolbar().getComponent('queryGenesOnly');if(queryGenesOnlyControl.checked==true){filteredData=Gemma.CoexValueObjectUtil.trimKnownGeneResults(this.coexpressionSearchData.coexGridResults.queryGenesOnlyResults,this.getTopToolbar().getComponent('stringencySpinner').getValue());}
else{var combinedData=this.coexpressionSearchData.coexGridResults.knownGeneResults;if(this.coexpressionSearchData.coexGridResults.queryGenesOnlyResults){combinedData=Gemma.CoexValueObjectUtil.combineKnownGeneResultsAndQueryGeneOnlyResults(this.coexpressionSearchData.coexGridResults.knownGeneResults,this.coexpressionSearchData.coexGridResults.queryGenesOnlyResults);}
filteredData=Gemma.CoexValueObjectUtil.trimKnownGeneResults(combinedData,this.getTopToolbar().getComponent('stringencySpinner').getValue());}
var text=Ext.getCmp(this.id+'-search-in-grid').getValue();if(text.length>1){filteredData=Gemma.CoexValueObjectUtil.filterGeneResultsByText(text,filteredData);}
win.convertText(filteredData);}});Gemma.CoexpressionGrid.bitImageBarHeight=15;Gemma.CoexpressionGrid.bitImageBarWidth=1;Gemma.CoexpressionGrid.getBitImageMapTemplate=function(){if(Gemma.CoexpressionGrid.bitImageMapTemplate===undefined){Gemma.CoexpressionGrid.bitImageMapTemplate=new Ext.XTemplate('<tpl for=".">','<area shape="rect" coords="{[ (xindex - 1) * this.barx ]},0,{[ xindex * this.barx ]},{[ this.bary ]}" ext:qtip="{name}" href="{externalUri}" />','</tpl>',{barx:Gemma.CoexpressionGrid.bitImageBarWidth,bary:Gemma.CoexpressionGrid.bitImageBarHeight-1});}
return Gemma.CoexpressionGrid.bitImageMapTemplate;};Gemma.CoexpressionGrid.getAllenAtlasImage=function(geneSymbol){LinkOutController.getAllenBrainAtlasLink(geneSymbol,Gemma.CoexpressionGrid.linkOutPopUp);Ext.DomHelper.overwrite("aba-"+geneSymbol+"-button",{tag:'img',src:'/Gemma/images/default/tree/loading.gif'});};Gemma.CoexpressionGrid.linkOutPopUp=function(linkOutValueObject){Ext.DomHelper.overwrite("aba-"+linkOutValueObject.geneSymbol+"-button",{tag:'img',src:'/Gemma/images/logo/aba-icon.png'});var popUpHtml;if(linkOutValueObject.abaGeneImageUrls.length===0){window.alert("No Allen Brain Atlas images available for this gene");return;}else{popUpHtml=String.format("<img height=200 width=400 src={0}>",linkOutValueObject.abaGeneImageUrls[0]);}
var abaWindowId="coexpressionAbaWindow";var popUpLinkOutWin=Ext.getCmp(abaWindowId);if(popUpLinkOutWin!==undefined&&popUpLinkWin!==null){popUpLinkOutWin.close();popUpLinkOutWin=null;}
popUpLinkOutWin=new Ext.Window({id:abaWindowId,html:popUpHtml,stateful:false,resizable:false});popUpLinkOutWin.setTitle("<a href='"
+linkOutValueObject.abaGeneUrl
+"' target='_blank'>  <img src='/Gemma/images/logo/aba-icon.png' ext:qtip='Link to Allen Brain Atlas gene details' />  </a> &nbsp; &nbsp;<img height=15  src=/Gemma/images/abaExpressionLegend.gif>  "
+linkOutValueObject.geneSymbol);popUpLinkOutWin.show(this);};Gemma.CoexpressionGrid.DownloadWindow=Ext.extend(Ext.Window,{width:800,height:400,layout:'fit',timeToString:function(timeStamp){var min=(timeStamp.getMinutes()<10)?'0'+timeStamp.getMinutes():timeStamp.getMinutes();return timeStamp.getFullYear()+"/"+(timeStamp.getMonth()+1)+"/"+timeStamp.getDate()+" "+timeStamp.getHours()+":"+min;},makeHeaderRow:function(){var row=[];row.push("Query Gene","Query Gene NCBI Id","Coexpressed Gene","Coexpressed Gene NCBI Id","Specificity","Positive Support","Negative Support");return row.join('\t')+"\n";},decimalPlaceRounder:function(number){if(number==null){return null;}
return Ext.util.Format.round(number,4);},makeResultsRow:function(coexresult){var row=[];row.push(coexresult.queryGene.officialSymbol,coexresult.queryGene.ncbiId,coexresult.foundGene.officialSymbol,coexresult.foundGene.ncbiId,coexresult.foundGeneNodeDegree>coexresult.queryGeneNodeDegree?this.decimalPlaceRounder(coexresult.foundGeneNodeDegree):this.decimalPlaceRounder(coexresult.queryGeneNodeDegree),coexresult.posSupp,coexresult.negSupp);return row.join('\t')+"\n";},convertText:function(data){var text='# Generated by Gemma\n'+'# '+this.timeToString(new Date())+'\n'+'# \n'+'# '+String.format(Gemma.CITATION_DIRECTIONS,'\n# ')+'\n'+'# \n'+'# This functionality is currently in beta. The file format may change in the near future. \n'+'# Fields are separated by tabs\n'+'# \n';text+=this.makeHeaderRow();var kglength=data.length;var i;for(i=0;i<kglength;i++){text+=this.makeResultsRow(data[i]);}
this.textAreaPanel.setValue(text);this.show();},initComponent:function(){Ext.apply(this,{tbar:[{ref:'selectAllButton',xtype:'button',text:'Select All',scope:this,handler:function(){this.textAreaPanel.selectText();}}],items:[new Ext.form.TextArea({ref:'textAreaPanel',readOnly:true,autoScroll:true,wordWrap:false})]});Gemma.CoexpressionGrid.DownloadWindow.superclass.initComponent.call(this);},onRender:function(){Gemma.CoexpressionGrid.DownloadWindow.superclass.onRender.apply(this,arguments);}});Gemma.CoexpressionSummaryGrid=Ext.extend(Gemma.GemmaGridPanel,{editable:false,title:'Search Summary',width:350,height:300,stateful:false,initComponent:function(){var columns=[{header:'Group',dataIndex:'group',width:100},{id:'key',header:'',dataIndex:'key',align:'right',width:200}];for(var i=0;i<this.genes.length;++i){columns.push({header:this.genes[i].officialSymbol,dataIndex:this.genes[i].officialSymbol,align:'right',width:100});}
var fields=[{name:'sort',mapping:0,type:'int'},{name:'group',mapping:1,type:'string'},{name:'key',mapping:2,type:'string'}];for(var i=0;i<this.genes.length;++i){fields.push({name:this.genes[i].officialSymbol,mapping:i+3,type:'string'});}
Ext.apply(this,{columns:columns,store:new Ext.data.GroupingStore({reader:new Ext.data.ArrayReader({},fields),groupField:'group',data:this.transformData(this.genes,this.summary),sortInfo:{field:'sort',direction:'ASC'}}),view:new Ext.grid.GroupingView({enableGroupingMenu:false,enableNoGroups:false,hideGroupedColumn:true,showGroupName:false})});Gemma.CoexpressionSummaryGrid.superclass.initComponent.call(this);},transformData:function(genes,summary){var datasetsAvailable=[0,"Datasets","<span ext:qtip='How many data sets met your criteria'>Available</span>"];var datasetsTested=[1,"Datasets","<span ext:qtip='How many data sets had the query gene available for analysis'>Query gene testable</span>"];var linksFound=[2,"Links","<span ext:qtip='Total number of links (may show the number including those not meeting your stringency threshold)'>Found</span>"];var linksPositive=[3,"Links","<span ext:qtip='How many genes were considered positively correlated with the query'>Met stringency (+)</span>"];var linksNegative=[4,"Links","<span ext:qtip='How many genes were considered negatively correlated with the query'>Met stringency (-)</span>"];var geneDetails=[5,"Query Gene","Details"];for(var i=0;i<genes.length;++i){var thisSummary=summary[genes[i].officialSymbol]||{};datasetsAvailable.push(thisSummary.datasetsAvailable);datasetsTested.push(thisSummary.datasetsTested);linksFound.push(thisSummary.linksFound);linksPositive.push(thisSummary.linksMetPositiveStringency);linksNegative.push(thisSummary.linksMetNegativeStringency);geneDetails.push(String.format("<a target=\"_blank\" href='/Gemma/gene/showGene.html?id={0}' ext:qtip='{1}'> {2} </a> ",genes[i].id,genes[i].officialName,genes[i].officialSymbol));}
return[datasetsAvailable,datasetsTested,linksFound,linksPositive,linksNegative,geneDetails];}});Gemma.CoexpressionSearchFormLite=Ext.extend(Ext.FormPanel,{autoHeight:true,frame:true,stateful:true,stateEvents:["beforesearch"],stateId:"Gemma.CoexpressionSearch",labelAlign:"top",width:200,initComponent:function(){Gemma.CoexpressionSearchFormLite.superclass.initComponent.call(this);this.stringencyField=new Ext.form.Hidden({value:3});this.geneCombo=new Gemma.GeneCombo({hiddenName:'g',id:'gene-combo',fieldLabel:'Select a query gene',width:175});this.geneCombo.on("focus",this.clearMessages,this);this.store=new Gemma.DatasetGroupStore();this.eeSetCombo=new Gemma.DatasetGroupCombo({width:175,fieldLabel:'Select search scope',store:this.store});this.eeSetCombo.on("select",function(combo,eeSet){this.clearMessages();this.selectedEESet=eeSet;if(eeSet&&eeSet.store.getSelected().get("taxonId")){var taxon={id:eeSet.store.getSelected().get("taxonId"),name:eeSet.store.getSelected().get("taxonName")};this.taxonChanged(taxon);}},this);var submitButton=new Ext.Button({text:"Find coexpressed genes",handler:function(){var msg=this.validateSearch(this.geneCombo.getValue());if(msg.length===0){var eeSetId=this.selectedEESet.get("id");var eeIds="";if(!eeSetId||eeSetId<0){eeIds=this.selectedEESet.get("expressionExperimentIds").join(",");}
if(typeof pageTracker!='undefined'){pageTracker._trackPageview("/Gemma/coexpressionSearch.doLiteSearch");}
document.location.href=String.format("/Gemma/searchCoexpression.html?g={0}&a={1}&s={2}&ees={3}&t={4}",this.geneCombo.getValue(),eeSetId,this.stringencyField.getValue(),eeIds,this.geneCombo.getTaxon().id);}else{this.handleError(msg);}}.createDelegate(this)});this.add(this.stringencyField);this.add(this.eeSetCombo);this.add(this.geneCombo);this.addButton(submitButton);},applyState:function(state,config){if(state){this.csc=state;}},getState:function(){var obj=this.getCoexpressionSearchCommand();return{geneIds:obj.geneIds,stringency:obj.stringency};},render:function(container,position){Gemma.CoexpressionSearchFormLite.superclass.render.apply(this,arguments);if(this.csc){this.initializeFromCoexpressionSearchCommand(this.csc);}},getCoexpressionSearchCommand:function(){var csc={geneIds:[this.geneCombo.getValue()],analysisId:this.eeSetChooserPanel.getSelected().get("id").getValue(),stringency:this.stringencyField.getValue()};return csc;},initializeFromCoexpressionSearchCommand:function(csc){if(csc.eeSetId>-1){}
if(csc.stringency){this.stringencyField.setValue(csc.stringency);}},validateSearch:function(gene){if(!gene||gene.length===0){return"Please select a valid query gene";}
if(!this.selectedEESet){return"Please select a query scope";}
return"";},handleError:function(msg,e){Ext.DomHelper.overwrite("coexpression-messages",{tag:'img',src:'/Gemma/images/icons/warning.png'});Ext.DomHelper.append("coexpression-messages",{tag:'span',html:"&nbsp;&nbsp;"+msg});},clearMessages:function(){if(Ext.DomQuery.select("coexpression-messages").length>0){Ext.DomHelper.overwrite("coexpression-messages",{tag:'h3',html:"Coexpression query"});}},taxonChanged:function(taxon){this.geneCombo.setTaxon(taxon);}});var Heatmap=function(){var MAX_LABEL_LENGTH_PIXELS=400;var MAX_LABEL_LENGTH_CHAR=175;var EXPANDED_BOX_WIDTH=10;var CLIP=3;var NAN_COLOR="grey";var SHOW_LABEL_MIN_SIZE=9;var MIN_BOX_HEIGHT_FOR_LABELS=12;var MAX_BOX_HEIGHT=16;var MIN_BOX_HEIGHT=2;var MAX_ROWS_BEFORE_SCROLL=30;var MIN_IMAGE_SIZE=50;var MAX_SAMPLE_LABEL_HEIGHT_PIXELS=220;var SAMPLE_LABEL_MAX_CHAR=125;var PER_CONDITION_LABEL_HEIGHT=10;var MAX_PER_FACTOR_VALUE_LABEL_WIDTH=200;var FACTOR_VALUE_LABEL_MAX_CHAR=125;var FACTOR_VALUE_LABEL_BOX_WIDTH=10;var TRIM=5;var SMALL_TRIM=3;var DEFAULT_ROW_LABEL="&nbsp;";var DEFAULT_CONFIG={label:false,maxBoxHeight:MAX_BOX_HEIGHT,allowTargetSizeAdjust:false};var COLOR_16=["rgb(0, 0, 0)","rgb(32, 0, 0)","rgb(64, 0, 0)","rgb(96, 0, 0)","rgb(128, 0, 0)","rgb(159, 32, 0)","rgb(191, 64, 0)","rgb(223, 96, 0)","rgb(255, 128, 0)","rgb(255, 159, 32)","rgb(255, 191, 64)","rgb(255, 223, 96)","rgb(255, 255, 128)","rgb(255, 255, 159)","rgb(255, 255, 191)","rgb(255, 255, 223)","rgb(255, 255, 255)"];function HeatMap(container,data,config,sampleLabels,conditionLabels,conditionLabelKey){if(!config){config=DEFAULT_CONFIG;}
else{config.label=config.label||false;config.maxBoxHeight=config.maxBoxHeight||MAX_BOX_HEIGHT;config.allowTargetSizeAdjust=config.allowTargetSizeAdjust||false;}
drawMap(data,container,COLOR_16,config,sampleLabels,conditionLabels,conditionLabelKey);function drawMap(vectorObjs,target,colors,config,sampleLabels,conditionLabels,conditionLabelKey){if(target.getWidth()<=0||target.getHeight()<=0||vectorObjs.length===0){return;}
var binSize=(2*CLIP)/colors.length;var panelWidth=target.getWidth()-TRIM;var panelHeight=target.getHeight()-TRIM;var numRows=vectorObjs.length;var rowLabelSizePixels=0;if(config.label){var maxRowLabelLength=0;for(var i=0;i<vectorObjs.length;i++){if(vectorObjs[i].rawLabel){labelLength=Math.min(vectorObjs[i].rawLabel.length,MAX_LABEL_LENGTH_CHAR);if(labelLength>maxRowLabelLength){maxRowLabelLength=labelLength;}}}
rowLabelSizePixels=Math.min(MAX_LABEL_LENGTH_PIXELS,maxRowLabelLength*8);}
var heatmapHeight=panelHeight;var labelHeight=0;if(config.showSampleNames&&sampleLabels){var maxLabelLength=0;for(var j=0;j<sampleLabels.length;j++){if(sampleLabels[j].length>maxLabelLength){maxLabelLength=sampleLabels[j].length;}}
var maxLabelSize;if(config.forceFit){}
else{}
labelHeight=Math.min(MAX_SAMPLE_LABEL_HEIGHT_PIXELS,Math.min(maxLabelLength,SAMPLE_LABEL_MAX_CHAR)*8);heatmapHeight=heatmapHeight-labelHeight;}
var calculatedBoxHeight=Math.floor(heatmapHeight/numRows);if(calculatedBoxHeight>config.maxBoxHeight){boxHeight=config.maxBoxHeight;}
else
if(calculatedBoxHeight<MIN_BOX_HEIGHT_FOR_LABELS&&config.label){boxHeight=MIN_BOX_HEIGHT_FOR_LABELS;}
else{boxHeight=Math.max(MIN_BOX_HEIGHT,calculatedBoxHeight);}
if(boxHeight<=0){return;}
heatmapHeight=boxHeight*numRows+TRIM;var numberOfColumns=vectorObjs[0].data.length;if(numberOfColumns===0){return;}
var increment=1;var heatmapWidth=1;var boxWidth=1;if(config.forceFit){heatmapWidth=config.label?Math.max(panelWidth-rowLabelSizePixels,MIN_IMAGE_SIZE):panelWidth;if(heatmapWidth<=0){return;}
boxWidth=heatmapWidth/numberOfColumns;var mergedBoxWidth=boxWidth;while(mergedBoxWidth<1){increment++;mergedBoxWidth=boxWidth*increment;}
boxWidth=mergedBoxWidth;}
else{boxWidth=EXPANDED_BOX_WIDTH;heatmapWidth=boxWidth*numberOfColumns;}
if(config.allowTargetSizeAdjust&&heatmapHeight<panelHeight){try{Ext.DomHelper.applyStyles(target,"height:"+heatmapHeight+"px");}
catch(e){}}
if(heatmapHeight+labelHeight>panelHeight||(!config.forceFit&&heatmapWidth+rowLabelSizePixels>panelWidth)){try{Ext.DomHelper.applyStyles(target,"overflow:auto");}
catch(e){}}
else{try{Ext.DomHelper.applyStyles(target,"overflow:inherit");}
catch(e){}}
if(config.legend&&config.legend.show&&config.legend.container){insertLegend(config.legend.container);}
if(config.showSampleNames&&sampleLabels){var id='sampleLabels-'+Ext.id();if(boxWidth>=SHOW_LABEL_MIN_SIZE){Ext.DomHelper.append(target,{id:id,tag:'div',width:heatmapWidth,height:MAX_SAMPLE_LABEL_HEIGHT_PIXELS});var labelDiv=Ext.get(id);var ctx=constructCanvas($(labelDiv),heatmapWidth,labelHeight);ctx.fillStyle="#000000";ctx.font=Math.min(10,boxWidth-1)+"px sans-serif";ctx.textAlign="left";ctx.translate(0,labelHeight-2);for(j=0;j<sampleLabels.length;j++){var lab=Ext.util.Format.ellipsis(sampleLabels[j],SAMPLE_LABEL_MAX_CHAR);ctx.translate(boxWidth,0);ctx.rotate(-Math.PI/2);ctx.fillText(lab,0,0);ctx.rotate(Math.PI/2);}}
else
if(config.forceFit){var message;if(numberOfColumns.length>100){message="Click 'zoom in' to see the sample labels";}
else{message="Click 'zoom in' or try widening the window to see the sample labels";}
Ext.DomHelper.append(target,{id:id,tag:'div',width:target.getWidth()-TRIM,height:20});labelDiv=Ext.get(id);ctx=constructCanvas($(labelDiv),target.getWidth()-TRIM,20);ctx.translate(0,10);ctx.fillText(message,0,0);}}
if(conditionLabels){var factorCount=0;maxLabelLength=0;for(var factorCategory in conditionLabelKey){factorCount++;if(factorCategory.length>maxLabelLength){maxLabelLength=factorCategory.length;}}
var labelWidth=Math.min(MAX_SAMPLE_LABEL_HEIGHT_PIXELS,Math.min(maxLabelLength,SAMPLE_LABEL_MAX_CHAR)*8);id='conditionLabels-'+Ext.id();Ext.DomHelper.append(target,{id:id,tag:'div',width:heatmapWidth+10+labelWidth,height:factorCount*PER_CONDITION_LABEL_HEIGHT+SMALL_TRIM});labelDiv=Ext.get(id);ctx=constructCanvas($(labelDiv),heatmapWidth+10+labelWidth,factorCount*PER_CONDITION_LABEL_HEIGHT+SMALL_TRIM);var x=0;var y=0;var factorValueByLocation=[];var adjacentColumnsDrawnAsOne=0;for(j=0;j<conditionLabels.length;j++){for(factorCategory in conditionLabels[j]){var factorValueArr=conditionLabels[j][factorCategory];var value=factorValueArr[0];var colour=factorValueArr[1];adjacentColumnsDrawnAsOne=0;if(increment>1){var colours=[colour];for(var k=1;k<increment&&j+k<conditionLabels.length-1;k++){factorValueArr=conditionLabels[j+k][factorCategory];value=factorValueArr[0];colour=factorValueArr[1];colours.push(colour);adjacentColumnsDrawnAsOne++;}
colour=mode(colours);}
ctx.fillStyle=colour;ctx.fillRect(x,y,boxWidth,PER_CONDITION_LABEL_HEIGHT);factorValueByLocation[y/PER_CONDITION_LABEL_HEIGHT]=[];factorValueByLocation[y/PER_CONDITION_LABEL_HEIGHT][j]=value;y+=PER_CONDITION_LABEL_HEIGHT;}
x+=boxWidth;y=0;j+=adjacentColumnsDrawnAsOne;}
ctx.fillStyle="#000000";ctx.font=Math.min(10,PER_CONDITION_LABEL_HEIGHT-1)+"px sans-serif";ctx.textAlign="left";ctx.translate(boxWidth*conditionLabels.length/increment+10,Math.min(10,PER_CONDITION_LABEL_HEIGHT-1));x=0;y=0;for(factorCategory in conditionLabelKey){var facCat=Ext.util.Format.ellipsis(factorCategory,FACTOR_VALUE_LABEL_MAX_CHAR);ctx.fillText(facCat,x,y);y+=PER_CONDITION_LABEL_HEIGHT;}}
var vid="heatmapCanvas-"+Ext.id();Ext.DomHelper.append(target,{id:vid,tag:'div',width:panelWidth,height:boxHeight,style:"width:"+panelWidth+";height:"+heatmapHeight});var canvasDiv=Ext.get(vid);ctx=constructCanvas($(vid),heatmapWidth,heatmapHeight);var offsety=0;for(i=0;i<vectorObjs.length;i++){var d=vectorObjs[i].data;var offsetx=0;for(j=0;j<d.length;j++){var a=d[j][1];if(a>CLIP){a=CLIP;}
else
if(a<-CLIP){a=-CLIP;}
if(increment>1){for(k=1;k<increment&&j<d.length-1;k++){j++;a+=d[j][1];}
a/=increment;}
if(isNaN(a)){ctx.fillStyle=NAN_COLOR;}
else{ctx.fillStyle=getColor(a,binSize,colors);}
try{ctx.fillRect(offsetx,offsety,boxWidth,boxHeight);}
catch(e){}
offsetx=offsetx+boxWidth;last=a;}
if(config.label){var rowLabel=DEFAULT_ROW_LABEL;if(vectorObjs[i].label){rowLabel=vectorObjs[i].label;}
var text=Ext.DomHelper.append(canvasDiv,{id:"heatmaplabel-"+Ext.id(),tag:'div',html:"&nbsp;"+rowLabel,style:"white-space: nowrap"},true);Ext.DomHelper.applyStyles(text,"position:absolute;top:"+offsety+"px;left:"+(offsetx+5)+"px");}
offsety+=boxHeight;}
if(config.conditionLegend){var factorValueCount=0;factorCount=0;var allColumnsWidth=0;var maxColumnWidth=0;for(factorCategory in conditionLabelKey){factorCount++;if(ctx.measureText(factorCategory).width>maxColumnWidth){maxColumnWidth=ctx.measureText(factorCategory).width;}
for(var factorValue in conditionLabelKey[factorCategory]){factorValueCount++;var dim=ctx.measureText(factorValue);var width=Math.round(dim.width);if(width>maxColumnWidth){maxColumnWidth=width;}}
allColumnsWidth+=maxColumnWidth;maxColumnWidth=0;}
var fontSize=Math.min(10,PER_CONDITION_LABEL_HEIGHT-1);var charWidth=Math.floor(fontSize*0.8);labelWidth=allColumnsWidth+(FACTOR_VALUE_LABEL_BOX_WIDTH+SMALL_TRIM+SMALL_TRIM)*factorCount;id='conditionKey-'+Ext.id();Ext.DomHelper.append(target,{id:id,tag:'div',width:heatmapWidth,height:factorValueCount*PER_CONDITION_LABEL_HEIGHT+SMALL_TRIM});labelDiv=Ext.get(id);ctx=constructCanvas($(labelDiv),10+labelWidth,factorValueCount*PER_CONDITION_LABEL_HEIGHT+SMALL_TRIM+20);ctx.fillStyle="#000000";ctx.font=fontSize+"px sans-serif";ctx.textAlign="left";ctx.translate(10,20);x=0;y=0;for(factorCategory in conditionLabelKey){facCat=Ext.util.Format.ellipsis(factorCategory,FACTOR_VALUE_LABEL_MAX_CHAR);var maxLabelWidthInCategory=0;dim=ctx.measureText(facCat);width=Math.round(dim.width);if(width>maxLabelWidthInCategory){maxLabelWidthInCategory=width;}
ctx.fillText(facCat,x,y);y+=PER_CONDITION_LABEL_HEIGHT+2;for(factorValue in conditionLabelKey[factorCategory]){var facVal=Ext.util.Format.ellipsis(factorValue,FACTOR_VALUE_LABEL_MAX_CHAR);colour=conditionLabelKey[factorCategory][factorValue];ctx.fillStyle=colour;ctx.fillRect(x,y-fontSize,FACTOR_VALUE_LABEL_BOX_WIDTH,PER_CONDITION_LABEL_HEIGHT);x+=FACTOR_VALUE_LABEL_BOX_WIDTH+SMALL_TRIM;ctx.fillStyle="#000000";ctx.fillText(facVal,x,y);x=0;y+=PER_CONDITION_LABEL_HEIGHT;dim=ctx.measureText(facVal);width=Math.round(dim.width);if(width>maxLabelWidthInCategory){maxLabelWidthInCategory=width;}}
ctx.translate(FACTOR_VALUE_LABEL_BOX_WIDTH+SMALL_TRIM+maxLabelWidthInCategory+SMALL_TRIM,0);x=0;y=0;}}}
function getColor(a,binSize,colors){var v=Math.floor((a+CLIP)/binSize);if(v>colors.length-1){v=colors.length-1;}
return colors[v];}
var MAX_LEGEND_HEIGHT=10;var LEGEND_WIDTH=64;function insertLegend(container,vertical){if(!container){return;}
var legendDiv=$(container);if(!legendDiv){return;}
legendDiv.innerHTML='';var legendWidth=legendDiv.getWidth()-10;var legendHeight=legendDiv.getHeight();var boxHeight=10;var boxWidth=10;var ctx;var numBoxes=COLOR_16.length/2;var scalebarLength=0;if(vertical){scalebarLength=Math.ceil(boxHeight*numBoxes);ctx=constructCanvas($(container),50,60+scalebarLength);}else{scalebarLength=Math.ceil(boxWidth*numBoxes);ctx=constructCanvas($(container),60+scalebarLength,40);}
ctx.fillStyle="#000000";ctx.font=boxHeight+"px sans-serif";ctx.textAlign="left";ctx.lineWidth=1;ctx.textBaseline='top';var x;var y=3;if(vertical){x=boxWidth+3;}else{x=3;}
ctx.save();ctx.translate(x,y);ctx.fillText(sprintf("%.1f",-CLIP),0,0);ctx.restore();if(vertical){x=3;}else{x+=ctx.measureText(sprintf("%.1f",-CLIP)).width+4;}
for(var i=0;i<COLOR_16.length;i+=2){if(!COLOR_16[i]){break;}
ctx.save();ctx.beginPath();if(vertical){}else{ctx.moveTo(x,y);ctx.lineTo(x+boxWidth,y);ctx.moveTo(x,y+boxHeight);ctx.lineTo(x+boxWidth,y+boxHeight);}
ctx.stroke();ctx.restore();ctx.fillStyle=COLOR_16[i];ctx.fillRect(x,y,boxWidth,boxHeight);if(vertical){y+=boxHeight;}else{x+=boxWidth;}}
ctx.save();ctx.beginPath();ctx.moveTo(x,y);ctx.lineTo(x,y+boxHeight);ctx.stroke();ctx.restore();x+=4;ctx.fillStyle="#000000";ctx.fillText(sprintf("%.1f",CLIP),x,y);}
function constructCanvas(div,canvasWidth,canvasHeight){div.setStyle({'position':'relative'});if(canvasWidth<=0||canvasHeight<=0){throw'Invalid dimensions for plot, width = '+canvasWidth+', height = '+canvasHeight;}
var canvas=Ext.DomHelper.append(div,{tag:'canvas',width:canvasWidth,height:canvasHeight});if(!document.createElement("canvas").getContext&&Prototype.Browser.IE){canvas=$(window.G_vmlCanvasManager.initElement(canvas));}
return canvas.getContext('2d');}}
return{clean:function(element){element.innerHTML='';},draw:function(target,data,options,sampleLabels,conditionLabels,conditionLabelKey){var map=new HeatMap(target,data,options,sampleLabels,conditionLabels,conditionLabelKey);return map;}};}();function mode(array)
{if(array.length==0)
return null;var modeMap={};var maxEl=array[0],maxCount=1;for(var i=0;i<array.length;i++)
{var el=array[i];if(modeMap[el]==null)
modeMap[el]=1;else
modeMap[el]++;if(modeMap[el]>maxCount)
{maxEl=el;maxCount=modeMap[el];}}
return maxEl;}
Ext.namespace('Gemma');Gemma.MAX_LABEL_LENGTH_CHAR=25;Gemma.MAX_GENEINFO_LENGTH_CHAR=125;Gemma.VectorDisplay=Ext.extend(Ext.Window,{width:420,height:400,bodyStyle:"background:white",stateful:false,noGeneLabel:"[No gene]",plugins:[new Ext.ux.plugins.ContainerMask({msg:'Loading ... <img src="/Gemma/images/loading.gif" />',masked:true})],graphConfig:{label:true,forceFit:true},show:function(config){this.showMask();var params=[];if(config.params){params=config.params;}
this.dataView.getStore().load({params:params,callback:this.dedvCallback.createDelegate(this)});Gemma.VectorDisplay.superclass.show.call(this);},dedvCallback:function(data){if(!data||data.length===0||data[0].data.profiles.length===0){Ext.Msg.alert('Status','No data available',function(){this.close();},this);return;}
this.sampleLabels=data[0].data.sampleNames;this.preparedData=Gemma.prepareProfiles(data[0].data);Heatmap.draw($(this.body.id),this.preparedData.profiles,this.graphConfig,this.sampleLabels);this.hideMask();this.doLayout();},refresh:function(){$(this.body.id).innerHTML='';Heatmap.draw($(this.body.id),this.preparedData.profiles,this.graphConfig,this.sampleLabels);},initComponent:function(){this.dataView=new Ext.DataView({autoHeight:true,emptyText:'Data not available',loadingText:'Loading...',store:new Gemma.VisualizationStore({readMethod:this.readMethod})});Gemma.VectorDisplay.superclass.initComponent.call(this);this.on('resize',function(component,width,height){if(!this.preparedData){return;}
this.refresh();}.createDelegate(this))}});Ext.namespace('Gemma');Gemma.VIZ_WINDOW_WIDTH=750;Gemma.VIZ_WINDOW_HEIGHT=500;Gemma.ZOOM_PLOT_SIZE=500;Gemma.LEGEND_PANEL_HEIGHT=100;Gemma.DIFFEXVIS_QVALUE_THRESHOLD=0.05;Gemma.SELECTED=2;Gemma.LINE_THICKNESS=1;Gemma.ZOOM_LINE_THICKNESS=2;Gemma.THUMBNAIL_PLOT_SIZE=120;Gemma.HOT_FADE_COLOR="#FFDDDD";Gemma.COLD_FADE_COLOR="#DDDDDD";Gemma.MAX_LABEL_LENGTH_CHAR=12;Gemma.MAX_THUMBNAILLABEL_LENGTH_CHAR=30;Gemma.MAX_EE_NAME_LENGTH=40;Gemma.DataVectorThumbnailsView=Ext.extend(Ext.DataView,{autoHeight:true,emptyText:'No data',loadingText:'Loading data ...',name:"vectorDV",singleSelect:true,itemSelector:'div.vizWrap',prepareData:function(data){return Gemma.prepareProfiles(data);},getSelectedOrFirst:function(){if(this.getSelectionCount()>0){return this.getSelectedRecords()[0];}else{var node=this.getNode(0);if(node){return this.getRecord(node);}}
return null;},setTemplate:function(tpl){var k=this.getSelectedNodes();this.tpl=tpl;if(this.el){this.refresh();this.select(k);}}});Gemma.prepareProfiles=function(data){var preparedData=[];var geneExpressionProfile=data.profiles;for(var i=0;i<geneExpressionProfile.size();i++){var profile=geneExpressionProfile[i].profile;var probeId=geneExpressionProfile[i].probe.id;var probe=geneExpressionProfile[i].probe.name;var genes=geneExpressionProfile[i].genes;var color=geneExpressionProfile[i].color;var factor=geneExpressionProfile[i].factor;var pvalue=geneExpressionProfile[i].PValue;var rank=geneExpressionProfile[i].rank;var fade=factor<2;if(fade){color=color=='red'?Gemma.HOT_FADE_COLOR:Gemma.COLD_FADE_COLOR;}
var orderedGeneLinksArr=[];var orderedGeneNamesArr=[];var qtip='Go to gene page (Probe: '+probe+')';if(genes!==undefined&&genes.length>0){var k,gene,link,geneName;for(k=0;k<genes.size();k++){gene=genes[k];geneName=genes[k].officialName;link='<a href="'+Gemma.LinkRoots.genePage+gene.id+'" target="_blank" ext:qtip="'+qtip+'">'
+Ext.util.Format.ellipsis(gene.officialSymbol,Gemma.MAX_THUMBNAILLABEL_LENGTH_CHAR)+'</a> ';if(this.queryGene&&geneName==this.queryGene){orderedGeneLinksArr.unshift(link);orderedGeneNamesArr.unshift(geneName);}else{orderedGeneLinksArr.push(link);orderedGeneNamesArr.push(geneName);}}}else{orderedGeneLinksArr.push("<a href='/Gemma/compositeSequence/show.html?id="+probeId
+"' target='_blank' ext:qtip= '"+qtip+"'>Unmapped</a>");orderedGeneNamesArr.push("");}
var points=[];for(var j=0;j<profile.size();j++){var point=[j,profile[j]];points.push(point);}
var pvalueLabel="";if(pvalue!=undefined){pvalueLabel=sprintf("%.2e ",pvalue);}
var labelStyle='';if(factor&&factor<2){labelStyle="font-style:italic";}
var plotConfig={profile:profile,data:points,color:color,genes:genes,rawLabel:pvalueLabel+orderedGeneLinksArr.join("; ")+" "+orderedGeneNamesArr.join("; "),label:pvalueLabel+"<span style='"+labelStyle+"'>"+orderedGeneLinksArr.join("; ")+" "
+orderedGeneNamesArr.join("; ")+"</span>",lines:{lineWidth:Gemma.LINE_THICKNESS},labelID:probeId,factor:factor,probe:{id:probeId,name:probe},PValue:pvalue,rank:rank,smoothed:false};preparedData.push(plotConfig);}
data.profiles=preparedData;data.profiles.sort(Gemma.sortByImportance);return data;};Gemma.ProfileTemplate=Ext.extend(Ext.XTemplate,{cmpID:'123',graphConfig:{lines:{lineWidth:1},bars:{fill:false},xaxis:{noTicks:0},yaxis:{noTicks:0},grid:{color:"white"},shadowSize:0,legend:{show:false},forceFit:true},overwrite:function(el,values,ret){Gemma.ProfileTemplate.superclass.overwrite.call(this,el,values,ret);for(var i=0;i<values.length;i++){var randomnumber=Math.floor(Math.random()*101);var record=values[i];var shortName=record.eevo.shortName;Ext.DomHelper.append(shortName+'_vizwrap_'+this.cmpID,{tag:'div',id:shortName+"_vis"+randomnumber,style:'width:'+Gemma.THUMBNAIL_PLOT_SIZE+'px;height:'+Gemma.THUMBNAIL_PLOT_SIZE+'px;'});LinePlot.draw($(shortName+"_vis"+randomnumber),record.profiles,this.graphConfig,null,record.factorValuesToNames);}}});Gemma.HeatmapTemplate=Ext.extend(Ext.XTemplate,{cmpID:'123',graphConfig:{label:false,forceFit:true,maxBoxHeight:3,allowTargetSizeAdjust:true},overwrite:function(el,values,ret){Gemma.HeatmapTemplate.superclass.overwrite.call(this,el,values,ret);for(var i=0;i<values.length;i++){var randomnumber=Math.floor(Math.random()*101);var record=values[i];var shortName=record.eevo.shortName;Ext.DomHelper.append(shortName+'_vizwrap_'+this.cmpID,{tag:'div',id:shortName+"_vis_"+randomnumber,style:'width:'+Gemma.THUMBNAIL_PLOT_SIZE+'px;height:'+Gemma.THUMBNAIL_PLOT_SIZE+'px;'});Heatmap.draw($(shortName+"_vis_"+randomnumber),record.profiles,this.graphConfig,null,record.factorValuesToNames,null);}}});Gemma.getProfileThumbnailTemplate=function(heatmap,havePvalues,smooth,cmpID){if(cmpID==undefined||cmpID==null){cmpID='';}
var pvalueString="";if(havePvalues){pvalueString='{[(values.minPvalue < 1) ? sprintf("<br/><span style=\'font-size:smaller\'>p=%.2e</span>", values.minPvalue) : ""]}';}
if(heatmap){var tmpl=new Gemma.HeatmapTemplate('<tpl for="."><tpl for="eevo">','<div class="vizWrap" ext.qtip="{values.name}; Click to zoom" id ="{shortName}_vizwrap_'
+cmpID
+'" style="cursor:pointer;float:left;padding: 10px"> <strong>{shortName}</strong>: <small> {[Ext.util.Format.ellipsis( values.name, Gemma.MAX_EE_NAME_LENGTH)]} </small> &nbsp;&nbsp;<i>'
+pvalueString+'</i></div>','</tpl></tpl>');tmpl.cmpID=cmpID;return tmpl;}else{var tmpl=new Gemma.ProfileTemplate('<tpl for="."><tpl for="eevo">','<div class="vizWrap" ext.qtip="{values.name}; Click to zoom" id ="{shortName}_vizwrap_'
+cmpID
+'" style="cursor:pointer;float:left;padding: 10px"> <strong> {shortName}</strong>: <small> {[Ext.util.Format.ellipsis( values.name, Gemma.MAX_EE_NAME_LENGTH)]} </small> &nbsp;&nbsp; <i>'
+pvalueString+'</i></div>','</tpl></tpl>',{smooth:smooth});tmpl.cmpID=cmpID;return tmpl;}};Gemma.VisualizationZoomPanel=Ext.extend(Ext.Panel,{region:'center',split:true,width:Gemma.VIZ_WINDOW_WIDTH,height:Gemma.VIZ_WINDOW_HEIGHT-100,stateful:false,autoScroll:false,closeAction:'destroy',bodyStyle:"background:white",layout:'fit',title:"",name:"vizZoom",heatmapMode:true,forceFitPlots:false,smoothLineGraphs:false,showLegend:false,showSampleNames:false,initComponent:function(){Gemma.VisualizationZoomPanel.superclass.initComponent.call(this);this.on('resize',function(component,width,height){component.update();}.createDelegate(this));},html:{tag:'div',id:'inner-zoom-html-'+Ext.id(),style:'overflow:auto;width:'+Gemma.ZOOM_PLOT_SIZE+'px;height:'+Gemma.ZOOM_PLOT_SIZE
+'px; margin:5px 2px 2px 5px;'},update:function(eevo,profiles,sampleNames,conditionLabels,conditionLabelKey){if((profiles===undefined||profiles===null)&&this.dv!==null){var record=this.dv.getSelectedOrFirst();if(record===null||record===undefined){return;}
profiles=record.get("profiles");if(profiles===undefined){return;}
sampleNames=record.get("sampleNames");conditionLabels=record.get("factorValuesToNames");conditionLabelKey=record.get("factorNames");}
if(profiles===undefined){throw"No profiles!!";}
if(eevo){var eeInfoTitle="<a ext.qtip='Click for details on experiment (opens in new window)' target='_blank'  href='/Gemma/expressionExperiment/showExpressionExperiment.html?id="
+(eevo.sourceExperiment?eevo.sourceExperiment:eevo.id)
+" '>"
+eevo.shortName
+"</a> ("+Ext.util.Format.ellipsis(eevo.name,35)+")";if(this.vizWindow&&this.vizWindow.originalTitle){this.vizWindow.setTitle(this.vizWindow.originalTitle+"&nbsp;In:&nbsp;"+eeInfoTitle);}else{this.setTitle(eeInfoTitle);}}
var forceFit=this.visPanel?this.vizPanel.forceFitPlots:this.forceFitPlots;var smooth=this.vizPanel?this.vizPanel.smoothLineGraphs:this.smoothLineGraphs;var showSampleNames=this.vizPanel?this.vizPanel.showSampleNames:this.showSampleNames;var graphConfig={xaxis:{noTicks:0},yaxis:{noTicks:0},grid:{labelMargin:0,marginColor:"white"},shadowSize:0,forceFit:forceFit,smoothLineGraphs:smooth,showSampleNames:showSampleNames,legend:{show:this.showLegend,labelFormatter:function(s){var k=s.split("</a>",2);return k[0]+"</a>"+Ext.util.Format.ellipsis(k[1],Gemma.MAX_THUMBNAILLABEL_LENGTH_CHAR);},position:"sw"},conditionLegend:false,label:true};Ext.DomHelper.overwrite(this.body.id,'');var doHeatmap=(this.vizPanel&&this.vizPanel.heatmapMode!='undefined')?this.vizPanel.heatmapMode:this.heatmapMode;if(doHeatmap){graphConfig.legend.container=this.legendDiv?this.legendDiv:this.body.id;profiles.sort(Gemma.sortByImportance);Heatmap.draw($(this.body.id),profiles,graphConfig,sampleNames,conditionLabels,conditionLabelKey);}else{profiles.sort(Gemma.sortByImportance);if(this.legendDiv&&this.legendDiv!=this.body.id){Ext.DomHelper.overwrite(this.legendDiv,'');}
LinePlot.draw($(this.body.id),profiles,graphConfig,sampleNames,conditionLabels,conditionLabelKey);var legend=Ext.DomQuery.select("div.flotr-legend",this.el.dom);if(legend&&legend[0]){var onLegendClick=function(event,component){var probeId=event.getTarget().id;var record;if(this.dv.getSelectionCount()>0){record=this.dv.getSelectedRecords()[0];}else{record=this.dv.getStore().getRange(0,0)[0];}
var eevo=record.get("eevo");var profiles=record.get("profiles");var sampleNames=record.get("sampleNames");var conditionLabels=record.get("factorValuesToNames");var conditionLabelKey=record.get("factorNames");for(var i=0;i<profiles.size();i++){if(profiles[i].labelID==probeId){if(profiles[i].selected){profiles[i].lines.lineWidth=(profiles[i].lines.lineWidth/Gemma.SELECTED);Ext.DomHelper.applyStyles(event.getTarget(),"border:black 2px");profiles[i].selected=false;}else{profiles[i].selected=true;profiles[i].lines.lineWidth=profiles[i].lines.lineWidth*Gemma.SELECTED;Ext.DomHelper.applyStyles(event.getTarget(),"border:green 2px");}
break;}}
this.update(eevo,profiles,sampleNames,conditionLabels,conditionLabelKey);};var el=new Ext.Element(legend[0]);el.on('click',onLegendClick.createDelegate(this));}}}});Gemma.VisualizationWithThumbsWindow=Ext.extend(Ext.Window,{extraPanelParams:{},layout:'fit',constructor:function(config){if(config.title){this.title=config.title;delete config.title;}
var panelConfigParam={};$H(this.extraPanelParams).each(function(pair){panelConfigParam[pair.key]=pair.value;});$H(config).each(function(pair){panelConfigParam[pair.key]=pair.value;});$H(config.extraPanelParams).each(function(pair){panelConfigParam[pair.key]=pair.value;});this.panelConfigParam=panelConfigParam;Gemma.VisualizationWithThumbsWindow.superclass.constructor.apply(this,arguments);},initComponent:function(){if(this.title){this.originalTitle=this.title;}
Gemma.VisualizationWithThumbsWindow.superclass.initComponent.apply(this,arguments);this.panelConfigParam.vizWindow=this;this.vizPanel=new Gemma.VisualizationWithThumbsPanel(this.panelConfigParam)
this.add(this.vizPanel);},show:function(config){Gemma.VisualizationWithThumbsWindow.superclass.show.call(this);if(this.prevX!==null){this.setPosition(this.prevX+20,this.prevY+20);}
var params=config.params||[];this.vizPanel.loadFromParam(config);}});Gemma.VisualizationWithThumbsPanel=Ext.extend(Ext.Panel,{closeAction:'destroy',bodyStyle:"background:white",layout:'border',border:false,maximizable:false,height:Gemma.VIZ_WINDOW_HEIGHT,width:Gemma.VIZ_WINDOW_WIDTH,name:"VizWin",thumbnails:true,tpl:Gemma.getProfileThumbnailTemplate(true,true),showThumbNails:true,heatmapSortMethod:Gemma.sortByImportance,stateful:true,stateId:"visualization-window",stateEvents:['destroy'],heatmapMode:true,forceFitPlots:false,smoothLineGraphs:false,havePvalues:false,showLegend:false,showSampleNames:false,getState:function(){return Ext.apply(Ext.Window.superclass.getState.call(this)||{},{heatmapMode:this.heatmapMode,forceFitPlots:this.forceFitPlots,smoothLineGraphs:this.smoothLineGraphs,showLegend:false,showSampleNames:this.showSampleNames});},loadcallback:function(records,options,success){if(this.loadMask){this.loadMask.hide();}
if(!this.hidden){if(!success||records.length===0){Ext.Msg.alert("No data","Data could not be displayed",function(){this.hide();}.createDelegate(this),this);this.fireEvent('loadFailed');return;}
var queryGeneList=options.params[1];var returnedGeneCount=this.getReturnedGeneCount(records);this.zoom(records[0],this.id);this.fireEvent('loadSucceeded',returnedGeneCount,queryGeneList.length);}},getReturnedGeneCount:function(records){var returnedGeneIds={};var returnedGeneCount=0;for(var i=0;i<records.length;i++){for(var j=0;j<records[i].get('profiles').size();j++){for(var k=0;k<records[i].get('profiles')[j].genes.length;k++){if(returnedGeneIds[records[i].get('profiles')[j].genes[k].id]===undefined){returnedGeneIds[records[i].get('profiles')[j].genes[k].id]=true;returnedGeneCount++;}}}}
return returnedGeneCount;},setHeatmapMode:function(b){this.heatmapMode=b;if(this.zoomPanel){this.zoomPanel.heatmapMode=b;}},zoom:function(record){if(!record){return;}
var eevo=record.get("eevo");var profiles=record.get("profiles");var sampleNames=record.get("sampleNames");var conditionLabels=record.get("factorValuesToNames");var conditionLabelKey=record.get("factorNames");this.factorValueLegendPanel.update(conditionLabelKey);this.zoomPanel.update(eevo,profiles,sampleNames,conditionLabels,conditionLabelKey);},toggleForceFit:function(btn){if(this.forceFitPlots){this.forceFitPlots=false;this.zoomPanel.forceFitPlots=false;}else{this.forceFitPlots=true;this.zoomPanel.forceFitPlots=true;}
var record=this.dv.getSelectedOrFirst();this.zoom(record);},toggleSampleNames:function(btn){if(this.showSampleNames){this.showSampleNames=false;this.zoomPanel.showSampleNames=false;btn.setText("Show sample names");}else{this.showSampleNames=true;this.zoomPanel.showSampleNames=true;btn.setText("Hide sample names");}
var template=Gemma.getProfileThumbnailTemplate(this.heatmapMode,this.havePvalues,false,Ext.id());this.dv.setTemplate(template);var record=this.dv.getSelectedOrFirst();this.zoom(record);},toggleLegend:function(btn){if(this.showLegend){this.showLegend=false;this.zoomPanel.showLegend=false;btn.setText("Show legend");}else{this.showLegend=true;this.zoomPanel.showLegend=true;btn.setText("Hide legend");}
var template=Gemma.getProfileThumbnailTemplate(this.heatmapMode,this.havePvalues,false,Ext.id());this.dv.setTemplate(template);var record=this.dv.getSelectedOrFirst();this.zoom(record);},downloadData:function(btn){if(this.downloadLink){window.open(this.downloadLink);}},toggleSmooth:function(btn){},updateTemplate:function(){var template=Gemma.getProfileThumbnailTemplate(this.heatmapMode,this.havePvalues,false,this.id);this.dv.setTemplate(template);},switchView:function(btn){var toggleLegendBtn=this.getBottomToolbar().toggleLegendBtn;if(this.heatmapMode){this.setHeatmapMode(false);btn.setText("Switch to heatmap");if(toggleLegendBtn){toggleLegendBtn.setVisible(true);}}else{this.setHeatmapMode(true);if(toggleLegendBtn){toggleLegendBtn.setVisible(false);}
var zoomLegendDiv=$(this.zoomLegendId);if(zoomLegendDiv&&zoomLegendDiv!=null){zoomLegendDiv.innerHTML='';}
btn.setText("Switch to line plots");}
this.updateTemplate();var record=this.dv.getSelectedOrFirst();this.zoom(record);},show:function(config){Gemma.VisualizationWithThumbsPanel.superclass.show.call(this);if(this.prevX!==null){this.setPosition(this.prevX+20,this.prevY+20);}
var params=config.params||[];this.dv.store.load({params:params,callback:this.loadcallback.createDelegate(this),scope:this});},initComponent:function(){this.tpl=Gemma.getProfileThumbnailTemplate(this.heatmapMode,this.havePvalues,false,this.id);this.zoomLegendId='zoomLegend-'+Ext.id();this.store=this.store||new Gemma.VisualizationStore({readMethod:this.readMethod});this.dv=new Gemma.DataVectorThumbnailsView({tpl:this.tpl,store:this.store,heatmapSortMethod:this.heatmapSortMethod});this.zoomPanel=new Gemma.VisualizationZoomPanel({store:this.store,legendDiv:this.zoomLegendId,dv:this.dv,heatmapSortMethod:this.heatmapSortMethod,vizPanel:this,vizWindow:this.vizWindow});this.thumbnailPanel=new Ext.Panel({region:'west',split:true,width:Gemma.THUMBNAIL_PLOT_SIZE+50,collapsible:true,title:"Thumbnails",stateful:false,margins:'3 0 3 3',items:this.dv,autoScroll:true,zoomPanel:this.zoomPanel,legendDiv:this.zoomLegendId,hidden:!this.thumbnails,html:{id:this.zoomLegendId,tag:'div',style:'width:'+(Gemma.THUMBNAIL_PLOT_SIZE+50)+'px;height:'+Gemma.THUMBNAIL_PLOT_SIZE
+'px; float:left;'}});this.factorValueLegendPanel=new Ext.Panel({region:'north',collapseMode:'mini',split:true,autoScroll:true,height:Gemma.LEGEND_PANEL_HEIGHT,update:function(conditionLabelKey){if((conditionLabelKey===undefined||conditionLabelKey===null)&&this.dv!==undefined){var record=this.dv.getSelectedOrFirst();if(record===null||record===undefined){return;}
conditionLabelKey=record.get("factorNames");}
this.removeAll();var factorCount=0;for(factorCategory in conditionLabelKey){factorCount++;break;}
if(factorCount===0){Ext.DomHelper.overwrite(this.body.id,'');this.add({html:'No experimental design available.'});this.collapse();}else{if(this.collapsed){this.expand();}
Ext.DomHelper.overwrite(this.body.id,'');FactorValueLegend.draw($(this.body.id),conditionLabelKey);}}});var items=[{xtype:'panel',region:'center',layout:'border',items:[this.zoomPanel,this.factorValueLegendPanel]},this.thumbnailPanel];var browserWarning="";if(!document.createElement("canvas").getContext&&Ext.isIE){browserWarning="<span ext:qtip='"
+Gemma.HelpText.WidgetDefaults.VisualizationWithThumbsPanel.browserWarning
+"' target='_blank'>Chrome Frame</a></span>";}
Ext.apply(this,{items:items,bbar:new Ext.Toolbar({items:[browserWarning,'->',{xtype:'button',ref:'downloadDataBtn',icon:'/Gemma/images/download.gif',cls:'x-btn-text-icon',hidden:this.downloadLink===undefined,disabled:true,tooltip:"Download displayed data in a tab-delimited format",handler:this.downloadData.createDelegate(this)},'-',{xtype:'button',text:this.showSampleNames?"Hide sample names":"Show sample names",ref:'toggleSampleNamesBtn',handler:this.toggleSampleNames.createDelegate(this),tooltip:"Toggle display of the sample names",disabled:true},'-',{xtype:'button',text:this.showLegend?"Hide legend":"Show legend",ref:'toggleLegendBtn',handler:this.toggleLegend.createDelegate(this),tooltip:"Toggle display of the plot legend",disabled:true,hidden:this.heatmapMode},'-',{xtype:'button',text:"Zoom +/-",ref:'forceFitBtn',handler:this.toggleForceFit.createDelegate(this),tooltip:"Toggle forcing of the plot to fit in the width of the window",disabled:true,hidden:false},'-',{xtype:'button',text:this.heatmapMode?"Switch to line plot":"Switch to heatmap",ref:'toggleViewBtn',disabled:true,handler:this.switchView.createDelegate(this)}]})});Gemma.VisualizationWithThumbsPanel.superclass.initComponent.call(this);this.dv.getStore().on('load',function(s,records,options){if(typeof this.getBottomToolbar().toggleViewBtn!=='undefined'){this.getBottomToolbar().toggleViewBtn.enable();this.getBottomToolbar().forceFitBtn.enable();this.getBottomToolbar().toggleLegendBtn.enable();this.getBottomToolbar().toggleSampleNamesBtn.enable();this.getBottomToolbar().downloadDataBtn.enable();this.getBottomToolbar().toggleViewBtn.setText(this.heatmapMode?"Switch to line plot":"Switch to heatmap");this.getBottomToolbar().toggleLegendBtn.setText(this.showLegend?"Hide legend":"Show legend");this.getBottomToolbar().toggleSampleNamesBtn.setText(this.showSampleNames?"Hide sample names":"Show sample names");if(this.heatmapMode){this.getBottomToolbar().toggleLegendBtn.hide();}else{this.getBottomToolbar().toggleLegendBtn.show();}}},this);this.dv.getStore().on('loadexception',function(){Ext.Msg.alert("No data","Sorry, no data were available",function(){this.close();}.createDelegate(this),this);}.createDelegate(this),this);this.dv.on('selectionchange',function(dv,selections){if(selections.length>0){var record=dv.getRecord(selections[0]);if(!record||record===undefined){return;}
this.zoom(record);}}.createDelegate(this),this);this.on('staterestore',function(w,state){this.zoomPanel.heatmapMode=this.heatmapMode;this.zoomPanel.forceFitPlots=this.forceFitPlots;this.zoomPanel.showLegend=this.showLegend;this.zoomPanel.showSampleNames=this.showSampleNames;this.updateTemplate();},this);},loadFromParam:function(config){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.generic,msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});this.loadMask.show();var params=config.params||this.params||[];this.dv.store.load({params:params,callback:this.loadcallback.createDelegate(this),scope:this});}});Gemma.VisualizationDifferentialWindow=Ext.extend(Gemma.VisualizationWithThumbsWindow,{extraPanelParams:{havePvalues:true,tpl:Gemma.getProfileThumbnailTemplate(false,true),readMethod:DEDVController.getDEDVForDiffExVisualization}});Gemma.CoexpressionVisualizationWindow=Ext.extend(Gemma.VisualizationWithThumbsWindow,{extraPanelParams:{tpl:Gemma.getProfileThumbnailTemplate(false,false),readMethod:DEDVController.getDEDVForCoexpressionVisualization}});Gemma.VisualizationStore=function(config){this.record=Ext.data.Record.create([{name:"id",type:"int"},{name:"eevo"},{name:"profiles"},{name:"factorProfiles"},{name:"sampleNames"},{name:"factorNames"},{name:"factorValues"},{name:"factorValuesToNames"}]);if(config&&config.readMethod){this.readMethod=config.readMethod;}else{this.readMethod=DEDVController.getDEDVForVisualization;}
this.proxy=new Ext.data.DWRProxy(this.readMethod);this.reader=new Ext.data.ListRangeReader({id:"id"},this.record);Gemma.VisualizationStore.superclass.constructor.call(this,config);this.relayEvents(this.proxy,['loadexception']);};Ext.extend(Gemma.VisualizationStore,Ext.data.Store,{});Gemma.sortByImportance=function(a,b){if(a.PValue!==null&&a.PValue!==undefined&&b.PValue!==null&&b.PValue!==undefined){return Math.log(a.PValue)-Math.log(b.PValue);}else if(a.rank!==null&&a.rank!==undefined&&b.rank!==null&&b.rank!==undefined){return a.rank-b.rank;}
if(a.factor>b.factor){return-1;}
if(a.factor<b.factor){return 1;}
if((!a.genes||a.genes.size()<1)&&(!b.genes||b.genes.size()<1)){return a.labelID>b.labelID;}
if(!a.genes||a.genes.size()<1){return-1;}
if(!b.genes||b.genes.size()<1){return 1;}
if(a.genes[0].name>b.genes[0].name){return 1;}else if(a.genes[0].name<b.genes[0].name){return-1;}else{return a.labelID>b.labelID;}};var FactorValueLegend=function(){var PER_CONDITION_LABEL_HEIGHT=10;var FACTOR_VALUE_LABEL_MAX_CHAR=125;var FACTOR_VALUE_LABEL_BOX_WIDTH=10;var TRIM=5;var SMALL_TRIM=3;function FactorValueLegend(target,conditionLabelKey){drawLegend(target,conditionLabelKey);function drawLegend(target,conditionLabelKey){var labelHeight=10;var increment=1;var boxWidth=10;var boxHeight=10;var fontSize=10;var lineHeight=10;var legendWidth=300;var legendHeight=100;var id='factorValueLegend-'+Ext.id();Ext.DomHelper.append(target,{id:id,tag:'div'});var legendDiv=Ext.get(id);var ctx=constructCanvas($(legendDiv),legendWidth,legendHeight);var factorValueCount=0;var factorCount=0;var allColumnsWidth=0;var maxColumnWidth=0;for(factorCategory in conditionLabelKey){factorCount++;if(ctx.measureText(factorCategory).width>maxColumnWidth){maxColumnWidth=ctx.measureText(factorCategory).width;}
for(var factorValue in conditionLabelKey[factorCategory]){factorValueCount++;var dim=ctx.measureText(factorValue);var width=Math.round(dim.width);if(width>maxColumnWidth){maxColumnWidth=width;}}
allColumnsWidth+=maxColumnWidth;maxColumnWidth=0;}
legendWidth=3*TRIM+allColumnsWidth+(FACTOR_VALUE_LABEL_BOX_WIDTH+SMALL_TRIM+SMALL_TRIM)*factorCount;legendHeight=3*TRIM+lineHeight*(factorValueCount+1);Ext.DomHelper.overwrite($(legendDiv),'');ctx=constructCanvas($(legendDiv),legendWidth,legendHeight);ctx.fillStyle="#000000";ctx.font=fontSize+"px sans-serif";ctx.textAlign="left";ctx.translate(10,20);x=0;y=0;for(factorCategory in conditionLabelKey){facCat=Ext.util.Format.ellipsis(factorCategory,FACTOR_VALUE_LABEL_MAX_CHAR);var maxLabelWidthInCategory=0;dim=ctx.measureText(facCat);width=Math.round(dim.width);if(width>maxLabelWidthInCategory){maxLabelWidthInCategory=width;}
ctx.fillText(facCat,x,y);y+=PER_CONDITION_LABEL_HEIGHT+2;for(factorValue in conditionLabelKey[factorCategory]){var facVal=Ext.util.Format.ellipsis(factorValue,FACTOR_VALUE_LABEL_MAX_CHAR);colour=conditionLabelKey[factorCategory][factorValue];ctx.fillStyle=colour;ctx.fillRect(x,y-fontSize,FACTOR_VALUE_LABEL_BOX_WIDTH,PER_CONDITION_LABEL_HEIGHT);x+=FACTOR_VALUE_LABEL_BOX_WIDTH+SMALL_TRIM;ctx.fillStyle="#000000";ctx.fillText(facVal,x,y);x=0;y+=PER_CONDITION_LABEL_HEIGHT;dim=ctx.measureText(facVal);width=Math.round(dim.width);if(width>maxLabelWidthInCategory){maxLabelWidthInCategory=width;}}
ctx.translate(FACTOR_VALUE_LABEL_BOX_WIDTH+SMALL_TRIM+maxLabelWidthInCategory+SMALL_TRIM,0);x=0;y=0;}}
function constructCanvas(div,canvasWidth,canvasHeight){div.setStyle({'position':'relative'});if(canvasWidth<=0||canvasHeight<=0){throw'Invalid dimensions for plot, width = '+canvasWidth+', height = '+canvasHeight;}
var canvas=Ext.DomHelper.append(div,{tag:'canvas',width:canvasWidth,height:canvasHeight});if(!document.createElement("canvas").getContext&&Prototype.Browser.IE){canvas=$(window.G_vmlCanvasManager.initElement(canvas));}
return canvas.getContext('2d');}}
return{clean:function(element){if(element&&element!=null&&element.inner){element.innerHTML='';}},draw:function(target,conditionLabelKey){var legend=new FactorValueLegend(target,conditionLabelKey);return legend;}};}();Gemma.testVisData=function(){var s0={};var s1={};var s2=[];var s4={};var s6=[];var s9={};var s7={};var s8=[];var s5={};var s10=[];var s13={};var s11={};var s12=[];var s3=[];s0.eevo=s1;s0.profiles=s2;s0.sampleNames=s3;s1.clazz="ExpressionExperimentValueObject";s1.id=1567;s1.investigators=null;s1.isPublic=true;s1.isShared=false;s1.linkAnalysisEventType=null;s1.minPvalue=1.12992044357193E-29;s1.missingValueAnalysisEventType=null;s1.name="High fat diet leads to increased storage of mono-unsaturated fatty acids and tissue specific risk factors for disease";s1.numAnnotations=null;s1.numPopulatedFactors=null;s1.owner=null;s1.processedDataVectorComputationEventType=null;s1.processedExpressionVectorCount=null;s1['public']=true;s1.shortName="GSE15822";s2[0]=s4;s2[1]=s5;s4.PValue=1.03114379442728E-24;s4.allMissing=false;s4.color="red";s4.factor=2;s4.genes=s6;s4.probe=s7;s4.profile=s8;s4.standardized=true;s6[0]=s9;s9.description="Imported from NCBI gene; Nomenclature status: INTERIM";s9.id=590525;s9.name="Wdr1";s9.ncbiId="22388";s9.officialName="WD repeat domain 1";s9.officialSymbol="Wdr1";s9.score=null;s9.taxonId=2;s9.taxonName="Mus musculus";s7.arrayDesign=null;s7.description=" Wdr1";s7.id=6346520;s7.name="ILMN_2460168";s8[0]=-1.5727;s8[1]=-1.0453;s8[2]=-1.4501;s8[3]=-1.2332;s8[4]=-0.7847;s8[5]=-1.7017;s8[6]=-1.4386;s8[7]=-1.0650;s8[8]=-1.3970;s8[9]=-0.8819;s5.PValue=1.12992044357193E-29;s5.allMissing=false;s5.color="red";s5.factor=2;s5.genes=s10;s5.probe=s11;s5.profile=s12;s5.standardized=true;s10[0]=s13;s13.description="Imported from NCBI gene; Nomenclature status: INTERIM";s13.id=590525;s13.name="Wdr1";s13.ncbiId="22388";s13.officialName="WD repeat domain 1";s13.officialSymbol="Wdr1";s13.score=null;s13.taxonId=2;s13.taxonName="Mus musculus";s11.arrayDesign=null;s11.description=" Wdr1";s11.id=6345825;s11.name="ILMN_2497268";s12[0]=-1.588;s12[1]=NaN;s12[2]=-0.656;s12[3]=NaN;s12[4]=-1.370;s12[5]=-1.417;s12[6]=-1.035;s12[7]=NaN;s12[8]=NaN;s12[9]=-1.044;s3[0]="Muscle.HFD.6";s3[1]="Muscle.HFD.5";s3[2]="Muscle.HFD.4";s3[3]="Muscle.HFD.3";s3[4]="Muscle.HFD.2";s3[5]="Muscle.HFD.1";s3[6]="Muscle.SBD.6";s3[7]="Muscle.SBD.5";s3[8]="Muscle.SBD.4";s3[9]="Muscle.SBD.3";return[s0];};var LinePlot=function(){var MAX_SAMPLE_LABEL_HEIGHT_PIXELS=120;var TRIM=5;var SMALL_TRIM=3;var EXPANDED_BOX_WIDTH=10;var SAMPLE_LABEL_MAX_CHAR=125;var PER_CONDITION_LABEL_HEIGHT=10;var MAX_PER_FACTOR_VALUE_LABEL_WIDTH=200;var FACTOR_VALUE_LABEL_MAX_CHAR=125;var FACTOR_VALUE_LABEL_BOX_WIDTH=10;function LinePlot(container,data,config,sampleLabels,conditionLabels,conditionLabelKey){draw(container,data,config,sampleLabels,conditionLabels,conditionLabelKey);function draw(container,series,config,sampleLabels,conditionLabels,conditionLabelKey){if(series.length===0){return;}
var numberOfColumns=series[0].data.length;if(numberOfColumns===0){return;}
if(config.smoothLineGraphs){if(!series.smoothed){smooth(series);series.smoothed=true;}}else{if(series.smoothed){for(var i=0;i<data.length;i++){var d=series[i].data;if(series[i].backup){for(var j=0;j<d.length;j++){series[i].data[j][1]=series[i].backup[j][1];}}}
series.smoothed=false;}}
var width=container.getWidth();var height=container.getHeight();if(width===0){width=10;}
if(height===0){height=10;}
var plotHeight=height;var plotWidth=width-(2*TRIM);var spacePerPoint;if(config.forceFit){spacePerPoint=plotWidth/numberOfColumns;}else{spacePerPoint=Math.max(EXPANDED_BOX_WIDTH,plotWidth/numberOfColumns);plotWidth=spacePerPoint*numberOfColumns;}
if(!config.forceFit&&plotWidth>width){Ext.DomHelper.applyStyles(container,"overflow:auto");}
if(config.showSampleNames&&sampleLabels){if(spacePerPoint>=EXPANDED_BOX_WIDTH){var fontSize=Math.min(12,spacePerPoint-1);var maxLabelLength=0;for(var j=0;j<sampleLabels.length;j++){if(sampleLabels[j].length>maxLabelLength){maxLabelLength=sampleLabels[j].length;}}
var labelHeight=Math.round(Math.min(MAX_SAMPLE_LABEL_HEIGHT_PIXELS,Math.min(maxLabelLength,SAMPLE_LABEL_MAX_CHAR)*fontSize*0.8));var id='sampleLabels-'+Ext.id();var sampleLabelsWidth=plotWidth+(2*TRIM);Ext.DomHelper.append(container,{id:id,tag:'div',width:sampleLabelsWidth,height:labelHeight});var ctx=constructCanvas($(id),sampleLabelsWidth,labelHeight);ctx.fillStyle="#000000";ctx.font=fontSize+"px sans-serif";ctx.textAlign="left";ctx.translate(TRIM+spacePerPoint,labelHeight-2);for(var j=0;j<sampleLabels.length;j++){var lab=Ext.util.Format.ellipsis(sampleLabels[j],SAMPLE_LABEL_MAX_CHAR);ctx.rotate(-Math.PI/2);ctx.fillText(lab,0,0);ctx.rotate(Math.PI/2);ctx.translate(spacePerPoint,0);}
plotHeight=plotHeight-labelHeight;}else if(config.forceFit){var message;if(numberOfColumns.length>80){message="Click 'zoom in' to see the sample labels";}else{message="Click 'zoom in' or try widening the window to see the sample labels";}
var mid="message-"+Ext.id();Ext.DomHelper.append(container,{id:mid,tag:'div',width:plotWidth,height:20});var ctx=constructCanvas($(mid),plotWidth,20);ctx.translate(10,10);ctx.fillText(message,0,0);plotHeight=plotHeight-20;}}
var factorCount=0;maxLabelLength=0;for(var factorCategory in conditionLabelKey){factorCount++;if(factorCategory.length>maxLabelLength){maxLabelLength=factorCategory.length;}}
var conditionLabelsHeight=factorCount*PER_CONDITION_LABEL_HEIGHT+SMALL_TRIM;if(conditionLabels){id='conditionLabels-'+Ext.id();Ext.DomHelper.append(container,{id:id,tag:'div',width:plotWidth,height:conditionLabelsHeight});labelDiv=Ext.get(id);ctx=constructCanvas($(labelDiv),plotWidth+10,conditionLabelsHeight);var x=0;var y=0;ctx.translate(TRIM,0);for(j=0;j<conditionLabels.length;j++){for(factorCategory in conditionLabels[j]){var factorValueArr=conditionLabels[j][factorCategory];var value=factorValueArr[0];var colour=factorValueArr[1];ctx.fillStyle=colour;ctx.fillRect(x,y,spacePerPoint,PER_CONDITION_LABEL_HEIGHT);y+=PER_CONDITION_LABEL_HEIGHT;}
x+=spacePerPoint;y=0;}}
plotHeight=plotHeight-4*TRIM-conditionLabelsHeight;if(plotHeight<10||plotWidth<10){return;}
var vid="plotCanvas-"+Ext.id();Ext.DomHelper.append(container,{id:vid,tag:'div',style:"margin:"+TRIM+"px;width:"+plotWidth+"px;height:"+plotHeight+"px"});var target=$(vid);Flotr.draw(target,series,config);}}
function smooth(series){for(var i=0;i<series.length;i++){var d=series[i].data;if(!series[i].backup){series[i].backup=[];for(var m=0;m<d.length;m++){series[i].backup.push([d[m][0],d[m][1]]);}}
var w=Math.min(10,Math.max(Math.floor(d.length/25.0),2));var lv=0;var ave=[];for(var j=0;j<d.length;j++){var u=0,v=0;if(j<d.length-w){for(var k=j;k<j+w;k++){v+=d[k][1];u++;}}else{for(var k=j;k<d.length;k++){v+=d[k][1];u++;}}
ave.push(v/u);}
for(j=0;j<d.length;j++){series[i].data[j][1]=ave[j];}}}
function constructCanvas(div,canvasWidth,canvasHeight){div.setStyle({'position':'relative'});if(canvasWidth<=0||canvasHeight<=0){throw'Invalid dimensions for plot, width = '+canvasWidth+', height = '+canvasHeight;}
var canvas=Ext.DomHelper.append(div,{tag:'canvas',width:canvasWidth,height:canvasHeight});if(!document.createElement("canvas").getContext&&Prototype.Browser.IE){canvas=$(window.G_vmlCanvasManager.initElement(canvas));}
return canvas.getContext('2d');}
return{clean:function(element){element.innerHTML='';},draw:function(target,data,options,sampleLabels,conditionLabels,conditionLabelKey){return new LinePlot(target,data,options,sampleLabels,conditionLabels,conditionLabelKey);}};}();Ext.namespace('Gemma.Metaheatmap');Gemma.Metaheatmap.ColorLegend=Ext.extend(Ext.Window,{height:150,width:270,constrain:true,closeAction:'hide',closable:false,shadow:false,border:false,bodyBorder:false,margins:{top:0,right:0,bottom:0,left:0},initComponent:function(){Ext.apply(this,{cellSize:this.cellSize,foldChangeLabels:this.foldChangeLabels,foldChangeValues:this.foldChangeValues,pValueLabels:this.pValueLabels,pValueValues:this.pValueValues,discreteColorRange:this.discreteColorRangeObject,fontSize:this.fontSize,items:[{xtype:'box',autoEl:'canvas',ref:'boxCanvas',listeners:{afterrender:{scope:this,fn:function(){this.ctx=Gemma.Metaheatmap.Utils.getCanvasContext(this.boxCanvas.el.dom);this.ctx.canvas.height=this.height;this.ctx.canvas.width=this.width;this.drawVertical();}}}}]});Gemma.Metaheatmap.ColorLegend.superclass.initComponent.apply(this,arguments);},drawVertical:function(){var colorScale={"5":"rgb(142, 1, 82)","4":"rgb(197, 27, 125)","3":"rgb(222, 119, 174)","2":"rgb(241, 182, 218)","1":"rgb(253, 224, 239)","0":"rgb(247, 247, 247)","-1":"rgb(230, 245, 208)","-2":"rgb(184, 225, 134)","-3":"rgb(127, 188, 65)","-4":"rgb(77, 146, 33)","-5":"rgb(39, 100, 25)"};this.ctx.font=this.fontSize+"px sans-serif";var y=1;var x=1;for(var i=0;i<this.foldChangeLabels.length;i++){var color=colorScale[this.foldChangeValues[i]];this.drawCell_(1,y,this.cellSize,color,0);this.ctx.fillStyle="black";this.ctx.fillText(this.foldChangeLabels[i],this.cellSize+3,y+this.cellSize);y+=this.cellSize;}
x=115;y=1;for(var i=0;i<this.pValueLabels.length;i++){var color="white";if(this.pValueLabels[i]==="No Data"){this.drawMissingCell_(x,y,this.cellSize);}else if(this.pValueLabels[i]=="Not Significant"){this.drawTestedButNotSignificant_(x,y,this.cellSize)}else{var transparency=this.pValueValues[i]/10;this.drawCell_(x,y,this.cellSize,color,transparency);}
this.ctx.fillStyle="black";this.ctx.fillText(this.pValueLabels[i],x+this.cellSize+3,y+this.cellSize);y+=this.cellSize;}},drawCell_:function(x,y,size,color,transparency){this.ctx.fillStyle=color;var innerBoxSize=Math.floor(0.5*size);this.ctx.fillRect(x,y,size,size);this.ctx.fillStyle="rgba(0,0,0,"+transparency+")";this.ctx.fillRect(x+size/2-innerBoxSize/2,y+size/2-innerBoxSize/2,innerBoxSize,innerBoxSize);},drawMissingCell_:function(x,y,size){this.ctx.fillStyle='white';this.ctx.fillRect(x,y,size,size);},drawTestedButNotSignificant_:function(x,y,size){this.ctx.fillStyle='white';this.ctx.fillRect(x,y,size,size);var innerBoxWidth=Math.floor(0.5*size);var innerBoxHeight=Math.floor(0.5*size);this.ctx.strokeStyle="rgba(0,0,0,0.1)";this.ctx.strokeRect(x+size/2-innerBoxWidth/2,y+size/2-innerBoxHeight/2,innerBoxWidth,innerBoxHeight);}});Ext.reg('Metaheatmap.ColorLegend',Gemma.Metaheatmap.ColorLegend);Ext.namespace('Gemma');Gemma.EEDetailsVisualizationWidget=Ext.extend(Gemma.GeneGrid,{height:220,width:550,name:'eedvw',vizButtonId:"visualizeButton-"+Ext.id(),initComponent:function(){this.geneGroupCombo=new Gemma.GeneGroupCombo({id:"visGeneGroupCombo",hideTrigger:true,emptyText:'Search for genes to visualize',listeners:{'select':{fn:function(combo,record,index){var loadMask=new Ext.LoadMask(this.getEl(),{msg:"Loading Genes for "+record.get('name')+" ..."});loadMask.show();this.loadGenes(record.get('geneIds'),function(){loadMask.hide();});},scope:this}}});Ext.apply(this,{extraButtons:[this.geneGroupCombo,new Ext.Button({text:"Clear",tooltip:"Clear gene selection",handler:this.clearButHandler,scope:this}),{xtype:'tbfill'},new Ext.Button({id:this.vizButtonId,text:"Visualize",tooltip:Gemma.HelpText.WidgetDefaults.EEDetailsVisualizationWidget.visualizaButtonTT,handler:this.showButHandler,scope:this,cls:'x-toolbar-standardbutton'}),new Ext.Button({icon:Gemma.ICONURL+'information.png',tootltip:"Get help",handler:function(){Ext.Msg.show({title:'Visualization',msg:Gemma.HelpText.WidgetDefaults.EEDetailsVisualizationWidget.instructions,buttons:Ext.Msg.OK,icon:Ext.MessageBox.INFO});}.createDelegate(this)})]});Gemma.EEDetailsVisualizationWidget.superclass.initComponent.call(this);this.on('ready',function(){var foundTaxon=this.getTopToolbar().taxonCombo.setTaxonByCommonName(this.taxon.commonName);this.getTopToolbar().taxonCombo.hide();this.geneGroupCombo.taxon=this.taxon;this.taxonChanged(foundTaxon,false);this.getTopToolbar().taxonCombo.disable(false);});},clearButHandler:function(){this.removeAllGenes();},showButHandler:function(){if(this.visWindow){this.visWindow.close();this.visWindow.destroy();}
var geneList=this.getGeneIds();var eeId=(Ext.get("eeId"))?Ext.get("eeId").getValue():this.eeId;var title='';var downloadLink='';if(geneList.length>0){title="Data for selected genes";downloadLink=String.format("/Gemma/dedv/downloadDEDV.html?ee={0}&g={1}",eeId,geneList.join(','));}else{geneList=[];title="Data for a 'random' sampling of probes";downloadLink=String.format("/Gemma/dedv/downloadDEDV.html?ee={0}",eeId);}
this.visWindow=new Gemma.VisualizationWithThumbsWindow({title:title,thumbnails:false,downloadLink:downloadLink});this.visWindow.show({params:[[eeId],geneList]});}});Gemma.VisualizationWidgetGeneSelectionToolbar=Ext.extend(Ext.Toolbar,{extraButtons:[],geneIds:[],initComponent:function(){Gemma.VisualizationWidgetGeneSelectionToolbar.superclass.initComponent.call(this);this.visPanel.on('loadSucceeded',function(returnedGeneCount,queryGeneCount){if(returnedGeneCount!==undefined&&queryGeneCount!==undefined&&returnedGeneCount!==null&&queryGeneCount!==null&&queryGeneCount>0){this.updateFoundVsQueryText(returnedGeneCount,queryGeneCount);}else{this.updateStatusText();}},this);this.geneCombo=new Gemma.GeneAndGeneGroupCombo({typeAhead:false,width:this.geneComboWidth||300,taxonId:this.taxonId,listeners:{'select':{fn:function(combo,rec,index){this.setGeneIds(rec.get('memberIds'));this.setSelectedComboRecord(rec.data);this.editBtn.enable();this.clearBtn.enable();this.updateButtonText();}.createDelegate(this)}}});this.vizBtn=new Ext.Toolbar.Button({tooltip:"Visualize selected gene(s)",text:'Visualize',cls:'x-toolbar-standardbutton',handler:this.vizBtnHandler.createDelegate(this)});this.editBtn=new Ext.Toolbar.Button({tooltip:"Edit your selection",text:'Edit Selection',cls:'x-toolbar-outline',disabled:true,handler:this.launchGeneSelectionEditor.createDelegate(this)});this.clearBtn=new Ext.Toolbar.Button({tooltip:"Clear your selection",text:'Clear',cls:'x-toolbar-outline',disabled:true,handler:this.clearHandler.createDelegate(this)});this.geneSelectionEditor=new Gemma.GeneMembersSaveGrid({name:'geneSelectionEditor',hideHeaders:true,frame:false});this.geneSelectionEditor.setTaxonId(this.taxonId);this.geneSelectionEditor.on('geneListModified',function(geneSetIds,geneIds){this.setGeneIds(geneIds);this.updateButtonText();this.geneCombo.setValue('Custom gene group ('+geneIds.length+' genes)');this.listModified=true;},this);this.geneSelectionEditor.on('doneModification',function(){this.getEl().unmask();this.geneSelectionEditorWindow.hide();},this);this.geneSelectionEditorWindow=new Ext.Window({closable:false,layout:'fit',width:450,height:500,items:this.geneSelectionEditor,title:'Edit Your Gene Selection'});this.tbarText=new Ext.Panel({xtype:'panel',html:'Visualizing 20 \'random\' genes',border:false,bodyStyle:'background-color:transparent; color:grey; padding-left:5px'});if(this.showRefresh){this.refreshButton={xtype:"button",text:"Refresh",icon:'/Gemma/images/icons/arrow_refresh_small.png',tooltip:"Refresh the caches for this experiment",handler:function(){if(this.eeId&&this.eeId>0){Ext.getBody().mask('Refreshing ...');var callBackFunc=function(msg){Ext.getBody().unmask();if(msg==null||msg==""){this.fireEvent('refreshVisualisation');}else{Ext.Msg.alert("Refresh failed: "+msg);}};ExperimentalDesignController.clearDesignCaches(this.eeId,callBackFunc.createDelegate(this));}else{Ext.Msg.alert('Missing experiment parameter.');}},scope:this};}},afterRender:function(c,l){Gemma.GeneAndGroupAdderToolbar.superclass.afterRender.call(this,c,l);this.add(this.geneCombo,this.editBtn);this.addSpacer();this.add(this.clearBtn,this.vizBtn);this.addButton(this.extraButtons);this.add(this.tbarText);if(this.showRefresh){this.addFill();this.add(this.refreshButton);}},launchGeneSelectionEditor:function(){var geneIds=this.getGeneIds();if(!geneIds||geneIds===null||geneIds.length===0){return;}
this.getEl().mask();this.geneSelectionEditorWindow.show();this.geneSelectionEditor.setSelectedGeneSetValueObject(this.getSelectedValueObject());this.geneSelectionEditor.loadMask=new Ext.LoadMask(this.geneSelectionEditor.getEl(),{msg:"Loading genes ..."});this.geneSelectionEditor.loadMask.show();Ext.apply(this.geneSelectionEditor,{taxonId:this.taxonId});this.geneSelectionEditor.loadGenes(geneIds,function(){this.geneSelectionEditor.loadMask.hide();}.createDelegate(this,[],false));},getGeneIds:function(){return this.geneIds;},setGeneIds:function(ids){this.geneIds=ids;},setSelectedComboRecord:function(record){this.selectedComboRecord=record;},getSelectedComboRecord:function(){return this.selectedComboRecord;},getSelectedValueObject:function(){return(this.selectedComboRecord)?this.selectedComboRecord.resultValueObject:null;},updateButtonText:function(){var numIds=this.getGeneIds().length;if(numIds===0){this.vizBtn.setText(Gemma.HelpText.WidgetDefaults.EEDetailsVisualizationWidget.GoButtonText.random);}else if(numIds===1){this.vizBtn.setText(Gemma.HelpText.WidgetDefaults.EEDetailsVisualizationWidget.GoButtonText.one);}else{this.vizBtn.setText(String.format(Gemma.HelpText.WidgetDefaults.EEDetailsVisualizationWidget.GoButtonText.multiple,numIds));}},updateStatusText:function(status){if(status&&status.length>0){this.tbarText.update(status);}else{var numIds=this.getGeneIds().length;if(numIds===0){this.tbarText.update(Gemma.HelpText.WidgetDefaults.EEDetailsVisualizationWidget.StatusText.random);}else if(numIds===1){this.tbarText.update(Gemma.HelpText.WidgetDefaults.EEDetailsVisualizationWidget.StatusText.one);}else{this.tbarText.update(String.format(Gemma.HelpText.WidgetDefaults.EEDetailsVisualizationWidget.StatusText.multiple,numIds));}}},updateFoundVsQueryText:function(foundCount,queryCount){if(foundCount!==undefined&&queryCount!==undefined&&foundCount!==null&&queryCount!==null){this.tbarText.update(String.format(Gemma.HelpText.WidgetDefaults.EEDetailsVisualizationWidget.StatusText.geneMatchCount,foundCount,queryCount));}else{this.tbarText.update('');}},clearHandler:function(){this.setGeneIds([]);this.updateButtonText();this.geneCombo.reset();this.editBtn.disable();this.clearBtn.disable();},vizBtnHandler:function(){var geneList=this.getGeneIds();var eeId=this.eeId;var title='';var downloadLink='';if(geneList.length>0){title="Data for selected genes";downloadLink=String.format("/Gemma/dedv/downloadDEDV.html?ee={0}&g={1}",eeId,geneList.join(','));}
else{geneList=[];title="Data for a 'random' sampling of probes";downloadLink=String.format("/Gemma/dedv/downloadDEDV.html?ee={0}",eeId);this.editBtn.disable();}
Ext.apply(this.visPanel,{downloadLink:downloadLink});this.visPanel.loadFromParam({params:[[eeId],geneList]});}});Ext.namespace('Gemma');Gemma.CytoscapeSettings={backgroundColor:"#FFF7FB",labelFontName:'Arial',labelFontColor:"#252525",labelFontColorFade:"#BDBDBD",labelGlowStrength:100,labelFontWeight:"bold",labelFontSize:11,labelFontSizeBigger:18,labelFontSizeBiggest:25,labelYOffset:-20,labelHorizontalAnchor:"center",nodeColor:"#969696",nodeColorFade:"#FFF7FB",defaultNodeBorderWidth:0,queryNodeBorderWidth:5,nodeSize:25,queryNodeSize:30,nodeQueryColorTrue:"#E41A1C",nodeQueryColorFalse:"#6BAED6",supportColorBoth:"#CCCCCC",supportColorPositive:"#E66101",supportColorNegative:"#5E3C99",selectionGlowColor:"#00CC00",selectionGlowOpacity:1,zoomLevelBiggerFont:0.7,zoomLevelBiggestFont:0.4,maxGeneIdsPerCoexVisQuery:200,nodeTooltipText:"${id} (${officialName})<br/>Specificity:${nodeDegreeBin}<br/>NCBI Id:${ncbiId}<br/>",edgeTooltipText:"Edge Nodes: ${target} to ${source}<br/>Positive Support:${positivesupport}<br/>Negative Support:${negativesupport}",nodeDegreeValue:{lightest:0.7,light:0.6,moderate:0.35,dark:0.2},nodeDegreeColor:{lightest:{name:"Lowest",value:"#DEDEDE"},light:{name:"Low",value:"#C9C9C9"},moderate:{name:"Moderate",value:"#737373"},dark:{name:"High",value:"#404040"},darkest:{name:"Highest",value:"#000000"},},nodeDegreeColorSecondGeneList:{lightest:{value:"#B2B2FF"},light:{value:"#8080FF"},moderate:{value:"#4D4DFF"},dark:{value:"#0000FF"},darkest:{value:"#000099"},}};Gemma.CytoscapeSettings.visualStyleRegular={global:{backgroundColor:Gemma.CytoscapeSettings.backgroundColor},nodes:{tooltipText:Gemma.CytoscapeSettings.nodeTooltipText,shape:"ELLIPSE",borderWidth:{discreteMapper:{attrName:"queryflag",entries:[{attrValue:true,value:Gemma.CytoscapeSettings.queryNodeBorderWidth},{attrValue:false,value:Gemma.CytoscapeSettings.defaultNodeBorderWidth}]}},size:{discreteMapper:{attrName:"queryflag",entries:[{attrValue:true,value:Gemma.CytoscapeSettings.queryNodeSize},{attrValue:false,value:Gemma.CytoscapeSettings.nodeSize}]}},labelFontName:Gemma.CytoscapeSettings.labelFontName,labelFontColor:Gemma.CytoscapeSettings.labelFontColor,labelGlowStrength:Gemma.CytoscapeSettings.labelGlowStrength,labelFontWeight:Gemma.CytoscapeSettings.labelFontWeight,labelYOffset:Gemma.CytoscapeSettings.labelYOffset,labelHorizontalAnchor:Gemma.CytoscapeSettings.labelHorizontalAnchor,borderColor:{discreteMapper:{attrName:"queryflag",entries:[{attrValue:true,value:Gemma.CytoscapeSettings.nodeQueryColorTrue},{attrValue:false,value:Gemma.CytoscapeSettings.nodeQueryColorFalse}]}},color:Gemma.CytoscapeSettings.nodeColor,selectionGlowColor:Gemma.CytoscapeSettings.selectionGlowColor,selectionGlowOpacity:Gemma.CytoscapeSettings.selectionGlowOpacity},edges:{tooltipText:Gemma.CytoscapeSettings.edgeTooltipText,width:{defaultValue:1,continuousMapper:{attrName:"support",minValue:1,maxValue:6}},color:{discreteMapper:{attrName:"supportsign",entries:[{attrValue:"both",value:Gemma.CytoscapeSettings.supportColorBoth},{attrValue:"positive",value:Gemma.CytoscapeSettings.supportColorPositive},{attrValue:"negative",value:Gemma.CytoscapeSettings.supportColorNegative}]}},selectionGlowColor:Gemma.CytoscapeSettings.selectionGlowColor,selectionGlowOpacity:Gemma.CytoscapeSettings.selectionGlowOpacity}};Gemma.CytoscapeSettings.visualStyleNodeDegree={global:{backgroundColor:Gemma.CytoscapeSettings.backgroundColor},nodes:{tooltipText:Gemma.CytoscapeSettings.nodeTooltipText,shape:"ELLIPSE",borderWidth:{discreteMapper:{attrName:"queryflag",entries:[{attrValue:true,value:Gemma.CytoscapeSettings.queryNodeBorderWidth},{attrValue:false,value:Gemma.CytoscapeSettings.defaultNodeBorderWidth}]}},size:{discreteMapper:{attrName:"queryflag",entries:[{attrValue:true,value:Gemma.CytoscapeSettings.queryNodeSize},{attrValue:false,value:Gemma.CytoscapeSettings.nodeSize}]}},labelFontColor:{discreteMapper:{attrName:"nodeDegreeBin",entries:[{attrValue:Gemma.CytoscapeSettings.nodeDegreeColor.lightest.name,value:Gemma.CytoscapeSettings.nodeDegreeColor.lightest.value},{attrValue:Gemma.CytoscapeSettings.nodeDegreeColor.light.name,value:Gemma.CytoscapeSettings.nodeDegreeColor.light.value},{attrValue:Gemma.CytoscapeSettings.nodeDegreeColor.moderate.name,value:Gemma.CytoscapeSettings.nodeDegreeColor.moderate.value},{attrValue:Gemma.CytoscapeSettings.nodeDegreeColor.dark.name,value:Gemma.CytoscapeSettings.nodeDegreeColor.dark.value},{attrValue:Gemma.CytoscapeSettings.nodeDegreeColor.darkest.name,value:Gemma.CytoscapeSettings.nodeDegreeColor.darkest.value}]}},labelFontName:Gemma.CytoscapeSettings.labelFontName,labelGlowStrength:Gemma.CytoscapeSettings.labelGlowStrength,labelFontWeight:Gemma.CytoscapeSettings.labelFontWeight,labelYOffset:Gemma.CytoscapeSettings.labelYOffset,labelHorizontalAnchor:Gemma.CytoscapeSettings.labelHorizontalAnchor,borderColor:{discreteMapper:{attrName:"queryflag",entries:[{attrValue:true,value:Gemma.CytoscapeSettings.nodeQueryColorTrue},{attrValue:false,value:Gemma.CytoscapeSettings.nodeQueryColorFalse}]}},color:{discreteMapper:{attrName:"nodeDegreeBin",entries:[{attrValue:Gemma.CytoscapeSettings.nodeDegreeColor.lightest.name,value:Gemma.CytoscapeSettings.nodeDegreeColor.lightest.value},{attrValue:Gemma.CytoscapeSettings.nodeDegreeColor.light.name,value:Gemma.CytoscapeSettings.nodeDegreeColor.light.value},{attrValue:Gemma.CytoscapeSettings.nodeDegreeColor.moderate.name,value:Gemma.CytoscapeSettings.nodeDegreeColor.moderate.value},{attrValue:Gemma.CytoscapeSettings.nodeDegreeColor.dark.name,value:Gemma.CytoscapeSettings.nodeDegreeColor.dark.value},{attrValue:Gemma.CytoscapeSettings.nodeDegreeColor.darkest.name,value:Gemma.CytoscapeSettings.nodeDegreeColor.darkest.value}]}},selectionGlowColor:Gemma.CytoscapeSettings.selectionGlowColor,selectionGlowOpacity:Gemma.CytoscapeSettings.selectionGlowOpacity},edges:{tooltipText:Gemma.CytoscapeSettings.edgeTooltipText,width:{defaultValue:1,continuousMapper:{attrName:"support",minValue:1,maxValue:6}},opacity:{customMapper:{functionName:"edgeOpacityMapper"}},color:{discreteMapper:{attrName:"supportsign",entries:[{attrValue:"both",value:Gemma.CytoscapeSettings.supportColorBoth},{attrValue:"positive",value:Gemma.CytoscapeSettings.supportColorPositive},{attrValue:"negative",value:Gemma.CytoscapeSettings.supportColorNegative}]}},selectionGlowColor:Gemma.CytoscapeSettings.selectionGlowColor,selectionGlowOpacity:Gemma.CytoscapeSettings.selectionGlowOpacity}};Gemma.CytoscapeSettings.forceDirectedLayoutCompressed={name:"ForceDirected",options:{mass:2,gravitation:-300,tension:0.3,drag:0.4,minDistance:1,maxDistance:10000,iterations:400,maxTime:30000}};Gemma.CytoscapeSettings.defaultForceDirectedLayout={name:"ForceDirected"};Gemma.CytoscapeSettings.secondGeneListBypassOverlay={color:"#4D4DFF",labelGlowStrength:240,labelFontColor:"#0000FF",labelFontStyle:"italic",labelFontWeight:"bold"};Gemma.CytoscapeSettings.secondGeneListBypassOverlayNodeDegreeLightest={color:Gemma.CytoscapeSettings.nodeDegreeColorSecondGeneList.lightest.value,labelGlowStrength:240,labelFontColor:Gemma.CytoscapeSettings.nodeDegreeColorSecondGeneList.lightest.value,labelFontStyle:"italic",labelFontWeight:"bold"};Gemma.CytoscapeSettings.secondGeneListBypassOverlayNodeDegreeLight={color:Gemma.CytoscapeSettings.nodeDegreeColorSecondGeneList.light.value,labelGlowStrength:240,labelFontColor:Gemma.CytoscapeSettings.nodeDegreeColorSecondGeneList.light.value,labelFontStyle:"italic",labelFontWeight:"bold"};Gemma.CytoscapeSettings.secondGeneListBypassOverlayNodeDegreeModerate={color:Gemma.CytoscapeSettings.nodeDegreeColorSecondGeneList.moderate.value,labelGlowStrength:240,labelFontColor:Gemma.CytoscapeSettings.nodeDegreeColorSecondGeneList.moderate.value,labelFontStyle:"italic",labelFontWeight:"bold"};Gemma.CytoscapeSettings.secondGeneListBypassOverlayNodeDegreeDark={color:Gemma.CytoscapeSettings.nodeDegreeColorSecondGeneList.dark.value,labelGlowStrength:240,labelFontColor:Gemma.CytoscapeSettings.nodeDegreeColorSecondGeneList.dark.value,labelFontStyle:"italic",labelFontWeight:"bold"};Gemma.CytoscapeSettings.secondGeneListBypassOverlayNodeDegreeDarkest={color:Gemma.CytoscapeSettings.nodeDegreeColorSecondGeneList.darkest.value,labelGlowStrength:240,labelFontColor:Gemma.CytoscapeSettings.nodeDegreeColorSecondGeneList.darkest.value,labelFontStyle:"italic",labelFontWeight:"bold"};Ext.namespace('Gemma');Gemma.CytoscapePanelUtil={};Gemma.CytoscapePanelUtil.ttSubstring=function(tString){if(!tString){return null;}
var maxLength=60;if(tString.length>maxLength){return tString.substr(0,maxLength)+"...";}
return tString;};Gemma.CytoscapePanelUtil.getMaxWithNull=function(n1,n2){if(n1==null||n2==null){return 1;}
return Math.max(n1,n2);};Gemma.CytoscapePanelUtil.decimalPlaceRounder=function(number){if(number==null){return null;}
return Ext.util.Format.round(number,4);};Gemma.CytoscapePanelUtil.nodeDegreeBinMapper=function(nodeDegree){if(nodeDegree==null){return null;}
if(nodeDegree>Gemma.CytoscapeSettings.nodeDegreeValue.lightest){return Gemma.CytoscapeSettings.nodeDegreeColor.lightest.name;}else if(nodeDegree>Gemma.CytoscapeSettings.nodeDegreeValue.light){return Gemma.CytoscapeSettings.nodeDegreeColor.light.name;}else if(nodeDegree>Gemma.CytoscapeSettings.nodeDegreeValue.moderate){return Gemma.CytoscapeSettings.nodeDegreeColor.moderate.name;}else if(nodeDegree>Gemma.CytoscapeSettings.nodeDegreeValue.dark){return Gemma.CytoscapeSettings.nodeDegreeColor.dark.name;}else{return Gemma.CytoscapeSettings.nodeDegreeColor.darkest.name;}};Gemma.CytoscapePanelUtil.restrictResultsStringency=function(displayStringency){if(displayStringency>5){return displayStringency-Math.round(displayStringency/4);}
return 2;};Gemma.CytoscapePanelUtil.getCoexVizCommandFromCoexGridCommand=function(csc){var newCsc={};Ext.apply(newCsc,{geneIds:csc.geneIds,eeIds:csc.eeIds,stringency:Gemma.CytoscapePanelUtil.restrictResultsStringency(csc.displayStringency),displayStringency:csc.displayStringency,forceProbeLevelSearch:csc.forceProbeLevelSearch,useMyDatasets:csc.useMyDatasets,queryGenesOnly:csc.queryGenesOnly,taxonId:csc.taxonId});return newCsc;};Gemma.CytoscapePanelUtil.restrictQueryGenesForCytoscapeQuery=function(coexpressionSearchData){coexpressionSearchData.cytoscapeCoexCommand.geneIds=[];var qlength=coexpressionSearchData.coexGridResults.queryGenes.length;var queryGeneCountHash={};var resultsPerQueryGene=Gemma.CytoscapeSettings.maxGeneIdsPerCoexVisQuery/qlength;var i;for(i=0;i<qlength;i++){coexpressionSearchData.cytoscapeCoexCommand.geneIds.push(coexpressionSearchData.coexGridResults.queryGenes[i].id);queryGeneCountHash[coexpressionSearchData.coexGridResults.queryGenes[i].id]=0;}
var kglength=coexpressionSearchData.coexGridResults.knownGeneResults.length;for(i=0;i<kglength;i++){if(coexpressionSearchData.cytoscapeCoexCommand.geneIds.indexOf(coexpressionSearchData.coexGridResults.knownGeneResults[i].foundGene.id)===-1&&queryGeneCountHash[coexpressionSearchData.coexGridResults.knownGeneResults[i].queryGene.id]<resultsPerQueryGene&&(coexpressionSearchData.coexGridResults.knownGeneResults[i].posSupp>=coexpressionSearchData.cytoscapeCoexCommand.stringency||coexpressionSearchData.coexGridResults.knownGeneResults[i].negSupp>=coexpressionSearchData.cytoscapeCoexCommand.stringency)){coexpressionSearchData.cytoscapeCoexCommand.geneIds.push(coexpressionSearchData.coexGridResults.knownGeneResults[i].foundGene.id);queryGeneCountHash[coexpressionSearchData.coexGridResults.knownGeneResults[i].queryGene.id]=queryGeneCountHash[coexpressionSearchData.coexGridResults.knownGeneResults[i].queryGene.id]+1;}}};Gemma.CytoscapePanelUtil.getGeneIdArrayFromCytoscapeJSONNodeObjects=function(selectedNodes){var selectedNodesGeneIdArray=[];var sNodesLength=selectedNodes.length;var i;for(i=0;i<sNodesLength;i++){selectedNodesGeneIdArray[i]=selectedNodes[i].data.geneid;}
return selectedNodesGeneIdArray;};Ext.namespace('Gemma');Gemma.CytoscapePanel=Ext.extend(Ext.Panel,{title:'Cytoscape',layout:'fit',stopRender:false,coexpressionSearchData:{},initComponent:function(){var controlBar=new Gemma.CytoscapeControlBar({taxonId:this.coexpressionSearchData.coexGridCoexCommand.taxonId});this.display=new Gemma.CytoscapeDisplay({id:'cytoscapeweb',controlBar:controlBar,controller:this,initialZoomLevel:null,listeners:{afterrender:{scope:this,fn:this.cytoscapePanelAfterRenderHandler}}});controlBar.display=this.display;this.graphSizeMenu=new Ext.menu.Menu({items:[{itemId:'graphSizeLarge',text:'Large',handler:function(){this.graphSizeMenuHandler("large");},scope:this},{itemId:'graphSizeMedium',text:'Medium',handler:function(){this.graphSizeMenuHandler("medium");},scope:this},{itemId:'graphSizeSmall',text:'Small',handler:function(){this.graphSizeMenuHandler("small");},scope:this}]});var bbar=new Ext.Toolbar({hidden:true,items:[{xtype:'tbtext',text:'',itemId:'bbarStatus'},{xtype:'button',id:'graphSizeMenu',text:'<b>Graph Size</b>',menu:this.graphSizeMenu},{xtype:'label',id:'tooltipMenuNotEnabled',html:'&nbsp&nbsp<img ext:qtip="'+Gemma.HelpText.WidgetDefaults.CytoscapePanel.graphSizeMenuTT2+'" src="/Gemma/images/icons/question_blue.png"/>&nbsp',height:15},{xtype:'label',id:'tooltipMenuEnabled',html:'&nbsp&nbsp<img ext:qtip="'+Gemma.HelpText.WidgetDefaults.CytoscapePanel.graphSizeMenuTT+'" src="/Gemma/images/icons/question_blue.png"/>&nbsp',height:15}]});Ext.apply(this,{tbar:controlBar,bbar:bbar,margins:{top:0,right:0,bottom:0,left:0},items:[this.display]});Gemma.CytoscapePanel.superclass.initComponent.apply(this,arguments);this.on('activate',function(){if(this.display.ready&&this.coexpressionSearchData.coexGridCoexCommand.displayStringency<this.coexpressionSearchData.cytoscapeCoexCommand.stringency){Ext.Msg.show({title:'New Search Required to View Graph at Current Stringency',msg:String.format(Gemma.HelpText.WidgetDefaults.CytoscapePanel.newSearchOrReturnToCurrentStringencyOption,this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency,this.coexpressionSearchData.coexGridCoexCommand.stringency),buttons:{ok:'Search for new graph data',cancel:'Use lowest graph stringency'},fn:function(btn){if(btn=='ok'){var resultsStringency=Gemma.CytoscapePanelUtil.restrictResultsStringency(this.coexpressionSearchData.coexGridCoexCommand.displayStringency);Ext.apply(this.coexpressionSearchData.cytoscapeCoexCommand,{stringency:resultsStringency,displayStringency:this.coexpressionSearchData.coexGridCoexCommand.displayStringency});this.searchForCytoscapeData();}else{this.stringencyChange(this.coexpressionSearchData.cytoscapeCoexCommand.stringency);}}.createDelegate(this)});}else if(this.display.ready){this.refreshGraphFromCoexpressionSearchData();}},this);this.on('doneDrawingCytoscape',function(){this.display.clearSearchBox();this.fireEvent("textBoxMatchFromCoexpressionViz",'');if(this.display.isQueryGenesOnly()){this.display.filter(this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency,this.coexpressionSearchData.coexGridCoexCommand.geneIds,false);}
else if(this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency>this.coexpressionSearchData.cytoscapeCoexCommand.stringency){var trimmed=Gemma.CoexValueObjectUtil.trimKnownGeneResultsWithQueryGenes(this.coexpressionSearchData.cytoscapeResults.knownGeneResults,this.coexpressionSearchData.coexGridCoexCommand.geneIds,this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency);this.display.filter(this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency,trimmed.trimmedNodeIds,true);}},this);this.on('searchTextBoxMatch',function(text){this.fireEvent("textBoxMatchFromCoexpressionViz",text);},this);this.on('searchForCytoscapeDataComplete',function(){if(this.coexpressionSearchData.coexGridCoexCommand.geneIds.length<2){this.display.disableQueryGenesOnly(true);this.display.setQueryGenesOnly(false);}else{this.display.disableQueryGenesOnly(false);}
this.coexpressionGraphData=new Gemma.CoexpressionGraphData(this.coexpressionSearchData);this.display.updateStringency(this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency);this.fireEvent('stringencyUpdateFromCoexpressionViz',this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency);this.showUserMessageBarAfterNewData();this.drawGraph();},this);this.on('searchErrorFromCoexpressionSearchData',function(result){this.timeOutFromCoexSearchHandler();},this);this.on('stringencyUpdateFromCoexGrid',function(){if(this.display.ready){if(this.coexpressionSearchData.coexGridCoexCommand.displayStringency>=this.coexpressionSearchData.cytoscapeCoexCommand.stringency){this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency=this.coexpressionSearchData.coexGridCoexCommand.displayStringency;}else if(this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency!=this.coexpressionSearchData.coexGridCoexCommand.displayStringency){this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency=this.coexpressionSearchData.cytoscapeCoexCommand.stringency;}}else{var resultsStringency=Gemma.CytoscapePanelUtil.restrictResultsStringency(this.coexpressionSearchData.coexGridCoexCommand.displayStringency);Ext.apply(this.coexpressionSearchData.cytoscapeCoexCommand,{stringency:resultsStringency,displayStringency:this.coexpressionSearchData.coexGridCoexCommand.displayStringency});this.display.updateStringency(this.coexpressionSearchData.coexGridCoexCommand.displayStringency);}},this);this.on('queryGenesOnlyUpdateFromCoexGrid',function(checked){this.display.setQueryGenesOnly(checked);},this);this.on('textBoxMatchFromCoexGrid',function(text){if(this.display.ready){this.display.textBoxMatchHandler(text);}},this);this.addEvents('stringencyUpdateFromCoexpressionViz','dataUpdateFromCoexpressionViz','queryUpdateFromCoexpressionViz','coexWarningAlreadyDisplayed','textBoxMatchFromCoexpressionViz');this.relayEvents(this.display,['doneDrawingCytoscape','searchTextBoxMatch']);this.relayEvents(this.coexpressionSearchData,['searchForCoexGridDataComplete','searchForCytoscapeDataComplete','searchErrorFromCoexpressionSearchData']);if(this.knownGeneGrid){this.relayEvents(this.knownGeneGrid,['stringencyUpdateFromCoexGrid','queryGenesOnlyUpdateFromCoexGrid','textBoxMatchFromCoexGrid']);this.knownGeneGrid.relayEvents(this,['stringencyUpdateFromCoexpressionViz','dataUpdateFromCoexpressionViz','queryGenesOnlyUpdateFromCoexpressionViz','textBoxMatchFromCoexpressionViz']);this.knownGeneGrid.relayEvents(this.coexpressionSearchData,['searchForCoexGridDataComplete']);}
if(this.searchPanel){this.searchPanel.relayEvents(this,['queryUpdateFromCoexpressionViz','beforesearch']);}},searchForCytoscapeData:function(){this.loadMask.show();this.coexpressionSearchData.searchForCytoscapeData();},filterQueryGenesOnly:function(suppressEvent){if(!suppressEvent){this.fireEvent('queryGenesOnlyUpdateFromCoexpressionViz',this.display.isQueryGenesOnly())}
if(this.display.isQueryGenesOnly()){this.display.filter(this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency,this.coexpressionSearchData.coexGridCoexCommand.geneIds,false);}else{var trimmed=Gemma.CoexValueObjectUtil.trimKnownGeneResultsWithQueryGenes(this.coexpressionSearchData.cytoscapeResults.knownGeneResults,this.coexpressionSearchData.coexGridCoexCommand.geneIds,this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency);this.display.filter(this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency,trimmed.trimmedNodeIds,false);}},stringencyChange:function(stringencyValue){if(stringencyValue<2){stringencyValue=2;}
if(stringencyValue>=this.coexpressionSearchData.cytoscapeCoexCommand.stringency){this.fireEvent('stringencyUpdateFromCoexpressionViz',stringencyValue);this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency=stringencyValue;this.refreshGraphFromCoexpressionSearchData();}else{this.newSearchForLowerStringencyHandler(stringencyValue);}},refreshGraphFromCoexpressionSearchData:function(){this.display.updateStringency(this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency);if(!this.display.isQueryGenesOnly()){var trimmed=Gemma.CoexValueObjectUtil.trimKnownGeneResultsWithQueryGenes(this.coexpressionSearchData.cytoscapeResults.knownGeneResults,this.coexpressionSearchData.coexGridCoexCommand.geneIds,this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency);this.display.filter(this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency,trimmed.trimmedNodeIds);}else{this.filterQueryGenesOnly(true);}},newSearchForLowerStringencyHandler:function(stringencyValue){if(!this.warningAlreadyDisplayed){Ext.Msg.show({title:'New Search',msg:Gemma.HelpText.WidgetDefaults.CytoscapePanel.lowStringencyWarning,buttons:{ok:'Proceed',cancel:'Cancel'},fn:function(btn){if(btn=='ok'){this.warningAlreadyDisplayed=true;this.newSearchForLowerStringencyHandlerNoWarning(stringencyValue);}else{this.display.updateStringency();}}.createDelegate(this)});}else{this.newSearchForLowerStringencyHandlerNoWarning(stringencyValue);}},newSearchForLowerStringencyHandlerNoWarning:function(stringencyValue){var resultsStringency=Gemma.CytoscapePanelUtil.restrictResultsStringency(stringencyValue);Ext.apply(this.coexpressionSearchData.cytoscapeCoexCommand,{stringency:resultsStringency,displayStringency:stringencyValue,queryGenesOnly:true});this.searchForCytoscapeData();},searchWithSelectedNodes:function(selectedNodesGeneIdArray){this.clearError();if(selectedNodesGeneIdArray.length>0&&selectedNodesGeneIdArray.length<=Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY){var resultsStringency=2;this.updateSearchFormGenes(selectedNodesGeneIdArray);this.loadMask.show();Ext.apply(this.coexpressionSearchData.coexGridCoexCommand,{stringency:resultsStringency,displayStringency:this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency,geneIds:selectedNodesGeneIdArray,queryGenesOnly:false});Ext.apply(this.coexpressionSearchData.cytoscapeCoexCommand,{stringency:Gemma.CytoscapePanelUtil.restrictResultsStringency(this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency),queryGenesOnly:true});this.coexpressionSearchData.searchForCoexGridDataAndCytoscapeData();}else if(selectedNodesGeneIdArray.length>Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusTitle,String.format(Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusTooMany,Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY));}else if(selectedNodesGeneIdArray.length==0){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusTitle,Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusTooFew);}},extendNodes:function(selectedNodes){this.clearError();var selectedNodesGeneIdArray=[];var i;var visibleQueryGenesIdArray=this.restrictSelectedNodesByCurrentSettings(this.coexpressionSearchData.coexGridCoexCommand.geneIds);for(i=0;i<selectedNodes.length;i++){if(visibleQueryGenesIdArray.indexOf(selectedNodes[i])===-1){selectedNodesGeneIdArray.push(selectedNodes[i]);}}
if(selectedNodes.length!=0&&selectedNodesGeneIdArray.length==0){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusTitle,Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusNoExtraSelectedForExtend);return;}
if(selectedNodesGeneIdArray.length>0&&selectedNodesGeneIdArray.length<=Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY){if(visibleQueryGenesIdArray.length+selectedNodesGeneIdArray.length<=Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY){for(i=0;i<visibleQueryGenesIdArray.length;i++){selectedNodesGeneIdArray.push(visibleQueryGenesIdArray[i]);}
this.searchWithSelectedNodes(selectedNodesGeneIdArray);}else{Ext.Msg.confirm(Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusTitle,String.format(Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusTooManyReduce,Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY),function(btn){if(btn=='yes'){visibleQueryGenesIdArray=visibleQueryGenesIdArray.splice(visibleQueryGenesIdArray.length-(Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY-selectedNodesGeneIdArray.length));var i;for(i=0;i<visibleQueryGenesIdArray.length;i++){if(selectedNodesGeneIdArray.indexOf(visibleQueryGenesIdArray[i])===-1){selectedNodesGeneIdArray.push(visibleQueryGenesIdArray[i]);}}
this.searchWithSelectedNodes(selectedNodesGeneIdArray);}},this);}}else if(selectedNodesGeneIdArray.length>Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusTitle,String.format(Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusTooMany,Gemma.MAX_GENES_PER_CO_EX_VIZ_QUERY));}else{Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusTitle,Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchStatusTooFew);}},cytoscapePanelAfterRenderHandler:function(){if(!this.stopRender){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Searching.analysisResults,msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});}
this.fireEvent('stringencyUpdateFromCoexpressionViz',this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency);this.searchForCytoscapeData();}},restrictSelectedNodesByCurrentSettings:function(selectedNodes){var trimmed=Gemma.CoexValueObjectUtil.trimKnownGeneResultsWithQueryGenes(this.coexpressionSearchData.cytoscapeResults.knownGeneResults,this.coexpressionSearchData.coexGridCoexCommand.geneIds,this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency);var restrictedNodes=[];var i;for(i=0;i<selectedNodes.length;i++){if(trimmed.trimmedNodeIds.indexOf(selectedNodes[i])!==-1){if(this.display.isQueryGenesOnly()&&this.coexpressionSearchData.coexGridCoexCommand.geneIds.indexOf(selectedNodes[i])==-1){continue;}
restrictedNodes.push(selectedNodes[i]);}}
return restrictedNodes;},getVisibleNodeIds:function(){var trimmed=Gemma.CoexValueObjectUtil.trimKnownGeneResultsWithQueryGenes(this.coexpressionSearchData.cytoscapeResults.knownGeneResults,this.coexpressionSearchData.coexGridCoexCommand.geneIds,this.coexpressionSearchData.cytoscapeCoexCommand.displayStringency);return trimmed.trimmedNodeIds;},drawGraph:function(){this.display.drawGraph(this.coexpressionSearchData);this.loadMask.hide();},clearError:function(){if(Ext.get("analysis-results-search-form-messages")){Ext.DomHelper.overwrite("analysis-results-search-form-messages","");}},showUserMessageBarAfterNewData:function(){if(!this.coexpressionGraphData.mediumGraphDataEnabled){if(this.coexpressionSearchData.cytoscapeResults.nonQueryGeneTrimmedValue>0){this.showUserMessageBar(this.coexpressionSearchData.cytoscapeResults.nonQueryGeneTrimmedValue,false);}else{this.getBottomToolbar().hide();this.doLayout();}
return;}
var resultsObject=this.coexpressionGraphData.getGraphData();if(resultsObject.trimStringency){this.coexpressionSearchData.cytoscapeResults.knownGeneResults=resultsObject.geneResults;this.showUserMessageBar(resultsObject.trimStringency,true);}else if(this.coexpressionSearchData.cytoscapeResults.nonQueryGeneTrimmedValue>0){this.showUserMessageBar(this.coexpressionSearchData.cytoscapeResults.nonQueryGeneTrimmedValue,false);}else{this.getBottomToolbar().hide();this.doLayout();}},showUserMessageBar:function(trimmedValue,showGraphSizeMenu){var bbarText=this.getBottomToolbar().getComponent('bbarStatus');var graphSizeButton=this.getBottomToolbar().getComponent("graphSizeMenu");if(showGraphSizeMenu){bbarText.setText("Edges not involving query genes have been trimmed at stringency: ");if(trimmedValue==0){graphSizeButton.setText("No Trimming ");}else{graphSizeButton.setText(trimmedValue+" ");}
this.getBottomToolbar().getComponent('tooltipMenuEnabled').setVisible(true);this.getBottomToolbar().getComponent('tooltipMenuNotEnabled').setVisible(false);if(this.coexpressionGraphData.largeGraphDataEnabled){if(this.coexpressionGraphData.originalResults.trimStringency==0){this.graphSizeMenu.getComponent("graphSizeLarge").setText("No Trimming ("+this.coexpressionGraphData.originalResults.geneResults.length+" edges)");}else{this.graphSizeMenu.getComponent("graphSizeLarge").setText(this.coexpressionGraphData.originalResults.trimStringency+" ("+this.coexpressionGraphData.originalResults.geneResults.length+" edges)");}
this.graphSizeMenu.getComponent("graphSizeLarge").show();if(trimmedValue==this.coexpressionGraphData.originalResults.trimStringency){this.graphSizeMenu.getComponent("graphSizeLarge").addClass("buttonBold");}else{this.graphSizeMenu.getComponent("graphSizeLarge").removeClass("buttonBold");}}else{this.graphSizeMenu.getComponent("graphSizeLarge").hide();}
if(this.coexpressionGraphData.mediumGraphDataEnabled){this.graphSizeMenu.getComponent("graphSizeMedium").setText(this.coexpressionGraphData.graphDataMedium.trimStringency+" ("+this.coexpressionGraphData.graphDataMedium.geneResults.length+" edges)");this.graphSizeMenu.getComponent("graphSizeMedium").show();if(trimmedValue==this.coexpressionGraphData.graphDataMedium.trimStringency){this.graphSizeMenu.getComponent("graphSizeMedium").addClass("buttonBold");}else{this.graphSizeMenu.getComponent("graphSizeMedium").removeClass("buttonBold");}}else{this.graphSizeMenu.getComponent("graphSizeMedium").hide();}
if(this.coexpressionGraphData.smallGraphDataEnabled){this.graphSizeMenu.getComponent("graphSizeSmall").setText(this.coexpressionGraphData.graphDataSmall.trimStringency+" ("+this.coexpressionGraphData.graphDataSmall.geneResults.length+" edges)");this.graphSizeMenu.getComponent("graphSizeSmall").show();if(trimmedValue==this.coexpressionGraphData.graphDataSmall.trimStringency){this.graphSizeMenu.getComponent("graphSizeSmall").addClass("buttonBold");}else{this.graphSizeMenu.getComponent("graphSizeSmall").removeClass("buttonBold");}}else{this.graphSizeMenu.getComponent("graphSizeSmall").hide();}
if(!graphSizeButton.isVisible()){graphSizeButton.show();}}else{this.getBottomToolbar().getComponent('tooltipMenuEnabled').setVisible(false);this.getBottomToolbar().getComponent('tooltipMenuNotEnabled').setVisible(true);if(graphSizeButton.isVisible()){graphSizeButton.hide();}
bbarText.setText("Edges not involving query genes have been trimmed at stringency: "+trimmedValue);}
this.getBottomToolbar().show();this.doLayout();},updateSearchFormGenes:function(geneIds){var genesToPreview=[];var genesToPreviewIds=[];var knowngenes=this.coexpressionSearchData.cytoscapeResults.knownGeneResults;var kglength=knowngenes.length;var i;for(i=0;i<kglength;i++){if(genesToPreviewIds.indexOf(knowngenes[i].foundGene.id)===-1&&geneIds.indexOf(knowngenes[i].foundGene.id)!==-1){genesToPreview.push(knowngenes[i].foundGene);genesToPreviewIds.push(knowngenes[i].foundGene.id);}
if(genesToPreviewIds.indexOf(knowngenes[i].queryGene.id)===-1&&geneIds.indexOf(knowngenes[i].queryGene.id)!==-1){genesToPreview.push(knowngenes[i].queryGene);genesToPreviewIds.push(knowngenes[i].queryGene.id);}}
var querygenes=this.coexpressionSearchData.coexGridResults.queryGenes;var qglength=querygenes.length;for(i=0;i<qglength;i++){if(genesToPreviewIds.indexOf(querygenes[i].id)===-1&&geneIds.indexOf(querygenes[i].id)!==-1){genesToPreview.push(querygenes[i]);genesToPreviewIds.push(querygenes[i].id);}}
this.fireEvent('queryUpdateFromCoexpressionViz',genesToPreview,genesToPreviewIds,this.taxonId,this.taxonName);},timeOutFromCoexSearchHandler:function(){Ext.Msg.alert(Gemma.HelpText.CommonWarnings.Timeout.title,Gemma.HelpText.CommonWarnings.Timeout.text);this.loadMask.hide();this.fireEvent('beforesearch');},getMatchingGeneIdsByText:function(text){return Gemma.CoexValueObjectUtil.filterGeneResultsByTextForNodeIds(text,this.coexpressionSearchData.cytoscapeResults.knownGeneResults);},graphSizeMenuHandler:function(graphSize){var resultsObject=this.coexpressionGraphData.getGraphData(graphSize);this.coexpressionSearchData.cytoscapeResults.knownGeneResults=resultsObject.geneResults;this.showUserMessageBar(resultsObject.trimStringency,true);this.drawGraph();}});Gemma.CytoscapeDownloadWindow=Ext.extend(Ext.Window,{width:800,height:400,layout:'fit',timeToString:function(timeStamp){var min=(timeStamp.getMinutes()<10)?'0'+timeStamp.getMinutes():timeStamp.getMinutes();return timeStamp.getFullYear()+"/"+timeStamp.getMonth()+"/"+timeStamp.getDate()+" "+timeStamp.getHours()+":"+min;},displayXML:function(xmlString){var text='<!-- Generated by Gemma\n'+' '+this.timeToString(new Date())+'\n'+' \n'
+String.format(Gemma.CITATION_DIRECTIONS,'\n')+' \n'+'-->\n\n';this.textAreaPanel.setValue(text+xmlString);this.show();},initComponent:function(){Ext.apply(this,{tbar:[{ref:'selectAllButton',xtype:'button',text:'Select All',scope:this,handler:function(){this.textAreaPanel.selectText();}}],items:[new Ext.form.TextArea({ref:'textAreaPanel',readOnly:true,autoScroll:true,wordWrap:false})]});Gemma.CytoscapeDownloadWindow.superclass.initComponent.call(this);},onRender:function(){Gemma.CytoscapeDownloadWindow.superclass.onRender.apply(this,arguments);}});Ext.namespace('Gemma');Gemma.CytoscapeControlBar=Ext.extend(Ext.Toolbar,{initComponent:function(){this.isLayoutCompressed=false;this.isNodeLabelsVisible=true;this.isNodeDegreeEmphasis=true;this.visualOptionsMenu=new Ext.menu.Menu({items:[{itemId:'refreshLayoutButton',text:Gemma.HelpText.WidgetDefaults.CytoscapePanel.refreshLayoutText,handler:function(){this.display.refreshLayout();},scope:this},{itemId:'compressGraphButton',text:Gemma.HelpText.WidgetDefaults.CytoscapePanel.compressGraphText,handler:function(){this.isLayoutCompressed=this.isLayoutCompressed?false:true;this.display.compressGraph(this.isLayoutCompressed);this.visualOptionsMenu.getComponent('compressGraphButton').setText(this.isLayoutCompressed?Gemma.HelpText.WidgetDefaults.CytoscapePanel.unCompressGraphText:Gemma.HelpText.WidgetDefaults.CytoscapePanel.compressGraphText);},scope:this},{itemId:'nodeLabelsButton',text:Gemma.HelpText.WidgetDefaults.CytoscapePanel.noNodeLabelsText,handler:function(){this.isNodeLabelsVisible=this.isNodeLabelsVisible?false:true;this.display.toggleNodeLabels(this.isNodeLabelsVisible);this.visualOptionsMenu.getComponent('nodeLabelsButton').setText(this.isNodeLabelsVisible?Gemma.HelpText.WidgetDefaults.CytoscapePanel.noNodeLabelsText:Gemma.HelpText.WidgetDefaults.CytoscapePanel.nodeLabelsText);},scope:this}]});this.actionsMenu=new Ext.menu.Menu({items:[{itemId:'extendSelectedNodesButton',text:Gemma.HelpText.WidgetDefaults.CytoscapePanel.extendNodeText,disabled:true,handler:function(){this.display.extendSelectedNodesHandler();},scope:this},{itemId:'searchWithSelectedNodesButton',text:Gemma.HelpText.WidgetDefaults.CytoscapePanel.searchWithSelectedText,disabled:true,handler:function(){this.display.reRunSearchWithSelectedNodesHandler();},scope:this},{itemId:'applyGeneListOverlayButton',text:Gemma.HelpText.WidgetDefaults.CytoscapePanel.applyGeneListOverlayText,handler:function(){if(!this.geneSetOverlayPicker){this.geneSetOverlayPicker=new Gemma.GeneSetOverlayPicker({display:this.display,taxonId:this.taxonId});this.relayEvents(this.geneSetOverlayPicker,['nodesMatched']);}
this.geneSetOverlayPicker.reactivateOverlayPicker();},scope:this},{itemId:'clearGeneListOverlayButton',text:Gemma.HelpText.WidgetDefaults.CytoscapePanel.clearGeneListOverlayText,hidden:true,handler:function(){this.display.clearGeneListOverlay();this.actionsMenu.getComponent('clearGeneListOverlayButton').hide();},scope:this}]});this.actionsButton=new Ext.Button({text:'<b>Actions</b>',itemId:'actionsButton',menu:this.actionsMenu});Ext.apply(this,{items:[{xtype:'tbtext',text:'Stringency:'},{xtype:'tbspacer'},{xtype:'spinnerfield',ref:'stringencySpinner',itemId:'stringencySpinner',decimalPrecision:1,incrementValue:1,accelerate:false,allowBlank:false,allowDecimals:false,allowNegative:false,minValue:Gemma.MIN_STRINGENCY,maxValue:999,fieldLabel:'Stringency ',value:2,width:60,enableKeyEvents:true,listeners:{"keyup":{fn:function(){var spinnerValue=this.getComponent('stringencySpinner').getValue();if(Ext.isNumber(spinnerValue)&&spinnerValue>1){this.display.stringencyChange(spinnerValue);}},scope:this,delay:500}}},{xtype:'label',html:'&nbsp&nbsp<img ext:qtip="'+Gemma.HelpText.WidgetDefaults.CytoscapePanel.stringencySpinnerTT+'" src="/Gemma/images/icons/question_blue.png"/>',height:15},' ',' ',{xtype:'textfield',ref:'searchInCytoscapeBox',tabIndex:1,enableKeyEvents:true,emptyText:'Find gene in results',listeners:{"keyup":{fn:this.searchForText,scope:this,delay:500}}},' ',' ',{xtype:'checkbox',itemId:'queryGenesOnly',boxLabel:'Query Genes Only',handler:function(){this.display.filterQueryGenesOnly();},checked:false,scope:this},'->','-',{xtype:'button',text:'<b>Help</b>',tooltip:Gemma.HelpText.WidgetDefaults.CytoscapePanel.widgetHelpTT,handler:function(){window.open('http://gemma-chibi-doc.sites.olt.ubc.ca/documentation/search-page/#GemmaQuickGuide-CoexpressionView');},scope:this},'->','-',{xtype:'button',text:'<b>Save As</b>',menu:new Ext.menu.Menu({items:[{text:'Save as PNG',handler:function(){this.display.exportPNG();},scope:this},{text:'Save as GraphML',handler:function(){this.display.exportGraphML();},scope:this},{text:'Save as XGMML',handler:function(){this.display.exportXGMML();},scope:this},{text:'Save as SIF',handler:function(){this.display.exportSIF();},scope:this},{text:'Save as SVG',handler:function(){this.display.exportSVG();},scope:this}]})},'->','-',{xtype:'button',text:'<b>Visual Options</b>',menu:this.visualOptionsMenu},'->','-',this.actionsButton,'->','-',{xtype:'button',itemId:'nodeDegreeEmphasis',ref:'nodeDegreeEmphasis',text:'<b>'+Gemma.HelpText.WidgetDefaults.CytoscapePanel.nodeDegreeEmphasisText+'</b>',enableToggle:'true',pressed:'true',handler:function(){this.display.nodeDegreeEmphasis(this.getComponent('nodeDegreeEmphasis').pressed);},scope:this},{xtype:'label',html:'&nbsp&nbsp<img ext:qtip="'+Gemma.HelpText.WidgetDefaults.CytoscapePanel.nodeDegreeEmphasisTT+'" src="/Gemma/images/icons/question_blue.png"/>&nbsp',height:15}]});Gemma.CytoscapeControlBar.superclass.initComponent.apply(this,arguments);this.on('nodesMatched',function(){this.actionsMenu.getComponent('clearGeneListOverlayButton').show();},this);this.getComponent('stringencySpinner').addListener('spin',function(field,e){this.display.stringencyChange(this.getComponent('stringencySpinner').getValue());},this);},updateActionsButtons:function(isEnabled){if(isEnabled){this.actionsMenu.getComponent('extendSelectedNodesButton').setDisabled(false);this.actionsMenu.getComponent('searchWithSelectedNodesButton').setDisabled(false);}else{this.actionsMenu.getComponent('extendSelectedNodesButton').setDisabled(true);this.actionsMenu.getComponent('searchWithSelectedNodesButton').setDisabled(true);}},setStringency:function(stringency){this.getComponent('stringencySpinner').setValue(stringency);},searchForText:function(button,keyev){this.display.selectSearchMatchesFromControlBar(this.searchInCytoscapeBox.getValue());}});Gemma.GeneSetOverlayPicker=Ext.extend(Ext.Window,{titleText:"Select genes for graph overlay",title:"Select genes for graph overlay",modal:true,layout:'fit',stateful:false,autoHeight:false,width:360,height:400,closeAction:'hide',easing:3,lastOverlayedIds:[],initComponent:function(){this.geneChoosers=new Ext.Panel({frame:false,defaults:{border:false},style:'padding-bottom: 10px;',autoDestroy:true});this.geneChooserIndex=-1;this.initialGeneChooser=this.addGeneChooser();Ext.apply(this,{items:[this.geneChoosers],buttons:[{text:'OK',handler:function(){this.applyOverlay();},scope:this},{text:'Clear',scope:this,handler:this.reset},{text:'Cancel',handler:function(){this.hide();}.createDelegate(this),scope:this}]});Gemma.GeneSetOverlayPicker.superclass.initComponent.call(this);this.addEvents('nodesMatched');},reset:function(){this.geneChoosers.removeAll();this.addGeneChooser();this.setTitle(this.titleText);},applyOverlay:function(){var ids=this.getSelectedIds();this.lastOverlayedIds=ids;var nodesMatched=this.display.applyGeneListOverlay(ids);if(nodesMatched){this.fireEvent('nodesMatched');}
this.hide();},getTextForTitle:function(numNodesMatched,numNodesMatchedWithHidden){var textForTitle=this.titleText+"<br/> ("+numNodesMatched+" gene matches in the graph";if(numNodesMatchedWithHidden>numNodesMatched){var hidden=numNodesMatchedWithHidden-numNodesMatched;textForTitle=textForTitle+", "+hidden+" hidden due to stringency)";}else{textForTitle=textForTitle+")";}
return textForTitle;},reactivateOverlayPicker:function(){if(this.getSelectedIds().length>0){var numNodesMatched=this.display.getMatchedNodeCountForGeneListOverlay(this.getSelectedIds());var numNodesMatchedWithHidden=this.display.getMatchedNodeCountForGeneListOverlayWithHiddenGenes(this.getSelectedIds());this.setTitle(this.getTextForTitle(numNodesMatched,numNodesMatchedWithHidden));}
this.show();},addGeneChooser:function(){this.geneChooserIndex++;var chooser=new Gemma.GeneSearchAndPreview({searchForm:this,style:'padding-top:10px;padding-left:10px;',id:'geneOverlayChooser'+this.geneChooserIndex,taxonId:this.taxonId,showTaxonCombo:false,listeners:{geneSelected:function(){var numNodesMatched=this.searchForm.display.getMatchedNodeCountForGeneListOverlay(this.searchForm.getSelectedIds());var numNodesMatchedWithHidden=this.searchForm.display.getMatchedNodeCountForGeneListOverlayWithHiddenGenes(this.searchForm.getSelectedIds());this.searchForm.setTitle(this.searchForm.getTextForTitle(numNodesMatched,numNodesMatchedWithHidden));},removeGene:function(){this.searchForm.removeGeneChooser(this.getId());}}});this.geneChoosers.add(chooser);if(typeof Ext.getCmp('geneOverlayChooser'
+(this.geneChooserIndex-1)+'Button')!=='undefined'){Ext.getCmp('geneOverlayChooser'+(this.geneChooserIndex-1)
+'Button').show().setIcon('/Gemma/images/icons/delete.png').setTooltip('Remove this gene or group from your search').setHandler(this.removeGeneChooser.createDelegate(this,['geneChooserPanel'
+(this.geneChooserIndex-1)],false));}
this.geneChoosers.doLayout();return chooser;},removeGeneChooser:function(panelId){this.geneChoosers.remove(panelId,true);this.geneChoosers.doLayout();},taxonChanged:function(taxonId,taxonName){},getTaxonName:function(){return"";},getTaxonId:function(){return this.taxonId;},getSelectedIds:function(){var selectedIds=[];this.geneChoosers.items.each(function(){if(this instanceof Gemma.GeneSearchAndPreview&&this.getSelectedGeneOrGeneSetValueObject()){var vo=this.getSelectedGeneOrGeneSetValueObject();if(vo instanceof GeneValueObject){selectedIds.push(vo.id);}else{for(var i=0;i<vo.geneIds.length;i++){selectedIds.push(vo.geneIds[i]);}}}});return selectedIds;}});Ext.namespace('Gemma');Gemma.CoexpressionGraphData=function(coexpressionSearchData){this.originalResults={};this.originalResults.geneResults=coexpressionSearchData.cytoscapeResults.knownGeneResults;this.originalResults.trimStringency=coexpressionSearchData.cytoscapeResults.nonQueryGeneTrimmedValue;this.defaultSize="medium";this.mediumGraphMaxSize=coexpressionSearchData.cytoscapeResults.maxEdges*3/4;this.smallGraphMaxSize=coexpressionSearchData.cytoscapeResults.maxEdges/2;this.largeGraphDataEnabled=false;this.mediumGraphDataEnabled=false;this.smallGraphDataEnabled=false;this.getTrimmedGraphData=function(resultsSizeLimit){return Gemma.CoexValueObjectUtil.trimKnownGeneResultsForReducedGraph(this.originalResults.geneResults,coexpressionSearchData.coexGridCoexCommand.geneIds,coexpressionSearchData.cytoscapeCoexCommand.stringency,coexpressionSearchData.cytoscapeCoexCommand.eeIds.length,resultsSizeLimit);};if(this.mediumGraphMaxSize>this.originalResults.geneResults.length){this.graphDataMedium=this.originalResults;}else{this.graphDataMedium=this.getTrimmedGraphData(this.mediumGraphMaxSize);if(this.graphDataMedium.geneResults.length<this.originalResults.geneResults.length){this.mediumGraphDataEnabled=true;this.largeGraphDataEnabled=true;}}
if(this.smallGraphMaxSize>this.graphDataMedium.geneResults.length){this.graphDataSmall=this.graphDataMedium;}else{this.graphDataSmall=this.getTrimmedGraphData(this.smallGraphMaxSize);if(this.graphDataSmall.geneResults.length<this.graphDataMedium.geneResults.length){this.smallGraphDataEnabled=true;this.mediumGraphDataEnabled=true;}}
this.getGraphData=function(graphSize){if(!graphSize){graphSize=this.defaultSize;}
if(graphSize=="medium"){return this.graphDataMedium;}else if(graphSize=="small"){return this.graphDataSmall;}
return this.originalResults;};};Ext.namespace('Gemma');Gemma.CytoscapeDisplay=Ext.extend(Ext.FlashComponent,{ready:false,nodeDegreeVisualStyleFlag:true,currentDisplayStringency:2,forceDirectedLayoutCompressed:Gemma.CytoscapeSettings.forceDirectedLayoutCompressed,defaultForceDirectedLayout:Gemma.CytoscapeSettings.defaultForceDirectedLayout,currentLayout:{},visualStyleRegular:Gemma.CytoscapeSettings.visualStyleRegular,visualStyleNodeDegree:Gemma.CytoscapeSettings.visualStyleNodeDegree,dataSchemaJSON:{nodes:[{name:'label',type:'string'},{name:'geneid',type:'number'},{name:'queryflag',type:'boolean'},{name:'nodeDegree',type:'number'},{name:'nodeDegreeBin',type:'string'},{name:'officialName',type:'string'},{name:'ncbiId',type:'number'}],edges:[{name:'positivesupport',type:'number'},{name:'negativesupport',type:'number'},{name:'support',type:'number'},{name:'supportsign',type:'string'},{name:'nodeDegree',type:'number'}]},options:{swfPath:"/Gemma/scripts/cytoscape/swf/CytoscapeWeb",flashInstallerPath:"/Gemma/scripts/cytoscape/swf/playerProductInstall"},initComponent:function(){this.visualization=new org.cytoscapeweb.Visualization(this.id,this.options);this.currentLayout=this.defaultForceDirectedLayout;this.visualization["edgeOpacityMapper"]=function(data){if(data["nodeDegree"]==null){return 0.05;}
return 1.05-data["nodeDegree"];};this.visualization.ready(function(){this.visualization.nodeTooltipsEnabled(true);this.visualization.edgeTooltipsEnabled(true);this.visualization.addListener("select","nodes",function(evt){this.controlBar.updateActionsButtons(this.visualization.selected("nodes").length>0);}.createDelegate(this));this.visualization.addListener("deselect","nodes",function(evt){this.controlBar.updateActionsButtons(this.visualization.selected("nodes").length>0);}.createDelegate(this));this.visualization.addListener("layout",function(evt){this.scaleFont(this.visualization.zoom());}.createDelegate(this));this.visualization.addListener("zoom",function(evt){var zoom=evt.value;this.scaleFont(zoom);}.createDelegate(this));this.ready=true;this.scaleFont(this.visualization.zoom());this.fireEvent('doneDrawingCytoscape');}.createDelegate(this));Gemma.CytoscapeDisplay.superclass.initComponent.apply(this,arguments);this.addEvents('doneDrawingCytoscape','searchTextBoxMatch');this.on('doneDrawingCytoscape',function(){this.applyGeneListOverlayIfActive();},this);},drawGraph:function(coexpressionSearchData){var dataMsg={dataSchema:this.dataSchemaJSON,data:this.constructDataJSON(coexpressionSearchData.coexGridCoexCommand.geneIds,coexpressionSearchData.coexGridResults.queryGenes,coexpressionSearchData.cytoscapeResults.knownGeneResults)};this.initialZoomLevel=null;this.visualization.draw({network:dataMsg,visualStyle:this.nodeDegreeVisualStyleFlag?this.visualStyleNodeDegree:this.visualStyleRegular,layout:this.currentLayout});},constructDataJSON:function(currentQueryGeneIds,qgenes,knowngenes){return this.constructDataJSONWithStringencyFiltering(currentQueryGeneIds,qgenes,knowngenes,false,null);},constructDataJSONWithStringencyFiltering:function(currentQueryGeneIds,qgenes,knowngenes,filterCurrentResults,filterStringency){var data={nodes:[],edges:[]};var graphNodeIds=[];var edgeSet=[];var kglength=knowngenes.length;var i;for(i=0;i<kglength;i++){if(!filterCurrentResults||((currentQueryGeneIds.indexOf(knowngenes[i].foundGene.id)!==-1||(currentQueryGeneIds.indexOf(knowngenes[i].queryGene.id)!==-1))&&(knowngenes[i].posSupp>=filterStringency||knowngenes[i].negSupp>=filterStringency))){if(graphNodeIds.indexOf(knowngenes[i].foundGene.id)===-1){isQueryGene=false;if(currentQueryGeneIds.indexOf(knowngenes[i].foundGene.id)!==-1){isQueryGene=true;}
data.nodes.push({id:knowngenes[i].foundGene.officialSymbol,label:knowngenes[i].foundGene.officialSymbol,geneid:knowngenes[i].foundGene.id,queryflag:isQueryGene,officialName:Gemma.CytoscapePanelUtil.ttSubstring(knowngenes[i].foundGene.officialName),ncbiId:knowngenes[i].foundGene.ncbiId,nodeDegreeBin:Gemma.CytoscapePanelUtil.nodeDegreeBinMapper(knowngenes[i].foundGeneNodeDegree),nodeDegree:Gemma.CytoscapePanelUtil.decimalPlaceRounder(knowngenes[i].foundGeneNodeDegree)});graphNodeIds.push(knowngenes[i].foundGene.id);}
if(graphNodeIds.indexOf(knowngenes[i].queryGene.id)===-1){isQueryGene=false;if(currentQueryGeneIds.indexOf(knowngenes[i].queryGene.id)!==-1){isQueryGene=true;}
data.nodes.push({id:knowngenes[i].queryGene.officialSymbol,label:knowngenes[i].queryGene.officialSymbol,geneid:knowngenes[i].queryGene.id,queryflag:isQueryGene,officialName:Gemma.CytoscapePanelUtil.ttSubstring(knowngenes[i].queryGene.officialName),ncbiId:knowngenes[i].queryGene.ncbiId,nodeDegreeBin:Gemma.CytoscapePanelUtil.nodeDegreeBinMapper(knowngenes[i].queryGeneNodeDegree),nodeDegree:Gemma.CytoscapePanelUtil.decimalPlaceRounder(knowngenes[i].queryGeneNodeDegree)});graphNodeIds.push(knowngenes[i].queryGene.id);}
var support;var supportsign;if(knowngenes[i].posSupp>0&&knowngenes[i].negSupp>0){support=Math.max(knowngenes[i].posSupp,knowngenes[i].negSupp);supportsign="both";}else if(knowngenes[i].posSupp>0){support=knowngenes[i].posSupp;supportsign="positive";}else if(knowngenes[i].negSupp>0){support=knowngenes[i].negSupp;supportsign="negative";}
if(edgeSet.indexOf(knowngenes[i].foundGene.officialSymbol+"to"+knowngenes[i].queryGene.officialSymbol)==-1&&edgeSet.indexOf(knowngenes[i].queryGene.officialSymbol+"to"+knowngenes[i].foundGene.officialSymbol)==-1){data.edges.push({id:knowngenes[i].foundGene.officialSymbol+"to"+knowngenes[i].queryGene.officialSymbol,target:knowngenes[i].foundGene.officialSymbol,source:knowngenes[i].queryGene.officialSymbol,positivesupport:knowngenes[i].posSupp,negativesupport:knowngenes[i].negSupp,support:support,supportsign:supportsign,nodeDegree:Gemma.CytoscapePanelUtil.decimalPlaceRounder(Gemma.CytoscapePanelUtil.getMaxWithNull(knowngenes[i].queryGeneNodeDegree,knowngenes[i].foundGeneNodeDegree))});edgeSet.push(knowngenes[i].foundGene.officialSymbol+"to"+knowngenes[i].queryGene.officialSymbol);edgeSet.push(knowngenes[i].queryGene.officialSymbol+"to"+knowngenes[i].foundGene.officialSymbol);}}}
if(filterCurrentResults){var completeGraphEdges=[];for(i=0;i<kglength;i++){if(graphNodeIds.indexOf(knowngenes[i].foundGene.id)!==-1&&graphNodeIds.indexOf(knowngenes[i].queryGene.id)!==-1&&(knowngenes[i].posSupp>=filterStringency||knowngenes[i].negSupp>=filterStringency)&&currentQueryGeneIds.indexOf(knowngenes[i].foundGene.id)===-1&&currentQueryGeneIds.indexOf(knowngenes[i].queryGene.id)===-1){var support;var supportsign;if(knowngenes[i].posSupp>=filterStringency&&knowngenes[i].negSupp>=filterStringency){support=Math.max(knowngenes[i].posSupp,knowngenes[i].negSupp);supportsign="both";}else if(knowngenes[i].posSupp>=filterStringency){support=knowngenes[i].posSupp;supportsign="positive";}else if(knowngenes[i].negSupp>=filterStringency){support=knowngenes[i].negSupp;supportsign="negative";}
data.edges.push({id:knowngenes[i].foundGene.officialSymbol+"to"+knowngenes[i].queryGene.officialSymbol,target:knowngenes[i].foundGene.officialSymbol,source:knowngenes[i].queryGene.officialSymbol,positivesupport:knowngenes[i].posSupp,negativesupport:knowngenes[i].negSupp,support:support,supportsign:supportsign,nodeDegreeBin:Gemma.CytoscapePanelUtil.nodeDegreeBinMapper(Gemma.CytoscapePanelUtil.getMaxWithNull(knowngenes[i].queryGeneNodeDegree,knowngenes[i].foundGeneNodeDegree))});completeGraphEdges.push(knowngenes[i].foundGene.officialSymbol+"to"+knowngenes[i].queryGene.officialSymbol);completeGraphEdges.push(knowngenes[i].queryGene.officialSymbol+"to"+knowngenes[i].foundGene.officialSymbol);}}}
return data;},scaleFont:function(zoom){if(this.ready){if(this.initialZoomLevel){var newFontSize=Math.floor(this.initialFontSize/zoom);this.visualStyleRegular.nodes.labelFontSize=newFontSize;this.visualStyleNodeDegree.nodes.labelFontSize=newFontSize;if(this.nodeDegreeVisualStyleFlag){this.visualization.visualStyle(this.visualStyleNodeDegree);}else{this.visualization.visualStyle(this.visualStyleRegular);}}else{this.initialZoomLevel=zoom;this.initialFontSize=Gemma.CytoscapeSettings.labelFontSize;var newFontSize=Math.floor(this.initialFontSize/zoom);this.visualStyleRegular.nodes.labelFontSize=newFontSize;this.visualStyleNodeDegree.nodes.labelFontSize=newFontSize;if(this.nodeDegreeVisualStyleFlag){this.visualization.visualStyle(this.visualStyleNodeDegree);}else{this.visualization.visualStyle(this.visualStyleRegular);}}}},filter:function(stringency,trimmedNodeIds,doZoom){filterFunctionNodes=function(node){return trimmedNodeIds.indexOf(node.data.geneid)!==-1;};this.visualization.filter("nodes",filterFunctionNodes.createDelegate(this));filterFunctionEdges=function(edge){return edge.data.support>=stringency;};if(doZoom){this.visualization.zoomToFit();}
this.visualization.filter("edges",filterFunctionEdges.createDelegate(this));},select:function(nodeIds){this.visualization.select("nodes",nodeIds);},deselect:function(){this.visualization.deselect("nodes");this.visualization.deselect("edges");},extendSelectedNodesHandler:function(){if(this.ready){var selectedNodes=this.controller.restrictSelectedNodesByCurrentSettings(Gemma.CytoscapePanelUtil.getGeneIdArrayFromCytoscapeJSONNodeObjects(this.visualization.selected("nodes")));this.controller.extendNodes(selectedNodes);}},reRunSearchWithSelectedNodesHandler:function(){if(this.ready){var selectedNodes=this.controller.restrictSelectedNodesByCurrentSettings(Gemma.CytoscapePanelUtil.getGeneIdArrayFromCytoscapeJSONNodeObjects(this.visualization.selected("nodes")));this.controller.searchWithSelectedNodes(selectedNodes);}},exportPNG:function(){var htmlString='<img src="data:image/png;base64,'+this.visualization.png()+'"/>';var win=new Ext.Window({title:Gemma.HelpText.WidgetDefaults.CytoscapePanel.exportPNGWindowTitle,plain:true,html:htmlString,height:700,width:900,autoScroll:true});win.show();},exportGraphML:function(){var xmlString=this.visualization.graphml();var win=new Gemma.CytoscapeDownloadWindow({title:Gemma.HelpText.WidgetDefaults.CytoscapePanel.exportGraphMLWindowTitle});win.displayXML(xmlString);},exportXGMML:function(){var xmlString=this.visualization.xgmml();var win=new Gemma.CytoscapeDownloadWindow({title:Gemma.HelpText.WidgetDefaults.CytoscapePanel.exportXGMMLWindowTitle});win.displayXML(xmlString);},exportSIF:function(){var xmlString=this.visualization.sif();var win=new Gemma.CytoscapeDownloadWindow({title:Gemma.HelpText.WidgetDefaults.CytoscapePanel.exportSIFWindowTitle});win.displayXML(xmlString);},exportSVG:function(){var xmlString=this.visualization.svg();var win=new Gemma.CytoscapeDownloadWindow({title:Gemma.HelpText.WidgetDefaults.CytoscapePanel.exportSVGWindowTitle});win.displayXML(xmlString);},filterQueryGenesOnly:function(){if(this.ready){this.controller.filterQueryGenesOnly();}},nodeDegreeEmphasis:function(isNodeDegreeEmphasis){if(this.ready){if(!isNodeDegreeEmphasis){this.visualization.visualStyle(this.visualStyleRegular);this.nodeDegreeVisualStyleFlag=false;}else{this.visualization.visualStyle(this.visualStyleNodeDegree);this.nodeDegreeVisualStyleFlag=true;}
this.applyGeneListOverlayIfActive();}},refreshLayout:function(){if(this.ready){this.visualization.layout(this.currentLayout);}},compressGraph:function(isLayoutCompressed){if(this.ready){this.currentLayout=isLayoutCompressed?this.forceDirectedLayoutCompressed:this.defaultForceDirectedLayout;this.visualization.layout(this.currentLayout);}},toggleNodeLabels:function(isNodeLabelsVisible){if(this.ready){this.visualization.nodeLabelsVisible(isNodeLabelsVisible);}},updateStringency:function(stringency){if(stringency){this.currentDisplayStringency=stringency;this.controlBar.setStringency(stringency);}else{this.controlBar.setStringency(this.currentDisplayStringency);}},getStringency:function(){return this.currentDisplayStringency;},stringencyChange:function(stringency){if(this.ready){this.controller.stringencyChange(stringency);}},isQueryGenesOnly:function(){return this.controlBar.getComponent('queryGenesOnly').getValue();},setQueryGenesOnly:function(checked){this.controlBar.getComponent('queryGenesOnly').setValue(checked);},disableQueryGenesOnly:function(disabled){this.controlBar.getComponent('queryGenesOnly').setDisabled(disabled);},textBoxMatchHandler:function(text){this.controlBar.searchInCytoscapeBox.setValue(text);this.selectSearchMatches(text);},selectSearchMatchesFromControlBar:function(text){this.fireEvent('searchTextBoxMatch',text);this.selectSearchMatches(text);},applyGeneListOverlayIfActive:function(){if(this.controlBar.geneSetOverlayPicker){this.applyGeneListOverlay(this.controlBar.geneSetOverlayPicker.lastOverlayedIds);}},applyGeneListOverlay:function(geneIdsToOverlay){var bypass={nodes:{},edges:{}};var nodes=this.visualization.nodes();var nodesMatched=false;for(var i=0;i<nodes.length;i++){if(geneIdsToOverlay.indexOf(nodes[i].data.geneid)!==-1){if(!this.nodeDegreeVisualStyleFlag){bypass["nodes"][nodes[i].data.id]=Gemma.CytoscapeSettings.secondGeneListBypassOverlay;}else{var bypassToUse;switch(nodes[i].data.nodeDegreeBin){case Gemma.CytoscapeSettings.nodeDegreeColor.lightest.name:bypassToUse=Gemma.CytoscapeSettings.secondGeneListBypassOverlayNodeDegreeLightest;break;case Gemma.CytoscapeSettings.nodeDegreeColor.light.name:bypassToUse=Gemma.CytoscapeSettings.secondGeneListBypassOverlayNodeDegreeLight;break;case Gemma.CytoscapeSettings.nodeDegreeColor.moderate.name:bypassToUse=Gemma.CytoscapeSettings.secondGeneListBypassOverlayNodeDegreeModerate;break;case Gemma.CytoscapeSettings.nodeDegreeColor.dark.name:bypassToUse=Gemma.CytoscapeSettings.secondGeneListBypassOverlayNodeDegreeDark;break;case Gemma.CytoscapeSettings.nodeDegreeColor.darkest.name:bypassToUse=Gemma.CytoscapeSettings.secondGeneListBypassOverlayNodeDegreeDarkest;break;}
bypass["nodes"][nodes[i].data.id]=bypassToUse;}
nodesMatched=true;}}
this.visualization.visualStyleBypass(bypass);return nodesMatched;},getMatchedNodeCountForGeneListOverlay:function(geneIdsToOverlay){var nodeIds=this.controller.getVisibleNodeIds();var numNodesMatched=0;for(var i=0;i<nodeIds.length;i++){if(geneIdsToOverlay.indexOf(nodeIds[i])!==-1){numNodesMatched=numNodesMatched+1;}}
return numNodesMatched;},getMatchedNodeCountForGeneListOverlayWithHiddenGenes:function(geneIdsToOverlay){var nodes=this.visualization.nodes();var numNodesMatched=0;for(var i=0;i<nodes.length;i++){if(geneIdsToOverlay.indexOf(nodes[i].data.geneid)!==-1){numNodesMatched=numNodesMatched+1;}}
return numNodesMatched;},clearGeneListOverlay:function(){var bypass={nodes:{},edges:{}};this.visualization.visualStyleBypass(bypass);this.controlBar.geneSetOverlayPicker.lastOverlayedIds=[];},selectSearchMatches:function(text){this.deselect();if(text.length<2){return;}
var nodeIdsToSelect=this.controller.getMatchingGeneIdsByText(text);if(nodeIdsToSelect.length>0){this.select(nodeIdsToSelect);}},clearSearchBox:function(){this.controlBar.searchInCytoscapeBox.setValue('');}});Ext.namespace('Gemma.Metaheatmap');Gemma.Metaheatmap.HeatmapBox=Ext.extend(Ext.Panel,{initComponent:function(){Ext.apply(this,{border:false,autoScroll:true,isGeneOnTop:false,isShowPvalue:true,conditionTree:this.conditionTree,geneTree:this.geneTree,cells:this.cells,lastCellMouseIn:null,items:[{xtype:'box',autoEl:'canvas',ref:'boxCanvas'}]});Gemma.Metaheatmap.HeatmapBox.superclass.initComponent.apply(this,arguments);},initializeMe:function(){var ownerCt=this.findParentByType('Metaheatmap.VisualizationPanel');this.addEvents('cell_mouse_in','cell_mouse_out','cell_click');this.ctx=Gemma.Metaheatmap.Utils.getCanvasContext(this.boxCanvas.el.dom);this.boxCanvas.el.on('mousemove',function(e,t){if(this.lastCellMouseIn!==null){this.lastCellMouseIn.draw(this.ctx);this.fireEvent('cell_mouse_out',this.lastCellMouseIn,e,t);}
var x=e.getPageX()-Ext.get(t).getX();var y=e.getPageY()-Ext.get(t).getY();var cell=this.getCellByXY(x,y);if(cell&&!cell.isProbeMissing){document.body.style.cursor='pointer';}else{document.body.style.cursor='default';}
if(cell!==null){cell.highlight(this.ctx);this.fireEvent('cell_mouse_in',cell,e,t);}
this.lastCellMouseIn=cell;},this);this.boxCanvas.el.on('mouseout',function(e,t){document.body.style.cursor='default';if(this.lastCellMouseIn!==null){this.lastCellMouseIn.draw(this.ctx);this.fireEvent('cell_mouse_out',this.lastCellMouseIn,e,t);}
this.lastCellMouseIn=null;},this);this.body.on('scroll',function(e,t){var scroll=this.body.getScroll();ownerCt.variableWidthCol.boxTopLabels.body.scrollTo('left',scroll.left);ownerCt.fixedWidthCol.boxSideLabels.body.scrollTo('top',scroll.top);},this);this.boxCanvas.el.on('click',function(e,t){var x=e.getPageX()-Ext.get(t).getX();var y=e.getPageY()-Ext.get(t).getY();var cell=this.getCellByXY(x,y);if(cell&&!cell.isProbeMissing){this.fireEvent('cell_click',cell);}},this);this.amIinitialized=true;},resizeAndPosition:function(){if(!this.amIinitialized){this.initializeMe();}
var ownerCt=this.findParentByType('Metaheatmap.VisualizationPanel');var headerHeight=ownerCt.variableWidthCol.boxTopLabels.tree.display.size.height;var sideWidth=ownerCt.fixedWidthCol.boxSideLabels.tree.display.size.height;this.setWidth(ownerCt.getWidth()-sideWidth-20);this.setHeight(ownerCt.getHeight()-headerHeight-20);this.boxCanvas.setWidth(ownerCt.variableWidthCol.boxTopLabels.tree.display.size.width);this.boxCanvas.setHeight(ownerCt.fixedWidthCol.boxSideLabels.tree.display.size.width);this.ctx.canvas.width=ownerCt.variableWidthCol.boxTopLabels.tree.display.size.width;this.ctx.canvas.height=ownerCt.fixedWidthCol.boxSideLabels.tree.display.size.width;this.doLayout();},draw:function(){if(!this.amIinitialized){this.initializeMe();}
this.lastCellMouseIn=null;this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);for(var i=0;i<this.geneTree.items.length;i++){var gene=this.geneTree.items[i];for(var j=0;j<this.conditionTree.items.length;j++){var condition=this.conditionTree.items[j];this.drawCell(gene,condition);}}},getCellByXY:function(x,y){var gene,condition;if(this.isGeneOnTop){gene=this.geneTree.findItemByCoordinate(x);condition=this.conditionTree.findItemByCoordinate(y);}else{gene=this.geneTree.findItemByCoordinate(y);condition=this.conditionTree.findItemByCoordinate(x);}
if(!gene||!condition||gene===null||condition===null)return null;var pValue=1;var correctedPValue=1;var foldChange,isProbeMissing,numberOfProbes,numberOfProbesDiffExpressed;var isGeneOnTop=this.isGeneOnTop;var cell=this.cells.getCell(gene,condition);var colorScale=Gemma.Metaheatmap.Config.FoldChangeColorScale;var color;if(cell.logFoldChange>0){if(cell.logFoldChange>1){color=colorScale["3"];}else{color=colorScale["1"];}}else if(cell.logFoldChange<0){if(cell.logFoldChange<-1){color=colorScale["-3"];}else{color=colorScale["-1"];}}else{color='white';}
var transparency=0;if(cell.correctedPValue>Gemma.Constants.DifferentialExpressionQvalueThreshold){color='white';}
pValue=cell.pValue;correctedPValue=cell.correctedPValue;foldChange=cell.logFoldChange;isProbeMissing=cell.isProbeMissing;numberOfProbes=cell.numberOfProbes;numberOfProbesDiffExpressed=cell.numberOfProbesDiffExpressed;if(this.isShowPvalue){transparency=this.calculateVisualizationValueBasedOnPvalue(cell.correctedPValue)/10;}
if(cell.correctedPValue>Gemma.Constants.DifferentialExpressionQvalueThreshold){color='white';transparency=0;}
var x,y,width,height;if(this.isGeneOnTop){x=gene.display.pxlStart;y=condition.display.pxlStart;width=gene.display.pxlSize;height=condition.display.pxlSize;}else{x=condition.display.pxlStart;y=gene.display.pxlStart;width=condition.display.pxlSize;height=gene.display.pxlSize;}
var drawCellFunction=this.drawCell_;return{'gene':gene,'condition':condition,'pValue':pValue,'correctedPValue':correctedPValue,'foldChange':foldChange,'visualizationValue':color,'isProbeMissing':isProbeMissing,'numberOfProbes':numberOfProbes,'numberOfProbesDiffExpressed':numberOfProbesDiffExpressed,drawCell_:drawCellFunction,highlight:function(ctx){this.drawCell_(ctx,gene,condition,color,isProbeMissing,isGeneOnTop,transparency);if(width>4&&height>4){ctx.strokeStyle='black';ctx.strokeRect(x+0.5,y+0.5,width-1,height-1);}else{ctx.fillStyle='black';ctx.fillRect(x,y,width,height);}},draw:function(ctx){this.drawCell_(ctx,gene,condition,color,isProbeMissing,isGeneOnTop,transparency);}};},calculateVisualizationValueBasedOnPvalue:function(correctedPValue){var visualizationValue=0.5;if(correctedPValue<0.5&&correctedPValue>=0.25)
visualizationValue=0.5;else if(correctedPValue<0.25&&correctedPValue>=0.1)
visualizationValue=1;else if(correctedPValue<0.1&&correctedPValue>=0.05)
visualizationValue=1.1;else if(correctedPValue<0.05&&correctedPValue>=0.01)
visualizationValue=4;else if(correctedPValue<0.01&&correctedPValue>=0.005)
visualizationValue=7;else if(correctedPValue<0.005&&correctedPValue>=0.0001)
visualizationValue=10;else if(correctedPValue<0.0001&&correctedPValue>=0.00001)
visualizationValue=10;else if(correctedPValue<0.00001)visualizationValue=10;return visualizationValue;},drawCell:function(gene,condition){var cellData=this.cells.getCell(gene,condition);var transparency=0;var colorScale=Gemma.Metaheatmap.Config.FoldChangeColorScale;var color;if(cellData.logFoldChange>0){if(cellData.logFoldChange>1){color=colorScale["3"];}else{color=colorScale["1"];}}else if(cellData.logFoldChange<0){if(cellData.logFoldChange<-1){color=colorScale["-3"];}else{color=colorScale["-1"];}}else{color='white';}
if(this.isShowPvalue){transparency=this.calculateVisualizationValueBasedOnPvalue(cellData.correctedPValue)/10;}
if(cellData.correctedPValue>Gemma.Constants.DifferentialExpressionQvalueThreshold){color='white';transparency=0;}
this.drawCell_(this.ctx,gene,condition,color,cellData.isProbeMissing,this.isGeneOnTop,transparency);},drawCell_:function(ctx,gene,condition,color,isProbeMissing,isGeneOnTop,transparency){if(isProbeMissing){if(isGeneOnTop){ctx.fillStyle='white';ctx.fillRect(gene.display.pxlStart,condition.display.pxlStart,gene.display.pxlSize,condition.display.pxlSize);ctx.fillStyle="gray";ctx.fillRect(gene.display.pxlStart+gene.display.pxlSize/2-1,condition.display.pxlStart+condition.display.pxlSize/2-1,2,2);ctx.restore();}else{ctx.fillStyle='white';ctx.fillRect(condition.display.pxlStart,gene.display.pxlStart,condition.display.pxlSize,gene.display.pxlSize);}}else{ctx.fillStyle=color;if(isGeneOnTop){ctx.fillRect(gene.display.pxlStart,condition.display.pxlStart,gene.display.pxlSize,condition.display.pxlSize);}else{var innerBoxWidth=Math.floor(0.5*condition.display.pxlSize);var innerBoxHeight=Math.floor(0.5*gene.display.pxlSize);ctx.fillRect(condition.display.pxlStart,gene.display.pxlStart,condition.display.pxlSize,gene.display.pxlSize);if(transparency<=0.1){ctx.strokeStyle="rgba(0,0,0,0.1)";ctx.strokeRect(condition.display.pxlStart+condition.display.pxlSize/2-innerBoxWidth/2,gene.display.pxlStart+gene.display.pxlSize/2-innerBoxHeight/2,innerBoxWidth,innerBoxHeight);}else{ctx.fillStyle="rgba(0,0,0,"+transparency+")";ctx.fillRect(condition.display.pxlStart+condition.display.pxlSize/2-innerBoxWidth/2,gene.display.pxlStart+gene.display.pxlSize/2-innerBoxHeight/2,innerBoxWidth,innerBoxHeight);}}}},drawMissingCell_:function(ctx,gene,condition,isGeneOnTop){if(isGeneOnTop){ctx.fillStyle='white';ctx.fillRect(gene.display.pxlStart,condition.display.pxlStart,gene.display.pxlSize,condition.display.pxlSize);ctx.fillStyle="gray";ctx.fillRect(gene.display.pxlStart+gene.display.pxlSize/2-1,condition.display.pxlStart+condition.display.pxlSize/2-1,2,2);ctx.restore();}else{ctx.fillStyle='white';ctx.fillRect(condition.display.pxlStart,gene.display.pxlStart,condition.display.pxlSize,gene.display.pxlSize);var innerBoxWidth=Math.floor(0.6*condition.display.pxlSize);var innerBoxHeight=Math.floor(0.6*gene.display.pxlSize);ctx.save();ctx.strokeStyle="gray";ctx.translate(condition.display.pxlStart,gene.display.pxlStart);ctx.beginPath();ctx.moveTo(condition.display.pxlSize/2-innerBoxWidth/2,gene.display.pxlSize/2-innerBoxHeight/2);ctx.lineTo(condition.display.pxlSize/2+innerBoxWidth/2,gene.display.pxlSize/2+innerBoxHeight/2);ctx.moveTo(condition.display.pxlSize/2+innerBoxWidth/2,gene.display.pxlSize/2-innerBoxHeight/2);ctx.lineTo(condition.display.pxlSize/2-innerBoxWidth/2,gene.display.pxlSize/2+innerBoxHeight/2);ctx.stroke();ctx.restore();}},onRender:function(){Gemma.Metaheatmap.HeatmapBox.superclass.onRender.apply(this,arguments);this.setSize(this.heatmapMaxWidth,this.heatmapMaxHeight);this.amIinitialized=false;}});Ext.reg('Metaheatmap.HeatmapBox',Gemma.Metaheatmap.HeatmapBox);Ext.namespace('Gemma.Metaheatmap');Gemma.Metaheatmap.VisualizationPanel=Ext.extend(Ext.Panel,{layout:'hbox',layoutConfig:{align:'stretch',pack:'start'},frame:false,border:false,defaults:{border:false},initComponent:function(){Ext.apply(this,{isLegendShown:false,geneTree:this.geneTree,conditionTree:this.conditionTree,cells:this.cells,items:[{xtype:'Metaheatmap.HoverWindow',ref:'hoverWindow'},{xtype:'panel',name:'fixedWidthCol',ref:'fixedWidthCol',flex:0,layout:'vbox',layoutConfig:{align:'stretch',pack:'start'},defaults:{border:false},items:[{xtype:'panel',ref:'pnlControlAndLabels',layout:'border',autoScroll:true,border:false,items:[{ref:'pnlMiniControl',xtype:'panel',region:'center',defaults:{style:'margin-left:10px;margin-top:5px;'},border:false,width:85,height:100,items:[{xtype:'label',text:'Column zoom',},{xtype:'slider',ref:'sldHorizontalZoom',width:80,height:20,value:Gemma.Metaheatmap.defaultConditionZoom,increment:1,minValue:2,maxValue:15,listeners:{changecomplete:function(slider,newValue,thumb){this.redraw();},scope:this}},{xtype:'label',text:'Row zoom',},{xtype:'slider',ref:'sldVerticalZoom',width:80,height:20,value:Gemma.Metaheatmap.defaultGeneZoom,increment:1,minValue:2,maxValue:15,listeners:{changecomplete:function(slider,newValue,thumb){this.redraw();},scope:this}},{xtype:'button',text:'Dock popup',disabled:false,hidden:false,enableToggle:true,width:95,toggleHandler:function(btn,toggle){if(toggle){this.hoverWindow.isDocked=true;this.hoverWindow.setTitle('Docked popup: click & drag to move');btn.setText("Undock popup");}else{this.hoverWindow.isDocked=false;this.hoverWindow.setTitle('');btn.setText("Dock popup");}},scope:this},{xtype:'button',ref:'showFoldChangeToggle',text:'Hide q-value',width:95,y:100,handler:function(btn,e){this.variableWidthCol.boxHeatmap.isShowPvalue=!this.variableWidthCol.boxHeatmap.isShowPvalue;if(this.variableWidthCol.boxHeatmap.isShowPvalue){btn.setText("Hide q-value");}else{btn.setText("Show q-value");}
this.variableWidthCol.boxHeatmap.draw();},scope:this},{xtype:'button',text:'Flip axes',disabled:true,hidden:true,width:80,handler:function(btn,e){this.flipLabels();this.redraw();},scope:this}]},{autoEl:'canvas',ref:'metaValuesSideLabels',xtype:'box',region:'east',border:false,width:15},{autoEl:'canvas',xtype:'box',region:'south',ref:'metaValuesTopLabels',border:false,height:15}]},{xtype:'Metaheatmap.LabelBox',ref:'boxSideLabels',border:false,orientation:'vertical',tree:this.geneTree,drawItemLabel_:this.drawGeneLabel,onClick:this.onClickGeneLabel}]},{xtype:'panel',name:'variableWidthCol',ref:'variableWidthCol',flex:1,layout:'vbox',layoutConfig:{align:'stretch',pack:'start'},defaults:{border:false},items:[{xtype:'Metaheatmap.LabelBox',ref:'boxTopLabels',border:false,orientation:'horizontal',tree:this.conditionTree,drawItemLabel_:this.drawConditionLabel,onClick:this.onClickConditionLabel},{xtype:'Metaheatmap.HeatmapBox',ref:'boxHeatmap',border:false,geneTree:this.geneTree,conditionTree:this.conditionTree,cells:this.cells},{xtype:'Metaheatmap.ColorLegend',ref:'colorLegend',x:200,y:0,title:'Fold change & q-value',cellSize:14,isShown:false,foldChangeLabels:["Down, >2 fold","Down, <2 fold","Up, <2 fold","Up, >2 fold"],foldChangeValues:[-3,-1,1,3],discreteColorRangeObject:Gemma.Metaheatmap.Config.contrastsColourRange,pValueLabels:["No Data","Not Significant","0.05~0.01","0.01~0.005","< 0.005"],pValueValues:[0,0,4,7,10],fontSize:12}]}]});Gemma.Metaheatmap.VisualizationPanel.superclass.initComponent.apply(this,arguments);},setGeneTree:function(tree){this.geneTree=tree;this.variableWidthCol.boxHeatmap.geneTree=tree;if(this.isGeneOnTop){this.variableWidthCol.boxTopLabels.tree=tree;}else{this.fixedWidthCol.boxSideLabels.tree=tree;}},setConditionTree:function(tree){this.conditionTree=tree;this.variableWidthCol.boxHeatmap.conditionTree=tree;if(this.isGeneOnTop){this.fixedWidthCol.boxSideLabels.tree=tree;}else{this.variableWidthCol.boxTopLabels.tree=tree;}},flipLabels:function(){if(!this.variableWidthCol.boxHeatmap.isGeneOnTop){this.variableWidthCol.boxHeatmap.isGeneOnTop=true;this.fixedWidthCol.boxSideLabels.tree=this.conditionTree;this.fixedWidthCol.boxSideLabels.drawItemLabel_=this.drawConditionLabel;this.fixedWidthCol.boxSideLabels.onClick=this.onClickConditionLabel;this.variableWidthCol.boxTopLabels.tree=this.geneTree;this.variableWidthCol.boxTopLabels.drawItemLabel_=this.drawGeneLabel;this.variableWidthCol.boxTopLabels.onClick=this.onClickGeneLabel;}else{this.variableWidthCol.boxHeatmap.isGeneOnTop=false;this.fixedWidthCol.boxSideLabels.tree=this.geneTree;this.fixedWidthCol.boxSideLabels.drawItemLabel_=this.drawGeneLabel;this.fixedWidthCol.boxSideLabels.onClick=this.onClickGeneLabel;this.variableWidthCol.boxTopLabels.tree=this.conditionTree;this.variableWidthCol.boxTopLabels.drawItemLabel_=this.drawConditionLabel;this.variableWidthCol.boxTopLabels.onClick=this.onClickConditionLabel;}
this.updatePnlMiniControlSize();},updatePnlMiniControlSize:function(){var topPadding=0;this.fixedWidthCol.pnlControlAndLabels.setHeight(Math.max(140,this.variableWidthCol.boxTopLabels.getHeight())+topPadding);var metaPvalueLabel=this.fixedWidthCol.pnlControlAndLabels.metaValuesSideLabels;var enrichmentLabel=this.fixedWidthCol.pnlControlAndLabels.metaValuesTopLabels;metaPvalueLabel.ctx=Gemma.Metaheatmap.Utils.getCanvasContext(metaPvalueLabel.el.dom);CanvasTextFunctions.enable(metaPvalueLabel.ctx);enrichmentLabel.ctx=Gemma.Metaheatmap.Utils.getCanvasContext(enrichmentLabel.el.dom);CanvasTextFunctions.enable(enrichmentLabel.ctx);metaPvalueLabel.ctx.canvas.width=metaPvalueLabel.getWidth();metaPvalueLabel.ctx.canvas.height=metaPvalueLabel.getHeight();metaPvalueLabel.ctx.clearRect(0,0,metaPvalueLabel.ctx.canvas.width,metaPvalueLabel.ctx.canvas.height);enrichmentLabel.ctx.canvas.width=enrichmentLabel.getWidth();enrichmentLabel.ctx.canvas.height=enrichmentLabel.getHeight();enrichmentLabel.ctx.clearRect(0,0,enrichmentLabel.ctx.canvas.width,enrichmentLabel.ctx.canvas.height);var x=enrichmentLabel.getWidth()-93;var y=10;enrichmentLabel.ctx.strokeStyle='black';enrichmentLabel.ctx.drawText('',12,x,y,"enrichment");x=10;y=metaPvalueLabel.getHeight()-3;metaPvalueLabel.ctx.strokeStyle='black';metaPvalueLabel.ctx.drawRotatedText(x,y,270,12,'black',"meta p-value");},redraw:function(wasHeatmapChanged){this.hoverWindow.hide();this.variableWidthCol.colorLegend.hide();if(wasHeatmapChanged){this.updateVisibleScores();}
if(this.variableWidthCol.boxHeatmap.isGeneOnTop){this.conditionTree.applyZoom(this.fixedWidthCol.pnlControlAndLabels.pnlMiniControl.sldVerticalZoom.getValue());this.geneTree.applyZoom(this.fixedWidthCol.pnlControlAndLabels.pnlMiniControl.sldHorizontalZoom.getValue());}else{this.conditionTree.applyZoom(this.fixedWidthCol.pnlControlAndLabels.pnlMiniControl.sldHorizontalZoom.getValue());this.geneTree.applyZoom(this.fixedWidthCol.pnlControlAndLabels.pnlMiniControl.sldVerticalZoom.getValue());}
this.fixedWidthCol.boxSideLabels.resizeAndPosition();this.variableWidthCol.boxTopLabels.resizeAndPosition();this.variableWidthCol.boxHeatmap.resizeAndPosition();this.updatePnlMiniControlSize();this.doLayout();this.draw();if(this.hoverWindow.isDocked){this.hoverWindow.show();}
if(this.variableWidthCol.colorLegend.isShown){this.variableWidthCol.colorLegend.show();}},draw:function(){this.variableWidthCol.boxHeatmap.draw();this.fixedWidthCol.boxSideLabels.draw();this.variableWidthCol.boxTopLabels.draw();},onClickGeneLabel:function(label,e){if(e.ctrlKey===true){if(label.item.isSelected){label.item.isSelected=false;}else{label.item.isSelected=true;}
this.draw();}else{Gemma.MetaVisualizationPopups.makeGeneInfoWindow(label.item.name,label.item.id);}},onClickConditionLabel:function(label,e){if(e.ctrlKey===true){if(label.item.isSelected){label.item.isSelected=false;}else{label.item.isSelected=true;}
this.draw();}else{Gemma.MetaVisualizationPopups.makeDatasetInfoWindow(label.item.datasetName,label.item.datasetShortName,label.item.datasetId);}},downloadImage:function(){var ctxMain=this.variableWidthCol.boxHeatmap.ctx;var ctxSide=this.fixedWidthCol.boxSideLabels.ctx;var ctxTop=this.variableWidthCol.boxTopLabels.ctx;var canvas=document.createElement('canvas');canvas.width=ctxMain.canvas.width+1+ctxSide.canvas.width;canvas.height=ctxMain.canvas.height+1+ctxTop.canvas.height;var ctx=canvas.getContext('2d');ctx.fillStyle="white";ctx.fillRect(0,0,canvas.width,canvas.height);var topImage=ctxTop.getImageData(0,0,ctxTop.canvas.width,ctxTop.canvas.height);var sideImage=ctxSide.getImageData(0,0,ctxSide.canvas.width,ctxSide.canvas.height);var mainImage=ctxMain.getImageData(0,0,ctxMain.canvas.width,ctxMain.canvas.height);ctx.drawImage(ctxTop.canvas,ctxSide.canvas.width+1,0);ctx.drawImage(ctxSide.canvas,0,ctxTop.canvas.height+1);ctx.drawImage(ctxMain.canvas,ctxSide.canvas.width+1,ctxTop.canvas.height+1);var image_url=canvas.toDataURL("image/png");var win=new Ext.Window({title:'Right-click the image and save the image as file.',html:'<img src="'+image_url+'" />',height:700,widht:900});win.show();},drawGeneLabel:function(gene,size,orientation,backgroundColor){gene.miniPieValue=null;var maxSize={'width':this.getWidth(),'height':this.getHeight()};gene.display.label={};gene.display.label.drawFn=Gemma.Metaheatmap.ConditionLabel.constructDrawLabelFunction(this.ctx,gene,gene.name,orientation,size,maxSize,backgroundColor);gene.display.label.drawFn(false);},drawConditionLabel:function(condition,size,orientation,backgroundColor){condition.miniPieValue=(condition.numberOfProbesOnArray===0)?-1:360.0*condition.numberDiffExpressedProbes/condition.numberOfProbesOnArray;condition.miniBarValue=(condition.numberOfProbesOnArray===0)?0:9.0*(condition.numberDiffExpressedProbes/condition.numberOfProbesOnArray);var maxSize={'width':this.getWidth(),'height':this.getHeight()};condition.display.label={};condition.display.label.drawFn=Gemma.Metaheatmap.ConditionLabel.constructDrawLabelFunction(this.ctx,condition,condition.contrastFactorValue,orientation,size,maxSize,backgroundColor);condition.display.label.drawFn(false);},updateVisibleScores:function(){var i,j;for(i=0;i<this.conditionTree.items.length;i++){var condition=this.conditionTree.items[i];condition.experimentSpecificity=condition.numberDiffExpressedProbes/condition.numberOfProbesOnArray;var numProbesMissing=0;var numProbesInSet=0;var numProbesOverThresholdInSet=0;var numGenesInSet=0;var numGenesOverThresholdInSet=0;for(j=0;j<this.geneTree.items.length;j++){var gene=this.geneTree.items[j];var cell=this.cells.getCell(gene,condition);if(cell!==null){if(cell.isProbeMissing){numProbesMissing++;}else{if(cell.correctedPValue!==null){numGenesInSet++;numProbesInSet+=cell.numberOfProbes;if(cell.correctedPValue<Gemma.Constants.DifferentialExpressionQvalueThreshold){numGenesOverThresholdInSet++;numProbesOverThresholdInSet+=cell.numberOfProbesDiffExpressed;}}}}}
if(Gemma.Metaheatmap.Config.USE_GENE_COUNTS_FOR_ENRICHMENT){condition.ora=GemmaStatUtils.computeOraPvalue(condition.numberOfGenesTested,numGenesInSet,numGenesOverThresholdInSet,condition.numberOfGenesDiffExpressed);condition.numInSet=numGenesInSet;condition.numDiffExpressed=numGenesOverThresholdInSet;}else{condition.ora=GemmaStatUtils.computeOraPvalue(condition.numberOfProbesOnArray,numProbesInSet,numProbesOverThresholdInSet,condition.numberDiffExpressedProbes);condition.numInSet=numProbesInSet;condition.numDiffExpressed=numProbesOverThresholdInSet;}
condition.oraDisplayValue=this.calculateBarChartValueBasedOnPvalue(condition.ora);condition.percentProbesMissing=numProbesMissing/this.geneTree.items.length;}
for(j=0;j<this.geneTree.items.length;j++){gene=this.geneTree.items[j];var pValues=[];var alreadySeenFactor=[];numProbesMissing=0;for(i=0;i<this.conditionTree.items.length;i++){condition=this.conditionTree.items[i];cell=this.cells.getCell(gene,condition);if(cell!==null){if(cell.isProbeMissing){numProbesMissing++;}else{if(typeof alreadySeenFactor[condition.factorId]==="undefined"){pValues.push(cell.pValue);alreadySeenFactor[condition.factorId]=true;}}}}
gene.metaPvalue=GemmaStatUtils.computeMetaPvalue(pValues);gene.metaPvalueCount=pValues.length;gene.percentProbesMissing=numProbesMissing/this.conditionTree.items.length;gene.metaPvalueBarChart=this.calculateBarChartValueBasedOnPvalue(gene.metaPvalue);}},calculateBarChartValueBasedOnPvalue:function(correctedPValue){var visualizationValue=0;if(correctedPValue<0.5&&correctedPValue>=0.25)
visualizationValue=1;else if(correctedPValue<0.25&&correctedPValue>=0.1)
visualizationValue=2;else if(correctedPValue<0.1&&correctedPValue>=0.05)
visualizationValue=3;else if(correctedPValue<0.05&&correctedPValue>=0.01)
visualizationValue=4;else if(correctedPValue<0.01&&correctedPValue>=0.001)
visualizationValue=5;else if(correctedPValue<0.001&&correctedPValue>=0.0001)
visualizationValue=6;else if(correctedPValue<0.0001&&correctedPValue>=0.00001)
visualizationValue=7;else if(correctedPValue<0.00001)visualizationValue=8;return visualizationValue;},constructHoverWindowContent:function(type,item){var msg;if(type==='gene'){msg={type:'gene',geneSymbol:item.name,geneId:item.id,geneFullName:item.fullName,geneMetaPvalue:(item.metaPvalue==2.0)?"NA":item.metaPvalue,metaPvalueCount:item.metaPvalueCount};}else if(type==='condition'){if(Gemma.Metaheatmap.Config.USE_GENE_COUNTS_FOR_ENRICHMENT){item.totalDiffExpressed=item.numberOfGenesDiffExpressed;item.totalOnArray=item.numberOfGenesTested;}else{item.totalDiffExpressed=item.numberDiffExpressedProbes;item.totalOnArray=item.numberOfProbesOnArray;}
msg={type:'condition',factorCategory:item.factorCategory,factorName:item.factorName,factorDescription:item.factorDescription,datasetName:item.datasetName,datasetShortName:item.datasetShortName,contrastFactorValue:item.contrastFactorValue,baselineFactorValue:item.baselineFactorValue,numDiffExpressed:item.numDiffExpressed,numInSet:item.numInSet,ora:item.ora,specificityPercent:Gemma.Metaheatmap.Utils.formatPercent(item.totalDiffExpressed,item.totalOnArray,2),totalDiffExpressed:item.totalDiffExpressed,totalOnArray:item.totalOnArray};}else{msg={type:'cell',factorCategory:item.condition.factorCategory,factorName:item.condition.factorName,factorDescription:item.condition.factorDescription,datasetName:item.condition.datasetName,datasetShortName:item.condition.datasetShortName,contrastFactorValue:item.condition.contrastFactorValue,baselineFactorValue:item.condition.baselineFactorValue,geneSymbol:item.gene.name,geneId:item.gene.id,geneFullName:item.gene.fullName,numberOfProbes:item.numberOfProbes,numberOfProbesDiffExpressed:item.numberOfProbesDiffExpressed,pvalue:(item.isProbeMissing)?'No data':item.pValue,correctedPValue:(item.isProbeMissing)?'No data':item.correctedPValue,foldChange:(item.isProbeMissing||item.foldChange==0)?'No data':Math.ceil(item.foldChange*100)/100};}
return msg;},getSelectedGeneIds:function(){var geneIds=[];for(var i=0;i<this.geneTree.items.length;i++){var gene=this.geneTree.items[i];if(gene.isSelected){geneIds.push(gene.id);}}
return geneIds;},getSelectedDatasetIds:function(){var dsIds=[];for(var i=0;i<this.conditionTree.items.length;i++){var condition=this.conditionTree.items[i];if(condition.isSelected){dsIds.push(condition.datasetId);}}
return dsIds;},afterRender:function(){Gemma.Metaheatmap.VisualizationPanel.superclass.afterRender.apply(this,arguments);this.mask=new Ext.LoadMask(this.getEl(),{msg:"Filtering..."});this.hoverWindow.isDocked=false;this.hoverWindow.hide();},onRender:function(){Gemma.Metaheatmap.VisualizationPanel.superclass.onRender.apply(this,arguments);this.addEvents('gene_zoom_change','condition_zoom_change');this.variableWidthCol.boxTopLabels.on('label_mouse_in',function(label,e,t){var labelType=this.variableWidthCol.boxHeatmap.isGeneOnTop?'gene':'condition';var msg=this.constructHoverWindowContent(labelType,label.item);this.hoverWindow.show();if(!this.hoverWindow.isDocked){this.hoverWindow.setPagePosition(e.getPageX()+20,e.getPageY()+20);}
this.hoverWindow.update(msg);},this);this.fixedWidthCol.boxSideLabels.on('label_mouse_in',function(label,e,t){var labelType=this.variableWidthCol.boxHeatmap.isGeneOnTop?'condition':'gene';var msg=this.constructHoverWindowContent(labelType,label.item);this.hoverWindow.show();if(!this.hoverWindow.isDocked){this.hoverWindow.setPagePosition(e.getPageX()+20,e.getPageY()+20);}
this.hoverWindow.update(msg);},this);this.variableWidthCol.boxTopLabels.on('label_mouse_out',function(label,e,t){if(this.hoverWindow&&!this.hoverWindow.isDocked){this.hoverWindow.hide();}},this);this.fixedWidthCol.boxSideLabels.on('label_mouse_out',function(label,e,t){if(this.hoverWindow&&!this.hoverWindow.isDocked){this.hoverWindow.hide();}},this);this.variableWidthCol.boxHeatmap.on('cell_mouse_in',function(cell,e,t){var msg=this.constructHoverWindowContent('cell',cell);this.hoverWindow.show();if(!this.hoverWindow.isDocked){this.hoverWindow.setPagePosition(e.getPageX()+20,e.getPageY()+20);}
this.hoverWindow.update(msg);cell.gene.display.label.drawFn(true);cell.condition.display.label.drawFn(true);},this);this.variableWidthCol.boxHeatmap.on('cell_mouse_out',function(cell,e,t){cell.gene.display.label.drawFn(false);cell.condition.display.label.drawFn(false);if(!this.hoverWindow.isDocked){this.hoverWindow.hide();}},this);this.variableWidthCol.boxHeatmap.on('cell_click',function(cell){if(cell!==null){var expressionDetailsWindow=new Gemma.VisualizationWithThumbsWindow({title:'Gene Expression',thumbnails:false,closableAction:'hide',downloadLink:String.format("/Gemma/dedv/downloadDEDV.html?ee={0}&g={1}",cell.condition.datasetId,cell.gene.id)});expressionDetailsWindow.show({params:[[cell.condition.datasetId],[cell.gene.id]]});var xy=expressionDetailsWindow.getPosition();expressionDetailsWindow.setPosition(xy[0]+Gemma.MetaVisualizationPopups.cascadeLayoutCounter*20,xy[1]+Gemma.MetaVisualizationPopups.cascadeLayoutCounter*20);Gemma.MetaVisualizationPopups.cascadeLayoutCounter++;if(Gemma.MetaVisualizationPopups.cascadeLayoutCounter>4){Gemma.MetaVisualizationPopups.cascadeLayoutCounter=0;}}});}});Ext.reg('Metaheatmap.VisualizationPanel',Gemma.Metaheatmap.VisualizationPanel);Ext.namespace('GemmaStatUtils');Ext.namespace('GemmaStatUtils.Constants');GemmaStatUtils.Constants.MACHEP=1.11022302462515654042E-16;GemmaStatUtils.Constants.MAXLOG=7.09782712893383996732E2;GemmaStatUtils.Constants.MINLOG=-7.451332191019412076235E2;GemmaStatUtils.Constants.MAXGAM=171.624376956302725;GemmaStatUtils.Constants.SQTPI=2.50662827463100050242E0;GemmaStatUtils.Constants.SQRTH=7.07106781186547524401E-1;GemmaStatUtils.Constants.LOGPI=1.14472988584940017414;GemmaStatUtils.Constants.BIG=4.503599627370496e15;GemmaStatUtils.Constants.BIG_INVERSE=2.22044604925031308085e-16;GemmaStatUtils.computeMetaPvalue=function(pValues){if(pValues.length==0){return 2.0;}
var metaPvalue=0.0;for(var i=0;i<pValues.length;i++){metaPvalue+=Math.log(pValues[i]);}
metaPvalue*=-2.0;return GemmaStatUtils.chiSquareComplemented(2.0*pValues.length,metaPvalue);};GemmaStatUtils.chiSquareComplemented=function(v,x){if(x<0.0||v<1.0){return 0.0;}
return GemmaStatUtils.incompleteGammaComplement(v/2.0,x/2.0);};GemmaStatUtils.incompleteGammaComplement=function(alpha,x){if(x<=0||alpha<=0){return 1.0;}
if(x<1.0||x<alpha){return 1.0-GemmaStatUtils.incompleteGamma(alpha,x);}
var ax=alpha*Math.log(x)-x-GemmaStatUtils.logGamma(alpha);if(ax<-GemmaStatUtils.Constants.MAXLOG){return 0.0;}
ax=Math.exp(ax);var y=1.0-alpha;var z=x+y+1.0;var c=0.0;var pkm2=1.0;var qkm2=x;var pkm1=x+1.0;var qkm1=z*x;var ans=pkm1/qkm1;var t;do{c+=1.0;y+=1.0;z+=2.0;var yc=y*c;var pk=pkm1*z-pkm2*yc;var qk=qkm1*z-qkm2*yc;if(qk!==0){var r=pk/qk;t=Math.abs((ans-r)/r);ans=r;}else{t=1.0;}
pkm2=pkm1;pkm1=pk;qkm2=qkm1;qkm1=qk;if(Math.abs(pk)>GemmaStatUtils.Constants.BIG){pkm2*=GemmaStatUtils.Constants.BIG_INVERSE;pkm1*=GemmaStatUtils.Constants.BIG_INVERSE;qkm2*=GemmaStatUtils.Constants.BIG_INVERSE;qkm1*=GemmaStatUtils.Constants.BIG_INVERSE;}}while(t>GemmaStatUtils.Constants.MACHEP);return ans*ax;};GemmaStatUtils.logGamma=function(x){var p;var q;var z;var aCoefficient=[8.11614167470508450300E-4,-5.95061904284301438324E-4,7.93650340457716943945E-4,-2.77777777730099687205E-3,8.33333333333331927722E-2];var bCoefficient=[-1.37825152569120859100E3,-3.88016315134637840924E4,-3.31612992738871184744E5,-1.16237097492762307383E6,-1.72173700820839662146E6,-8.53555664245765465627E5];var cCoefficient=[-3.51815701436523470549E2,-1.70642106651881159223E4,-2.20528590553854454839E5,-1.13933444367982507207E6,-2.53252307177582951285E6,-2.01889141433532773231E6];if(x<-34.0){q=-x;var w=GemmaStatUtils.logGamma(q);p=Math.floor(q);if(p===q){throw"ArithmeticException::Overflow";}
z=q-p;if(z>0.5){p+=1.0;z=p-q;}
z=q*Math.sin(Math.PI*z);if(z===0.0){throw"ArithmeticException::Overflow";}
z=GemmaStatUtils.Constants.LOGPI-Math.log(z)-w;return z;}
if(x<13.0){z=1.0;while(x>=3.0){x-=1.0;z*=x;}
while(x<2.0){if(x===0.0){throw"ArithmeticException::Overflow";}
z/=x;x+=1.0;}
if(z<0.0){z=-z;}
if(x==2.0){return Math.log(z);}
x-=2.0;p=x*GemmaStatUtils.polevl(x,bCoefficient,5)/GemmaStatUtils.p1evl(x,cCoefficient,6);return Math.log(z)+p;}
if(x>2.556348e305){throw"ArithmeticException::Overflow";}
q=(x-0.5)*Math.log(x)-x+0.91893853320467274178;if(x>1.0e8){return q;}
p=1.0/(x*x);if(x>=1000.0){q+=((7.9365079365079365079365e-4*p-2.7777777777777777777778e-3)*p+0.0833333333333333333333)/x;}else{q+=GemmaStatUtils.polevl(p,aCoefficient,4)/x;}
return q;};GemmaStatUtils.incompleteGamma=function(alpha,x){if(x<=0||alpha<=0){return 0.0;}
if(x>1.0&&x>alpha){return 1.0-GemmaStatUtils.incompleteGammaComplement(alpha,x);}
var ax=alpha*Math.log(x)-x-GemmaStatUtils.logGamma(alpha);if(ax<-GemmaStatUtils.Constants.MAXLOG){return 0.0;}
ax=Math.exp(ax);var r=alpha;var c=1.0;var ans=1.0;do{r+=1.0;c*=x/r;ans+=c;}
while(c/ans>GemmaStatUtils.Constants.MACHEP);return ans*ax/alpha;};GemmaStatUtils.polevl=function(x,coef,N){var ans=coef[0];for(var i=1;i<=N;i++){ans=ans*x+coef[i];}
return ans;};GemmaStatUtils.computeOraPvalue=function(numGenesTotal,numGenesInSet,numOverThresholdInSet,numOverThresholdTotal){var oraPvalue=Number.NaN;if(numOverThresholdInSet>0){oraPvalue=0.0;for(var i=numOverThresholdInSet;i<=Math.min(numOverThresholdTotal,numGenesInSet);i++){oraPvalue+=GemmaStatUtils.dhyper(i,numGenesInSet,numGenesTotal-numGenesInSet,numOverThresholdTotal);}
if(isNaN(oraPvalue)){var pos_prob=numGenesInSet/numGenesTotal;oraPvalue=0.0;for(var i=numOverThresholdInSet;i<=Math.min(numOverThresholdTotal,numGenesInSet);i++){oraPvalue+=GemmaStatUtils.dbinom(i,numOverThresholdTotal,pos_prob);}}}else{oraPvalue=1.0;}
return oraPvalue;};GemmaStatUtils.dhyper=function(x,r,b,n){var p,q,p1,p2,p3;if(r<0||b<0||n<0||n>r+b){throw"IllegalArgument";}
if(x<0){return 0.0;}
if(n<x||r<x||n-x>b){return 0;}
if(n===0){return((x===0)?1:0);}
p=n/(r+b);q=(r+b-n)/(r+b);p1=GemmaStatUtils.dbinom_raw(x,r,p,q);p2=GemmaStatUtils.dbinom_raw(n-x,b,p,q);p3=GemmaStatUtils.dbinom_raw(n,r+b,p,q);return p1*p2/p3;};GemmaStatUtils.dbinom_raw=function(x,n,p,q){var f,lc;if(p===0){return((x===0)?1:0);}
if(q===0){return((x===n)?1:0);}
if(x===0){if(n===0){return 1;}
lc=(p<0.1)?-GemmaStatUtils.bd0(n,n*q)-n*p:n*Math.log(q);return(Math.exp(lc));}
if(x==n){lc=(q<0.1)?-GemmaStatUtils.bd0(n,n*p)-n*q:n*Math.log(p);return(Math.exp(lc));}
if(x<0||x>n){return(0);}
lc=GemmaStatUtils.stirlerr(n)-GemmaStatUtils.stirlerr(x)-GemmaStatUtils.stirlerr(n-x)-GemmaStatUtils.bd0(x,n*p)-GemmaStatUtils.bd0(n-x,n*q);f=(2*Math.PI*x*(n-x))/n;return Math.exp(lc)/Math.sqrt(f);};GemmaStatUtils.stirlerr=function(n){var S0=0.083333333333333333333;var S1=0.00277777777777777777778;var S2=0.00079365079365079365079365;var S3=0.000595238095238095238095238;var S4=0.0008417508417508417508417508;sferr_halves=[0.0,0.1534264097200273452913848,0.0810614667953272582196702,0.0548141210519176538961390,0.0413406959554092940938221,0.03316287351993628748511048,0.02767792568499833914878929,0.02374616365629749597132920,0.02079067210376509311152277,0.01848845053267318523077934,0.01664469118982119216319487,0.01513497322191737887351255,0.01387612882307074799874573,0.01281046524292022692424986,0.01189670994589177009505572,0.01110455975820691732662991,0.010411265261972096497478567,0.009799416126158803298389475,0.009255462182712732917728637,0.008768700134139385462952823,0.008330563433362871256469318,0.007934114564314020547248100,0.007573675487951840794972024,0.007244554301320383179543912,0.006942840107209529865664152,0.006665247032707682442354394,0.006408994188004207068439631,0.006171712263039457647532867,0.005951370112758847735624416,0.005746216513010115682023589,0.005554733551962801371038690];var nn;if(n<=15.0){nn=n+n;if(nn==Math.round(nn)){return(sferr_halves[Math.round(nn)]);}
return(GemmaStatUtils.logGamma(n+1.0)-(n+0.5)*Math.log(n)+n-GemmaStatUtils.Constants.M_LN_SQRT_2PI);}
nn=n*n;if(n>500){return((S0-S1/nn)/n);}
if(n>80){return((S0-(S1-S2/nn)/nn)/n);}
if(n>35){return((S0-(S1-(S2-S3/nn)/nn)/nn)/n);}
return((S0-(S1-(S2-(S3-S4/nn)/nn)/nn)/nn)/n);};GemmaStatUtils.bd0=function(x,np){var ej,s,s1,v;var j;if(Math.abs(x-np)<0.1*(x+np)){v=(x-np)/(x+np);s=(x-np)*v;ej=2*x*v;v=v*v;for(j=1;;j++){ej*=v;s1=s+ej/((j<<1)+1);if(s1==s)
{return(s1);}
s=s1;}}
return(x*Math.log(x/np)+np-x);};GemmaStatUtils.dbinom=function(x,n,p){if(p<0||p>1||n<0)throw"IllegalArgumentException";return GemmaStatUtils.dbinom_raw(x,n,p,1-p);};Ext.namespace('Gemma');Gemma.MetaVisualizationPopups={};Gemma.MetaVisualizationPopups.openWindows=[];Gemma.MetaVisualizationPopups.cascadeLayoutCounter=0;Gemma.MetaVisualizationPopups.makeGeneInfoWindow=function(geneName,geneId){GenePickerController.getGenes([geneId],function(genes){var i;for(i=0;i<genes.length;i++){var gene=genes[i];var popup=new Ext.Window({width:600,height:350,autoScroll:true,closeAction:'hide',bodyStyle:'padding: 7px; font-size: 12px; line-height: 18px; ',title:"Details for gene: "+geneName,html:'<br><h4><a target="_blank" href="/Gemma/gene/showGene.html?id='+gene.id+'">'+gene.officialSymbol+'</a> '+gene.officialName+'</h4>'+'<b>Taxon:</b> '+gene.taxonCommonName+'<br>'+'<b>Aliases:</b> '+gene.aliases+' <a target="_blank" title="NCBI Gene link"'+'href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=gene&cmd=Retrieve&dopt=full_report&list_uids='+gene.ncbiId+'">'+'<img alt="NCBI Gene Link" src="/Gemma/images/logo/ncbi.gif"/> </a>'+'<br>'+'<b>Description:</b> '+gene.description+'<br>'+'<a target="_blank" href="/Gemma/gene/showCompositeSequences.html?id='+gene.id+'">Probes</a>'+'<br>'+'<br><a target="_blank" href="/Gemma/gene/showGene.html?id='+gene.id+'">More about this gene</a>'});}
popup.show();var xy=popup.getPosition();popup.setPosition(xy[0]+Gemma.MetaVisualizationPopups.cascadeLayoutCounter*20,xy[1]+Gemma.MetaVisualizationPopups.cascadeLayoutCounter*20);Gemma.MetaVisualizationPopups.cascadeLayoutCounter++;if(Gemma.MetaVisualizationPopups.cascadeLayoutCounter>4){Gemma.MetaVisualizationPopups.cascadeLayoutCounter=0;}});};Gemma.MetaVisualizationPopups.makeDatasetInfoWindow=function(datasetName,datasetShortName,datasetId){var textPanel=new Ext.Panel({bodyStyle:'padding: 7px; font-size: 12px; line-height: 18px; ',border:true,closeAction:'hide',frame:true,tpl:new Ext.XTemplate('<br><h4>','<a target="_blank" href="/Gemma/expressionExperiment/showExpressionExperiment.html?id={datasetId}"',' ext:qtip="{datasetName}">{datasetShortName}</a>: {datasetName}</h4><br><b> Description: </b>{description}<br><br>','<a target="_blank" href="/Gemma/expressionExperiment/showExpressionExperiment.html?id={datasetId}"',' ext:qtip="{datasetName}">More about this experiment</a>'),tplWriteMode:'overwrite'});var popup=new Ext.Window({width:600,height:500,layout:'fit',autoScroll:true,title:"Details for expression experiment",items:textPanel});popup.show();var xy=popup.getPosition();popup.setPosition(xy[0]+Gemma.MetaVisualizationPopups.cascadeLayoutCounter*20,xy[1]+Gemma.MetaVisualizationPopups.cascadeLayoutCounter*20);Gemma.MetaVisualizationPopups.cascadeLayoutCounter++;if(Gemma.MetaVisualizationPopups.cascadeLayoutCounter>4){Gemma.MetaVisualizationPopups.cascadeLayoutCounter=0;}
popup.loadMask=new Ext.LoadMask(popup.getEl(),{msg:"Loading ..."});popup.loadMask.show();ExpressionExperimentController.getDescription(datasetId,function(description){textPanel.update({description:description,datasetName:datasetName,datasetShortName:datasetShortName,datasetId:datasetId});popup.loadMask.hide();}.createDelegate(this));};Gemma.MetaVisualizationPopups.makeMinipieInfoWindow=function(numberOfProbesTotal,numberOfProbesDiffExpressed,percentProbesDiffExpressed,numberOfProbesUpRegulated,percentProbesUpRegulated,numberOfProbesDownRegulated,percentProbesDownRegulated){var popup=new Ext.Window({width:400,height:350,autoScroll:true,bodyStyle:'padding: 7px; font-size: 12px; line-height: 18px; ',title:"Differential Expression Details",html:'<b>Number of Probes:<br><br></b>'+'<b>&nbsp;&nbsp;&nbsp;Total</b>: '+numberOfProbesTotal+'<br><br>'+'<b>&nbsp;&nbsp;&nbsp;Differentially Expressed</b>: '+numberOfProbesDiffExpressed+' ('+percentProbesDiffExpressed+' of total)<br><br>'+'<b>&nbsp;&nbsp;&nbsp;Up Regulated</b>: '+numberOfProbesUpRegulated+'  ('+percentProbesUpRegulated+' of total)<br><br> '+'<b>&nbsp;&nbsp;&nbsp;Down Regulated</b>: '+numberOfProbesDownRegulated+'  ('+percentProbesDownRegulated+' of total)<br>'});popup.show();var xy=popup.getPosition();popup.setPosition(xy[0]+Gemma.MetaVisualizationPopups.cascadeLayoutCounter*20,xy[1]+Gemma.MetaVisualizationPopups.cascadeLayoutCounter*20);Gemma.MetaVisualizationPopups.cascadeLayoutCounter++;if(Gemma.MetaVisualizationPopups.cascadeLayoutCounter>4){Gemma.MetaVisualizationPopups.cascadeLayoutCounter=0;}};Ext.namespace('Gemma');function GemmaMetaheatmapFilter(){this._filterId=1;this._length=0;this._order=[];this.filters={};this.params={};this.add=function(fn,index){var id=this._filterId++;if(arguments.length==1){index=this.length;}
if(index>=this.length){this._order.push(id);}
else{this._order.splice(index,0,id);}
this._length++;this.filters[id]=fn;this.params[id]=null;return id;};this.remove=function(id){if(this.filters[id]){if(this.filters[id]){delete this.filters[id];}
if(this.params[id]){delete this.params[id];}
var i;var orderIndex=this._order.indexOf(id);if(orderIndex!==-1){this._order.splice(orderIndex,1);}
this._length--;}};this.update=function(id,param){if(this.filters[id]){this.params[id]=param;}};this.applyFilters=function(o){var i;var func;var param;var id;for(i=0;i<this._order.length;i++){id=this._order[i];func=this.filters[id];param=this.params[id];if(this.params[id]!==null&&func(o,param)){return true;}}
return false;};this.getFilterCount=function(){return this._length;};this.clearState=function(){this.params={};};}
Ext.namespace('Gemma.Metaheatmap','Gemma.Metaheatmap.Strings.ControlPanel.SortConditionCombo','Gemma.Metaheatmap.Strings.ControlPanel.SortGeneCombo');Gemma.Metaheatmap.Strings.ControlPanel.SortConditionCombo.fieldTipHTML='<br><b>Full Name</b>: official descriptive title<br><br>'+'<b>Short Name</b>: short name or ID (ex: GSE1234)<br><br>'+'<b>q Value</b>: confidence that the selected genes are differentially expressed<br><br>'+'<b>Diff. Exp. Specificity</b>: within each column, this is the proportion of probes that are differentially expressed '+'versus the total number of expressed probes. This measure is represented by each column\'s pie chart. Experiments are ordered based '+'on their columns\' average specificity.<br><br>';Gemma.Metaheatmap.Strings.ControlPanel.SortConditionCombo.fieldTip='Name: official descriptive title.  q Value: confidence in the expression levels of the selected genes.  '+'Diff. Exp. Specificity: the proportion of probes that are differentially expressed '+'across each experimental factor '+'versus the total number of expressed probes. This measure is represented by each column\'s pie chart. Experiments are ordered based '+'on their column\'s average specificity.';Gemma.Metaheatmap.Strings.ControlPanel.SortGeneCombo.fieldTipHTML='<b>Symbol</b>: official gene symbol<br>'+'<b>q Values</b>: confidence that the gene is differentially expressed, averaged across the queried experiments<br><br>';Gemma.Metaheatmap.Strings.ControlPanel.SortGeneCombo.fieldTip='Symbol: official gene symbol.  '+'q Values: confidence that the gene is differentially expressed, averaged across the queried experiments';Gemma.Metaheatmap.ControlPanel=Ext.extend(Ext.Panel,{layout:{type:'vbox',align:'stretch',pack:'start',defaultMargins:{top:5,right:10,bottom:5,left:10}},factorTreeFilter:[],autoScroll:false,border:false,updateGenesTitle:function(numFiltered,numTotal){this.genesControlPanel.setTitle("Genes: <span style=\"color:grey;font-weight:normal;\"><b>"+numFiltered+"</b> of "+numTotal+" filtered </span>");},updateConditionsTitle:function(numFiltered,numTotal){this.conditionsControlPanel.setTitle("Conditions: <span style=\"color:grey;font-weight:normal;\"><b>"+numFiltered+"</b> of "+numTotal+" filtered </span>");},initComponent:function(){Ext.apply(this,{items:[{xtype:'fieldset',title:'Genes',ref:'genesControlPanel',flex:0,height:100,layout:{type:'vbox',align:'stretch',pack:'start'},defaults:{flex:0,width:250,height:20},items:[{ref:'cmbGenePresets',xtype:'combo',hideLabel:true,minHeight:22,triggerAction:'all',displayField:'text',valueField:'id',editable:false,mode:'local',forceSelection:true,autoSelect:true,margins:'0 0 4 0',store:new Ext.data.ArrayStore({fields:['text','id'],data:Gemma.Metaheatmap.ControlPresets.getSortGroupPresetsNames(Gemma.Metaheatmap.ControlPresets.geneSortGroupPresets),idIndex:0}),listeners:{scope:this,'select':function(field,record,selIndex){var selectedIndex=record.get('id');this.genePreset=this.ownerCt.genePresets[selectedIndex];this.applySortFilter();}}},{xtype:'label',html:'Missing data filter:',height:15},{xtype:'slider',ref:'sldGeneDataMissingFilter',height:20,value:70,increment:10,minValue:0,maxValue:100,plugins:new Ext.slider.Tip({getText:function(thumb){if(thumb.value===0){return"Hide gene if it's missing data for <b>any</b> conditions";}else if(thumb.value===100){return"Don't hide genes for missing data";}
return String.format('Hide gene if it\'s missing data for more than <b>{0}%</b> of conditions',thumb.value);}}),listeners:{changecomplete:function(slider,newValue,thumb){this.applySortFilter();},scope:this}},{xtype:'label',text:'Sum qValue filter:',hidden:true},{xtype:'slider',ref:'sldGenePvalueFilter',hidden:true,disabled:true,value:0,increment:1,minValue:0,maxValue:100,plugins:new Ext.slider.Tip({getText:function(thumb){return String.format('Hide genes with corrected pValue sum <={0}',thumb.value/100);}}),listeners:{changecomplete:function(slider,newValue,thumb){this.applySortFilter();},scope:this}}]},{xtype:'fieldset',title:'Conditions',ref:'conditionsControlPanel',flex:1,layout:{type:'vbox',align:'stretch',pack:'start'},defaults:{flex:0},items:[{xtype:'combo',ref:'cmbConditionPresets',minHeight:22,margins:'0 0 4 0',hideLabel:true,triggerAction:'all',displayField:'text',valueField:'index',editable:false,mode:'local',forceSelection:true,autoSelect:true,store:new Ext.data.ArrayStore({fields:['text','index'],data:Gemma.Metaheatmap.ControlPresets.getSortGroupPresetsNames(Gemma.Metaheatmap.ControlPresets.conditionSortGroupPresets),idIndex:0}),listeners:{scope:this,'select':function(field,record,selIndex){var selectedIndex=record.get('index');this.conditionPreset=this.ownerCt.conditionPresets[selectedIndex];this.applySortFilter();}}},{xtype:'label',text:'Missing data filter:',height:15},{xtype:'slider',ref:'sldConditionDataMissingFilter',width:150,height:20,value:70,increment:10,minValue:0,maxValue:100,plugins:new Ext.slider.Tip({getText:function(thumb){if(thumb.value===0){return"Hide condition if it's missing data for <b>any</b> genes";}else if(thumb.value===100){return"Don't hide conditions for missing data";}
return String.format('Hide condition if it\'s missing data for more than <b>{0}%</b> of genes',thumb.value);}}),listeners:{changecomplete:function(slider,newValue,thumb){this.applySortFilter();},scope:this}},{xtype:'label',html:'Specificity filter <img ext:qtip="'+'An experiment\'s specificity is measured as the total number of probes <b>differentially</b> expressed versus the total '+'number of probes expressed. " src="/Gemma/images/icons/question_blue.png"/>:',height:15},{xtype:'slider',ref:'sldSpecificityFilter',width:150,height:20,value:70,increment:10,minValue:0,maxValue:100,plugins:new Ext.slider.Tip({getText:function(thumb){if(thumb.value===100){return"Show conditions with any specificity";}
return String.format('Show conditions with better than {0}% specificity',thumb.value);}}),listeners:{changecomplete:function(slider,newValue,thumb){this.applySortFilter();},scope:this}},{xtype:'label',hidden:true,text:'Sum corrected P value filter:',height:15},{xtype:'slider',hidden:true,disabled:false,ref:'sldConditionPvalueFilter',width:150,height:20,value:0,increment:10,minValue:0,maxValue:100,plugins:new Ext.slider.Tip({getText:function(thumb){return String.format('Show conditions Hide conditions with corrected pValue sum <={0}',thumb.value/100);}}),listeners:{changecomplete:function(slider,newValue,thumb){this.applySortFilter();},scope:this}},{xtype:'Metaheatmap.FactorTree',ref:'factorTree',sortedTree:this.sortedTree,autoScroll:true,border:false,bodyStyle:'background:#F1F6F6',flex:1}]}]});Gemma.Metaheatmap.ControlPanel.superclass.initComponent.apply(this,arguments);this.addEvents('gene_zoom_change','condition_zoom_change');},makeFilterFunction:function(filterString){return function(o){return(o.contrastFactorValue==filterString);};},applySortFilter:function(){this.ownerCt.visualizationPanel.mask.show();this.doFiltering_.defer(100,this);},doFiltering_:function(){var genePercentMissingThreshold=this.genesControlPanel.sldGeneDataMissingFilter.getValue()/100;var genePercentMissingFilter=[{'filterFn':function(o){return o.percentProbesMissing>genePercentMissingThreshold;}}];var conditionPercentMissingThreshold=this.conditionsControlPanel.sldConditionDataMissingFilter.getValue()/100;var conditionPercentMissingFilter=[{'filterFn':function(o){return o.percentProbesMissing>conditionPercentMissingThreshold;}}];var specificityThreshold=this.conditionsControlPanel.sldSpecificityFilter.getValue()/100;var specificityFilter=[{'filterFn':function(o){return o.experimentSpecificity>specificityThreshold;}}];var conditionSort=[];conditionSort=conditionSort.concat(this.conditionPreset.sort);var conditionFilter=[];conditionFilter=conditionFilter.concat(specificityFilter);conditionFilter=conditionFilter.concat(conditionPercentMissingFilter);conditionFilter=conditionFilter.concat(this.factorTreeFilter);var geneSort=[];geneSort=geneSort.concat(this.genePreset.sort);var geneFilter=[];geneFilter=geneFilter.concat(genePercentMissingFilter);this.fireEvent('applySortGroupFilter',geneSort,geneFilter,conditionSort,conditionFilter);},onRender:function(){Gemma.Metaheatmap.ControlPanel.superclass.onRender.apply(this,arguments);this.addEvents('applySortGroupFilter');this.genesControlPanel.cmbGenePresets.setValue(0);this.genePreset=this.ownerCt.genePresets[0];this.conditionsControlPanel.cmbConditionPresets.setValue(0);this.conditionPreset=this.ownerCt.conditionPresets[0];this.conditionsControlPanel.factorTree.on('checkchange',function(node,checked){var i;if(node.isLeaf()){}else{for(i=0;i<node.childNodes.length;i++){var child=node.childNodes[i];child.ui.toggleCheck(checked);child.attributes.checked=checked;}}
this.factorTreeFilter=[];var root=this.conditionsControlPanel.factorTree.root;for(i=0;i<root.childNodes.length;i++){var categoryNode=root.childNodes[i];for(var j=0;j<categoryNode.childNodes.length;j++){var factorNode=categoryNode.childNodes[j];if(factorNode.attributes.checked===false){this.factorTreeFilter.push({'filterFn':this.makeFilterFunction(factorNode.contrastFactorValue)});}}}
this.applySortFilter();},this);}});Ext.reg('Metaheatmap.ControlPanel',Gemma.Metaheatmap.ControlPanel);Ext.namespace('Gemma.Metaheatmap');Gemma.Metaheatmap.TreeNode=function(config){this.display={};this.display.pxlStart=Number.MAX_VALUE;this.display.pxlEnd=Number.MIN_VALUE;this.parent=null;this.children=[];this.level=null;this.computeCoordinates=function(currentCoordinate,newItemSize,root){for(var i=0;i<this.children.length;i++){var child=this.children[i];currentCoordinate=child.computeCoordinates(currentCoordinate,newItemSize,root);}
this.display.pxlStart=this.firstChild.display.pxlStart;this.display.pxlEnd=this.lastChild.display.pxlEnd;this.display.pxlSize=this.display.pxlEnd-this.display.pxlStart;if(this.parent===null){return currentCoordinate;}
if(root.display.levelToY.length==this.level){root.display.levelToY.push(0);}
var textSize=CanvasTextFunctions.measure(null,9,this.groupName);var possibleY;if(this.display.pxlSize>textSize){possibleY=root.display.levelToY[this.level-1]+15;this.display.textOrientation='normal';}else{possibleY=root.display.levelToY[this.level-1]+80;this.display.textOrientation='side';}
root.display.levelToY[this.level]=Math.max(root.display.levelToY[this.level],possibleY);return currentCoordinate;};this.findItemByCoordinate=function(coordinate)
{if(this.display.pxlStart>coordinate){return null;}
if(this.display.pxlEnd<coordinate){return null;}
var child=this.binarySearchFn_(coordinate);if(child===null){return null;}else{return child.findItemByCoordinate(coordinate);}};this.binarySearchFn_=function(coordinate)
{var high=this.children.length-1;var low=0;while(low<=high){mid=parseInt((low+high)/2,10);if(this.children[mid].display.pxlStart<=coordinate&&this.children[mid].display.pxlEnd>=coordinate){return this.children[mid];}
if(coordinate<this.children[mid].display.pxlStart){high=mid-1;}
if(coordinate>this.children[mid].display.pxlEnd){low=mid+1;}}
return null;};};Gemma.Metaheatmap.TreeLeafNode=function(items){this.display={};this.display.pxlStart=Number.MAX_VALUE;this.display.pxlEnd=Number.MIN_VALUE;this.level=1;this.items=items;this.parent=null;this.computeCoordinates=function(currentCoordinate,newItemSize,root){this.display.itemSize=newItemSize;var item;for(var i=0;i<this.items.length;i++){item=this.items[i];item.display={};item.display.pxlStart=currentCoordinate;currentCoordinate+=newItemSize;item.display.pxlEnd=currentCoordinate;item.display.pxlSize=item.display.pxlEnd-item.display.pxlStart;}
this.display.pxlStart=this.items[0].display.pxlStart;this.display.pxlEnd=currentCoordinate;this.display.pxlSize=this.display.pxlEnd-this.display.pxlStart;if(this.parent===null){return currentCoordinate;}
if(root.display.levelToY.length===this.level){root.display.levelToY.push(0);}
var textSize=CanvasTextFunctions.measure(null,9,this.groupName);if((this.display.pxlSize)>textSize){this.display.textOrientation='normal';root.display.levelToY[this.level]=Math.max(root.display.levelToY[this.level],135);}else{this.display.textOrientation='side';root.display.levelToY[this.level]=Math.max(root.display.levelToY[this.level],200);}
return currentCoordinate;};this.findItemByCoordinate=function(coordinate)
{if(this.display.pxlStart>coordinate){return null;}
if(this.display.pxlEnd<coordinate){return null;}
var index=Math.floor((coordinate-this.display.pxlStart)/this.display.itemSize);return this.items[index];};};Gemma.Metaheatmap.SortedFilteredTree=function(items,sortSettings,filterSettings){this.display={};this.display.size={};this.display.size.width=0;this.display.size.height=0;this.settings={};this.settings.sort=sortSettings;this.settings.filter=filterSettings;this.items=[];this.applyZoom=function(newItemSize)
{if(this.isEmpty){return;}
this.root.display.levelToY=[];this.root.display.levelToY.push(120);this.display.size.width=this.root.computeCoordinates(0,newItemSize,this.root);this.display.size.height=this.root.display.levelToY[this.root.level-1];};this.findItemByCoordinate=function(coordinate)
{if(this.isEmpty){return null;}
return this.root.findItemByCoordinate(coordinate);};this.filter_=function(items)
{if(this.settings.filter.length===0){return items;}
var filteredItems=[];for(var i=0;i<items.length;i++){var keep=true;for(var f=0;f<this.settings.filter.length;f++){var filterFn=this.settings.filter[f].filterFn;if(filterFn(items[i])){keep=false;break;}}
if(keep){filteredItems.push(items[i]);}}
return filteredItems;};this.constructTree_=function(items,treeDepth)
{var node,child;var sortFn=this.settings.sort[treeDepth].sortFn;var groupByProperty=this.settings.sort[treeDepth].groupBy;treeDepth++;items.sort(sortFn);if(groupByProperty!==null){node=new Gemma.Metaheatmap.TreeNode();var index;var groupStartIndex=0;for(index=1;index<items.length;index++){if(items[index][groupByProperty]!==items[index-1][groupByProperty]){child=this.constructTree_(items.slice(groupStartIndex,index),treeDepth);child.parent=node;child.groupName=items[index-1][groupByProperty];if(child.groupName===null){child.groupName='null';}
node.children.push(child);groupStartIndex=index;}}
child=this.constructTree_(items.slice(groupStartIndex,index),treeDepth);child.parent=node;child.groupName=items[index-1][groupByProperty];if(child.groupName===null){child.groupName='null';}
node.children.push(child);node.firstChild=node.children[0];node.lastChild=child;node.level=child.level+1;}else{node=new Gemma.Metaheatmap.TreeLeafNode(items);this.items=this.items.concat(items);}
return node;};var filteredItems=this.filter_(items);this.numFiltered=items.length-filteredItems.length;if(filteredItems.length==0){this.isEmpty=true;}else{this.root=this.constructTree_(filteredItems,0);this.isEmpty=false;}};Ext.namespace('Gemma.Metaheatmap');var makeSortFunction=function(property,direction){if(direction==='DESC'){return function(a,b){if(typeof a[property]=="number"){return(b[property]-a[property]);}else{return((a[property]>b[property])?-1:((a[property]<b[property])?1:0));}};}else{return function(a,b){if(typeof a[property]=="number"){return(a[property]-b[property]);}else{return((a[property]<b[property])?-1:((a[property]>b[property])?1:0));}};}};Gemma.Metaheatmap.ControlPresets={geneSortGroupPresets:[{name:'sort alphabetically',sort:[{sortFn:makeSortFunction('groupName'),groupBy:'groupName'},{sortFn:makeSortFunction('name'),groupBy:null}],filter:[]},{name:'sort by meta p-value',sort:[{sortFn:makeSortFunction('groupName'),groupBy:'groupName'},{sortFn:makeSortFunction('metaPvalue','ASC'),groupBy:null}],filter:[]}],conditionSortGroupPresets:[{name:'sort by experiment',sort:[{sortFn:makeSortFunction('experimentGroupName'),groupBy:'experimentGroupName'},{sortFn:makeSortFunction('datasetShortName'),groupBy:'datasetShortName'},{sortFn:makeSortFunction('contrastFactorValue'),groupBy:null}],filter:[]},{name:'sort by specificity (group by factor)',sort:[{sortFn:makeSortFunction('factorCategory'),groupBy:'factorCategory'},{sortFn:makeSortFunction('miniPieValue'),groupBy:null}],filter:[]},{name:'sort by enrichment (group by factor)',sort:[{sortFn:makeSortFunction('factorCategory'),groupBy:'factorCategory'},{sortFn:makeSortFunction('ora','ASC'),groupBy:null}],filter:[]}],factorTreeSortGroupPreset:[{sortFn:makeSortFunction('factorCategory'),groupBy:'factorCategory'},{sortFn:makeSortFunction('contrastFactorValue'),groupBy:'contrastFactorValue'},{sortFn:makeSortFunction('contrastFactorValue'),groupBy:null}],getSortGroupPresetsNames:function(sortGroupPresets){var names=[];for(var i=0;i<sortGroupPresets.length;i++){names.push([sortGroupPresets[i]['name'],i]);}
return names;}};Gemma.Metaheatmap.defaultConditionZoom=10;Gemma.Metaheatmap.defaultGeneZoom=10;Gemma.Metaheatmap.Application=Ext.extend(Ext.Panel,{tutorialReady:false,initComponent:function(){this.conditions=this.visualizationData.conditions;this.genes=this.visualizationData.genes;this.cells={};this.cells.cellData=this.visualizationData.cellData;this.cells.getCell=function(gene,condition){if(!gene||!condition){return null;}
var geneToCellMap=this.cellData[condition.id];if(typeof geneToCellMap!='undefined'){var cellValueObj=geneToCellMap[gene.id];if(typeof cellValueObj!='undefined'){return cellValueObj;}}
return null;};this.genePresets=Gemma.Metaheatmap.ControlPresets.geneSortGroupPresets;this.conditionPresets=Gemma.Metaheatmap.ControlPresets.conditionSortGroupPresets;this.geneTree=new Gemma.Metaheatmap.SortedFilteredTree(this.genes,this.genePresets[0].sort,[]);this.conditionTree=new Gemma.Metaheatmap.SortedFilteredTree(this.conditions,this.conditionPresets[0].sort,[]);this.factorTree=new Gemma.Metaheatmap.SortedFilteredTree(this.conditions,Gemma.Metaheatmap.ControlPresets.factorTreeSortGroupPreset,[]);Ext.apply(this,{layout:'border',width:Ext.getBody().getViewSize().width-40,height:Ext.getBody().getViewSize().height-20,tbar:[{xtype:'label',ref:'titleLabel',text:""},'->',{ref:'colorLegendButton',xtype:'button',text:'<b>Color Legend</b>',enableToggle:true,tooltip:'Show/hide the color legend',toggleHandler:function(btn,pressed){if(pressed){this.visualizationPanel.variableWidthCol.colorLegend.show();this.visualizationPanel.variableWidthCol.colorLegend.isShown=true;}else{this.visualizationPanel.variableWidthCol.colorLegend.hide();this.visualizationPanel.variableWidthCol.colorLegend.isShown=false;}},scope:this},'-',{xtype:'button',text:'<b>Bookmarkable Link</b>',tooltip:'Get a link to re-run this search',disabled:true,handler:function(){this.showBookmarkableLinkWindow();},scope:this},'-',{xtype:'button',ref:'saveSelectedButton',text:'<b>Save Selected</b>',icon:'/Gemma/images/icons/disk.png',cls:'x-btn-text-icon',tooltip:'Select genes or experiments by holding down the "Ctrl" key and clicking on row or column labels.',scope:this,menu:new Ext.menu.Menu({scope:this,items:[{text:'Genes',scope:this,handler:function(){if(this.visualizationPanel.getSelectedGeneIds().length==0){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.noGenesSelectedTitle,Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.noGenesSelectedText);return;}
var geneSetGrid=new Gemma.GeneMembersSaveGrid({genes:this.visualizationPanel.getSelectedGeneIds(),allowSaveToSession:false,frame:false});this.getEl().mask();var popup=new Ext.Window({closable:false,layout:'fit',width:450,height:500,items:geneSetGrid});geneSetGrid.on('doneModification',function(){this.getEl().unmask();popup.hide();},this);popup.show();}},{text:'Experiments',scope:this,handler:function(){if(this.visualizationPanel.getSelectedDatasetIds().length==0){Ext.Msg.alert(Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.noDatasetsSelectedTitle,Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.noDatasetsSelectedText);return;}
var eeSetGrid=new Gemma.ExpressionExperimentMembersGrid({eeids:this.visualizationPanel.getSelectedDatasetIds(),frame:false,allowSaveToSession:false});this.getEl().mask();var popup=new Ext.Window({closable:false,layout:'fit',width:450,height:500,items:eeSetGrid});eeSetGrid.on('doneModification',function(){this.getEl().unmask();popup.hide();},this);popup.show();}}]})},'-',{xtype:'button',text:'<b>Download</b>',ref:'downloadButton',icon:'/Gemma/images/download.gif',menu:new Ext.menu.Menu({items:[{text:'As text',icon:'/Gemma/images/icons/page_white_text.png',tooltip:'Download a formatted text version of your search results',handler:function(){var textWindow=new Gemma.Metaheatmap.DownloadWindow({geneTree:this.geneTree,conditionTree:this.conditionTree,cells:this.cells,isPvalue:this.visualizationPanel.variableWidthCol.boxHeatmap.isShowPvalue});textWindow.convertToText();textWindow.show();},scope:this},{text:'As image',icon:'/Gemma/images/icons/picture.png',tooltip:'Download heatmap image',handler:function(){this.visualizationPanel.downloadImage();},scope:this}]})},'-',{xtype:'button',icon:'/Gemma/images/icons/question_blue.png',cls:'x-btn-icon',tooltip:'Click here for documentation on how to use this visualizer.',handler:function(){window.open('http://gemma-chibi-doc.sites.olt.ubc.ca/documentation/search-page/#GemmaQuickGuide-DifferentialExpressionView');},scope:this}],items:[{ref:'visualizationPanel',xtype:'Metaheatmap.VisualizationPanel',conditionTree:this.conditionTree,geneTree:this.geneTree,cells:this.cells,geneControls:this.geneControls,conditionControls:this.conditionControls,region:'center',autoScroll:true},{ref:'controlPanel',xtype:'Metaheatmap.ControlPanel',conditionTree:this.conditionTree,geneTree:this.geneTree,geneControls:this.geneControls,conditionControls:this.conditionControls,sortedTree:this.factorTree,collapsible:true,floatable:false,animFloat:false,title:'Sort & Filter',border:true,region:'east',split:true,width:300}]});Gemma.Metaheatmap.Application.superclass.initComponent.apply(this,arguments);},onRender:function(){Gemma.Metaheatmap.Application.superclass.onRender.apply(this,arguments);this.controlPanel.on('applySortGroupFilter',function(geneSort,geneFilter,conditionSort,conditionFilter){this.geneTree=new Gemma.Metaheatmap.SortedFilteredTree(this.genes,geneSort,geneFilter);this.conditionTree=new Gemma.Metaheatmap.SortedFilteredTree(this.conditions,conditionSort,conditionFilter);this.controlPanel.updateGenesTitle(this.geneTree.numFiltered,this.genes.length);this.controlPanel.updateConditionsTitle(this.conditionTree.numFiltered,this.conditions.length);this.visualizationPanel.setConditionTree(this.conditionTree);this.visualizationPanel.setGeneTree(this.geneTree);this.visualizationPanel.redraw(true);this.visualizationPanel.mask.hide();},this);this.showHelpConditionally();},refreshVisualization:function(){this.visualizationPanel.updateVisibleScores();this.controlPanel.doFiltering_();},getApplicationState:function(){var state={};state.geneGroupIds=[];state.geneIds=[];var i,ref,k=0;for(i=0;i<this.metaheatmapData.geneGroupReferences.length;i++){ref=this.metaheatmapData.geneGroupReferences[i];if(typeof ref.type!=='undefined'){if(ref.type==='databaseBackedGene'){state.geneIds.push(ref.id);}else if(ref.type.toLowerCase().indexOf('session')===-1&&ref.type.toLowerCase().indexOf('group')!==-1){state.geneGroupIds.push(ref.id);}else{this.usingSessionGroup=true;}}}
if(this.experimentSessionGroupQueries){state.experimentSessionGroupQueries=this.experimentSessionGroupQueries;}
if(this.geneSessionGroupQueries){state.geneSessionGroupQueries=this.geneSessionGroupQueries;}
state.eeGroupIds=[];state.eeIds=[];for(i=0;i<this.metaheatmapData.datasetGroupReferences.length;i++){ref=this.metaheatmapData.datasetGroupReferences[i];if(typeof ref.type!=='undefined'){if(ref.type==='databaseBackedExperiment'){state.eeIds.push(ref.id);}else if(ref.type.toLowerCase().indexOf('session')===-1&&ref.type.toLowerCase().indexOf('group')!==-1){state.eeGroupIds.push(ref.id);}else{this.usingSessionGroup=true;}}}
state.geneSort=this.toolPanel_._sortPanel._geneSort.getValue();state.eeSort=this.toolPanel_._sortPanel._experimentSort.getValue();if(state.eeSort==='--'){state.eeSort=null;}
var toFilter=[];var children=this.tree.getRootNode().childNodes;for(i=0;i<children.length;i++){if(!children[i].attributes.checked){toFilter.push(children[i].id);}}
state.factorFilters=toFilter;state.taxonId=this.metaheatmapData.taxonId;return state;},getBookmarkableLink:function(){var state=this.getApplicationState();return Gemma.Metaheatmap.Utils.getBookmarkableLink(state);},showBookmarkableLinkWindow:function(){url=this.getBookmarkableLink();var warning=(this.selectionsModified)?"Please note: you have unsaved modifications in one or more of your"+" experiment and/or gene groups. <b>These changes will not be saved in this link.</b>"+" In order to keep your modifications, please log in and save your unsaved groups.<br><br>":"";if(url===null&&warning===""){url="Error creating your link.";}
var win=new Ext.Window({closeAction:'close',title:"Bookmark or sharable link",html:'<b>Use this link to re-run your search:</b><br> <a target="_blank" href="'+url+'">'+url+'</a>',width:650,padding:10});win.show();},getDownloadLink:function(){var url=this.getBookmarkableLink();if(url!==null){url=url.replace('metaheatmap.html','downloadText/downloadMetaheatmapData.html');}
return url;},getApplicationStateFromURL:function(url){},showHelpConditionally:function(){if(this.showTutorial&&!this.tutorialControlPanel){this.tutorialControlPanel=new Gemma.Tutorial.ControlPanel({instructions:Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.Tutorial.instructions,renderTo:'tutorial-control-div',id:'tutorial-cntlPanel-diff-ex'});if(!this.tutorialControlPanel.hidden){var tipDefinitions=[];tipDefinitions.push({element:this.visualizationPanel.variableWidthCol.boxHeatmap,title:Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.Tutorial.searchResultsTitle,text:Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.Tutorial.searchResultsText,tipConfig:{anchor:'bottom',anchorOffset:130},position:{moveDown:50}});tipDefinitions.push({element:this.visualizationPanel.fixedWidthCol.pnlControlAndLabels.pnlMiniControl.showFoldChangeToggle,title:Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.Tutorial.foldChangeTitle,text:Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.Tutorial.foldChangeText,tipConfig:{anchor:'left'}});tipDefinitions.push({element:this.getTopToolbar().colorLegendButton,title:Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.Tutorial.colourLegendTitle,text:Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.Tutorial.colourLegendText});tipDefinitions.push({element:this.controlPanel,title:Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.Tutorial.sortAndFilterTitle,text:Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.Tutorial.sortAndFilterText,tipConfig:{anchor:'right'},position:{moveDown:150}});tipDefinitions.push({element:this.getTopToolbar().downloadButton,title:Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.Tutorial.downloadTitle,text:Gemma.HelpText.WidgetDefaults.MetaheatmapApplication.Tutorial.downloadText});this.tutorialControlPanel.addTips(tipDefinitions);}
this.tutorialControlPanel.on('tutorialHidden',function(){this.tutorialControlPanel.hide();},this);}
this.on('afterrender',function(){if(this.showTutorial&&!this.tutorialControlPanel){this.showHelpConditionally();}
if(this.showTutorial&&this.tutorialControlPanel){this.tutorialControlPanel.playTips(0);}});}});Ext.namespace('Gemma.Metaheatmap');Gemma.Metaheatmap.FactorTree=Ext.extend(Ext.tree.TreePanel,{initComponent:function(){Ext.apply(this,{lines:true,rootVisible:true,sortedTree:this.sortedTree,cls:'x-tree-noicon',initializeFromSortedTree:function(){var root=new Ext.tree.TreeNode({expanded:true,text:'Condition category filters',cls:'',checked:true});this.setRootNode(root);var categoryNodes=this.sortedTree.root.children;for(var i=0;i<categoryNodes.length;i++){var sftCategoryNode=categoryNodes[i];var ftCategoryNode=new Ext.tree.TreeNode({expanded:false,singleClickExpand:false,text:(sftCategoryNode.groupName&&sftCategoryNode.groupName!==null&&sftCategoryNode.groupName!=="null")?sftCategoryNode.groupName:"No category",checked:true,iconCls:'',cls:''});var factorNodes=sftCategoryNode.children;for(var j=0;j<factorNodes.length;j++){var sftFactorNode=factorNodes[j];var baselines=[];for(k=0;k<sftFactorNode.items.length;k++){if(baselines.indexOf(sftFactorNode.items[k].baselineFactorValue)<0){baselines.push(sftFactorNode.items[k].baselineFactorValue);}}
var ftFactorNode=new Ext.tree.TreeNode({expanded:false,singleClickExpand:false,text:(sftFactorNode.groupName&&sftFactorNode.groupName!==null&&sftFactorNode.groupName!=="null")?sftFactorNode.groupName+"<span style=\"color:grey\"> vs "+baselines.join(',')+'</span>':"No value",checked:true,cls:'',iconCls:''});Ext.apply(ftFactorNode,{contrastFactorValue:sftFactorNode.groupName});ftCategoryNode.appendChild(ftFactorNode);}
root.appendChild(ftCategoryNode);}}});Gemma.Metaheatmap.FactorTree.superclass.initComponent.call(this);},onRender:function(){Gemma.Metaheatmap.FactorTree.superclass.onRender.apply(this,arguments);this.initializeFromSortedTree();}});Ext.reg('Metaheatmap.FactorTree',Gemma.Metaheatmap.FactorTree);Ext.namespace('Gemma.Metaheatmap');Gemma.Metaheatmap.LabelBox=Ext.extend(Ext.Panel,{colors:{groupLabelA:'rgb(204, 236, 230)',groupLabelB:'rgb(153, 216, 201)',itemLabelA:'rgba(203,213,232, 0.5)',itemLabelB:'rgba(203,213,232, 0.9)'},initComponent:function(){Ext.apply(this,{tree:this.tree,orientation:this.orientation,items:[{autoEl:'canvas',ref:'boxCanvas',xtype:'box'}]});Gemma.Metaheatmap.LabelBox.superclass.initComponent.apply(this,arguments);},resizeAndPosition:function(){var ownerCt=this.findParentByType('Metaheatmap.VisualizationPanel');if(!this.amIinitialized){this.initializeMe();}
var headerHeight=ownerCt.variableWidthCol.boxTopLabels.tree.display.size.height;var sideWidth=ownerCt.fixedWidthCol.boxSideLabels.tree.display.size.height;var extraRoom=20;if(this.orientation==='vertical'){ownerCt.fixedWidthCol.setWidth(this.tree.display.size.height);this.setWidth(this.tree.display.size.height);this.setHeight(ownerCt.getHeight()-headerHeight-extraRoom);this.boxCanvas.setSize(this.tree.display.size.height,this.tree.display.size.width+15);}else{this.setHeight(this.tree.display.size.height);this.setWidth(ownerCt.getWidth()-sideWidth-extraRoom);this.boxCanvas.setSize(this.tree.display.size.width+15,this.tree.display.size.height);}},initializeMe:function(){this.addEvents('label_mouse_in','label_mouse_out','label_click');this.ctx=Gemma.Metaheatmap.Utils.getCanvasContext(this.boxCanvas.el.dom);CanvasTextFunctions.enable(this.ctx);this.boxCanvas.el.on('mousemove',function(e,t){if(this.lastLabelMouseIn!==null){this.lastLabelMouseIn.item.display.label.drawFn(false);document.body.style.cursor='default';this.fireEvent('label_mouse_out',this.lastLabelMouseIn.label,e,t);}
var x=e.getPageX()-Ext.get(t).getX();var y=e.getPageY()-Ext.get(t).getY();var label=this.getLabelByXY(x,y);if(label!==null){label.item.display.label.drawFn(true);document.body.style.cursor='pointer';this.fireEvent('label_mouse_in',label,e,t);}
this.lastLabelMouseIn=label;},this);this.boxCanvas.el.on('mouseout',function(e,t){if(this.lastLabelMouseIn!==null){this.lastLabelMouseIn.item.display.label.drawFn(false);this.fireEvent('label_mouse_out',this.lastLabelMouseIn.label,e,t);}
this.lastLabelMouseIn=null;document.body.style.cursor='default';},this);this.boxCanvas.el.on('click',function(e,t){var x=e.getPageX()-Ext.get(t).getX();var y=e.getPageY()-Ext.get(t).getY();var label=this.getLabelByXY(x,y);if(label!==null){this.onClick(label,e);}},this);this.amIinitialized=true;},onClick:function(label,e){},draw:function(){this.lastLabelMouseIn=null;if(!this.amIinitialized){this.initializeMe();}
this.clearCanvas_();if(this.tree.isEmpty){return;}
this.alternateColorCounter=[];for(var i=0;i<this.tree.root.level;i++){this.alternateColorCounter.push(0);}
this.drawColorBars_(this.tree.root,this.tree);},getLabelByXY:function(x,y){var item;if(this.orientation=='vertical'){item=this.tree.findItemByCoordinate(y);}else{item=this.tree.findItemByCoordinate(x);}
if(item===null){return null;}
if(typeof item==="undefined"){return null;}
var labelItemObj={'item':item};return labelItemObj;},drawColorBars_:function(node,tree){var x,y,size,text,textOrientation,labelColor;if(node instanceof Gemma.Metaheatmap.TreeLeafNode){if(this.orientation=='horizontal'){textOrientation='vertical';}else{textOrientation='horizontal';}
size=120;for(var i=0;i<node.items.length;i++){if((this.alternateColorCounter[0]%2)===0){labelColor=this.colors.itemLabelA;}else{labelColor=this.colors.itemLabelB;}
this.drawItemLabel_(node.items[i],size,textOrientation,labelColor);this.alternateColorCounter[0]++;}}else{for(var j=0;j<node.children.length;j++){var child=node.children[j];text=child.groupName;if(text===null){text='null';}
if((this.alternateColorCounter[child.level]%2)===0){labelColor=this.colors.groupLabelA;}else{labelColor=this.colors.groupLabelB;}
if(this.orientation=='horizontal'){x=child.display.pxlStart;y=tree.display.size.height-tree.root.display.levelToY[child.level];height=tree.root.display.levelToY[child.level]-tree.root.display.levelToY[child.level-1]-1;width=child.display.pxlSize;if(child.display.textOrientation=='side'){textOrientation='vertical';}else{textOrientation='horizontal';}
this.drawGroupLabel_(x,y,width,height,text,textOrientation,labelColor);}else{x=tree.display.size.height-tree.root.display.levelToY[child.level];y=child.display.pxlStart;height=child.display.pxlSize;width=tree.root.display.levelToY[child.level]-tree.root.display.levelToY[child.level-1]-1;if(child.display.textOrientation=='side'){textOrientation='horizontal';}else{textOrientation='vertical';}
this.drawGroupLabel_(x,y,width,height,text,textOrientation,labelColor);}
this.alternateColorCounter[child.level]++;this.drawColorBars_(node.children[j],tree);}}},drawGroupLabel_:function(x,y,xSize,ySize,text,textOrientation,color){this.ctx.fillStyle=color;this.ctx.fillRect(x,y,xSize,ySize-1);this.ctx.save();this.ctx.beginPath();this.ctx.rect(x,y,xSize-1,ySize-1);this.ctx.clip();var textSize=CanvasTextFunctions.measure(null,9,text);if(textOrientation==='vertical'){if(textSize<ySize){y=y+ySize/2+textSize/2;}else{y=y+ySize;}
this.ctx.drawRotatedText(x+xSize/2+4,y,270,9,'black',text);}else{if(textSize<xSize){x=x+xSize/2-textSize/2;}
this.ctx.strokeStyle='black';this.ctx.drawText('',9,x,y+ySize/2+4,text);}
this.ctx.restore();},clearCanvas_:function(){this.ctx.canvas.width=this.boxCanvas.getWidth();this.ctx.canvas.height=this.boxCanvas.getHeight();this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);},onRender:function(){Gemma.Metaheatmap.LabelBox.superclass.onRender.apply(this,arguments);this.amIinitialized=false;}});Ext.reg('Metaheatmap.LabelBox',Gemma.Metaheatmap.LabelBox);Gemma.Metaheatmap.ConditionLabel={};Gemma.Metaheatmap.ConditionLabel.constructDrawLabelFunction=function(ctx,item,text,orientation,size,maxSize,backgroundColor){var x,y,width,height,highlightBox;var fns;if(item.isSelected){backgroundColor='red';}
if(orientation==='horizontal'){x=maxSize.width-size;y=item.display.pxlStart;width=size;height=item.display.pxlSize;highlightBox={width:maxSize.width,height:17,x:0,y:Math.max(0,y+height/2-7),color:item.isSelected?'red':'white',fontSize:13};fns=Gemma.Metaheatmap.ConditionLabel.makeHorizontalLabelDrawFunction(ctx,item,text,x,y,width,height,highlightBox,backgroundColor);}else{x=item.display.pxlStart;y=maxSize.height-size;width=item.display.pxlSize;height=size;highlightBox={width:17,height:maxSize.height,x:Math.max(0,x+width/2-7),y:0,color:item.isSelected?'red':'white',fontSize:13};fns=Gemma.Metaheatmap.ConditionLabel.makeVerticalLabelDrawFunction(ctx,item,text,x,y,width,height,highlightBox,backgroundColor);}
return function(isHighlighted){if(isHighlighted){fns.highlight();}else{fns.draw();}};};Gemma.Metaheatmap.ConditionLabel.makeHorizontalLabelDrawFunction=function(ctx,item,text,x,y,width,height,highlightBox,backgroundColor){var isSelected=item.isSelected;var metaPvalueBarChart=item.metaPvalueBarChart;var barChartSize=8;var margin=3;var yCenter=y+height/2;var fontSize=9;var tinyScale=(height<fontSize);var savedLabelImage=null;return{draw:function(){if(savedLabelImage===null){ctx.save();if(!tinyScale||isSelected){ctx.fillStyle=backgroundColor;ctx.fillRect(x,y,width,height);}
if(tinyScale){}else{ctx.beginPath();ctx.rect(x,y+0.5,width,height-1);ctx.clip();ctx.strokeStyle='black';ctx.drawTextRight('',fontSize,x+width-margin-barChartSize,yCenter+fontSize/2,text);}
if(metaPvalueBarChart!==null){ctx.fillStyle='black';ctx.fillRect(x+width-barChartSize,y,metaPvalueBarChart,height);}
ctx.restore();}else{ctx.putImageData(savedLabelImage,highlightBox.x,highlightBox.y);}},highlight:function(){if(savedLabelImage===null){savedLabelImage=ctx.getImageData(highlightBox.x,highlightBox.y,highlightBox.width,highlightBox.height);}
ctx.save();ctx.beginPath();ctx.rect(highlightBox.x,highlightBox.y+0.5,highlightBox.width,highlightBox.height-1);ctx.clip();ctx.fillStyle=highlightBox.color;ctx.fillRect(highlightBox.x,highlightBox.y,highlightBox.width,highlightBox.height);ctx.strokeStyle='black';ctx.drawTextRight('',highlightBox.fontSize,x+width-barChartSize-margin,yCenter+highlightBox.fontSize/2,text);if(metaPvalueBarChart!==null){ctx.fillStyle='black';ctx.fillRect(x+width-barChartSize,y,metaPvalueBarChart,height);}
ctx.restore();}};};Gemma.Metaheatmap.ConditionLabel.makeVerticalLabelDrawFunction=function(ctx,item,text,x,y,width,height,highlightBox,backgroundColor){var isSelected=item.isSelected;var miniPieValue=item.oraDisplayValue;var miniBarValue=item.oraDisplayValue;var xCenter=x+width/2;var fontSize=9;var miniPieSize=8;var tinyScale=(width<fontSize);var savedLabelImage=null;return{draw:function(){if(savedLabelImage===null){ctx.save();if(!tinyScale||isSelected){ctx.fillStyle=backgroundColor;ctx.fillRect(x,y,width,height);}
if(tinyScale){ctx.strokeStyle='black';if(miniBarValue!==null){ctx.fillStyle='black';ctx.fillRect(x,y+height-8.5,width,miniBarValue);}}else{ctx.beginPath();ctx.rect(x+0.5,y,width-1,height);ctx.clip();ctx.strokeStyle='black';ctx.drawRotatedText(xCenter+fontSize/2,y+height-miniPieSize-3,270,fontSize,'black',text);if(miniBarValue!==null){ctx.fillStyle='black';ctx.fillRect(x,y+height-8.5,width,miniBarValue);}}
ctx.restore();}else{ctx.putImageData(savedLabelImage,highlightBox.x,highlightBox.y);}},highlight:function(){if(savedLabelImage===null){savedLabelImage=ctx.getImageData(highlightBox.x,highlightBox.y,highlightBox.width,highlightBox.height);}
ctx.save();ctx.beginPath();ctx.rect(highlightBox.x+0.5,highlightBox.y,highlightBox.width-1,highlightBox.height);ctx.clip();ctx.fillStyle=highlightBox.color;ctx.fillRect(highlightBox.x,highlightBox.y,highlightBox.width,highlightBox.height);ctx.strokeStyle='black';ctx.drawRotatedText(xCenter+highlightBox.fontSize/2,y+height-miniPieSize-3,270,highlightBox.fontSize,'black',text);if(miniPieValue!==null){ctx.fillStyle='black';ctx.fillRect(x,y+height-8.5,width,miniBarValue);}
ctx.restore();}};};Ext.namespace('Gemma');Gemma.MetaHeatmapDataSelection=Ext.extend(Ext.Panel,{constructor:function(searchCommand){if(typeof searchCommand!=='undefined'){Ext.apply(this,{param:searchCommand});}
Gemma.MetaHeatmapDataSelection.superclass.constructor.call(this);},_selectedDatasetGroups:[],_selectedGeneGroups:[],geneGroupValueObjects:[],experimentGroupValueObjects:[],waitingForGeneSessionGroupBinding:false,waitingForDatasetSessionGroupBinding:false,geneGroupNames:[],datasetGroupNames:[],taxonId:null,prepareVisualization:function(target){this.geneGroupNames=[];this.datasetGroupNames=[];this.geneGroupValueObjects=[];this.experimentGroupValueObjects=[];this._selectedGeneGroups=[];this._selectedDatasetGroups=[];this.waitingForGeneSessionGroupBinding=false;this.waitingForDatasetSessionGroupBinding=false;var i;for(i=0;i<this._geneCombos.length;i++){this._selectedGeneGroups.push(this._geneCombos[i].getGeneGroup());}
for(i=0;i<this._datasetCombos.length;i++){this._selectedDatasetGroups.push(this._datasetCombos[i].getSelected());}
var geneGroupsToBindToSession=[];for(i=0;i<this._selectedGeneGroups.length;i++){if(this._selectedGeneGroups[i]&&this._selectedGeneGroups[i]!==null){if(this._selectedGeneGroups[i].id===null||this._selectedGeneGroups[i].id===-1){this._selectedGeneGroups[i].geneIds=this._selectedGeneGroups[i].memberIds;geneGroupsToBindToSession.push(this._selectedGeneGroups[i]);}else{this.geneGroupValueObjects.push(this._selectedGeneGroups[i]);this.geneGroupNames.push(this._selectedGeneGroups[i].name);}}}
var j;if(geneGroupsToBindToSession.length!==0){this.waitingForGeneSessionGroupBinding=true;GeneSetController.addSessionGroups(geneGroupsToBindToSession,false,function(geneSets){if(geneSets===null||geneSets.length===0){return;}else{for(j=0;j<geneSets.length;j++){this.geneGroupValueObjects.push(geneSets[j]);this.geneGroupNames.push(geneSets[j].name);}}
this.waitingForGeneSessionGroupBinding=false;this.fireEvent('geneGroupsReadyForVisualization');}.createDelegate(this));}
var datasetGroupsToBindToSession=[];for(i=0;i<this._selectedDatasetGroups.length;i++){if(this._selectedDatasetGroups[i]&&this._selectedDatasetGroups[i]!==null){if(this._selectedDatasetGroups[i].id===null||this._selectedDatasetGroups[i].id===-1){this._selectedDatasetGroups[i].expressionExperimentIds=this._selectedDatasetGroups[i].memberIds;datasetGroupsToBindToSession.push(this._selectedDatasetGroups[i]);}else{this.experimentGroupValueObjects.push(this._selectedDatasetGroups[i]);this.datasetGroupNames.push(this._selectedDatasetGroups[i].name);}}}
if(datasetGroupsToBindToSession.length!==0){this.waitingForDatasetSessionGroupBinding=true;ExpressionExperimentSetController.addSessionGroups(datasetGroupsToBindToSession,false,function(datasetSets){if(datasetSets===null||datasetSets.length===0){return;}else{for(j=0;j<datasetSets.length;j++){this.experimentGroupValueObjects.push(datasetSets[j]);this.datasetGroupNames.push(datasetSets[j].name);}}
this.waitingForDatasetSessionGroupBinding=false;this.fireEvent('datasetGroupsReadyForVisualization');}.createDelegate(this));}
if(!this.waitingForDatasetSessionGroupBinding&&!this.waitingForGeneSessionGroupBinding){this.doVisualization(null);}},_initBackgroundTaskProgress:function(taskId){var backgroundTask=new Gemma.WaitHandler();backgroundTask.on('done',this._handleDiffExpSearchTaskResult,this);backgroundTask.on('fail',this._handleFail,this);backgroundTask.handleWait(taskId,false,true,true);},_handleDiffExpSearchTaskResult:function(data){this.fireEvent("visualizationLoaded");if(!data||data===null){if(this.applyToParam){Ext.DomHelper.overwrite(this.applyToParam,{html:'<img src="/Gemma/images/icons/warning.png"/> Sorry, there was an error performing your search.'});}}
else if(data.conditions.length===0){if(this.applyToParam){Ext.DomHelper.overwrite(this.applyToParam,{html:'<img src="/Gemma/images/icons/warning.png"/> Sorry, no data available for your search.'});}}else{var title='<b>Differential Expression Visualisation</b>';var config={toolbarTitle:title,visualizationData:data,showTutorial:this.param.showTutorial};if(this.applyToParam){Ext.apply(config,{applyTo:this.applyToParam});}
var _metaVizApp=new Gemma.Metaheatmap.Application(config);_metaVizApp.doLayout();_metaVizApp.refreshVisualization();}},_handleFail:function(error){this.fireEvent("visualizationLoaded");Ext.DomHelper.overwrite(this.applyToParam,{html:'<img src="/Gemma/images/icons/warning.png"/> Sorry, there was an error performing your search.'});},doVisualization:function(){if(typeof this.param==='undefined'){var waitMsg=Ext.Msg.wait("","Loading your visualization...");}
this._selectedDatasetGroups=[];this._selectedGeneGroups=[];if(!this.taxonId||this.taxonId===null){}
this.geneGroupValueObjects=this.geneGroupValueObjects;this.experimentGroupValueObjects=this.experimentGroupValueObjects;if(this.initexperimentGroupValueObjects){this.experimentGroupValueObjects=this.experimentGroupValueObjects.concat(this.initExperimentGroupResultValueObjects);}
if(this.initexperimentGroupValueObjects){this.experimentGroupValueObjects=this.experimentGroupValueObjects.concat(this.initexperimentGroupValueObjects);}
if(this.initGeneGroupValueObjects){this.geneGroupValueObjects=this.geneGroupValueObjects.concat(this.initGeneGroupValueObjects);}
if(this.initGeneValueObjects){this.geneGroupValueObjects=this.geneGroupValueObjects.concat(this.initGeneValueObjects);}
if(typeof this.initGeneSessionGroupQueries==='undefined'){this.initGeneSessionGroupQueries=[];}else{this.geneSessionGroupQueries=this.initGeneSessionGroupQueries;}
if(typeof this.initExperimentSessionGroupQueries==='undefined'){this.initExperimentSessionGroupQueries=[];}else{this.experimentSessionGroupQueries=this.initExperimentSessionGroupQueries;}
DifferentialExpressionSearchController.scheduleDiffExpSearchTask(this.taxonId,this.experimentGroupValueObjects,this.geneGroupValueObjects,this.initGeneSessionGroupQueries,this.initExperimentSessionGroupQueries,this._initBackgroundTaskProgress.createDelegate(this));},initializeSearchFromURL:function(url){alert("TODO initializeSearchFromURL");var param=Ext.urlDecode(url);var arrs;var i;if(param.t){this.taxonId=param.t;}
if(param.gs){this.initGeneSort=param.gs;}
if(param.es){this.initExperimentSort=param.es;}
if(param.ff){this.initFactorFilter=param.ff.split(',');}
if(param.gq){this.initGeneSessionGroupQueries=param.gq.split(',');}
if(param.eq){this.initExperimentSessionGroupQueries=param.gq.split(',');}},initComponent:function(){this.on('geneGroupsReadyForVisualization',function(){if(!this.waitingForDatasetSessionGroupBinding){this.doVisualization();}},this);this.on('datasetGroupsReadyForVisualization',function(){if(!this.waitingForGeneSessionGroupBinding){this.doVisualization();}},this);this.loadedFromURL=false;var queryStart=document.URL.indexOf("?");if(this.param&&!this.loadedFromURL){if(this.param.experimentSetValueObjects){this.experimentGroupValueObjects=this.param.experimentSetValueObjects;}
if(this.param.geneSetValueObjects){this.geneGroupValueObjects=this.param.geneSetValueObjects;}
if(this.param.geneNames){this.geneGroupNames=this.param.geneNames;}
if(this.param.datasetNames){this.datasetGroupNames=this.param.datasetNames;}
if(this.param.datasetCount){this.datasetsSelectedCount=this.param.datasetCount;}
if(this.param.taxonId){this.taxonId=this.param.taxonId;}
if(this.param.taxonName){this.taxonName=this.param.taxonName;}
if(this.param.geneSessionGroupQueries){this.geneSessionGroupQueries=this.param.geneSessionGroupQueries;}
if(this.param.experimentSessionGroupQueries){this.experimentSessionGroupQueries=this.param.experimentSessionGroupQueries;}
if(this.param.applyTo){this.applyToParam=this.param.applyTo;}
if(this.param.selectionsModified){this.selectionsModified=this.param.selectionsModified;}}
Gemma.MetaHeatmapDataSelection.superclass.initComponent.apply(this,arguments);if(this.geneGroupValueObjects&&this.experimentGroupValueObjects){this.doVisualization();}},onRender:function(){Gemma.MetaHeatmapDataSelection.superclass.onRender.apply(this,arguments);}});Ext.reg('metaVizDataSelection',Gemma.MetaHeatmapDataSelection);Ext.namespace('Gemma.Metaheatmap');Ext.namespace('Gemma.Constants');Gemma.Constants.DifferentialExpressionQvalueThreshold=0.05;Gemma.Metaheatmap.Config={};Gemma.Metaheatmap.Config.USE_GENE_COUNTS_FOR_ENRICHMENT=true;Gemma.Metaheatmap.Config.cellWidth=14;Gemma.Metaheatmap.Config.cellHeight=10;Gemma.Metaheatmap.Config.groupSeparatorHeight=4;Gemma.Metaheatmap.Config.columnSeparatorWidth=1;Gemma.Metaheatmap.Config.groupSeparatorWidth=4;Gemma.Metaheatmap.Config.geneLabelFontSize=9;Gemma.Metaheatmap.Config.columnLabelFontSize=9;Gemma.Metaheatmap.Config.ControlPanel={};Gemma.Metaheatmap.Config.ControlPanel.width=200;Gemma.Metaheatmap.Config.labelAngle=315.0;Gemma.Metaheatmap.Config.labelBaseYCoor=196;Gemma.Metaheatmap.Config.columnLabelHeight=210;Gemma.Metaheatmap.Config.minAppHeight=600;Gemma.Metaheatmap.Config.minAppWidth=600;Gemma.Metaheatmap.Config.windowPadding=50;Gemma.Metaheatmap.Config.toolPanelWidth=300;Gemma.Metaheatmap.Config.labelExtraSpace=Math.floor(Gemma.Metaheatmap.Config.labelBaseYCoor/Math.tan((360-Gemma.Metaheatmap.Config.labelAngle)*Math.PI/180));Gemma.Metaheatmap.Config.cellHighlightColor='red';Gemma.Metaheatmap.Config.defaultLabelColor='black';Gemma.Metaheatmap.Config.geneLabelHighlightColor='red';Gemma.Metaheatmap.Config.rowHighlightColor='pink';Gemma.Metaheatmap.Config.rowCellSelectColor='pink';Gemma.Metaheatmap.Config.columnHighlightColor='pink';Gemma.Metaheatmap.Config.analysisLabelHighlightColor='rgb(255,140,0)';Gemma.Metaheatmap.Config.baselineFactorValueColor='rgb(128, 0, 0)';Gemma.Metaheatmap.Config.factorValueDefaultColor='rgb(0,0,200)';Gemma.Metaheatmap.Config.analysisLabelBackgroundColor1='rgba(10,100,10, 0.1)';Gemma.Metaheatmap.Config.analysisLabelBackgroundColor2='rgba(10,100,10, 0.05)';Gemma.Metaheatmap.Config.columnExpandButtonColor='rgba(10,100,10, 0.8)';Gemma.Metaheatmap.Config.columnExpandButtonHighlightColor='';Gemma.Metaheatmap.Config.miniPieColor='rgb(95,158,160)';Gemma.Metaheatmap.Config.miniPieColorInvalid='rgb(192,192,192)';Gemma.Metaheatmap.Config.basicColourRange=new org.systemsbiology.visualization.DiscreteColorRange(20,{min:0,max:10},{maxColor:{r:197,g:27,b:138,a:1},minColor:{r:255,g:255,b:255,a:1},emptyDataColor:{r:100,g:100,b:100,a:0.8},passThroughBlack:false});Gemma.Metaheatmap.Config.contrastsColourRange=new org.systemsbiology.visualization.DiscreteColorRange(20,{min:-3,max:3},{maxColor:{r:255,g:215,b:0,a:1},minColor:{r:70,g:130,b:180,a:1},emptyDataColor:{r:100,g:100,b:100,a:0.8},passThroughBlack:true});Gemma.Metaheatmap.Config.FoldChangeColorScale={"5":"rgb(142, 1, 82)","4":"rgb(197, 27, 125)","3":"rgb(222, 119, 174)","2":"rgb(241, 182, 218)","1":"rgb(253, 224, 239)","0":"rgb(247, 247, 247)","-1":"rgb(230, 245, 208)","-2":"rgb(184, 225, 134)","-3":"rgb(127, 188, 65)","-4":"rgb(77, 146, 33)","-5":"rgb(39, 100, 25)"};Gemma.Metaheatmap.Config.ColourLegendSettings={discreteColorRangeObject:Gemma.Metaheatmap.Config.basicColourRange,discreteColorRangeObject2:Gemma.Metaheatmap.Config.contrastsColourRange,cellHeight:14,cellWidth:14,colorValues:[[null,"No Data"],[0,"1~0.5"],[0.1,"0.5~0.25"],[0.2,"0.1"],[0.3,"0.05"],[0.4,"0.01"],[0.6,"0.001"],[0.8,"0.0001"],[0.9,"0.00001"],[1,"< 0.00001"]],colorValues2:[[null,"No Data"],[3,"Up"],[-3,"Down"]],vertical:true,canvasId:'canvas1',canvasId2:'canvas12',legendTitle:'q-value',legendTitle2:'direction',textWidthMax:80,textOffset:1,fontSize:12,constrain:true};Ext.namespace('Gemma');Gemma.Metaheatmap.DownloadWindow=Ext.extend(Ext.Window,{dataToFormat:null,bodyStyle:'padding: 7px',width:800,height:400,layout:'fit',title:'Text Display of Differential Expression Visualization',fixQuotes:function(str){return str.replace('"',"'");},timeToString:function(timeStamp){var min=(timeStamp.getMinutes()<10)?'0'+timeStamp.getMinutes():timeStamp.getMinutes();return timeStamp.getFullYear()+"/"+(timeStamp.getMonth()+1)+"/"+timeStamp.getDate()+" "+timeStamp.getHours()+":"+min;},makeHeaderRow:function(){var row=[];row.push("Gene");row.push("Meta p-value");for(var i=0;i<this.conditions.items.length;i++){var condition=this.conditions.items[0];row.push("'"+condition.contrastFactorValue+" vs "+condition.baselineFactorValue+" : "+condition.datasetShortName+"'");}
return row.join('\t')+"\n";},makeOraRow:function(){var row=[];row.push("ORA p-value");row.push("NA");for(var i=0;i<this.conditions.items.length;i++){var condition=this.conditions.items[0];row.push(condition.ora);}
return row.join('\t')+"\n";},makeGeneRow:function(gene){var row=[];row.push(gene.name);row.push(gene.metaPvalue);for(var i=0;i<this.conditions.items.length;i++){var condition=this.conditions.items[i];var cell=this.cells.getCell(gene,condition);if(cell===null||cell.isProbeMissing){row.push("NA");}else{row.push(cell.correctedPValue);}}
return row.join('\t')+"\n";},makeGeneRowFoldChange:function(gene){var row=[];row.push(gene.name);row.push(gene.metaPvalue);for(var i=0;i<this.conditions.items.length;i++){var condition=this.conditions.items[i];var cell=this.cells.getCell(gene,condition);if(cell===null||cell.isProbeMissing){row.push("NA");}else{row.push(cell.logFoldChange);}}
return row.join('\t')+"\n";},convertToText:function(){var text='# Generated by Gemma\n'+'# '+this.timeToString(new Date())+'\n'+'# \n'+'# '+String.format(Gemma.CITATION_DIRECTIONS,'\n# ')+'\n'+'# \n'+'# This functionality is currently in beta. The file format may change in the near future. \n'+'# Fields are separated by tabs and delimited with double quotes\n'+'# \n';text+="P values. \n\n";text+=this.makeHeaderRow();text+=this.makeOraRow();for(var i=0;i<this.genes.items.length;i++){var gene=this.genes.items[i];text+=this.makeGeneRow(gene);}
text+="\n\n\n";text+="Log fold change values. \n\n";text+=this.makeHeaderRow();for(var i=0;i<this.genes.items.length;i++){var gene=this.genes.items[i];text+=this.makeGeneRowFoldChange(gene);}
this.show();this.textAreaPanel.update({text:text});},initComponent:function(){Ext.apply(this,{genes:this.geneTree,conditions:this.conditionTree,cells:this.cells,isPvalue:this.isPvalue,tbar:[{ref:'selectAllButton',xtype:'button',text:'Select All',scope:this,handler:function(){this.textAreaPanel.selectText();}}],items:[new Ext.form.TextArea({ref:'textAreaPanel',readOnly:true,tpl:new Ext.XTemplate('<tpl>','{text}','</tpl>'),bodyStyle:'white-space: nowrap',style:'white-space: nowrap',wordWrap:false,padding:7,autoScroll:true})]});Gemma.Metaheatmap.DownloadWindow.superclass.initComponent.call(this);},onRender:function(){Gemma.Metaheatmap.DownloadWindow.superclass.onRender.apply(this,arguments);}});Ext.namespace('Gemma.Metaheatmap');Gemma.Metaheatmap.Utils={};Gemma.Metaheatmap.Utils.calculateGeneLabelColumnHeight=function(geneNames){var initialHeight=20;for(var i=0;i<geneNames.length;i++){initialHeight+=geneNames[i].length*Gemma.MetaVisualizationConfig.cellHeight;initialHeight+=Gemma.MetaVisualizationConfig.groupSeparatorHeight;}
return initialHeight;};Gemma.Metaheatmap.Utils.shortenText=function(text,maxLength){if(text.length<=maxLength){return text;}
return text.substring(0,maxLength-1)+"~";};Gemma.Metaheatmap.Utils.shortenTextPxl=function(text,maxPxlLength){var pxlLength=CanvasTextFunctions.measure(null,9,text);if(text.length<=maxLength){return text;}
return text.substring(0,length-1)+"~";};Gemma.Metaheatmap.Utils.getCanvasContext=function(canvas){if(!!!document.createElement("canvas").getContext){canvas=$(window.G_vmlCanvasManager.initElement(canvas));}
return canvas.getContext('2d');};Gemma.Metaheatmap.Utils.createSortByPropertyFunction=function(property){return function(a,b){if(typeof a[property]=="number"){return(a[property]-b[property]);}else{return((a[property]<b[property])?-1:((a[property]>b[property])?1:0));}};};Gemma.Metaheatmap.Utils.formatPVal=function(p){if(p===null){return'-';}
if(isNaN(p)){return p;}
if(p<0.001){return sprintf("%.3e",p);}else{return sprintf("%.3f",p);}};Ext.util.Format.sciNotation=Gemma.Metaheatmap.Utils.formatPVal;Gemma.Metaheatmap.Utils.formatPercent=function(n,d,round){if(n===0){return"0";}
if(d===0||d===null||n===null){return"-";}
var p=n/d*100;if(round){if(p<1){return"< 1";}
else{return Math.round(p);}}else{if(p<0.01){return"< 0.01";}
else{return sprintf("%.2f",p);}}};Gemma.Metaheatmap.Utils.getBookmarkableLink=function(state){if(!state){return null;}
var queryStart=document.URL.indexOf("?");var url=queryStart>-1?document.URL.substr(0,queryStart):document.URL;url=url.replace('home','metaheatmap');url=url.replace('html#','html');var noGenes=true;var noExperiments=true;url+="?";if(typeof state.geneIds!=='undefined'&&state.geneIds!==null&&state.geneIds.length!==0){url+=String.format("g={0}&",state.geneIds.join(","));noGenes=false;}
if(typeof state.geneGroupIds!=='undefined'&&state.geneGroupIds!==null&&state.geneGroupIds.length!==0){url+=String.format("gg={0}&",state.geneGroupIds.join(","));noGenes=false;}
if(typeof state.eeIds!=='undefined'&&state.eeIds!==null&&state.eeIds.length!==0){url+=String.format("e={0}&",state.eeIds.join(","));noExperiments=false;}
if(typeof state.eeGroupIds!=='undefined'&&state.eeGroupIds!==null&&state.eeGroupIds.length!==0){url+=String.format("eg={0}&",state.eeGroupIds.join(","));noExperiments=false;}
if(typeof state.experimentSessionGroupQueries!=='undefined'&&!(state.experimentSessionGroupQueries.length===1&&typeof state.experimentSessionGroupQueries[0]==='undefined')&&state.experimentSessionGroupQueries!==null&&state.experimentSessionGroupQueries.length!==0){url+=String.format("eq={0}&",state.experimentSessionGroupQueries.join(","));noExperiments=false;}
if(typeof state.geneSessionGroupQueries!=='undefined'&&!(state.geneSessionGroupQueries.length===1&&typeof state.geneSessionGroupQueries[0]==='undefined')&&state.geneSessionGroupQueries!==null&&state.geneSessionGroupQueries.length>0){url+=String.format("gq={0}&",state.geneSessionGroupQueries.join(","));noGenes=false;}
if(typeof state.geneSort!=='undefined'&&state.geneSort!==null&&state.geneSort.length!==0){url+=String.format("gs={0}&",state.geneSort);}
if(typeof state.eeSort!=='undefined'&&state.eeSort!==null&&state.eeSort.length!==0){url+=String.format("es={0}&",state.eeSort);}
if(typeof state.factorFilters!=='undefined'&&state.factorFilters!==null&&state.factorFilters.length!==0){url+=String.format("ff={0}&",state.factorFilters.join(','));}
url+=String.format("t={0}&",state.taxonId);url=url.substring(0,url.length-1);if(noGenes||noExperiments){return null;}
return url.replace('#','');};Ext.namespace('Gemma.Metaheatmap');Gemma.Metaheatmap.HoverWindow=Ext.extend(Ext.Window,{width:350,closable:false,shadow:false,border:false,bodyBorder:false,isDocked:false,tplWriteMode:'overwrite',initComponent:function(){Gemma.Metaheatmap.HoverWindow.superclass.initComponent.apply(this,arguments);this.tpl=this.initTemplate_();},initTemplate_:function(){if(Gemma.Metaheatmap.Config.USE_GENE_COUNTS_FOR_ENRICHMENT){return new Ext.XTemplate('<span style="font-size: 12px ">','<tpl for=".">','<tpl if="type==\'condition\'">','<b>Experiment</b>: {datasetShortName}, {datasetName}<br>','<b>Condition</b>: {contrastFactorValue} vs {baselineFactorValue} ({factorCategory})<br> ','<b>Baseline</b>: {baselineFactorValue} <br> ','<b>Enrichment</b>: {numDiffExpressed} out of {numInSet} genes are differentially expressed with p-value {ora:sciNotation} <br> ','<b>Specificity</b>: {specificityPercent}% of genes were differentially expressed under this condition ({totalDiffExpressed} out of {totalOnArray})<br><br> ','</tpl>','<tpl if="type==\'minipie\'">','{percentDiffExpressed} of genes are differentially expressed.<br>','({totalDiffExpressed} of {totalOnArray}) Click for details.','</tpl>','<tpl if="type==\'gene\'">','<b>Gene</b>: {geneSymbol} {geneFullName}<br>','<b>Meta P value</b>: {geneMetaPvalue:sciNotation} based on {metaPvalueCount} p-values.<br>','</tpl>','<tpl if="type==\'cell\'">','<b>Gene</b>: {geneSymbol} {geneFullName}<br>','<b>Experiment</b>: {datasetShortName}, {datasetName}<br>','<b>Condition</b>: {contrastFactorValue} vs {baselineFactorValue} ({factorCategory})<br>','<b>Baseline</b>: {baselineFactorValue} <br>','<b>Number of probes</b>: {numberOfProbesDiffExpressed} / {numberOfProbes} <br>','<b>q-value</b>: {correctedPValue:sciNotation}<br>','<b>p-value</b>: {pvalue:sciNotation}<br>','<b>log fold change</b>: {foldChange}','</tpl>','</tpl></span>');}else{return new Ext.XTemplate('<span style="font-size: 12px ">','<tpl for=".">','<tpl if="type==\'condition\'">','<b>Experiment</b>: {datasetShortName}, {datasetName}<br>','<b>Condition</b>: {contrastFactorValue} vs {baselineFactorValue} ({factorCategory})<br> ','<b>Baseline</b>: {baselineFactorValue} <br> ','<b>Enrichment</b>: {numDiffExpressed} out of {numInSet} probes are differentially expressed with p-value {ora:sciNotation} <br> ','<b>Specificity</b>: {specificityPercent}% of probes were differentially expressed under this condition ({totalDiffExpressed} out of {totalOnArray})<br><br> ','</tpl>','<tpl if="type==\'minipie\'">','{percentDiffExpressed} of probes are differentially expressed.<br>','({totalDiffExpressed} of {totalOnArray}) Click for details.','</tpl>','<tpl if="type==\'gene\'">','<b>Gene</b>: {geneSymbol} {geneFullName}<br>','<b>Meta P value</b>: {geneMetaPvalue:sciNotation} based on {metaPvalueCount} p-values.<br>','</tpl>','<tpl if="type==\'cell\'">','<b>Gene</b>: {geneSymbol} {geneFullName}<br>','<b>Experiment</b>: {datasetShortName}, {datasetName}<br>','<b>Condition</b>: {contrastFactorValue} vs {baselineFactorValue} ({factorCategory})<br>','<b>Baseline</b>: {baselineFactorValue} <br>','<b>Number of probes</b>: {numberOfProbesDiffExpressed} / {numberOfProbes} <br>','<b>q-value</b>: {correctedPValue:sciNotation}<br>','<b>p-value</b>: {pvalue:sciNotation}<br>','<b>log fold change</b>: {foldChange}','</tpl>','</tpl></span>');}},onRender:function(){Gemma.Metaheatmap.HoverWindow.superclass.onRender.apply(this,arguments);}});Ext.reg('Metaheatmap.HoverWindow',Gemma.Metaheatmap.HoverWindow);Ext.namespace('Gemma');Gemma.GeneDetails=Ext.extend(Ext.Panel,{padding:10,defaults:{border:false,flex:0},layoutConfig:{align:'stretch'},layout:'vbox',renderHomologues:function(homologues,mainGeneSymbol){homologues.sort(function(a,b){var A=a.taxonCommonName.toLowerCase();var B=b.taxonCommonName.toLowerCase();if(A<B)return-1;if(A>B)return 1;return 0;});var homologueStr='';var j,homologue;for(j=0;j<homologues.length;j++){homologue=homologues[j];homologueStr+="<a title=\"View this homologous gene in Gemma\" href=\"/Gemma/gene/showGene.html?id="+
homologue.id+"\">"+
homologue.officialSymbol+"&nbsp;["+
homologue.taxonCommonName+"]</a>&nbsp;&nbsp;&nbsp;";}
if(homologueStr===''){homologueStr="No homologues defined";}
return homologueStr;},renderGeneSets:function(geneSets){geneSets.sort(function(a,b){var A=a.name.toLowerCase();var B=b.name.toLowerCase();if(A<B)return-1;if(A>B)return 1;return 0;});var geneSetLinks=[];for(var i=0;i<geneSets.length;i++){if(geneSets[i]&&geneSets[i].name&&geneSets[i].id){geneSetLinks.push('<a target="_blank" href="/Gemma/geneSet/showGeneSet.html?id='+geneSets[i].id+'">'+geneSets[i].name+'</a>');}}
if(geneSetLinks.length===0){geneSetLinks.push('Not currently a member of any gene group');}
return geneSetLinks;},renderMultifunctionality:function(geneDetails){if(geneDetails.multifunctionalityRank){return geneDetails.numGoTerms+" GO Terms; Overall multifunctionality "+geneDetails.multifunctionalityRank.toFixed(2);}else{return"[ Not available ]";}},renderPhenotypes:function(geneDetails){if(geneDetails.phenotypes&&geneDetails.phenotypes.length>0){var phenotypes=geneDetails.phenotypes;phenotypes.sort(function(a,b){var A=a.value.toLowerCase();var B=b.value.toLowerCase();if(A<B)return-1;if(A>B)return 1;return 0;});var i=0;var text='';var limit=Math.min(3,phenotypes.length);for(i=0;i<limit;i++){text+='<a target="_blank" href="'+Gemma.LinkRoots.phenotypePage+phenotypes[i].urlId+'">'+phenotypes[i].value+'</a>';if((i+1)!==limit){text+=', ';}}
if(limit<phenotypes.length){text+=', '+(phenotypes.length-limit)+' more';}
text+="<img style='cursor:pointer' src='/Gemma/images/magnifier.png' ext:qtip='See all associated phenotypes'"+"onClick='Ext.getCmp(&#39;"+this.id+"&#39;).changeTab(&#39;phenotypes&#39;)'>";return text;}else{return"[ None ]";}},changeTab:function(tabName){this.fireEvent('changeTab',tabName);},renderAssociatedExperiments:function(ncbiId,count){return'<a href="/Gemma/searcher.html?query=http%3A//purl.org/commons/record/ncbi_gene/'+ncbiId+'&scope=E">'+count+'</a>';},renderNodeDegree:function(geneDetails){if(geneDetails.nodeDegreeRank){return geneDetails.nodeDegreeRank.toFixed(2);}else{return"[ Not available ]";}},renderAliases:function(aliases){aliases.sort();return aliases.join(', ');},initComponent:function(){Gemma.GeneDetails.superclass.initComponent.call(this);this.on('afterrender',function(){if(!this.loadMask&&this.getEl()){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.generic,msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});}
this.loadMask.show();GeneController.loadGeneDetails(this.geneId,function(geneDetails){this.loadMask.hide();this.add([{html:'<div style="font-weight: bold; font-size:1.3em;">'+geneDetails.name+'<br />'+
geneDetails.officialName+'<br/></div>'},{layout:'form',flex:1,defaults:{border:false},items:[{fieldLabel:'Taxon',html:geneDetails.taxonCommonName},{fieldLabel:'Aliases',html:this.renderAliases(geneDetails.aliases)},{fieldLabel:'NCBI ID',html:geneDetails.ncbiId+' <a target="_blank" title="NCBI Gene link"'+'href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=gene&cmd=Retrieve&dopt=full_report&list_uids='+
geneDetails.ncbiId+'"><img alt="NCBI Gene Link" src="/Gemma/images/logo/ncbi.gif"/></a>'},{fieldLabel:'Homologues',html:this.renderHomologues(geneDetails.homologues,geneDetails.name)},{fieldLabel:'Gene Groups',html:this.renderGeneSets(geneDetails.geneSets).join(', ')},{fieldLabel:'Studies'+'&nbsp;<a class="helpLink" href="javascript: void(0)" onclick="showHelpTip(event, '+'\''+Gemma.HelpText.WidgetDefaults.GeneDetails.assocExpTT+'\'); return false">'+'<img src="/Gemma/images/help.png" /> </a>',html:this.renderAssociatedExperiments(geneDetails.ncbiId,geneDetails.associatedExperimentCount)},{fieldLabel:'Multifunc.'+'&nbsp;<a class="helpLink" href="javascript: void(0)" onclick="showHelpTip(event, '+'\''+Gemma.HelpText.WidgetDefaults.GeneDetails.multifuncTT+'\'); return false">'+'<img src="/Gemma/images/help.png" /> </a>',html:this.renderMultifunctionality(geneDetails)},{fieldLabel:'Hub score'+'&nbsp;<a class="helpLink" href="javascript: void(0)" onclick="showHelpTip(event, '+'\''+Gemma.HelpText.WidgetDefaults.GeneDetails.nodeDegreeTT+'\'); return false">'+'<img src="/Gemma/images/help.png" /> </a>',html:this.renderNodeDegree(geneDetails)},{fieldLabel:'Phenotypes'+'&nbsp;<a class="helpLink" href="javascript: void(0)" onclick="showHelpTip(event, '+'\''+Gemma.HelpText.WidgetDefaults.GeneDetails.phenotypeTT+'\'); return false">'+'<img src="/Gemma/images/help.png" /> </a>',html:this.renderPhenotypes(geneDetails)},{fieldLabel:'On platforms'+'&nbsp;<a class="helpLink" href="javascript: void(0)" onclick="showHelpTip(event, '+'\''+Gemma.HelpText.WidgetDefaults.GeneDetails.probesTT+'\'); return false">'+'<img src="/Gemma/images/help.png" /> </a>',html:geneDetails.compositeSequenceCount+' <a target="_blank" href="/Gemma/gene/showCompositeSequences.html?id='+geneDetails.id+'">'+'<img src="/Gemma/images/magnifier.png"> </a>'},{fieldLabel:'Notes',html:geneDetails.description}]}]);this.syncSize();}.createDelegate(this));});}});Ext.namespace('Gemma');Gemma.DIFF_THRESHOLD=0.01;Gemma.MAX_DIFF_RESULTS=75;Gemma.GenePage=Ext.extend(Ext.TabPanel,{autoScroll:true,defaults:{autoScroll:true,width:850},deferredRender:true,listeners:{'tabchange':function(tabPanel,newTab){newTab.fireEvent('tabChanged');},'beforetabchange':function(tabPanel,newTab,currTab){if(currTab){return currTab.fireEvent('leavingTab');}
return true;}},initComponent:function(){var geneId=this.geneId;Gemma.GenePage.superclass.initComponent.call(this);var details=new Gemma.GeneDetails({title:'Details',itemId:'details',geneId:geneId});details.on('changeTab',function(tabName){this.setActiveTab(tabName);},this);this.add(details);this.add(this.initDiffExTab(geneId));this.add(this.initCoexTab(geneId));this.add(this.initPhenotypeTab(geneId));this.add({title:'Gene Ontology Terms',xtype:'genegogrid',border:true,geneid:this.geneId,minHeight:150,deferLoadToRender:true,itemId:'goGrid'});this.add({xtype:'geneallenbrainatlasimages',geneId:geneId,title:'Expression Images',itemId:'expression'});var initialTab='details';this.loadSpecificTab=(document.URL.indexOf("?")>-1&&(document.URL.indexOf("tab=")>-1));if(this.loadSpecificTab){var param=Ext.urlDecode(document.URL.substr(document.URL.indexOf("?")+1));if(param.tab){if(this.getComponent(param.tab)!=undefined){initialTab=param.tab;}}}
this.on('render',function(){this.setActiveTab(initialTab);});},initCoexTab:function(geneId){var coexpressedGeneGrid=new Gemma.CoexpressionGrid({title:'Coexpression',colspan:2,lite:true,noSmallGemma:true,itemId:'coex'});coexpressedGeneGrid.on('render',function(){coexpressedGeneGrid.doSearch({geneIds:[geneId],quick:true,stringency:2,forceProbeLevelSearch:false});});return coexpressedGeneGrid;},initDiffExTab:function(geneId){var diffExGrid=new Gemma.ProbeLevelDiffExGrid({title:'Differential Expression',itemId:'diffEx'});diffExGrid.on('render',function(){var visColumnIndex=diffExGrid.getColumnModel().getIndexById('visualize');diffExGrid.getColumnModel().setHidden(visColumnIndex,false);if(!this.loadMask&&this.getEl()){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.generic,msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});}
this.loadMask.show();diffExGrid.getStore().load({params:[geneId,Gemma.DIFF_THRESHOLD,Gemma.MAX_DIFF_RESULTS]});});return diffExGrid;},initPhenotypeTab:function(geneId){var phenotypeEvidenceGridPanel=new Gemma.PhenotypeEvidenceGridPanel({title:'Phenotypes',iconCls:'icon-neurocarta',itemId:'phenotypes',hasRelevanceColumn:false,displayPhenotypeAsLink:true,displayEvidenceCodeFullName:true,deferLoadToRender:true,currentGene:{id:this.geneId,ncbiId:this.geneNcbiId,officialSymbol:this.geneSymbol,officialName:this.geneName,taxonCommonName:this.geneTaxonName,taxonId:this.geneTaxonId},listeners:{phenotypeAssociationChanged:function(phenotypes,gene){this.getStore().reload();}}});Gemma.Application.currentUser.on("logIn",function(userName,isAdmin){phenotypeEvidenceGridPanel.getStore().reload();},this);return phenotypeEvidenceGridPanel;}});var DesignMatrix={build:function(rows){var factors=rows[0].factors;var record=[];var columns=[];columns.push({header:"Assays",dataIndex:"count",sortable:"true",tooltip:"How many assays are in this group"});for(var i=0;i<factors.length;++i){var fn=factors[i];record.push({name:cleanName(fn),type:"string"});columns.push({header:fn,dataIndex:cleanName(fn),sortable:"true",tooltip:fn});}
record.push({name:"count",type:"int"});var designMatrixRow=Ext.data.Record.create(record);var cm=new Ext.grid.ColumnModel(columns);var data=[];for(var k=0;k<rows.length;++k){data[k]=[];for(var j=0;j<factors.length;++j){data[k][j]=rows[k].factorValueMap[factors[j]];}
data[k][factors.length]=rows[k].count;}
this.ds=new Ext.data.Store({proxy:new Ext.data.MemoryProxy(data),reader:new Ext.data.ArrayReader({},designMatrixRow),remoteSort:false});this.ds.load();var height=Ext.get('eeDesignMatrix').getHeight();Ext.DomHelper.overwrite(Ext.get('eeDesignMatrix'),'');this.grid=new Ext.grid.GridPanel({ds:this.ds,cm:cm,title:"Experimental Design overview",renderTo:"eeDesignMatrix",height:height,viewConfig:{forceFit:true}});},init:function(entityDelegator){ExpressionExperimentController.getDesignMatrixRows(entityDelegator,this.build);}};function cleanName(string){return string.replace(/[\\\/\"\'\s\(\),\.;\[\]]/g,"_");}
Gemma.eeDesignMatrix=Ext.extend(Ext.grid.GridPanel,{constructor:function(config){this.configParam=config;Gemma.eeDesignMatrix.superclass.constructor.apply(this,arguments);},collapsible:true,title:"Experimental Design",height:125,width:600,cm:new Ext.grid.ColumnModel([{header:"Assays",dataIndex:"count",sortable:"true",tooltip:"How many assays are in this group"}]),viewConfig:{forceFit:true},initComponent:function(){var record=[];record.push({name:"count",type:"int"});var columns=[];columns.push({header:"Assays",dataIndex:"count",sortable:"true",tooltip:"How many assays are in this group"});var designMatrixRow=Ext.data.Record.create(record);Ext.apply(this,{store:new Ext.data.Store({proxy:new Ext.data.MemoryProxy(data),reader:new Ext.data.ArrayReader({},designMatrixRow),remoteSort:false})});Gemma.eeDesignMatrix.superclass.initComponent.apply(this);ExpressionExperimentController.getDesignMatrixRows(this.configParam,this.build);},build:function(rows){var factors=rows[0].factors;var record=[];var columns=[];columns.push({header:"Assays",dataIndex:"count",sortable:"true",tooltip:"How many assays are in this group"});for(var i=0;i<factors.length;++i){var fn=factors[i];record.push({name:cleanName(fn),type:"string"});columns.push({header:fn,dataIndex:cleanName(fn),sortable:"true",tooltip:fn});}
record.push({name:"count",type:"int"});var designMatrixRow=Ext.data.Record.create(record);Ext.apply(this,{cm:new Ext.grid.ColumnModel(columns)});var data=[];for(var k=0;k<rows.length;++k){data[k]=[];for(var j=0;j<factors.length;++j){data[k][j]=rows[k].factorValueMap[factors[j]];}
data[k][factors.length]=rows[k].count;}
this.store.loadData(data);}});Ext.namespace('Gemma');Gemma.DownloadWindow=Ext.extend(Ext.Window,{dataToFormat:null,bodyStyle:'padding: 7px',width:800,height:400,layout:'fit',replaceDelimiterWithSpace:function(str){return str.replace('\t',' ');},timeToString:function(timeStamp){var min=(timeStamp.getMinutes()<10)?'0'+timeStamp.getMinutes():timeStamp.getMinutes();return timeStamp.getFullYear()+"/"+(timeStamp.getMonth()+1)+"/"+timeStamp.getDate()+" "+timeStamp.getHours()+":"+min;},convertToText:function(){var text='# Generated by Gemma\n'+'# '+this.timeToString(new Date())+'\n'+'# \n'+'# '+String.format(Gemma.CITATION_DIRECTIONS,'\n# ')+'\n'+'# \n'+'# This functionality is currently in beta. The file format may change in the near future. \n'+'# Fields are delimited by tabs.\n'+'# \n'+"# "+this.downloadDataHeader+"\n";for(var i=0;i<this.downloadData.length;i++){var downloadDataRow=this.downloadData[i];text+=downloadDataRow.join('\t')+"\n";}
this.show();this.textAreaPanel.update({text:text});},initComponent:function(){Ext.apply(this,{title:'Text Display of '+this.windowTitleSuffix,downloadDataHeader:this.downloadDataHeader,downloadData:this.downloadData,tbar:[{ref:'selectAllButton',xtype:'button',text:'Select All',scope:this,handler:function(){this.textAreaPanel.selectText();}}],items:[new Ext.form.TextArea({ref:'textAreaPanel',readOnly:true,tpl:new Ext.XTemplate('<tpl>','{text}','</tpl>'),bodyStyle:'white-space: nowrap',style:'white-space: nowrap',wordWrap:false,padding:7,autoScroll:true})]});Gemma.DownloadWindow.superclass.initComponent.call(this);}});Ext.namespace('Gemma');Gemma.GeneAllenBrainAtlasImages=Ext.extend(Ext.Panel,{geneId:null,padding:10,defaults:{border:false},initComponent:function(){Gemma.GeneAllenBrainAtlasImages.superclass.initComponent.call(this);this.on('render',function(){if(!this.loadMask){this.loadMask=new Ext.LoadMask(this.getEl(),{msg:Gemma.StatusText.Loading.generic,msgCls:'absolute-position-loading-mask ext-el-mask-msg x-mask-loading'});}
this.loadMask.show();GeneController.loadAllenBrainImages(this.geneId,function(imageObjects){this.loadMask.hide();if(!imageObjects||imageObjects.length===0){this.add({html:'No images available'});}else{var img=imageObjects[0];var homologueText=(img.usingHomologue)?'Images are for homologous mouse gene: '+'<a target="_blank" href="/Gemma/gene/showGene.html?id='+img.abaHomologousMouseGene.id+'">'+
img.abaHomologousMouseGene.officialSymbol+' ['+img.abaHomologousMouseGene.taxonCommonName+']</a>':'';this.add({html:'<h3>Allen Brain Atlas expression pattern'+'<a class="helpLink" href="javascript:void(0)"'+'onclick="showHelpTip(event, \''+Gemma.HelpText.WidgetDefaults.GeneAllenBrainAtlasImages.helpTT+'\'); return false">'+'<img src="/Gemma/images/help.png" /> </a>'+'<a title="Go to Allen Brain Atlas details for '+img.queryGeneSymbol+'" href="'+img.abaGeneURL+'" target="_blank">'+'<img src="/Gemma/images/logo/aba-icon.png" height="20" width="20" /> </a>'+'</h3>'+'<p>'+homologueText+'<p/>'});var i;for(i=0;i<imageObjects.length;i++){img=imageObjects[i];var tmpThumblink=img.downloadExpressionPath.replace("zoom=2","zoom=0");this.add({html:'<div style="cursor: pointer; float: left; padding: 8px">'+'<a title="Allen Brain Atlas Image for '+img.queryGeneSymbol+', click to enlarge" '+'onClick="Gemma.geneLinkOutPopUp( &#34; '+img.downloadExpressionPath+' &#34; )">'+'<img src="'+tmpThumblink+'" /> </a>'+'</div>'});}
this.doLayout();}}.createDelegate(this));});}});Ext.reg('geneallenbrainatlasimages',Gemma.GeneAllenBrainAtlasImages);Gemma.geneLinkOutPopUp=function(abaImageUrl){if(abaImageUrl==null)
return;var abaWindowId="geneDetailsAbaWindow";var win=Ext.getCmp(abaWindowId);if(win!=null){win.close();}
win=new Ext.Window({html:"<img src='"+abaImageUrl+"'>",id:abaWindowId,stateful:false,title:"<img height='15'  src='/Gemma/images/abaExpressionLegend.gif'>"});win.show(this);};progressbar=function(config){Ext.apply(this,config);this.addEvents({finish:true,fail:true,cancel:true});progressbar.superclass.constructor.call(this);};Ext.extend(progressbar,Ext.util.Observable,{waiting:false,bar:null,determinate:false,previousMessage:"",timeoutid:null,detbarwidth:200,BAR_UPDATE_INTERVAL:4000,handleResponseFailure:function(data,e){},handleFailure:function(data,e){this.stopProgress();var messageArea=Ext.get("messages");if(messageArea){var messageText;if(data.description){messageText=data.description;}else if(!e){messageText=data;}else if(e.message){messageText=e.message;}else{messageText=e;}
this.fireEvent("fail",messageText);}else{this.fireEvent('fail');}},findTaskId:function(){var queryStart=document.URL.indexOf("?");if(queryStart>-1){var param=Ext.urlDecode(document.URL.substr(queryStart+1));if(param.taskId)
return param.taskId;}
return dwr.util.getValue("taskId");},startProgress:function(){if(this.determinate==0){document.getElementById("progressTextArea").innerHTML="Starting job...";}else{}
if(!this.taskId){var taskId=this.findTaskId();if(!taskId){alert("no task id");return;}
this.taskId=taskId;}
var callParams=[];var callback=this.updateProgress.createDelegate(this);var errorHandler=this.handleResponseFailure.createDelegate(this);callParams.push(callback);callParams.push(errorHandler);var f=this.refreshProgress.createDelegate(this,callParams,false);this.timeoutid=window.setInterval(f,this.BAR_UPDATE_INTERVAL);},stopProgress:function(){window.clearInterval(this.timeoutid);this.previousMessage=null;this.waiting=false;},updateProgress:function(data){this.waiting=false;if(this.determinate==1){this.updateDeterminateProgress(data);}else{this.updateIndeterminateProgress(data);}},updateDeterminateProgress:function(data){var messages="";var percent=0;if(data.push){for(var i=0,len=data.length;i<len;i++){var d=data[i];messages=messages+"<br/>"+d.description;delta=d.percent-percent;percent=d.percent;if(delta>5){document.getElementById("progress-bar-box-content").style.width=parseInt(percent*(detbarwidth/100))
+"px";}
if(d.failed){this.stopProgress();return this.handleFailure(d);}else if(d.done){this.fireEvent('done',d.payload);this.stopProgress();if(this.doFoward&&d.forwardingURL!==undefined&&d.forwardingURL!==null){window.location=d.forwardingURL+"?taskId="+this.taskId;}else{var callback=this.maybeDoForward.createDelegate(this,[],true);TaskCompletionController.checkResult(this.taskId,callback);}
return;}}}else{if(data.done){this.stopProgress();return this.handleFailure(data);}else if(d.done){this.fireEvent('done',data.payload);this.stopProgress();}
percent=data.percent;}
document.getElementById("progress-bar-box-content").style.width=parseInt(percent*this.detbarwidth/100)
+"px";},maybeDoForward:function(url){if(this.doForward&&url){window.location=url;}},updateIndeterminateProgress:function(data){var messages="";if(data.push){for(var i=0,len=data.length;i<len;i++){var d=data[i];messages=messages+"<br/>"+d.description;if(d.failed){this.stopProgress();return this.handleFailure(d);}else if(d.done){this.fireEvent('done',d.payload);this.stopProgress();if(this.doFoward&&d.forwardingURL!==undefined&&d.forwardingURL!==null){window.location=d.forwardingURL+"?taskId="+this.taskId;}else{var callback=this.maybeDoForward.createDelegate(this,[],true);var errorHandler=this.handleFailure.createDelegate(this,[],true);TaskCompletionController.checkResult(this.taskId,{callback:callback,errorHandler:errorHandler});}
return;}}}else{if(data.done){this.stopProgress();return this.handleFailure(data);}else if(d.done){this.fireEvent('done',data.payload);this.stopProgress();}}
if(!document.getElementById("progressTextArea"))
return;if(this.previousMessage!=messages&&messages.length>0){this.previousMessage=messages;document.getElementById("progressTextArea").innerHTML+=messages;document.getElementById("progressTextArea").scrollTop=document.getElementById("progressTextArea").scrollHeight;}else{document.getElementById("progressTextArea").innerHTML=document.getElementById("progressTextArea").innerHTML.replace(".......","");document.getElementById("progressTextArea").innerHTML+=".";document.getElementById("progressTextArea").scrollTop=document.getElementById("progressTextArea").scrollHeight;}},cancelJob:function(){this.waiting=false;document.getElementById("progressTextArea").innerHTML="Cancelling...";var f=this.cancelCallback.createDelegate(this,[],true);ProgressStatusService.cancelJob(this.taskId,f);},refreshProgress:function(callback,errorHandler){if(!this.waiting){ProgressStatusService.getProgressStatus(this.taskId,{callback:callback,errorHandler:errorHandler});this.waiting=true;}},cancelCallback:function(data){this.stopProgress();var messageArea=Ext.get("messages");if(messageArea){Ext.DomHelper.overwrite("messages",{tag:'img',src:'/Gemma/images/icons/ok.png'});Ext.DomHelper.append("messages","&nbsp;Job was cancelled.");}
this.fireEvent('cancel');},createIndeterminateProgressBar:function(){this.determinate=0;this.bar=this.createIndeterminateBarDetails();f=this.cancelJob.createDelegate(this,[],true);Ext.get("cancel-button").on('click',f);},createDeterminateProgressBar:function(){this.determinate=1;var div='<div style="width:350px;margin:10px;"> <input style="float:left;margin:0px;" type="button" id="cancel-button" name="Cancel" value="Cancel job" /> <div id="progbar" style="margin:5px;width:'
+detbarwidth
+'x;float:right;border:1px solid;">  <div id="progress-bar-box-content" style="float:left;height:10px;width:40px;">  </div> </div></div>'
Ext.DomHelper.overwrite("progress-area",div);f=this.cancelJob.createDelegate(this,[],true);Ext.get("cancel-button").on('click',f);},createIndeterminateBarDetails:function(){var div='<div id="progressTextArea" class="clob" style="font-size:smaller;width:650px;margin:10px;padding:4px;" ><input type="textarea" /></div><div style="width:650px;"><input style="float:left" type="button" id="cancel-button" name="Cancel" value="Cancel job" /><img style="float:right" src="/Gemma/images/loading.gif" /></div>';Ext.DomHelper.overwrite("progress-area",div);}});Ext.namespace('Gemma');Gemma.SecurityManager={};Gemma.SecurityManager.adminGroupName="Administrators";Gemma.SecurityManager.usersGroupName="Users";Gemma.SecurityManager.managePermissions=function(elid,clazz,id,securityFormTitle){Ext.DomHelper.overwrite(elid,{tag:'img',src:"/Gemma/images/loading.gif"});SecurityController.getSecurityInfo({classDelegatingFor:clazz,id:id},{callback:function(securityInfo){showSecurityForm(securityInfo);},errorHandler:function(data){alert("There was an error getting your group information: "+data);}});var showSecurityForm=function(securityInfo){var widgetWidth=500;var isPublic=securityInfo.publiclyReadable;var isShared=securityInfo.shared;var canEdit=securityInfo.currentUserCanwrite;var isOwner=securityInfo.currentUserOwns;var ownerName=securityInfo.owner.authority;var ownersGroups=securityInfo.ownersGroups;var ownerIsAdmin=false;if(ownerName=='GROUP_ADMIN'){ownerIsAdmin=true;}
else{for(var k=0,len=ownersGroups.length;k<len;k++){var groupName=ownersGroups[k];if(groupName===Gemma.SecurityManager.adminGroupName){ownerIsAdmin=true;break;}}}
var readers=securityInfo.groupsThatCanRead;var writers=securityInfo.groupsThatCanWrite;var availableGroups=securityInfo.availableGroups;var clazz=securityInfo.entityClazz;var readerChecks=[];var writerChecks=[];if(availableGroups.length===0){readerChecks=[{xtype:'panel',border:false,html:Gemma.HelpText.WidgetDefaults.SecurityManager.noGroupsToShareWith}];writerChecks=[{xtype:'panel',border:false,html:Gemma.HelpText.WidgetDefaults.SecurityManager.noGroupsToShareWith}];}
for(var i=0,len=availableGroups.length;i<len;i++){var groupName=availableGroups[i];var boxLabel=groupName+((groupName===Gemma.SecurityManager.usersGroupName)?' (This group includes all registered Gemma users)':(groupName===Gemma.SecurityManager.adminGroupName)?' (Admin users can always see all entities)':'');readerChecks.push(new Ext.form.Checkbox({checked:readers.indexOf(groupName)>=0,boxLabel:boxLabel,id:groupName+"-read-chk",disabled:groupName===Gemma.SecurityManager.adminGroupName||!canEdit}));writerChecks.push(new Ext.form.Checkbox({checked:writers.indexOf(groupName)>=0,boxLabel:boxLabel,id:groupName+"-write-chk",disabled:groupName===Gemma.SecurityManager.adminGroupName||!canEdit}));}
var publicReadingFieldSet=new Ext.ux.RadioFieldset({radioToggle:true,radioName:'readingRadio',radioId:'public-radio',disableRadio:!canEdit,title:'Public',defaultType:'checkbox',collapsed:!isPublic,checked:isPublic,layout:'anchor',defaults:{anchor:'100%'},items:[{xtype:'panel',border:false,width:widgetWidth-50,bodyStyle:'background-color:#F7F9D0;padding:5px;border:1px solid #FF7575',html:Gemma.HelpText.WidgetDefaults.SecurityManager.publicWarning}]});var privateReadingFieldSet=new Ext.ux.RadioFieldset({radioToggle:true,radioName:'readingRadio',radioId:'private-radio',disableRadio:!canEdit,title:'Private',defaultType:'checkbox',collapsed:isPublic,checked:!isPublic,layout:'anchor',defaults:{anchor:'100%'},items:readerChecks});publicReadingFieldSet.on('expand',function(){privateReadingFieldSet.collapse();},this);privateReadingFieldSet.on('expand',function(){publicReadingFieldSet.collapse();},this);var readerFieldSet={width:widgetWidth,xtype:'fieldset',title:'Reading Permissions',collapsed:false,layout:'anchor',defaults:{anchor:'100%'},items:[publicReadingFieldSet,privateReadingFieldSet]};var privateWritingFieldSet=new Ext.ux.RadioFieldset({radioToggle:true,radioName:'writingRadio',disableRadio:!canEdit,title:'Private',defaultType:'checkbox',collapsed:false,checked:true,layout:'anchor',defaults:{anchor:'100%'},items:writerChecks});var writerFieldSet={width:widgetWidth,xtype:'fieldset',title:'Writing Permissions',disableRadio:!canEdit,collapsed:false,style:'margin-top:40px',layout:'anchor',defaults:{anchor:'100%'},items:[privateWritingFieldSet,{tag:'div',html:'Note that any group given write access will also have read access.',border:false}]};var saveChanges=function(b,e){if(securityPanel&&securityPanel.getEl()){var loadMask=new Ext.LoadMask(securityPanel.getEl(),{msg:"Saving changes..."});loadMask.show();}
securityInfo.publiclyReadable=Ext.get('public-radio').dom.checked;var updatedGroupsThatCanRead=[];var updatedGroupsThatCanWrite=[];var shared=false;for(var i=0,len=availableGroups.length;i<len;i++){var groupName=availableGroups[i];if(groupName===Gemma.SecurityManager.adminGroupName){continue;}
if(Ext.getCmp(groupName+"-write-chk").getValue()){updatedGroupsThatCanWrite.push(groupName);shared=true;}
if(Ext.getCmp(groupName+"-read-chk").getValue()||Ext.getCmp(groupName+"-write-chk").getValue()){updatedGroupsThatCanRead.push(groupName);shared=true;}}
securityInfo.groupsThatCanWrite=updatedGroupsThatCanWrite;securityInfo.groupsThatCanRead=updatedGroupsThatCanRead;SecurityController.updatePermission(securityInfo,{callback:function(updatedInfo){securityPanel.destroy();Gemma.SecurityManager.updateSecurityLink(elid,updatedInfo.entityClazz,updatedInfo.entityId,updatedInfo.publiclyReadable,updatedInfo.shared,updatedInfo.currentUserOwns);},errorHandler:function(){securityPanel.destroy();alert("There was an error saving the settings.");Gemma.SecurityManager.updateSecurityLink(elid,updatedInfo.entityClazz,updatedInfo.entityId,updatedInfo.publiclyReadable,updatedInfo.shared,updatedInfo.currentUserOwns);}});};var ownerHtml="<b>Owner</b>: "+ownerName;var isAdmin=(Ext.getDom('hasAdmin'))?Ext.getDom('hasAdmin').getValue():false;if(isAdmin){if(ownerIsAdmin){ownerHtml=ownerHtml+' (Administrator)';}else{ownerHtml=ownerHtml+' (Registered non-administrator)';}}
var securityPanel=new Ext.Window({title:"Security for: "+
(securityFormTitle==null?Ext.util.Format.ellipsis(securityInfo.entityName,70,true):securityFormTitle),minimizable:false,maximizable:false,width:widgetWidth+30,modal:true,bodyStyle:'padding:5px 5px 0;background-color:white',stateful:false,autoScroll:true,shadow:false,initComponent:function(){Ext.Window.superclass.initComponent.call(this);},items:[{xtype:'panel',html:ownerHtml,border:false,padding:'10'},readerFieldSet,writerFieldSet],buttons:[{text:"Save changes",disabled:!canEdit,hidden:!canEdit,handler:saveChanges.createDelegate(this),scope:this},{text:(canEdit)?'Cancel':'OK',handler:function(b,e){securityPanel.destroy();Gemma.SecurityManager.updateSecurityLink(elid,clazz,id,isPublic,isShared,canEdit,isOwner);}}]});securityPanel.show();};};Gemma.SecurityManager.updateSecurityLink=function(elid,clazz,id,isPublic,isShared,canEdit,isOwner){var newLink=Gemma.SecurityManager.getSecurityLink(clazz,id,isPublic,isShared,canEdit,elid,true,null,isOwner);Ext.DomHelper.overwrite(elid,newLink);};Gemma.SecurityManager.getSecurityLink=function(clazz,id,isPublic,isShared,canEdit,elid,forUpdate,securityFormTitle,currentUserIsOwner){var icon='';if(canEdit){if(currentUserIsOwner){icon=isPublic?'<img src="/Gemma/images/icons/world_edit_mine.png" ext:qtip="Public; click to edit permissions" ext:qtip="Public" alt="public"/>':'<img src="/Gemma/images/icons/lock_edit_mine.png" ext:qtip="Private; click to edit permissions" ext:qtip="Private"  alt="private"/>';}else{icon=isPublic?'<img src="/Gemma/images/icons/world_edit.png" ext:qtip="Public; click to edit permissions" ext:qtip="Public" alt="public"/>':'<img src="/Gemma/images/icons/lock_edit.png" ext:qtip="Private; click to edit permissions" ext:qtip="Private"  alt="private"/>';}}else{icon=isPublic?'<img src="/Gemma/images/icons/world.png" ext:qtip="Public; click to view details" ext:qtip="Public"  alt="public"/>':'<img src="/Gemma/images/icons/lock.png" ext:qtip="Private click to view details" ext:qtip="Private"  alt="private"/>';}
var sharedIcon=isShared?'<img src="/Gemma/images/icons/group.png" ext:qtip="Shared"  alt="shared"/>':'';if(!elid){var elid=Ext.id();}
var dialog='style="cursor:pointer" onClick="return Gemma.SecurityManager.managePermissions(\''+elid+'\', \''+clazz+'\',\''+id+'\''+(securityFormTitle==null?'':', \''+securityFormTitle+'\'')+');"';if(forUpdate){return icon+'&nbsp;'+sharedIcon;}else{return'<span  '+dialog+' id="'+elid+'" >'+icon+'&nbsp;'+sharedIcon+'</span>';}};Gemma.SecurityManager.getSecurityUrl=function(clazz,id){SecurityController.getSecurityInfo({classDelegatingFor:clazz,id:id},{callback:function(securityInfo){var isPublic=securityInfo.publiclyReadable;var isShared=securityInfo.shared;var canEdit=securityInfo.currentUserCanwrite;var isOwner=securityInfo.currentUserOwns;return Gemma.SecurityManager.getSecurityLink(clazz,id,isPublic,isShared,canEdit,null,null,null,isOwner);},errorHandler:function(data){alert("There was an error getting your group information: "+data);}});};