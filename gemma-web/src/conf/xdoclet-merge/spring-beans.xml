<!--
	This document is a "merge file" used by XDoclet to automagically generate a spring beans configuration file 
	for the web application.  The generated web-context will have the name action-servlet.xml and is
	located in the WEB-INF diretory.
	
	Beans defined in this file are used only for web client interaction.
	
	author: keshav
	author: pavlidis
	version: $Id$
-->
<!-- 
	====================================================  
	Mapping URLS to controllers
	==================================================== -->
<!-- explicit mappings of patterns to urls -->
<bean id="simpleUrlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
	<property name="order" value="1" />
	<property name="alwaysUseFullPath" value="true" />
	<property name="interceptors">
		<list>
			<ref bean="openSessionInViewInterceptor" />
		</list>
	</property>
	<property name="mappings">
		<props>
			<prop key="/dwr/**/*">dwrController</prop>
			<prop key="/arrays/*">arrayDesignController</prop>
			<prop key="/signup.html">signupController</prop>
			<prop key="/editUser.html">userFormController</prop>
			<prop key="/editProfile.html">userFormController</prop>
			<prop key="/uploadFile.html">fileUploadController</prop>
			<prop key="/selectFile.html">fileUploadController</prop>
			<prop key="/users.html">userListController</prop>
			<prop key="/activeUsers.html">userListController</prop>
			<prop key="/bibRefEdit.html">bibliographicReferenceEditFormController</prop>
			<prop key="/bibliographicReferenceView.html">bibliographicReferenceEditFormController</prop>
			<prop key="/bibRefSearch.html">pubMedQueryController</prop>
			<prop key="/arrayDesign/editArrayDesign.html">arrayDesignFormController</prop>
			<prop key="/arrayDesign/associateSequences.html">arrayDesignSequenceAddController</prop>
			<prop key="/bioAssay/*">bioAssayController</prop>
			<prop key="/bioAssay/editBioAssay.html">bioAssayFormController</prop>
			<prop key="/bioMaterial/*">bioMaterialController</prop>
			<prop key="/designElement/*">designElementController</prop>
			<prop key="/experimentalDesign/*">experimentalDesignController</prop>
			<prop key="/experimentalDesign/editExperimentalDesign.html">experimentalDesignFormController</prop>
			<prop key="/experimentalFactor/*">experimentalFactorController</prop>
			<prop key="/expressionExperiment/*">expressionExperimentController</prop>
			<prop key="/expressionExperiment/editExpressionExperiment.html">expressionExperimentFormController</prop>
			<prop key="/loadExpressionExperiment.html">expressionExperimentLoadController</prop>
			<prop key="/expressionExperiment/expressionExperimentVisualization.html">
				expressionExperimentVisualizationController
			</prop>
			<prop key="/candidateGeneList*">candidateGeneListController</prop>
			<prop key="/geneDetail.html">geneController</prop>
			<prop key="/geneFinder.html">geneFinderController</prop>
			<prop key="/addTestData.html">testDataAddingController</prop>
			<prop key="/searchCoexpression.html">coexpressionSearchController</prop>
			<prop key="/genome/goldenPathSequenceLoad.html">goldenPathSequenceLoadController</prop>
		</props>
	</property>
</bean>
<!-- default mapping, as a fallback. Avoid using. -->
<bean id="beanNameUrlHandlerMapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
	<property name="order" value="2" />
	<property name="interceptors">
		<list>
			<ref bean="openSessionInViewInterceptor" />
		</list>
	</property>
</bean>
<!-- ==================================================== -->
<!-- 
	Interceptor to keep Hibernate sessions available in views. 
	Use this instead of the Filter configured in web.xml. Note that we don't 
	need a special AndroMDA interceptor, this takes advantage 
	of the sessionFactory that is already set up in the Spring context.
-->
<!-- ==================================================== -->
<bean name="openSessionInViewInterceptor"
	class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
	<property name="sessionFactory">
		<ref bean="sessionFactory" />
	</property>
</bean>
<!-- ==================================================== -->
<!--  
	Mapping urls to views. List views here that are just jsps and that don't need a controller.
-->
<!-- ==================================================== -->
<bean id="filenameController" class="org.springframework.web.servlet.mvc.UrlFilenameViewController"
	name="/mainMenu.html /flushCache.html /loadExpressionExperimentProgress.html" />
<!-- ==================================================== -->
<!-- Exception handler. -->
<!-- ==================================================== -->
<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	<property name="exceptionMappings">
		<props>
			<prop key="org.springframework.dao.DataAccessException">dataAccessFailure</prop>
			<prop key="java.lang.Exception">error</prop>
		</props>
	</property>
</bean>
<!-- ==================================================== -->
<!--          AJAX (DWR)                                  -->
<!-- ==================================================== -->
<bean id="dwrController" class="org.springframework.web.servlet.mvc.ServletWrappingController">
	<property name="servletClass">
		<value>uk.ltd.getahead.dwr.DWRServlet</value>
	</property>
	<property name="initParameters">
		<props>
			<prop key="debug">true</prop>
		</props>
	</property>
</bean>
<!-- ========================= COMPASS START ========================= -->
<!-- COMPASS CONTROLLER DEFINITIONS -->
<bean id="searchController" name="/searcher.html" class="org.compass.spring.web.mvc.CompassSearchController">
	<property name="compass">
		<ref bean="compass" />
	</property>
	<property name="searchView">
		<value>searcher</value>
	</property>
	<property name="searchResultsView">
		<value>searcher</value>
	</property>
	<property name="pageSize">
		<value>10</value>
	</property>
</bean>
<bean id="indexController" name="/indexer.html" class="org.compass.spring.web.mvc.CompassIndexController">
	<property name="compassGps">
		<ref bean="compassGps" />
	</property>
	<property name="indexView">
		<value>indexer</value>
	</property>
	<property name="indexResultsView">
		<value>indexer</value>
	</property>
</bean>
<!-- COMPASS END -->
<!-- ==================================================== -->
<!-- Action resolvers for MultiActionControllers -->
<!-- ==================================================== -->
<bean id="bibRefActions" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
	<property name="mappings">
		<props>
			<prop key="/bibRef/showAllBibRef.html">showAll</prop>
			<prop key="/bibRef/deleteBibRef.html">delete</prop>
			<prop key="/bibRef/showBibRef.html">show</prop>
			<prop key="/bibRef/searchBibRef.html">show</prop>
		</props>
	</property>
</bean>
<bean id="arrayDesignActions" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
	<property name="mappings">
		<props>
			<prop key="/arrays/showAllArrayDesigns.html">showAll</prop>
			<prop key="/arrays/deleteArrayDesign.html">delete</prop>
			<prop key="/arrays/showArrayDesign.html">show</prop>
		</props>
	</property>
</bean>
<bean id="designElementActions" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
	<property name="mappings">
		<props>
			<prop key="/designElement/showAllDesignElements.html">showAll</prop>
			<prop key="/designElement/deleteDesignElement.html">delete</prop>
			<prop key="/designElement/showDesignElement.html">show</prop>
		</props>
	</property>
</bean>
<bean id="expressionExperimentActions"
	class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
	<property name="mappings">
		<props>
			<prop key="/expressionExperiment/showAllExpressionExperiments.html">showAll</prop>
			<prop key="/expressionExperiment/deleteExpressionExperiment.html">delete</prop>
			<prop key="/expressionExperiment/showExpressionExperiment.html">show</prop>
			<prop key="/expressionExperiment/showBioAssaysFromExpressionExperiment.html">showBioAssays</prop>
			<prop key="/expressionExperiment/showExpressionExperimentSubSet.html">showSubSet</prop>
		</props>
	</property>
</bean>
<bean id="experimentalDesignActions"
	class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
	<property name="mappings">
		<props>
			<prop key="/experimentalDesign/showAllExpressionExperiments.html">showAll</prop>
			<!--  <prop key="/expressionExperiment/deleteExpressionExperiment.html">delete</prop> -->
			<prop key="/experimentalDesign/showExperimentalDesign.html">show</prop>
		</props>
	</property>
</bean>
<bean id="bioAssayActions" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
	<property name="mappings">
		<props>
			<prop key="/bioAssay/showAllBioAssays.html">showAll</prop>
			<!--  <prop key="/expressionExperiment/deleteExpressionExperiment.html">delete</prop> -->
			<prop key="/bioAssay/showBioAssay.html">show</prop>
		</props>
	</property>
</bean>
<bean id="bioMaterialActions" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
	<property name="mappings">
		<props>
			<prop key="/bioMaterial/showAllBioMaterials.html">showAll</prop>
			<!--  <prop key="/bioMaterial/deleteBioMaterial.html">delete</prop> -->
			<prop key="/bioMaterial/showBioMaterial.html">show</prop>
		</props>
	</property>
</bean>
<bean id="experimentalFactorActions"
	class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
	<property name="mappings">
		<props>
			<prop key="/experimentalFactor/showAllExperimentalFactors.html">showAll</prop>
			<!--  <prop key="/experiment/deleteExperimentalFactor.html">delete</prop> -->
			<prop key="/experimentalFactor/showExperimentalFactor.html">show</prop>
		</props>
	</property>
</bean>
<!-- ==================================================== -->
<!--           Used to configure menus on pages           -->
<!-- ==================================================== -->
<bean id="menu" class="net.sf.navigator.menu.MenuLoader">
	<property name="menuConfig">
		<value>/WEB-INF/menu-config.xml</value>
	</property>
</bean>
<!-- ====================================================  
	Used by the fileUploadController 				  
	==================================================== -->
<bean id="multipartResolver" class="ubic.gemma.web.util.upload.CommonsMultipartMonitoredResolver">
	<property name="maxUploadSize">
		<value>20097152</value>
	</property>
</bean>
<!-- ====================================================  
	View Resolver for JSPs. This means that a jsp named 
	"myform.jsp" can be referred to as "myform" in your 
	controller bean declarations.
	==================================================== -->
<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<property name="requestContextAttribute">
		<value>rc</value>
	</property>
	<property name="viewClass">
		<value>org.springframework.web.servlet.view.JstlView</value>
	</property>
	<property name="prefix">
		<value>/WEB-INF/pages/</value>
	</property>
	<property name="suffix">
		<value>.jsp</value>
	</property>
</bean>
<!-- ==================================================== -->
<!--  Validation settings. The validator factory is defined in applicationContext-validation.xml -->
<!-- ==================================================== -->
<!--  Use this if the command class is a command object that has Xdoclet validation tags in the source. -->
<bean id="genericBeanValidator" class="org.springmodules.validation.commons.DefaultBeanValidator">
	<property name="validatorFactory">
		<ref bean="validatorFactory" />
	</property>
</bean>
<!-- Use this type of validator if you use a data model object as the command object, or if you can't define the validator using XDoclet tags. Each of these
	corresonds to a form declared in validation-global.xml (which gets merged into validation.xml) -->
<bean id="userValidator" class="org.springmodules.validation.commons.ConfigurableBeanValidator">
	<property name="validatorFactory">
		<ref bean="validatorFactory" />
	</property>
	<property name="formName">
		<value>user</value>
	</property>
</bean>
<bean id="bibliographicReferenceValidator" class="org.springmodules.validation.commons.ConfigurableBeanValidator">
	<property name="validatorFactory">
		<ref bean="validatorFactory" />
	</property>
	<property name="formName">
		<value>bibliographicReference</value>
	</property>
</bean>
<bean id="databaseEntryValidator" class="org.springmodules.validation.commons.ConfigurableBeanValidator">
	<property name="validatorFactory">
		<ref bean="validatorFactory" />
	</property>
	<property name="formName">
		<value>databaseEntry</value>
	</property>
</bean>
<bean id="bioAssayValidator" class="org.springmodules.validation.commons.ConfigurableBeanValidator">
	<property name="validatorFactory">
		<ref bean="validatorFactory" />
	</property>
	<property name="formName">
		<value>bioAssay</value>
	</property>
</bean>
<bean id="expressionExperimentValidator" class="org.springmodules.validation.commons.ConfigurableBeanValidator">
	<property name="validatorFactory">
		<ref bean="validatorFactory" />
	</property>
	<property name="formName">
		<value>expressionExperiment</value>
	</property>
</bean>
<!--  ============================================== -->
<!-- A type conversion service, a more flexible/threadsafe/lightweight alternative to the PropertyEditor! -->
<bean id="conversion.service" class="org.springframework.binding.convert.support.DefaultConversionService"
	autowire="byType" />
<!-- A formatter registry, a thread-safe cache for Formatters: a thread-safe, lighter weight alt. to PropertyEditors! -->
<bean id="formatter.locator" class="org.springframework.binding.format.support.ThreadLocalFormatterLocator"
	autowire="byType" />
<!-- A broadcaster that will notify the formatter registry to cleanup all thread locals on app shutdown -->
<bean id="thread.cleanupBroadcaster" class="org.springframework.binding.thread.support.DefaultThreadCleanupBroadcaster" />
<!--  add more NamedBeanValidators here -->