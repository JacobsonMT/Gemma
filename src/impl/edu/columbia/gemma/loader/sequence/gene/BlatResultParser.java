package edu.columbia.gemma.loader.sequence.gene;

import edu.columbia.gemma.genome.sequenceAnalysis.BlatResultImpl;
import edu.columbia.gemma.loader.loaderutils.BasicLineParser;

/**
 * Loader to handle results generated by Jim Kent's Blat.
 * <p>
 * The PSL file format is described at {@link http://genome.ucsc.edu/FAQ/FAQformat#format2}
 * <hr>
 * <p>
 * Copyright (c) 2004-2005 Columbia University
 * 
 * @author pavlidis
 * @version $Id$
 */
public class BlatResultParser extends BasicLineParser {

    private static final int NUM_BLAT_FIELDS = 21;

    private static final int MATCHES_FIELD = 0;
    private static final int MISMATCHES_FIELD = 1;
    private static final int REPMATCHES_FIELD = 2;
    private static final int NS_FIELD = 3;
    private static final int QGAPBASES_FIELD = 4;
    private static final int QGAPCOUNT_FIELD = 5;
    private static final int TGAPCOUNT_FIELD = 6;
    private static final int TGAPBASES_FIELD = 7;
    private static final int STRAND_FIELD = 8;
    private static final int QNAME_FIELD = 9;
    private static final int QSIZE_FIELD = 10;
    private static final int QSTART_FIELD = 11;
    private static final int QEND_FIELD = 12;
    private static final int TNAME_FIELD = 13;
    private static final int TSIZE_FIELD = 14;
    private static final int TSTART_FIELD = 15;
    private static final int TEND_FIELD = 16;
    private static final int BLOCKCOUNT_FIELD = 17;
    private static final int BLOCKSIZES_FIELD = 18;
    private static final int QSTARTS_FIELD = 19;
    private static final int TSTARTS_FIELD = 21;

    /*
     * (non-Javadoc)
     * 
     * @see baseCode.io.reader.BasicParser#parseOneLine(java.lang.String)
     */
    public Object parseOneLine( String line ) {

        try {
            String[] f = line.split( "\t" );
            if ( f.length == 0 ) return null;
            if ( f.length != NUM_BLAT_FIELDS )
                throw new IllegalArgumentException( "Only" + f.length + " fields in row" );

            // BlatResult result = BlatResult.Factory.newInstance();
            BlatResultImpl result = new BlatResultImpl(); // FIXME this should not be an Impl.

            String name = ( "BlatResult:" + f[QNAME_FIELD] + ":" + f[QSTART_FIELD] + ":" + f[TSTART_FIELD] + ":"
                    + f[TNAME_FIELD] );
            result.setId( new Long( name.hashCode() ) );
            result.setQuerySize( Integer.parseInt( f[QSIZE_FIELD] ) );
            result.setMatches( Integer.parseInt( f[MATCHES_FIELD] ) );
            result.setMismatches( Integer.parseInt( f[MISMATCHES_FIELD] ) );
            result.setRepMatches( Integer.parseInt( f[REPMATCHES_FIELD] ) );
            result.setNs( Integer.parseInt( f[NS_FIELD] ) );
            result.setQueryGapBases( Integer.parseInt( f[QGAPBASES_FIELD] ) );
            // result.setQuery( Integer.parseInt( f[QGAPCOUNT_FIELD] ) );
            result.setQueryGapCount( Integer.parseInt( f[TGAPCOUNT_FIELD] ) );
            result.setTargetGapBases( Integer.parseInt( f[TGAPBASES_FIELD] ) );
            result.setStrand( f[STRAND_FIELD] );
            // result.setTargetChromosome( // ); // FIXME
            result.setQueryStart( Integer.parseInt( f[QSTART_FIELD] ) );
            result.setQueryEnd( Integer.parseInt( f[QEND_FIELD] ) );

            result.setTargetStart( Integer.parseInt( f[TSTART_FIELD] ) );
            result.setTargetEnd( Integer.parseInt( f[TEND_FIELD] ) );
            result.setBlockCount( Integer.parseInt( f[BLOCKCOUNT_FIELD] ) );
            // result.setBlockSizes( f[BLOCKSIZES_FIELD] ); // FIXME
            // result.setQueryStarts( f[QSTARTS_FIELD] );
            // result.setTargetStarts( f[TSTARTS_FIELD] );

            result.setQueryName( f[QNAME_FIELD] );

            String chrom = f[TNAME_FIELD];
            if ( chrom.startsWith( "chr" ) ) chrom = chrom.substring( chrom.indexOf( "chr" ) + 3 );
            result.setTargetName( chrom );

            return result;
        } catch ( NumberFormatException e ) {
            log.error( "Invalid number format", e );
            return null;
        } catch ( IllegalArgumentException e ) {
            throw new RuntimeException( e );
        }
    }
}
