/*
 * The Gemma project.
 * 
 * Copyright (c) 2006-2012 University of British Columbia
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
//
// Attention: Generated code! Do not modify by hand!
// Generated by: Gemma HibernateStringClobType.vsl in andromda-hibernate-cartridge.
//
package ubic.gemma.persistence.hibernate.usertypes;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import org.hibernate.HibernateException;
import org.hibernate.usertype.UserType;

/**
 * A hibernate user type which converts a Clob into a String and back again.
 */
public class HibernateStringClobType implements UserType {

    /**
     * @see org.hibernate.usertype.UserType#sqlTypes()
     */
    @Override
    public int[] sqlTypes() {
        return new int[] { Types.CLOB };
    }

    /**
     * @see org.hibernate.usertype.UserType#returnedClass()
     */
    @Override
    public Class<?> returnedClass() {
        return String.class;
    }

    /**
     * @see org.hibernate.usertype.UserType#equals(java.lang.Object, java.lang.Object)
     */
    @Override
    public boolean equals( Object x, Object y ) throws HibernateException {
        boolean equal = false;
        if ( x == null || y == null ) {
            equal = false;
        } else if ( !( x instanceof String ) || !( y instanceof String ) ) {
            equal = false;
        } else {
            equal = ( ( String ) x ).equals( y );
        }
        return equal;
    }

    /**
     * @see org.hibernate.usertype.UserType#nullSafeGet(java.sql.ResultSet, java.lang.String[], java.lang.Object)
     */
    @Override
    public Object nullSafeGet( ResultSet resultSet, String[] names, Object owner ) throws HibernateException,
            SQLException {
        final StringBuffer buffer = new StringBuffer();
        try {
            // First we get the stream
            Reader inputStream = resultSet.getCharacterStream( names[0] );
            if ( inputStream == null ) {
                return null;
            }
            char[] buf = new char[1024];
            int read = -1;

            while ( ( read = inputStream.read( buf ) ) > 0 ) {
                buffer.append( new String( buf, 0, read ) );
            }
            inputStream.close();
        } catch ( IOException exception ) {
            throw new HibernateException( "Unable to read from resultset", exception );
        }
        return buffer.toString();
    }

    /**
     * @see org.hibernate.usertype.UserType#nullSafeSet(java.sql.PreparedStatement, java.lang.Object, int)
     */
    @Override
    public void nullSafeSet( PreparedStatement preparedStatement, Object data, int index ) throws HibernateException,
            SQLException {
        if ( data != null ) {
            StringReader r = new StringReader( ( String ) data );
            preparedStatement.setCharacterStream( index, r, ( ( String ) data ).length() );
        } else {
            preparedStatement.setNull( index, sqlTypes()[0] );
        }
    }

    /**
     * @see org.hibernate.usertype.UserType#deepCopy(java.lang.Object)
     */
    @Override
    public Object deepCopy( Object value ) throws HibernateException {
        String ret = null;
        value = value == null ? new String() : value;
        String in = ( String ) value;
        int len = in.length();
        char[] buf = new char[len];

        for ( int i = 0; i < len; i++ ) {
            buf[i] = in.charAt( i );
        }
        ret = new String( buf );
        return ret;
    }

    /**
     * @see org.hibernate.usertype.UserType#isMutable()
     */
    @Override
    public boolean isMutable() {
        return false;
    }

    /**
     * @see org.hibernate.usertype.UserType#replace(Object original, Object target, Object owner)
     */
    @Override
    public Object replace( Object original, Object target, Object owner ) {
        return this.deepCopy( original );
    }

    /**
     * @see org.hibernate.usertype.UserType#assemble(java.io.Serializable cached, Object owner)
     */
    @Override
    public Object assemble( java.io.Serializable cached, Object owner ) {
        return this.deepCopy( cached );
    }

    /**
     * @see org.hibernate.usertype.UserType#assemble(Object value)
     */
    @Override
    public java.io.Serializable disassemble( Object value ) {
        return ( java.io.Serializable ) value;
    }

    /**
     * @see org.hibernate.usertype.UserType#assemble(Object value)
     */
    @Override
    public int hashCode( Object x ) {
        return x.hashCode();
    }
}