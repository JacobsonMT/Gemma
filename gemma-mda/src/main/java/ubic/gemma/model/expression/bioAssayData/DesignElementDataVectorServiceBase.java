/*
 * The Gemma project.
 * 
 * Copyright (c) 2006-2007 University of British Columbia
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package ubic.gemma.model.expression.bioAssayData;

/**
 * <p>
 * Spring Service base class for <code>ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 * 
 * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService
 */
public abstract class DesignElementDataVectorServiceBase implements
        ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService {

    private ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorDao designElementDataVectorDao;

    /**
     * Sets the reference to <code>designElementDataVector</code>'s DAO.
     */
    public void setDesignElementDataVectorDao(
            ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorDao designElementDataVectorDao ) {
        this.designElementDataVectorDao = designElementDataVectorDao;
    }

    /**
     * Gets the reference to <code>designElementDataVector</code>'s DAO.
     */
    protected ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorDao getDesignElementDataVectorDao() {
        return this.designElementDataVectorDao;
    }

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#findOrCreate(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector)
     */
    public ubic.gemma.model.expression.bioAssayData.DesignElementDataVector findOrCreate(
            final ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector ) {
        try {
            return this.handleFindOrCreate( designElementDataVector );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.findOrCreate(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for
     * {@link #findOrCreate(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector)}
     */
    protected abstract ubic.gemma.model.expression.bioAssayData.DesignElementDataVector handleFindOrCreate(
            ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector )
            throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#remove(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector)
     */
    public void remove( final ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector ) {
        try {
            this.handleRemove( designElementDataVector );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.remove(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #remove(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector)}
     */
    protected abstract void handleRemove(
            ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector )
            throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#thaw(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector)
     */
    public void thaw( final ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector ) {
        try {
            this.handleThaw( designElementDataVector );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.thaw(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #thaw(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector)}
     */
    protected abstract void handleThaw(
            ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector )
            throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#thaw(java.util.Collection)
     */
    public void thaw( final java.util.Collection designElementDataVectors ) {
        try {
            this.handleThaw( designElementDataVectors );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.thaw(java.util.Collection designElementDataVectors)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #thaw(java.util.Collection)}
     */
    protected abstract void handleThaw( java.util.Collection designElementDataVectors ) throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#countAll()
     */
    public java.lang.Integer countAll() {
        try {
            return this.handleCountAll();
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.countAll()' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #countAll()}
     */
    protected abstract java.lang.Integer handleCountAll() throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#removeDataForCompositeSequence(ubic.gemma.model.expression.designElement.CompositeSequence)
     */
    public void removeDataForCompositeSequence(
            final ubic.gemma.model.expression.designElement.CompositeSequence compositeSequence ) {
        try {
            this.handleRemoveDataForCompositeSequence( compositeSequence );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.removeDataForCompositeSequence(ubic.gemma.model.expression.designElement.CompositeSequence compositeSequence)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for
     * {@link #removeDataForCompositeSequence(ubic.gemma.model.expression.designElement.CompositeSequence)}
     */
    protected abstract void handleRemoveDataForCompositeSequence(
            ubic.gemma.model.expression.designElement.CompositeSequence compositeSequence ) throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#removeDataForQuantitationType(ubic.gemma.model.common.quantitationtype.QuantitationType)
     */
    public void removeDataForQuantitationType(
            final ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType ) {
        try {
            this.handleRemoveDataForQuantitationType( quantitationType );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.removeDataForQuantitationType(ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for
     * {@link #removeDataForQuantitationType(ubic.gemma.model.common.quantitationtype.QuantitationType)}
     */
    protected abstract void handleRemoveDataForQuantitationType(
            ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType ) throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#getPreferredVectors(java.util.Collection,
     *      java.util.Collection)
     */
    public java.util.Map getPreferredVectors( final java.util.Collection ees, final java.util.Collection genes ) {
        try {
            return this.handleGetPreferredVectors( ees, genes );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.getPreferredVectors(java.util.Collection ees, java.util.Collection genes)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #getPreferredVectors(java.util.Collection, java.util.Collection)}
     */
    protected abstract java.util.Map handleGetPreferredVectors( java.util.Collection ees, java.util.Collection genes )
            throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#update(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector)
     */
    public void update( final ubic.gemma.model.expression.bioAssayData.DesignElementDataVector dedv ) {
        try {
            this.handleUpdate( dedv );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.update(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector dedv)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #update(ubic.gemma.model.expression.bioAssayData.DesignElementDataVector)}
     */
    protected abstract void handleUpdate( ubic.gemma.model.expression.bioAssayData.DesignElementDataVector dedv )
            throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#update(java.util.Collection)
     */
    public void update( final java.util.Collection dedvs ) {
        try {
            this.handleUpdate( dedvs );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.update(java.util.Collection dedvs)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #update(java.util.Collection)}
     */
    protected abstract void handleUpdate( java.util.Collection dedvs ) throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#find(java.util.Collection)
     */
    public java.util.Collection find( final java.util.Collection quantitationTypes ) {
        try {
            return this.handleFind( quantitationTypes );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.find(java.util.Collection quantitationTypes)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #find(java.util.Collection)}
     */
    protected abstract java.util.Collection handleFind( java.util.Collection quantitationTypes )
            throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#create(java.util.Collection)
     */
    public java.util.Collection create( final java.util.Collection vectors ) {
        try {
            return this.handleCreate( vectors );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.create(java.util.Collection vectors)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #create(java.util.Collection)}
     */
    protected abstract java.util.Collection handleCreate( java.util.Collection vectors ) throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#remove(java.util.Collection)
     */
    public void remove( final java.util.Collection vectors ) {
        try {
            this.handleRemove( vectors );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.remove(java.util.Collection vectors)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #remove(java.util.Collection)}
     */
    protected abstract void handleRemove( java.util.Collection vectors ) throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#find(ubic.gemma.model.common.quantitationtype.QuantitationType)
     */
    public java.util.Collection find( final ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType ) {
        try {
            return this.handleFind( quantitationType );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.find(ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #find(ubic.gemma.model.common.quantitationtype.QuantitationType)}
     */
    protected abstract java.util.Collection handleFind(
            ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType ) throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#find(ubic.gemma.model.expression.arrayDesign.ArrayDesign,
     *      ubic.gemma.model.common.quantitationtype.QuantitationType)
     */
    public java.util.Collection find( final ubic.gemma.model.expression.arrayDesign.ArrayDesign arrayDesign,
            final ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType ) {
        try {
            return this.handleFind( arrayDesign, quantitationType );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.find(ubic.gemma.model.expression.arrayDesign.ArrayDesign arrayDesign, ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for
     * {@link #find(ubic.gemma.model.expression.arrayDesign.ArrayDesign, ubic.gemma.model.common.quantitationtype.QuantitationType)}
     */
    protected abstract java.util.Collection handleFind(
            ubic.gemma.model.expression.arrayDesign.ArrayDesign arrayDesign,
            ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType ) throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService#load(java.lang.Long)
     */
    public ubic.gemma.model.expression.bioAssayData.DesignElementDataVector load( final java.lang.Long id ) {
        try {
            return this.handleLoad( id );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorServiceException(
                    "Error performing 'ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.load(java.lang.Long id)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #load(java.lang.Long)}
     */
    protected abstract ubic.gemma.model.expression.bioAssayData.DesignElementDataVector handleLoad( java.lang.Long id )
            throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set, otherwise returns <code>null</code>.
     * 
     * @return the current principal
     */
    protected java.security.Principal getPrincipal() {
        return ubic.gemma.spring.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages() {
        return ( org.springframework.context.MessageSource ) ubic.gemma.spring.BeanLocator.instance().getBean(
                "messageSource" );
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     * 
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage( final String key ) {
        return this.getMessages().getMessage( key, null, null );
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the underlying message
     * bundle.
     * 
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage( final String key, final Object[] arguments ) {
        return this.getMessages().getMessage( key, arguments, null );
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code> for the given
     * <code>locale</code>.
     * 
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage( final java.lang.String key, final java.lang.Object[] arguments,
            final java.util.Locale locale ) {
        return this.getMessages().getMessage( key, arguments, locale );
    }

}