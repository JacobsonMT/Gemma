/*
 * The Gemma project.
 * 
 * Copyright (c) 2006-2007 University of British Columbia
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package ubic.gemma.model.expression.bioAssayData;

import java.util.Collection;
import java.util.Map;

import ubic.gemma.model.expression.experiment.ExpressionExperiment;
import ubic.gemma.model.genome.Gene;

/**
 * 
 */
public interface DesignElementDataVectorService {

    /**
     * 
     */
    public ubic.gemma.model.expression.bioAssayData.DesignElementDataVector findOrCreate(
            ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector );

    /**
     * 
     */
    public void remove( ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector );

    /**
     * 
     */
    public java.util.Collection getGenes( ubic.gemma.model.expression.bioAssayData.DesignElementDataVector dedv );

    /**
     * 
     */
    public java.util.Collection getGenesById( long id );

    /**
     * <p>
     * Thaws associations of the given DesignElementDataVector
     * </p>
     */
    public void thaw( ubic.gemma.model.expression.bioAssayData.DesignElementDataVector designElementDataVector );

    /**
     * 
     */
    public void thaw( java.util.Collection designElementDataVectors );

    /**
     * 
     */
    public java.lang.Integer countAll();

    /**
     * <p>
     * Returns a map of designElementDataVectors as keys and collections of genes as values for the given
     * designElementDataVectors.
     * </p>
     */
    public java.util.Map getGenes( java.util.Collection dataVectors );

    /**
     * <p>
     * remove Design Element Data Vectors and Probe2ProbeCoexpression entries for a specified CompositeSequence.
     * </p>
     */
    public void removeDataForCompositeSequence(
            ubic.gemma.model.expression.designElement.CompositeSequence compositeSequence );

    /**
     * <p>
     * Removes the DesignElementDataVectors and Probe2ProbeCoexpressions for a quantitation type, given a
     * QuantitationType (which always comes from a specific ExpressionExperiment)
     * </p>
     */
    public void removeDataForQuantitationType(
            ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType );

    /**
     * <p>
     * Given a collection of genes, a collection of expression experiments will return a collection of "preferred"
     * design element data vectors for the given genes in the given experiments. Note that these vectors should be
     * 'masked' for missing values before typical uses.
     * </p>
     */
    public java.util.Map getPreferredVectors( java.util.Collection ees, java.util.Collection genes );

    /**
     * <p>
     * updates an already existing dedv
     * </p>
     */
    public void update( ubic.gemma.model.expression.bioAssayData.DesignElementDataVector dedv );

    /**
     * <p>
     * updates a collection of designElementDataVectors
     * </p>
     */
    public void update( java.util.Collection dedvs );

    /**
     * 
     */
    public java.util.Collection find( java.util.Collection quantitationTypes );

    /**
     * 
     */
    public java.util.Collection create( java.util.Collection vectors );

    /**
     * 
     */
    public void remove( java.util.Collection vectors );

    /**
     * 
     */
    public java.util.Collection find( ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType );

    /**
     * 
     */
    public java.util.Collection find( ubic.gemma.model.expression.arrayDesign.ArrayDesign arrayDesign,
            ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType );

    /**
     * 
     */
    public ubic.gemma.model.expression.bioAssayData.DesignElementDataVector load( java.lang.Long id );

    /**
     * <p>
     * Given a collection of design element data vectors returns a map of dedv to a collection of genes.
     * </p>
     */
    public java.util.Map getDedv2GenesMap( java.util.Collection dedvs,
            ubic.gemma.model.common.quantitationtype.QuantitationType qt );

    /**
     * <p>
     * Return a map of DoubleVectorValueObjects to Genes for the given expression experiments and genes. The double[]
     * contained are masked for missing values if appropriate.
     * </p>
     */
    public  Map<DoubleVectorValueObject, Collection<Gene>> getMaskedPreferredDataArrays( java.util.Collection<ExpressionExperiment> ees, java.util.Collection<Gene> genes );

}
