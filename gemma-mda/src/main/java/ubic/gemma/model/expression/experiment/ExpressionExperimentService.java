/*
 * The Gemma project.
 * 
 * Copyright (c) 2006-2007 University of British Columbia
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package ubic.gemma.model.expression.experiment;

import java.util.Collection;

import ubic.gemma.model.common.quantitationtype.QuantitationType;
import ubic.gemma.model.expression.arrayDesign.ArrayDesign;
import ubic.gemma.model.expression.bioAssayData.ProcessedExpressionDataVector;

/**
 * 
 */
public interface ExpressionExperimentService extends ubic.gemma.model.common.AuditableService {

    /**
     * 
     */
    public java.util.Collection<ExpressionExperiment> loadAll();

    /**
     *  
     */
    public ubic.gemma.model.expression.experiment.ExpressionExperiment findOrCreate(
            ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * 
     */
    public void update( ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * <p>
     * Deletes an experiment and all of its associated objects, including coexpression links. Some types of associated
     * objects may need to be deleted before this can be run (example: analyses involving multiple experiments; these
     * will not be deleted automatically, though this behavior could be changed)
     * </p>
     */
    public void delete( ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * 
     */
    public java.util.Collection<ExpressionExperiment> findByInvestigator(
            ubic.gemma.model.common.auditAndSecurity.Contact investigator );

    /**
     * 
     */
    public ubic.gemma.model.expression.experiment.ExpressionExperiment findByAccession(
            ubic.gemma.model.common.description.DatabaseEntry accession );

    /**
     * 
     */
    public ubic.gemma.model.expression.experiment.ExpressionExperiment load( java.lang.Long id );

    /**
     * 
     */
    public ubic.gemma.model.expression.experiment.ExpressionExperiment findByName( java.lang.String name );

    /**
     * 
     */
    public ubic.gemma.model.expression.experiment.ExpressionExperiment create(
            ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * 
     */
    public ubic.gemma.model.expression.experiment.ExpressionExperiment find(
            ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * <p>
     * Returns a collection of ArrayDesigns referenced by any of the BioAssays that make up the given
     * ExpressionExperiment.
     * </p>
     */
    public java.util.Collection<ArrayDesign> getArrayDesignsUsed(
            ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * <p>
     * Function to get a count of an expressionExperiment's designelementdatavectors, grouped by quantitation type
     * </p>
     */
    public java.util.Map getQuantitationTypeCountById( java.lang.Long Id );

    /**
     * 
     */
    public ubic.gemma.model.expression.experiment.ExpressionExperiment findByShortName( java.lang.String shortName );

    /**
     * 
     */
    public void thaw( ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * <p>
     * Returns the taxon of the given expressionExperiment.
     * </p>
     */
    public ubic.gemma.model.genome.Taxon getTaxon( java.lang.Long ExpressionExperimentID );

    /**
     * <p>
     * Retrieve some of the vectors for the given expressionExperiment and quantitation type. Used for peeking at the
     * data without retrieving the whole data set.
     * </p>
     */
    public java.util.Collection getSamplingOfVectors(
            ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType, java.lang.Integer limit );

    /**
     * <p>
     * Return all the quantitation types used by the given expression experiment
     * </p>
     */
    public java.util.Collection getQuantitationTypes(
            ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * <p>
     * Count how many ExpressionExperiments are in the database
     * </p>
     */
    public java.lang.Integer countAll();

    /**
     * <p>
     * Function to get a count of expression experiments, grouped by Taxon
     * </p>
     */
    public java.util.Map getPerTaxonCount();

    /**
     * 
     */
    public java.util.Collection<ExpressionExperimentValueObject> loadAllValueObjects();

    /**
     * 
     */
    public java.util.Collection<ExpressionExperimentValueObject> loadValueObjects( java.util.Collection ids );

    /**
     * <p>
     * gets all EE that match the given Taxon
     * </p>
     */
    public java.util.Collection<ExpressionExperiment> findByTaxon( ubic.gemma.model.genome.Taxon taxon );

    /**
     * <p>
     * Partially thaw the expression experiment given - do not thaw the raw data.
     * </p>
     */
    public void thawLite( ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * <p>
     * Get the quantitation types for the expression experiment, for the array design specified. This is really only
     * useful for expression experiments that use more than one array design.
     * </p>
     */
    public java.util.Collection getQuantitationTypes(
            ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment,
            ubic.gemma.model.expression.arrayDesign.ArrayDesign arrayDesign );

    /**
     * 
     */
    public long getDesignElementDataVectorCountById( long id );

    /**
     * <p>
     * Counts the number of ProcessedExpressionDataVectors.
     * </p>
     */
    public long getProcessedExpressionVectorCount(
            ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * <p>
     * Counts the number of biomaterials associated with this expression experiment.
     * </p>
     */
    public long getBioMaterialCount( ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * 
     */
    public java.util.Collection loadMultiple( java.util.Collection<Long> ids );

    /**
     * <p>
     * Get all the vectors for the given expression experiment, but limited to the given quantitation types.
     * </p>
     */
    public java.util.Collection getDesignElementDataVectors( java.util.Collection quantitationTypes );

    /**
     * <p>
     * Gets the AuditEvents of the latest link analyses for the specified expression experiment ids. This returns a map
     * of id -> AuditEvent. If the events do not exist, the map entry will point to null.
     * </p>
     */
    public java.util.Map getLastLinkAnalysis( java.util.Collection ids );

    /**
     * <p>
     * Gets the AuditEvents of the latest rank computation for the specified expression experiment ids. This returns a
     * map of id -> AuditEvent. If the events do not exist, the map entry will point to null.
     * </p>
     */
    public java.util.Map getLastProcessedDataUpdate( java.util.Collection ids );

    /**
     * <p>
     * Gets the AuditEvents of the latest missing value analysis for the specified expression experiment ids. This
     * returns a map of id -> AuditEvent. If the events do not exist, the map entry will point to null.
     * </p>
     */
    public java.util.Map getLastMissingValueAnalysis( java.util.Collection ids );

    /**
     * <p>
     * Returns a collection of expression experiments that have an AD that detects the given Gene (ie a probe on the AD
     * hybidizes to the given Gene)
     * </p>
     */
    public java.util.Collection<ExpressionExperiment> findByGene( ubic.gemma.model.genome.Gene gene );

    /**
     * <p>
     * Returns a collection of expression experiment ids that express the given gene above the given expression level
     * </p>
     */
    public java.util.Collection<ExpressionExperiment> findByExpressedGene( ubic.gemma.model.genome.Gene gene,
            double rank );

    /**
     * <p>
     * given a bibliographicReference returns a collection of EE that have that reference that BibliographicReference
     * </p>
     */
    public java.util.Collection<ExpressionExperiment> findByBibliographicReference(
            ubic.gemma.model.common.description.BibliographicReference bibRef );

    /**
     * <p>
     * Iterates over the quantiation types for a given expression experiment and returns the preferred quantitation
     * types.
     * </p>
     */
    public java.util.Collection getPreferredQuantitationType(
            ubic.gemma.model.expression.experiment.ExpressionExperiment EE );

    /**
     * <p>
     * Get the date of the last time any of the array designs associated with this experiment were updated.
     * </p>
     */
    public ubic.gemma.model.common.auditAndSecurity.AuditEvent getLastArrayDesignUpdate(
            ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment, java.lang.Class eventType );

    /**
     * 
     */
    public java.util.Map getLastTroubleEvent( java.util.Collection ids );

    /**
     * 
     */
    public java.util.Map getLastValidationEvent( java.util.Collection ids );

    /**
     * <p>
     * Retrieve a collection of the genes assayed in the experiment.
     * </p>
     */
    public java.util.Collection getAssayedGenes(
            ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment,
            java.lang.Double rankThreshold );

    /**
     * <p>
     * See getAssayedGenes
     * </p>
     */
    public java.util.Collection getAssayedProbes(
            ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment,
            java.lang.Double rankThreshold );

    /**
     * <p>
     * Given a bioMaterial returns an expressionExperiment
     * </p>
     */
    public ubic.gemma.model.expression.experiment.ExpressionExperiment findByBioMaterial(
            ubic.gemma.model.expression.biomaterial.BioMaterial bm );

    /**
     * 
     */
    public java.util.Map getLastArrayDesignUpdate( java.util.Collection expressionExperiments, java.lang.Class type );

    /**
     * 
     */
    public ubic.gemma.model.expression.experiment.ExpressionExperiment findByFactorValue(
            ubic.gemma.model.expression.experiment.FactorValue factorValue );

    /**
     * <p>
     * Find vectors for the given expression experiment, constrained to the given quantitation type and design elements
     * </p>
     */
    public java.util.Collection getDesignElementDataVectors( java.util.Collection designElements,
            ubic.gemma.model.common.quantitationtype.QuantitationType quantitationType );

    /**
     * <p>
     * Get the map of ids to number of terms associated with each expression experiment.
     * </p>
     */
    public java.util.Map getAnnotationCounts( java.util.Collection ids );

    /**
     * <p>
     * Get map of ids to how many factor values the experiment has, counting only factor values which are associated
     * with biomaterials.
     * </p>
     */
    public java.util.Map getPopulatedFactorCounts( java.util.Collection ids );

    /**
     * 
     */
    public java.util.Map getSampleRemovalEvents( java.util.Collection expressionExperiments );

    /**
     * <p>
     * Return any ExpressionExperimentSubSets this Experiment might have.
     * </p>
     */
    public java.util.Collection getSubSets(
            ubic.gemma.model.expression.experiment.ExpressionExperiment expressionExperiment );

    /**
     * 
     */
    public java.util.Collection findByBioMaterials( java.util.Collection bioMaterials );

    /**
     * 
     */
    public java.util.Collection findByFactorValues( java.util.Collection factorValues );

    public Collection<ProcessedExpressionDataVector> getProcessedDataVectors( ExpressionExperiment ee );

    public ExpressionExperiment findByQuantitationType( QuantitationType type );
}
