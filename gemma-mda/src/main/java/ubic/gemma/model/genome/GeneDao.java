/*
 * The Gemma project.
 * 
 * Copyright (c) 2006-2007 University of British Columbia
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package ubic.gemma.model.genome;

/**
 * @see ubic.gemma.model.genome.Gene
 */
public interface GeneDao extends ubic.gemma.model.genome.ChromosomeFeatureDao {
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects or
     * other types, different methods in a class implementing this interface support this feature: look for an
     * <code>int</code> parameter called <code>transform</code>. <p/> This specific flag denotes entities must be
     * transformed into objects of type {@link ubic.gemma.model.genome.gene.GeneValueObject}.
     */
    public final static int TRANSFORM_GENEVALUEOBJECT = 1;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toGeneValueObject(), but it does not handle any attributes in the target value object that are "read-only" (as
     * those do not have setter methods exposed).
     */
    public void toGeneValueObject( ubic.gemma.model.genome.Gene sourceEntity,
            ubic.gemma.model.genome.gene.GeneValueObject targetVO );

    /**
     * Converts this DAO's entity to an object of type {@link ubic.gemma.model.genome.gene.GeneValueObject}.
     */
    public ubic.gemma.model.genome.gene.GeneValueObject toGeneValueObject( ubic.gemma.model.genome.Gene entity );

    /**
     * Converts this DAO's entity to a Collection of instances of type
     * {@link ubic.gemma.model.genome.gene.GeneValueObject}.
     */
    public void toGeneValueObjectCollection( java.util.Collection entities );

    /**
     * Copies the fields of {@link ubic.gemma.model.genome.gene.GeneValueObject} to the specified entity.
     * 
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If
     *        TRUE, it will be copied regardless of its value.
     */
    public void geneValueObjectToEntity( ubic.gemma.model.genome.gene.GeneValueObject sourceVO,
            ubic.gemma.model.genome.Gene targetEntity, boolean copyIfNull );

    /**
     * Converts an instance of type {@link ubic.gemma.model.genome.gene.GeneValueObject} to this DAO's entity.
     */
    public ubic.gemma.model.genome.Gene geneValueObjectToEntity(
            ubic.gemma.model.genome.gene.GeneValueObject geneValueObject );

    /**
     * Converts a Collection of instances of type {@link ubic.gemma.model.genome.gene.GeneValueObject} to this DAO's
     * entity.
     */
    public void geneValueObjectToEntityCollection( java.util.Collection instances );

    /**
     * Loads an instance of ubic.gemma.model.genome.Gene from the persistent store.
     */
    public ubic.gemma.model.common.Securable load( java.lang.Long id );

    /**
     * <p>
     * Does the same thing as {@link #load(java.lang.Long)} with an additional flag called <code>transform</code>. If
     * this flag is set to <code>TRANSFORM_NONE</code> then the returned entity will <strong>NOT</strong> be
     * transformed. If this flag is any of the other constants defined in this class then the result <strong>WILL BE</strong>
     * passed through an operation which can optionally transform the entity (into a value object for example). By
     * default, transformation does not occur.
     * </p>
     * 
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load( int transform, java.lang.Long id );

    /**
     * Loads all entities of type {@link ubic.gemma.model.genome.Gene}.
     * 
     * @return the loaded entities.
     */
    public java.util.Collection loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an additional flag called <code>transform</code>. If this flag
     * is set to <code>TRANSFORM_NONE</code> then the returned entity will <strong>NOT</strong> be transformed. If
     * this flag is any of the other constants defined here then the result <strong>WILL BE</strong> passed through an
     * operation which can optionally transform the entity (into a value object for example). By default, transformation
     * does not occur.
     * </p>
     * 
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll( final int transform );

    /**
     * Creates an instance of ubic.gemma.model.genome.Gene and adds it to the persistent store.
     */
    public ubic.gemma.model.common.Securable create( ubic.gemma.model.genome.Gene gene );

    /**
     * <p>
     * Does the same thing as {@link #create(ubic.gemma.model.genome.Gene)} with an additional flag called
     * <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then the returned entity will
     * <strong>NOT</strong> be transformed. If this flag is any of the other constants defined here then the result
     * <strong>WILL BE</strong> passed through an operation which can optionally transform the entity (into a value
     * object for example). By default, transformation does not occur.
     * </p>
     */
    public Object create( int transform, ubic.gemma.model.genome.Gene gene );

    /**
     * Creates a new instance of ubic.gemma.model.genome.Gene and adds from the passed in <code>entities</code>
     * collection
     * 
     * @param entities the collection of ubic.gemma.model.genome.Gene instances to create.
     * @return the created instances.
     */
    public java.util.Collection create( java.util.Collection entities );

    /**
     * <p>
     * Does the same thing as {@link #create(ubic.gemma.model.genome.Gene)} with an additional flag called
     * <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then the returned entity will
     * <strong>NOT</strong> be transformed. If this flag is any of the other constants defined here then the result
     * <strong>WILL BE</strong> passed through an operation which can optionally transform the entities (into value
     * objects for example). By default, transformation does not occur.
     * </p>
     */
    public java.util.Collection create( int transform, java.util.Collection entities );

    /**
     * Updates the <code>gene</code> instance in the persistent store.
     */
    public void update( ubic.gemma.model.genome.Gene gene );

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     */
    public void update( java.util.Collection entities );

    /**
     * Removes the instance of ubic.gemma.model.genome.Gene from the persistent store.
     */
    public void remove( ubic.gemma.model.genome.Gene gene );

    /**
     * Removes the instance of ubic.gemma.model.genome.Gene having the given <code>identifier</code> from the
     * persistent store.
     */
    public void remove( java.lang.Long id );

    /**
     * Removes all entities in the given <code>entities<code> collection.
     */
    public void remove( java.util.Collection entities );

    /**
     * <p>
     * Finder based on the official name.
     * </p>
     */
    public java.util.Collection findByOfficalSymbol( java.lang.String officialSymbol );

    /**
     * <p>
     * Does the same thing as {@link #findByOfficalSymbol(java.lang.String)} with an additional argument called
     * <code>queryString</code>. This <code>queryString</code> argument allows you to override the query string
     * defined in {@link #findByOfficalSymbol(java.lang.String)}.
     * </p>
     */
    public java.util.Collection findByOfficalSymbol( String queryString, java.lang.String officialSymbol );

    /**
     * <p>
     * Does the same thing as {@link #findByOfficalSymbol(java.lang.String)} with an additional flag called
     * <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then finder results will
     * <strong>NOT</strong> be transformed during retrieval. If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally transform the
     * entities (into value objects for example). By default, transformation does not occur.
     * </p>
     */
    public java.util.Collection findByOfficalSymbol( int transform, java.lang.String officialSymbol );

    /**
     * <p>
     * Does the same thing as {@link #findByOfficalSymbol(boolean, java.lang.String)} with an additional argument called
     * <code>queryString</code>. This <code>queryString</code> argument allows you to override the query string
     * defined in {@link #findByOfficalSymbol(int, java.lang.String officialSymbol)}.
     * </p>
     */
    public java.util.Collection findByOfficalSymbol( int transform, String queryString, java.lang.String officialSymbol );

    /**
     * 
     */
    public java.util.Collection findByOfficialSymbolInexact( java.lang.String officialSymbol );

    /**
     * <p>
     * Does the same thing as {@link #findByOfficialSymbolInexact(java.lang.String)} with an additional argument called
     * <code>queryString</code>. This <code>queryString</code> argument allows you to override the query string
     * defined in {@link #findByOfficialSymbolInexact(java.lang.String)}.
     * </p>
     */
    public java.util.Collection findByOfficialSymbolInexact( String queryString, java.lang.String officialSymbol );

    /**
     * <p>
     * Does the same thing as {@link #findByOfficialSymbolInexact(java.lang.String)} with an additional flag called
     * <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then finder results will
     * <strong>NOT</strong> be transformed during retrieval. If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally transform the
     * entities (into value objects for example). By default, transformation does not occur.
     * </p>
     */
    public java.util.Collection findByOfficialSymbolInexact( int transform, java.lang.String officialSymbol );

    /**
     * <p>
     * Does the same thing as {@link #findByOfficialSymbolInexact(boolean, java.lang.String)} with an additional
     * argument called <code>queryString</code>. This <code>queryString</code> argument allows you to override the
     * query string defined in {@link #findByOfficialSymbolInexact(int, java.lang.String officialSymbol)}.
     * </p>
     */
    public java.util.Collection findByOfficialSymbolInexact( int transform, String queryString,
            java.lang.String officialSymbol );

    /**
     * 
     */
    public java.util.Collection findByOfficialName( java.lang.String officialName );

    /**
     * <p>
     * Does the same thing as {@link #findByOfficialName(java.lang.String)} with an additional argument called
     * <code>queryString</code>. This <code>queryString</code> argument allows you to override the query string
     * defined in {@link #findByOfficialName(java.lang.String)}.
     * </p>
     */
    public java.util.Collection findByOfficialName( String queryString, java.lang.String officialName );

    /**
     * <p>
     * Does the same thing as {@link #findByOfficialName(java.lang.String)} with an additional flag called
     * <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then finder results will
     * <strong>NOT</strong> be transformed during retrieval. If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally transform the
     * entities (into value objects for example). By default, transformation does not occur.
     * </p>
     */
    public java.util.Collection findByOfficialName( int transform, java.lang.String officialName );

    /**
     * <p>
     * Does the same thing as {@link #findByOfficialName(boolean, java.lang.String)} with an additional argument called
     * <code>queryString</code>. This <code>queryString</code> argument allows you to override the query string
     * defined in {@link #findByOfficialName(int, java.lang.String officialName)}.
     * </p>
     */
    public java.util.Collection findByOfficialName( int transform, String queryString, java.lang.String officialName );

    /**
     * 
     */
    public ubic.gemma.model.genome.Gene find( ubic.gemma.model.genome.Gene gene );

    /**
     * <p>
     * Does the same thing as {@link #find(ubic.gemma.model.genome.Gene)} with an additional argument called
     * <code>queryString</code>. This <code>queryString</code> argument allows you to override the query string
     * defined in {@link #find(ubic.gemma.model.genome.Gene)}.
     * </p>
     */
    public ubic.gemma.model.genome.Gene find( String queryString, ubic.gemma.model.genome.Gene gene );

    /**
     * <p>
     * Does the same thing as {@link #find(ubic.gemma.model.genome.Gene)} with an additional flag called
     * <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then finder results will
     * <strong>NOT</strong> be transformed during retrieval. If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally transform the
     * entities (into value objects for example). By default, transformation does not occur.
     * </p>
     */
    public Object find( int transform, ubic.gemma.model.genome.Gene gene );

    /**
     * <p>
     * Does the same thing as {@link #find(boolean, ubic.gemma.model.genome.Gene)} with an additional argument called
     * <code>queryString</code>. This <code>queryString</code> argument allows you to override the query string
     * defined in {@link #find(int, ubic.gemma.model.genome.Gene gene)}.
     * </p>
     */
    public Object find( int transform, String queryString, ubic.gemma.model.genome.Gene gene );

    /**
     * 
     */
    public ubic.gemma.model.genome.Gene findOrCreate( ubic.gemma.model.genome.Gene gene );

    /**
     * <p>
     * Does the same thing as {@link #findOrCreate(ubic.gemma.model.genome.Gene)} with an additional argument called
     * <code>queryString</code>. This <code>queryString</code> argument allows you to override the query string
     * defined in {@link #findOrCreate(ubic.gemma.model.genome.Gene)}.
     * </p>
     */
    public ubic.gemma.model.genome.Gene findOrCreate( String queryString, ubic.gemma.model.genome.Gene gene );

    /**
     * <p>
     * Does the same thing as {@link #findOrCreate(ubic.gemma.model.genome.Gene)} with an additional flag called
     * <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then finder results will
     * <strong>NOT</strong> be transformed during retrieval. If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally transform the
     * entities (into value objects for example). By default, transformation does not occur.
     * </p>
     */
    public Object findOrCreate( int transform, ubic.gemma.model.genome.Gene gene );

    /**
     * <p>
     * Does the same thing as {@link #findOrCreate(boolean, ubic.gemma.model.genome.Gene)} with an additional argument
     * called <code>queryString</code>. This <code>queryString</code> argument allows you to override the query
     * string defined in {@link #findOrCreate(int, ubic.gemma.model.genome.Gene gene)}.
     * </p>
     */
    public Object findOrCreate( int transform, String queryString, ubic.gemma.model.genome.Gene gene );

    /**
     * 
     */
    public long getCompositeSequenceCountById( long id );

    /**
     * 
     */
    public java.util.Collection getCompositeSequencesById( long id );

    /**
     * <p>
     * Locate genes that match the given alias string
     * </p>
     */
    public java.util.Collection findByAlias( java.lang.String search );

    /**
     * <p>
     * Function to get coexpressed genes given a gene and a collection of expressionExperiments. The return value is a
     * Collection of CoexpressionCollectionValueObjects. This needs to be 'postprocessed' before it has all the data
     * needed for use by clients. Therefore this method should not be called directly for most purposes.
     * </p>
     */
    public java.lang.Object getCoexpressedGenes( ubic.gemma.model.genome.Gene gene, java.util.Collection ees,
            java.lang.Integer stringency, boolean knownGenesOnly );

    /**
     * 
     */
    public java.lang.Integer countAll();

    /**
     * <p>
     * returns a collections of genes that match the given taxon
     * </p>
     */
    public java.util.Collection getGenesByTaxon( ubic.gemma.model.genome.Taxon taxon );

    /**
     * 
     */
    public java.util.Collection loadMultiple( java.util.Collection ids );

    /**
     * <p>
     * Returns a collection of genes that are actually MicroRNA for a given taxon
     * </p>
     */
    public java.util.Collection getMicroRnaByTaxon( ubic.gemma.model.genome.Taxon taxon );

    /**
     * 
     */
    public java.util.Collection getCompositeSequences( ubic.gemma.model.genome.Gene gene,
            ubic.gemma.model.expression.arrayDesign.ArrayDesign arrayDesign );

    /**
     * 
     */
    public java.util.Map getCompositeSequenceMap( java.util.Collection genes );

    /**
     * <p>
     * Return the csId->geneIds map for the given csIds.
     * </p>
     */
    public java.util.Map getCS2GeneMap( java.util.Collection csIds );

    /**
     * <p>
     * Returns a collection of probe aligned regions for the specified taxon
     * </p>
     */
    public java.util.Collection loadProbeAlignedRegions( ubic.gemma.model.genome.Taxon taxon );

    /**
     * <p>
     * Returns a collection of genes for the specified taxon (not all genes, ie not probe aligned regions and predicted
     * genes)
     * </p>
     */
    public java.util.Collection loadKnownGenes( ubic.gemma.model.genome.Taxon taxon );

    /**
     * <p>
     * Returns a collection of predicted genes for the specified taxon.
     * </p>
     */
    public java.util.Collection loadPredictedGenes( ubic.gemma.model.genome.Taxon taxon );

    /**
     * 
     */
    public void thaw( ubic.gemma.model.genome.Gene gene );

    /**
     * 
     */
    public ubic.gemma.model.genome.Gene findByOfficialSymbol( java.lang.String symbol,
            ubic.gemma.model.genome.Taxon taxon );

    /**
     * 
     */
    public void thawLite( java.util.Collection genes );

    /**
     * 
     */
    public ubic.gemma.model.genome.Gene findByAccession( java.lang.String accession,
            ubic.gemma.model.common.description.ExternalDatabase source );

}
