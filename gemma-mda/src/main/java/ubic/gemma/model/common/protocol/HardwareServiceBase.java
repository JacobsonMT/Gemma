/*
 * The Gemma project.
 * 
 * Copyright (c) 2006-2007 University of British Columbia
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package ubic.gemma.model.common.protocol;

/**
 * <p>
 * Spring Service base class for <code>ubic.gemma.model.common.protocol.HardwareService</code>, provides access to
 * all services and entities referenced by this service.
 * </p>
 * 
 * @see ubic.gemma.model.common.protocol.HardwareService
 */
public abstract class HardwareServiceBase implements ubic.gemma.model.common.protocol.HardwareService {

    private ubic.gemma.model.common.protocol.HardwareDao hardwareDao;

    /**
     * Sets the reference to <code>hardware</code>'s DAO.
     */
    public void setHardwareDao( ubic.gemma.model.common.protocol.HardwareDao hardwareDao ) {
        this.hardwareDao = hardwareDao;
    }

    /**
     * Gets the reference to <code>hardware</code>'s DAO.
     */
    protected ubic.gemma.model.common.protocol.HardwareDao getHardwareDao() {
        return this.hardwareDao;
    }

    /**
     * @see ubic.gemma.model.common.protocol.HardwareService#find(ubic.gemma.model.common.protocol.Hardware)
     */
    public ubic.gemma.model.common.protocol.Hardware find( final ubic.gemma.model.common.protocol.Hardware hardware ) {
        try {
            return this.handleFind( hardware );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.common.protocol.HardwareServiceException(
                    "Error performing 'ubic.gemma.model.common.protocol.HardwareService.find(ubic.gemma.model.common.protocol.Hardware hardware)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #find(ubic.gemma.model.common.protocol.Hardware)}
     */
    protected abstract ubic.gemma.model.common.protocol.Hardware handleFind(
            ubic.gemma.model.common.protocol.Hardware hardware ) throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.common.protocol.HardwareService#findOrCreate(ubic.gemma.model.common.protocol.Hardware)
     */
    public ubic.gemma.model.common.protocol.Hardware findOrCreate(
            final ubic.gemma.model.common.protocol.Hardware hardware ) {
        try {
            return this.handleFindOrCreate( hardware );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.common.protocol.HardwareServiceException(
                    "Error performing 'ubic.gemma.model.common.protocol.HardwareService.findOrCreate(ubic.gemma.model.common.protocol.Hardware hardware)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #findOrCreate(ubic.gemma.model.common.protocol.Hardware)}
     */
    protected abstract ubic.gemma.model.common.protocol.Hardware handleFindOrCreate(
            ubic.gemma.model.common.protocol.Hardware hardware ) throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.common.protocol.HardwareService#update(ubic.gemma.model.common.protocol.Hardware)
     */
    public void update( final ubic.gemma.model.common.protocol.Hardware hardware ) {
        try {
            this.handleUpdate( hardware );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.common.protocol.HardwareServiceException(
                    "Error performing 'ubic.gemma.model.common.protocol.HardwareService.update(ubic.gemma.model.common.protocol.Hardware hardware)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #update(ubic.gemma.model.common.protocol.Hardware)}
     */
    protected abstract void handleUpdate( ubic.gemma.model.common.protocol.Hardware hardware )
            throws java.lang.Exception;

    /**
     * @see ubic.gemma.model.common.protocol.HardwareService#remove(ubic.gemma.model.common.protocol.Hardware)
     */
    public void remove( final ubic.gemma.model.common.protocol.Hardware hardware ) {
        try {
            this.handleRemove( hardware );
        } catch ( Throwable th ) {
            throw new ubic.gemma.model.common.protocol.HardwareServiceException(
                    "Error performing 'ubic.gemma.model.common.protocol.HardwareService.remove(ubic.gemma.model.common.protocol.Hardware hardware)' --> "
                            + th, th );
        }
    }

    /**
     * Performs the core logic for {@link #remove(ubic.gemma.model.common.protocol.Hardware)}
     */
    protected abstract void handleRemove( ubic.gemma.model.common.protocol.Hardware hardware )
            throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set, otherwise returns <code>null</code>.
     * 
     * @return the current principal
     */
    protected java.security.Principal getPrincipal() {
        return ubic.gemma.spring.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages() {
        return ( org.springframework.context.MessageSource ) ubic.gemma.spring.BeanLocator.instance().getBean(
                "messageSource" );
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     * 
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage( final String key ) {
        return this.getMessages().getMessage( key, null, null );
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the underlying message
     * bundle.
     * 
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage( final String key, final Object[] arguments ) {
        return this.getMessages().getMessage( key, arguments, null );
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code> for the given
     * <code>locale</code>.
     * 
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage( final java.lang.String key, final java.lang.Object[] arguments,
            final java.util.Locale locale ) {
        return this.getMessages().getMessage( key, arguments, locale );
    }

}