<!-- ==================================================== -->
<!--
	This document is a "merge file" used by XDoclet to automagically generate a web-context
	for the application.  The generated web-context will have the name xxx-servlet.xml and is
	located in web/WEB-INF/.	
	
	author: keshav
	version: $Id$
-->
<!-- ==================================================== -->

<!-- ==================================================== -->
<!-- EXTERNAL DATABASE SESSION FACTORY -->
<!-- ==================================================== -->
<bean id="sessionFactoryGoldenPathHuman"
	class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
	<property name="dataSource">
		<ref bean="dataSourceGoldenPathHuman" />
	</property>
	<property name="mappingResources">
		<list></list>
	</property>
	<property name="hibernateProperties">
		<props>
			<prop key="hibernate.dialect">
				org.hibernate.dialect.MySQLDialect
			</prop>
			<prop key="hibernate.cache.use_query_cache">false</prop>
			<prop key="hibernate.cache.provider_class">
				org.hibernate.cache.EhCacheProvider
			</prop>
			<prop key="hibernate.cache.query_cache_factory">
				org.hibernate.cache.StandardQueryCacheFactory
			</prop>
			<prop key="hibernate.show_sql">true</prop>
		</props>
	</property>
</bean>

<!-- DATASOURCE USED BY SESSION FACTORY ABOVE -->
<bean id="dataSourceGoldenPathHuman"
	class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<property name="driverClassName">
		<value>com.mysql.jdbc.Driver</value>
	</property>
	<property name="username">
		<value>pavlidis</value>
	</property>
	<property name="password">
		<value>toast</value>
	</property>
	<property name="url">
		<value>jdbc:mysql://localhost:3306/hg17</value>
	</property>
</bean>

<!-- ==================================================== -->
<!--    Email configuration   -->
<!-- ==================================================== -->
<bean id="mailEngine" class="edu.columbia.gemma.web.util.MailEngine">
	<property name="mailSender">
		<ref bean="mailSender" />
	</property>
	<property name="velocityEngine">
		<ref bean="velocityEngine" />
	</property>
</bean>
<bean id="mailSender"
	class="org.springframework.mail.javamail.JavaMailSenderImpl">
	<property name="host">
		<value>${mail.host}</value>
	</property>
	<property name="username">
		<value>${mail.username}</value>
	</property>
	<property name="password">
		<value>${mail.password}</value>
	</property>
</bean>

<!-- Configure Velocity for sending e-mail -->
<bean id="velocityEngine"
	class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
	<property name="velocityProperties">
		<props>
			<prop key="resource.loader">class</prop>
			<prop key="class.resource.loader.class">
				org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
			</prop>
		</props>
	</property>
</bean>

<bean id="mailMessage"
	class="org.springframework.mail.SimpleMailMessage" singleton="false">
	<property name="from">
		<value>pavlidis@dbmi.columbia.edu</value>
	</property>
</bean>

<!-- ==================================================== -->
<!--    RESOURCES, namely the propertyConfigurer          -->
<!--    propertyConfigurer allows you to read variables   -->
<!--    stored in a .properties file from an xml file.    -->
<!--    Looks like:  ${mail.host} 						  -->
<!-- ==================================================== -->

<!-- For mail settings and future properties files -->
<bean id="propertyConfigurer"
	class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="locations">
		<list>
			<value>classpath:mail.properties</value>
		</list>
	</property>
	<property name="ignoreUnresolvablePlaceholders" value="true" />
	<property name="ignoreResourceNotFound" value="true" />
</bean>
<!--  TODO: define a separate propertyConfigurer for the web flows, somehow -->

<!-- ==================================================== -->

<!--  Mapping urls to services. Note that not all of the controllers will be listed here: some of them will be created by XDoclet. -->
<!--  NOTE: You cannot use this AND specify name="urlpattern.htm" in bean tags ... choose one.  -->

<!-- ==================================================== -->
<!-- 
	<bean id="urlMapping"
	class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
	<property name="mappings">
	<props>
	<prop key="/editProfile.html">userFormController</prop>
	<prop key="/mainMenu.html">filenameController</prop>
	<prop key="/editUser.html">userFormController</prop>
	<prop key="/passwordHint.html">passwordHintController</prop>
	<prop key="/signup.html">signupController</prop>
	<prop key="/pubMedSearch.htm">pubMedSearchController</prop>
	</props>
	</property>
	</bean>
-->

<bean id="filenameController"
	class="org.springframework.web.servlet.mvc.UrlFilenameViewController"
	name="/mainMenu.html /activeUsers.html /flushCache.html" />

<!-- ==================================================== -->
<!-- 	Used by the fileUploadController 				  -->
<!-- ==================================================== -->
<bean id="multipartResolver"
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<property name="maxUploadSize">
		<value>2097152</value>
	</property>
</bean>

<bean id="messageSource"
	class="org.springframework.context.support.ResourceBundleMessageSource">
	<!-- The default place for this is in WEB-INF/classes -->
	<property name="basename">
		<value>ApplicationResources</value>
	</property>
</bean>

<!-- View Resolver for JSPs -->
<bean id="viewResolver"
	class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<property name="requestContextAttribute">
		<value>rc</value>
	</property>
	<property name="viewClass">
		<value>org.springframework.web.servlet.view.JstlView</value>
	</property>
	<property name="prefix">
		<value>/WEB-INF/pages/</value>
	</property>
	<property name="suffix">
		<value>.jsp</value>
	</property>
</bean>

<!-- ==================================================== -->
<!--  Validation settings. -->
<!-- ==================================================== -->
<bean id="validatorFactory"
	class="org.springframework.validation.commons.DefaultValidatorFactory"
	init-method="init">
	<property name="resources">
		<list>
			<value>/WEB-INF/validator-rules.xml</value>
			<value>/WEB-INF/validation.xml</value>
		</list>
	</property>
</bean>

<!--  Use this if the command class is not _actually_ an "Impl" -->
<bean id="genericBeanValidator"
	class="org.springframework.validation.commons.BeanValidator">
	<property name="validatorFactory">
		<ref local="validatorFactory" />
	</property>
</bean>

<!-- Use this type of validator if you use a data model object as the command object -->
<bean id="userValidator"
	class="org.springframework.validation.commons.NamedBeanValidator">
	<property name="validatorFactory">
		<ref local="validatorFactory" />
	</property>
	<property name="beanName">
		<value>user</value>
	</property>
</bean>
<!--  add more NamedBeanValidators here -->


<!-- ==================================================== -->
<!-- SPRING WEBFLOWS -->
<!-- These entries are used with the xxx-flow.xml file.  The location of this file is defined
	in the FlowFactoryBean (ie. see pubMed.Search below).
-->
<!-- ==================================================== -->

<!-- Controller for the entire application.  This can be parameterized by adding the  
	_flowId to the client view (ie. jsp).  If this is not specified, you must specify
	an HttpServletFlowExecutionManager (ie. see pubMedSearchFrontController).
-->
<bean id="frontController" name="/search.htm"
	class="org.springframework.webflow.mvc.FlowController">
	<property name="cacheSeconds" value="5" />
	<property name="flowExecutionManager" ref="flowExecutionManager"/>
</bean>

<!--
	CONTINUATIONS
	Custom configuration of the HTTP request flow execution manager.
	Note how you can just change the flow execution storage strategy without any impact
	on the views!
-->
<bean id="flowExecutionManager" 
	class="org.springframework.webflow.execution.servlet.ServletFlowExecutionManager">
	<property name="storage">
		<bean class="org.springframework.webflow.execution.servlet.HttpSessionContinuationFlowExecutionStorage"/>
	</property>
</bean>

<!-- Parent Flow (search flow) -->

<!-- Xml FlowBuilder definition for the search flow -->
<bean id="pubMed.Search"
	class="org.springframework.webflow.config.XmlFlowFactoryBean">
	<property name="location"
		value="classpath:edu/columbia/gemma/web/controller/flow/entrez/pubmed/pubMedSearch-flow.xml" />
</bean>

<bean id="pubMed.Search.criteria.formAction"
	class="org.springframework.webflow.action.FormAction">
	<property name="formObjectName" value="query" />
	<property name="formObjectClass"
		value="edu.columbia.gemma.common.description.BibliographicReferenceImpl" />
	<property name="formObjectScopeAsString" value="flow" />
	<!--		
		<property name="validator">
		<bean id="pubMedQueryValidator" class="edu.columbia.gemma.web.controller.domain.PubMedValidator"/>
		</property>
	-->
</bean>

<bean id="pubMed.Search.executeQuery"
	class="edu.columbia.gemma.web.controller.flow.action.entrez.pubmed.PubMedExecuteQueryAction">
	<property name="bibliographicReferenceService">
		<ref bean="bibliographicReferenceService" />
	</property>
	<property name="externalDatabaseService">
		<ref bean="externalDatabaseService" />
	</property>
	<property name="pubMedXmlFetcher">
		<ref bean="pubMedXmlFetcher" />
	</property>
</bean>

<bean id="pubMed.Search.getAllBibRef"
	class="edu.columbia.gemma.web.controller.flow.action.entrez.pubmed.BibRefExecuteQueryAction">
	<property name="bibliographicReferenceService">
		<ref bean="bibliographicReferenceService" />
	</property>
</bean>

<!-- Subflow (detail flow) -->

<!-- xml FlowBuilder definition for the detail flow -->
<bean id="pubMed.Detail"
	class="org.springframework.webflow.config.XmlFlowFactoryBean">
	<property name="location"
		value="classpath:edu/columbia/gemma/web/controller/flow/entrez/pubmed/pubMedDetail-flow.xml" />
</bean>

<!-- equivalent to the pubMed.Search.executeQuery defined above -->
<bean id="pubMed.Detail.criteria.formAction.getFormAction"
	class="edu.columbia.gemma.web.controller.flow.action.entrez.pubmed.GetPubMedAction">
	<property name="bibliographicReferenceService">
		<ref bean="bibliographicReferenceService" />
	</property>
</bean>

<!--  ArrayDesign WebFlow -->
<!-- This is currently implemented in mvc.  Uncomment this to use as a flow. -->
<!-- 
<bean id="arrayDesign.Search"
	class="org.springframework.webflow.config.XmlFlowFactoryBean">
	<property name="location"
		value="classpath:edu/columbia/gemma/web/controller/flow/expression/arrayDesign/arrayDesignSearch-flow.xml" />
</bean>

<bean id="arrayDesign.Search.getAllArrayDesigns"
	class="edu.columbia.gemma.web.controller.flow.action.expression.arrayDesign.ArrayDesignExecuteQueryAction">
	<property name="arrayDesignService">
		<ref bean="arrayDesignService" />
	</property>
</bean>
-->
<!-- ArrayDesign Detail Subflow -->
<!-- This is currently implemented in mvc.  Uncomment this to use as a flow. -->
<!-- 
<bean id="arrayDesign.Detail"
	class="org.springframework.webflow.config.XmlFlowFactoryBean">
	<property name="location"
		value="classpath:edu/columbia/gemma/web/controller/flow/expression/arrayDesign/arrayDesignDetail-flow.xml" />
</bean>

<bean id="arrayDesign.Detail.criteria.formAction.getFormAction"
	class="edu.columbia.gemma.web.controller.flow.action.expression.arrayDesign.GetArrayDesignAction">
	<property name="arrayDesignService">
		<ref bean="arrayDesignService" />
	</property>
</bean>
-->
<!--  ArrayDesign Edit subflow -->

<bean id="arrayDesign.Edit"
	class="org.springframework.webflow.config.XmlFlowFactoryBean">
	<property name="location"
		value="classpath:edu/columbia/gemma/web/controller/flow/expression/arrayDesign/arrayDesignEdit-flow.xml" />
</bean>

<bean id="arrayDesign.Edit.formAction"
	class="edu.columbia.gemma.web.controller.flow.action.expression.arrayDesign.ArrayDesignEditAction">
	<property name="arrayDesignService">
		<ref bean="arrayDesignService" />
	</property>
</bean>

<!--  ExpressionExperiment flow -->
<bean id="expressionExperimentSearchController" name="/expressionExperimentSearch.htm"
	class="org.springframework.webflow.mvc.FlowController">
	<property name="cacheSeconds" value="5" />
	<property name="flow" ref="expressionExperiment.Search" />
</bean>

<bean id="expressionExperiment.Search"
	class="org.springframework.webflow.config.XmlFlowFactoryBean">
	<property name="location"
		value="classpath:edu/columbia/gemma/web/controller/flow/expression/experiment/expressionExperimentSearch-flow.xml" />
</bean>

<bean id="expressionExperiment.Search.getAllExpressionExperiments"
	class="edu.columbia.gemma.web.controller.flow.action.expression.experiment.ExpressionExperimentExecuteQueryAction">
	<property name="expressionExperimentService">
		<ref bean="expressionExperimentService" />
	</property>
</bean>

<bean id="expressionExperiment.Search.id.set"
    class="org.springframework.webflow.action.AttributeMapperAction">
    <property name="attributeMapper" ><ref bean="expressionExperiment.id.attributeMapper" /></property>
</bean>

<bean id="expressionExperiment.id.attributeMapper"
    class="org.springframework.binding.support.ParameterizableAttributeMapper">
    <property name="mappingsMap">
        <map>
            <entry key="${flowScope.experimentID}" value="experimentID" />
        </map>
    </property>
</bean>

<!--  ExpressionExperiment Detail subflow -->
<bean id="expressionExperimentDetailController" name="/expressionExperimentDetail.htm"
	class="org.springframework.webflow.mvc.FlowController">
	<property name="flow" ref="expressionExperiment.Detail" />
</bean>

<bean id="expressionExperiment.Detail"
	class="org.springframework.webflow.config.XmlFlowFactoryBean">
	<property name="location"
		value="classpath:edu/columbia/gemma/web/controller/flow/expression/experiment/expressionExperimentDetail-flow.xml" />
</bean>

<bean id="expressionExperiment.Detail.criteria.formAction.getFormAction"
	class="edu.columbia.gemma.web.controller.flow.action.expression.experiment.GetExpressionExperimentAction">
	<property name="expressionExperimentService">
		<ref bean="expressionExperimentService" />
	</property>
</bean>



<!-- A type conversion service, a more flexible/threadsafe/lightweight alternative to the PropertyEditor! -->
<bean id="conversion.service"
	class="org.springframework.binding.convert.support.DefaultConversionService"
	autowire="byType" />

<!-- A formatter registry, a thread-safe cache for Formatters: a thread-safe, lighter weight alt. to PropertyEditors! -->
<bean id="formatter.locator"
	class="org.springframework.binding.format.support.ThreadLocalFormatterLocator"
	autowire="byType" />

<!-- A broadcaster that will notify the formatter registry to cleanup all thread locals on app shutdown -->
<bean id="thread.cleanupBroadcaster"
	class="org.springframework.binding.thread.support.DefaultThreadCleanupBroadcaster" />
