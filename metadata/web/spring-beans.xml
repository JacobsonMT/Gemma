<!--
    This document is a "merge file" used by XDoclet to automagically generate a web-context
    for the application.  The generated web-context will have the name xxx-servlet.xml and is
    located in web/WEB-INF/.	
    
    author: keshav
    version: $Id$
-->

<!-- ==================================================== -->
<!-- Exception handler. -->
<!-- ==================================================== -->
<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    <property name="exceptionMappings">
        <props>
            <prop key="org.springframework.dao.DataAccessException">dataAccessFailure</prop>
            <prop key="java.lang.Exception">error</prop>
        </props>
    </property>
</bean>


<!-- ==================================================== -->
<!-- Action resolvers for MultiActionControllers -->
<!-- ==================================================== -->
<bean id="bibRefActions" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
    <property name="mappings">
        <props>
            <prop key="/bibRef/showAllBibRef.html">showAll</prop>
            <prop key="/bibRef/deleteBibRef.html">delete</prop>
            <prop key="/bibRef/showBibRef.html">show</prop>
            <prop key="/bibRef/searchBibRef.html">show</prop>
        </props>
    </property>
</bean>

<bean id="arrayDesignActions" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
    <property name="mappings">
        <props>
            <prop key="/arrayDesign/showAllArrayDesigns.html">showAll</prop>
            <prop key="/arrayDesign/deleteArrayDesign.html">delete</prop>
            <prop key="/arrayDesign/showArrayDesign.html">show</prop>
        </props>
    </property>
</bean>

<bean id="designElementActions" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
    <property name="mappings">
        <props>
            <prop key="/designElement/showAllDesignElements.html">showAll</prop>
            <prop key="/designElement/deleteDesignElement.html">delete</prop>
            <prop key="/designElement/showDesignElement.html">show</prop>
        </props>
    </property>
</bean>

<bean id="expressionExperimentActions" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
    <property name="mappings">
        <props>
            <prop key="/expressionExperiment/showAllExpressionExperiments.html">showAll</prop>
            <prop key="/expressionExperiment/deleteExpressionExperiment.html">delete</prop>
            <prop key="/expressionExperiment/showExpressionExperiment.html">show</prop>
        </props>
    </property>
</bean>

<!-- ==================================================== -->
<!-- EXTERNAL DATABASE SESSION FACTORY -->
<!-- ==================================================== -->
<bean id="sessionFactoryGoldenPathHuman" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="dataSource">
        <ref bean="dataSourceGoldenPathHuman" />
    </property>
    <property name="mappingResources">
        <list></list>
    </property>
    <property name="hibernateProperties">
        <props>
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
            <prop key="hibernate.cache.use_query_cache">false</prop>
            <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
            <prop key="hibernate.cache.query_cache_factory">org.hibernate.cache.StandardQueryCacheFactory</prop>
            <prop key="hibernate.show_sql">true</prop>
        </props>
    </property>
</bean>

<!-- DATASOURCE USED BY SESSION FACTORY ABOVE -->
<bean id="dataSourceGoldenPathHuman" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName">
        <value>com.mysql.jdbc.Driver</value>
    </property>
    <property name="username">
        <value>pavlidis</value>
    </property>
    <property name="password">
        <value>toast</value>
    </property>
    <property name="url">
        <value>jdbc:mysql://localhost:3306/hg17</value>
    </property>
</bean>

<!-- ==================================================== -->
<!--    Email configuration   -->
<!-- ==================================================== -->
<bean id="mailEngine" class="edu.columbia.gemma.web.util.MailEngine">
    <property name="mailSender">
        <ref bean="mailSender" />
    </property>
    <property name="velocityEngine">
        <ref bean="velocityEngine" />
    </property>
</bean>
<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host">
        <value>${mail.host}</value>
    </property>
    <property name="username">
        <value>${mail.username}</value>
    </property>
    <property name="password">
        <value>${mail.password}</value>
    </property>
</bean>

<!-- Configure Velocity for sending e-mail -->
<bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
    <property name="velocityProperties">
        <props>
            <prop key="resource.loader">class</prop>
            <prop key="class.resource.loader.class">org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader</prop>
        </props>
    </property>
</bean>
<bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage" singleton="false">
    <property name="from">
        <value>pavlidis@dbmi.columbia.edu</value>
    </property>
</bean>

<!-- ==================================================== -->
<!--    RESOURCES, namely the propertyConfigurer          -->
<!--    propertyConfigurer allows you to read variables   -->
<!--    stored in a .properties file from an xml file.    -->
<!--    Looks like:  ${mail.host} 						  -->
<!-- ==================================================== -->
<!-- For mail settings and future properties files -->
<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
        <list>
            <value>classpath:mail.properties</value>
        </list>
    </property>
    <property name="ignoreUnresolvablePlaceholders" value="true" />
    <property name="ignoreResourceNotFound" value="true" />
</bean>

<!-- ==================================================== -->
<!--           Used to configure menus on pages           -->
<!-- ==================================================== -->
<bean id="menu" class="net.sf.navigator.menu.MenuLoader">
  <property name="menuConfig">
    <value>/WEB-INF/menu-config.xml</value>
  </property>
</bean>


<!-- ==================================================== -->
<!--  Mapping urls to services. --><!--  FIXME This is never used ? -->
<!-- ==================================================== -->
<bean id="filenameController" class="org.springframework.web.servlet.mvc.UrlFilenameViewController" name="/mainMenu.html /activeUsers.html /flushCache.html" />

<!-- ==================================================== -->
<!-- 	Used by the fileUploadController 				  -->
<!-- ==================================================== -->
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize">
        <value>2097152</value>
    </property>
</bean>

<!-- ==================================================== -->
<!-- View Resolver for JSPs -->
<!-- ==================================================== -->
<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="requestContextAttribute">
        <value>rc</value>
    </property>
    <property name="viewClass">
        <value>org.springframework.web.servlet.view.JstlView</value>
    </property>
    <property name="prefix">
        <value>/WEB-INF/pages/</value>
    </property>
    <property name="suffix">
        <value>.jsp</value>
    </property>
</bean>

<!-- ==================================================== -->
<!--  Validation settings. -->
<!-- ==================================================== -->
<bean id="validatorFactory" class="org.springmodules.commons.validator.DefaultValidatorFactory" >
    <property name="validationConfigLocations">
        <list>
            <value>/WEB-INF/validator-rules.xml</value>
            <value>/WEB-INF/validation.xml</value>
        </list>
    </property>
</bean>

<!--  Use this if the command class is not _actually_ an "Impl" -->
<bean id="genericBeanValidator" class="org.springmodules.commons.validator.DefaultBeanValidator">
    <property name="validatorFactory">
        <ref local="validatorFactory" />
    </property>
</bean>

<!-- Use this type of validator if you use a data model object as the command object -->
<bean id="userValidator" class="org.springmodules.commons.validator.ConfigurableBeanValidator">
    <property name="validatorFactory">
        <ref local="validatorFactory" />
    </property>
    <property name="formName">
        <value>user</value>
    </property>
</bean>

<bean id="bibliographicReferenceValidator" class="org.springmodules.commons.validator.ConfigurableBeanValidator">
    <property name="validatorFactory">
        <ref local="validatorFactory" />
    </property>
    <property name="formName">
        <value>bibliographicReference</value>
    </property>
</bean>

<bean id="databaseEntryValidator"  class="org.springmodules.commons.validator.ConfigurableBeanValidator">
    <property name="validatorFactory">
        <ref local="validatorFactory" />
    </property>
    <property name="formName">
        <value>databaseEntry</value>
    </property>
</bean>

<!--  add more NamedBeanValidators here -->


<!--  ============================================================= -->
<!--  ===========         SPRING WEBFLOWS       =================== -->
<!--  ============================================================= -->

<!-- Controller used by all webflows in this application.  This can be parameterized by adding the  
    _flowId to the client view (ie. jsp).  If this is not specified, you must specify
    a ServletFlowExecutionManager.  I have added the _flowId to the jsp's, but have also specified the ServletFlowExecutionManager.
-->
<bean id="frontController" name="/flowController.html" class="org.springframework.webflow.mvc.FlowController">
    <property name="cacheSeconds" value="5" />
    <property name="flowExecutionManager" ref="flowExecutionManager" />
</bean>

<!--
    Custom configuration of the HTTP request flow execution manager.
-->
<bean id="flowExecutionManager" class="org.springframework.webflow.execution.servlet.ServletFlowExecutionManager">
    <property name="storage">
        <bean class="org.springframework.webflow.execution.servlet.HttpSessionContinuationFlowExecutionStorage" />
    </property>
    <property name="listener">
        <bean class="edu.columbia.gemma.web.flow.FlowExecutionListenerImpl" />
    </property>
</bean>

<!-- 
    Add one bean here for each flow. The actions are defined using XDoclet tags in the Action classes.   
-->

<bean id="pubMed.Search" class="org.springframework.webflow.config.XmlFlowFactoryBean">
    <property name="location" value="classpath:edu/columbia/gemma/web/flow/bibref/pubMedSearch-flow.xml" />
</bean>

<bean id="pubMed.Edit" class="org.springframework.webflow.config.XmlFlowFactoryBean">
    <property name="location" value="classpath:edu/columbia/gemma/web/flow/bibref/pubMedEdit-flow.xml" />
</bean>

<bean id="expressionExperiment.Edit" class="org.springframework.webflow.config.XmlFlowFactoryBean">
    <property name="location" value="classpath:edu/columbia/gemma/web/flow/expression/experiment/expressionExperimentEdit-flow.xml" />
</bean>

<bean id="fileUploader" class="org.springframework.webflow.config.XmlFlowFactoryBean">
    <property name="location" value="classpath:edu/columbia/gemma/web/flow/fileUpload-flow.xml" />
</bean>



<!--  ============================================== -->
<!-- A type conversion service, a more flexible/threadsafe/lightweight alternative to the PropertyEditor! -->
<bean id="conversion.service" class="org.springframework.binding.convert.support.DefaultConversionService" autowire="byType" />
<!-- A formatter registry, a thread-safe cache for Formatters: a thread-safe, lighter weight alt. to PropertyEditors! -->
<bean id="formatter.locator" class="org.springframework.binding.format.support.ThreadLocalFormatterLocator" autowire="byType" />
<!-- A broadcaster that will notify the formatter registry to cleanup all thread locals on app shutdown -->
<bean id="thread.cleanupBroadcaster" class="org.springframework.binding.thread.support.DefaultThreadCleanupBroadcaster" />
