<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
    "http://www.springframework.org/dtd/spring-beans.dtd">

<!-- 
author: keshav    
$Id$ 
-->

<beans>

    <!-- ======================== FILTER CHAIN ======================= -->
    <bean id="filterChainProxy" class="net.sf.acegisecurity.util.FilterChainProxy">
        <property name="filterInvocationDefinitionSource">
            <value>
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
                PATTERN_TYPE_APACHE_ANT
                /j_security_check*=httpSessionContextIntegrationFilter,authenticationProcessingFilter
                /**/*.html*=httpSessionContextIntegrationFilter,remoteUserFilter,anonymousProcessingFilter,securityEnforcementFilter
                /**/*.htm*=httpSessionContextIntegrationFilter,remoteUserFilter,anonymousProcessingFilter,securityEnforcementFilter
                /**/*.jsp*=httpSessionContextIntegrationFilter,remoteUserFilter,securityEnforcementFilter
            </value>
        </property>
    </bean>
    
    <!-- ======================== FILTERS ======================= -->
    
    <bean id="httpSessionContextIntegrationFilter" class="net.sf.acegisecurity.context.HttpSessionContextIntegrationFilter">
        <property name="context"><value>net.sf.acegisecurity.context.SecurityContextImpl</value></property>
    </bean>
    
    <bean id="remoteUserFilter" class="net.sf.acegisecurity.wrapper.ContextHolderAwareRequestFilter"/>
    
    <bean id="anonymousProcessingFilter" class="net.sf.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
        <property name="key"><value>anonymous</value></property>
        <property name="userAttribute"><value>anonymous,ROLE_ANONYMOUS</value></property>
    </bean>
    
    <!-- ======================== AUTHENTICATION ======================= -->
    
    <bean id="authenticationProcessingFilter" class="net.sf.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
        <property name="authenticationManager"><ref local="authenticationManager"/></property>
        <property name="authenticationFailureUrl"><value>/login.jsp?error=true</value></property>
        <property name="defaultTargetUrl"><value>/</value></property>
        <property name="filterProcessesUrl"><value>/j_security_check</value></property>
    </bean>
    
    <bean id="manualAuthenticationProcessing" class="edu.columbia.gemma.security.ui.ManualAuthenticationProcessing">
      <property name="authenticationManager"><ref bean="authenticationManager"/></property>
      
   </bean>
    
    <bean id="authenticationManager" class="net.sf.acegisecurity.providers.ProviderManager">
        <property name="providers">
            <list>
                <ref local="daoAuthenticationProvider"/>
                <ref local="anonymousAuthenticationProvider"/>
            </list>
        </property>
    </bean>
   
    <!-- Automatically receives AuthenticationEvent messages from DaoAuthenticationProvider -->
    <bean id="loggerListener" class="net.sf.acegisecurity.providers.dao.event.LoggerListener"/>
    
    <bean id="daoAuthenticationProvider" class="net.sf.acegisecurity.providers.dao.DaoAuthenticationProvider">
         <property name="authenticationDao"><ref local="jdbcAuthenticationDao"/></property>
         <property name="userCache"><ref local="userCache"/></property>
    </bean>
    
    <!-- Read users from database -->
    <bean id="jdbcAuthenticationDao" class="net.sf.acegisecurity.providers.dao.jdbc.JdbcDaoImpl">
        <property name="dataSource"><ref bean="dataSource"/></property>
        <property name="usersByUsernameQuery">
            <value>SELECT USER_NAME,PASSWORD, enabled as "true" FROM CONTACT WHERE USER_NAME = ?</value>
        </property>
        <property name="authoritiesByUsernameQuery">
            <value>SELECT USER_NAME,NAME FROM USER_ROLE WHERE USER_NAME = ?</value>
        </property>
    </bean>

    <bean id="userCache" class="net.sf.acegisecurity.providers.dao.cache.EhCacheBasedUserCache">
        <property name="cache">
            <bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
                <property name="cacheManager">
                    <bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>
                </property>
                <property name="cacheName"><value>userCache</value></property>
            </bean>
        </property>
    </bean>
   
    <bean id="anonymousAuthenticationProvider" class="net.sf.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
        <property name="key"><value>anonymous</value></property>
    </bean>
    
	<!-- ===================== HTTP REQUEST SECURITY ==================== -->
    
    <bean id="securityEnforcementFilter" class="net.sf.acegisecurity.intercept.web.SecurityEnforcementFilter">
        <property name="filterSecurityInterceptor"><ref local="filterInvocationInterceptor"/></property>
        <property name="authenticationEntryPoint"><ref local="authenticationProcessingFilterEntryPoint"/></property>
    </bean>
    
    <!-- Note the order that entries are placed against the objectDefinitionSource is critical.
         The FilterSecurityInterceptor will work from the top of the list down to the FIRST pattern that matches the request URL.
         Accordingly, you should place MOST SPECIFIC (ie a/b/c/d.*) expressions first, with LEAST SPECIFIC (ie a/.*) expressions last -->
    <bean id="filterInvocationInterceptor" class="net.sf.acegisecurity.intercept.web.FilterSecurityInterceptor">
        <property name="authenticationManager"><ref local="authenticationManager"/></property>
        <property name="accessDecisionManager"><ref local="accessDecisionManager"/></property>
        <property name="objectDefinitionSource">
            <value>
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
                PATTERN_TYPE_APACHE_ANT
                /signup.html=ROLE_ANONYMOUS,admin,user
                /passwordhint.html*=ROLE_ANONYMOUS,admin,user
                /**/*.html*=admin,user
                /**/*.htm*=admin,user
                /clickstreams.jsp=admin
            </value>
        </property>
    </bean>
    
	<!-- if user requests a secure Http resource but has not been authenticated, they will be presented this login form --> 
    <bean id="authenticationProcessingFilterEntryPoint" class="net.sf.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
        <property name="loginFormUrl"><value>/login.jsp</value></property>
        <property name="forceHttps"><value>false</value></property>
    </bean>
	
    <!-- ===================== AUTHORIZATION ==================== -->
    
    <!-- acegi serviceSecurityInterceptor --> 
    <bean id="serviceSecurityInterceptor" class="net.sf.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor">
        <property name="authenticationManager"><ref bean="authenticationManager"/></property>
        <property name="accessDecisionManager"><ref bean="businessAccessDecisionManager"/></property>
        <property name="afterInvocationManager"><ref bean="afterInvocationManager"/></property>
        <property name="objectDefinitionSource">
            <value>
                edu.columbia.gemma.expression.experiment.ExpressionExperimentService.saveExpressionExperiment=user, admin  
                edu.columbia.gemma.expression.experiment.ExpressionExperimentService.getAllExpressionExperiments=user, admin  
                edu.columbia.gemma.expression.experiment.ExpressionExperimentService.find=user, admin  
                edu.columbia.gemma.expression.experiment.ExpressionExperimentService.createExpressionExperiment=user, admin  
                edu.columbia.gemma.expression.experiment.ExpressionExperimentService.updateExpressionExperiment=user, admin  
                edu.columbia.gemma.expression.experiment.ExpressionExperimentService.removeExpressionExperiment=user, admin  
                edu.columbia.gemma.expression.experiment.ExpressionExperimentService.findByInvestigator=user, admin  
                edu.columbia.gemma.expression.experiment.ExperimentalDesignService.getExperimentalDesigns=user, admin  
                edu.columbia.gemma.expression.experiment.ExperimentalDesignService.saveExperimentalDesign=user, admin  
                edu.columbia.gemma.expression.experiment.ExperimentalFactorService.getAllExperimentalFactors=user, admin  
                edu.columbia.gemma.expression.experiment.ExperimentalFactorService.saveExperimentalFactor=user, admin  
                edu.columbia.gemma.expression.experiment.FactorValueService.getAllFactorValues=user, admin  
                edu.columbia.gemma.expression.experiment.FactorValueService.saveFactorValue=user, admin  
                edu.columbia.gemma.expression.experiment.ExpressionExperimentSubSetService.getAllExpressionExperimentSubSets=user, admin  
                edu.columbia.gemma.expression.experiment.ExpressionExperimentSubSetService.saveExpressionExperimentSubSet=user, admin  
                edu.columbia.gemma.expression.designElement.CompositeSequenceService.saveCompositeSequence=user, admin  
                edu.columbia.gemma.expression.designElement.CompositeSequenceService.getAllCompositeSequences=user, admin, AFTER_ACL_ARRAYDESIGN_COLLECTION_READ  
                edu.columbia.gemma.expression.designElement.ReporterService.saveReporter=user, admin  
                edu.columbia.gemma.expression.arrayDesign.ArrayDesignService.getAllArrayDesigns=user, admin  
                edu.columbia.gemma.expression.arrayDesign.ArrayDesignService.saveArrayDesign=user, admin  
                edu.columbia.gemma.expression.arrayDesign.ArrayDesignService.removeArrayDesign=ACL_ARRAYDESIGN_EDIT  
                edu.columbia.gemma.expression.arrayDesign.ArrayDesignService.findArrayDesignByName=user, admin  
                edu.columbia.gemma.expression.arrayDesign.ArrayDesignService.updateArrayDesign=ACL_ARRAYDESIGN_EDIT  
                edu.columbia.gemma.expression.bioAssay.BioAssayService.saveBioAssay=user, admin  
                edu.columbia.gemma.expression.bioAssay.BioAssayService.getAllBioAssays=user, admin  
                edu.columbia.gemma.expression.bioAssayData.BioAssayDataVectorService.saveBioAssayDataVector=user, admin  
                edu.columbia.gemma.expression.bioAssayData.DesignElementDataVectorService.saveDesignElementDataVector=user, admin  
                edu.columbia.gemma.expression.biomaterial.BioMaterialService.getBioMaterials=user, admin  
                edu.columbia.gemma.expression.biomaterial.BioMaterialService.saveBioMaterial=user, admin  
                edu.columbia.gemma.expression.biomaterial.TreatmentService.getTreatments=user, admin  
                edu.columbia.gemma.expression.biomaterial.TreatmentService.saveTreatment=user, admin  
                edu.columbia.gemma.common.description.BibliographicReferenceService.getAllBibliographicReferences=user, admin  
                edu.columbia.gemma.common.description.BibliographicReferenceService.saveBibliographicReference=user, admin
                edu.columbia.gemma.common.description.BibliographicReferenceService.removeBibliographicReference=ACL_BIBREF_EDIT
                edu.columbia.gemma.expression.arrayDesign.ArrayDesignService.updateArrayDesign=ACL_BIBREF_EDIT     
                edu.columbia.gemma.common.description.BibliographicReferenceService.findByExternalId=user, admin  
                edu.columbia.gemma.common.description.BibliographicReferenceService.findByExternalId=user, admin  
                edu.columbia.gemma.common.description.BibliographicReferenceService.alreadyExists=user, admin  
                edu.columbia.gemma.common.description.BibliographicReferenceService.getAllBibliographicReferences=user, admin  
                edu.columbia.gemma.common.description.BibliographicReferenceService.getBibliographicReferenceByTitle=user, admin  
                edu.columbia.gemma.common.description.BibliographicReferenceService.saveBibliographicReferenceByLookup=user, admin  
                edu.columbia.gemma.common.description.ExternalDatabaseService.find=user, admin  
                edu.columbia.gemma.common.auditAndSecurity.PersonService.savePerson=user, admin  
                edu.columbia.gemma.common.auditAndSecurity.PersonService.getAllPersons=user, admin  
                edu.columbia.gemma.common.auditAndSecurity.PersonService.removePerson=user, admin  
                edu.columbia.gemma.common.auditAndSecurity.PersonService.findByName=user, admin  
                edu.columbia.gemma.genome.gene.CandidateGeneListService.createByName=user, admin  
                edu.columbia.gemma.genome.gene.CandidateGeneListService.updateCandidateGeneList=user, admin  
                edu.columbia.gemma.genome.gene.CandidateGeneListService.removeCandidateGeneList=user, admin  
                edu.columbia.gemma.genome.gene.CandidateGeneListService.findByContributer=user, admin  
                edu.columbia.gemma.genome.gene.CandidateGeneListService.findByGeneOfficialName=user, admin  
                edu.columbia.gemma.genome.gene.CandidateGeneListService.findByID=user, admin  
                edu.columbia.gemma.genome.gene.CandidateGeneListService.findByListOwner=user, admin  
                edu.columbia.gemma.genome.gene.CandidateGeneListService.getAll=user, admin  
                edu.columbia.gemma.genome.gene.CandidateGeneListService.setActor=user, admin  
                edu.columbia.gemma.genome.gene.CandidateGeneListService.saveCandidateGeneList=user, admin  
                edu.columbia.gemma.genome.gene.GeneService.updateGene=ACL_GENE_EDIT  
                edu.columbia.gemma.genome.gene.GeneService.getAllGenes=user, admin  
                edu.columbia.gemma.genome.gene.GeneService.removeGene=ACL_GENE_EDIT  
                edu.columbia.gemma.genome.gene.GeneService.findByOfficialName=user, admin  
                edu.columbia.gemma.genome.gene.GeneService.findAllQtlsByPhysicalMapLocation=user, admin  
                edu.columbia.gemma.genome.gene.GeneService.findByOfficialSymbol=user, admin  
                edu.columbia.gemma.genome.gene.GeneService.findByOfficialSymbolInexact=user, admin  
                edu.columbia.gemma.genome.gene.GeneService.findByID=user, admin  
                edu.columbia.gemma.genome.gene.GeneService.saveGene=user, admin  
            </value>
        </property>
    </bean>
    
    <!-- An access decision manager used by the serviceSecurityInterceptor -->
	<bean id="businessAccessDecisionManager" class="net.sf.acegisecurity.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions">
            <value>false</value>
        </property>
        <property name="decisionVoters">
            <list>
            	<ref local="roleVoter"/>
                <ref bean="arrayDesignEditVoter"/>
                <ref bean="bibliographicReferenceEditVoter"/>
                <ref bean="geneEditVoter"/>
            </list>
        </property>
    </bean>
   
   <!-- An access decision manager used by filterInvocationInterceptor -->
   <bean id="accessDecisionManager" class="net.sf.acegisecurity.vote.AffirmativeBased">
      <property name="allowIfAllAbstainDecisions"><value>false</value></property>
      <property name="decisionVoters">
         <list>
            <ref bean="roleVoter"/>
         </list>
      </property>  
   </bean>
    
    <!-- ===================== VOTING ==================== -->
    
    <!-- role-based voting -->
    <bean id="roleVoter" class="net.sf.acegisecurity.vote.RoleVoter">
        <property name="rolePrefix"><value/></property>
    </bean>
    
    <!-- ============== "BEFORE METHOD-CALL" AUTHORIZATION (happens before the method is executed) =========== -->
         
    <!-- An access decision voters that read processConfigAttribute settings -->
    <bean id="arrayDesignEditVoter" class="net.sf.acegisecurity.vote.BasicAclEntryVoter">
        <property name="aclManager"><ref bean="aclManager"/></property>
        <property name="processConfigAttribute">
            <value>ACL_ARRAYDESIGN_EDIT</value>
        </property>
        <property name="processDomainObjectClass">       
            <value>edu.columbia.gemma.expression.arrayDesign.ArrayDesign</value>            
        </property>
        <property name="requirePermission">
            <list>
                <ref local="SimpleAclEntry.ADMINISTRATION"/>
                <ref local="SimpleAclEntry.READ_WRITE"/>
            </list>
        </property>
    </bean>
    <bean id="geneEditVoter" class="net.sf.acegisecurity.vote.BasicAclEntryVoter">
        <property name="aclManager"><ref bean="aclManager"/></property>
        <property name="processConfigAttribute">
            <value>ACL_GENE_EDIT</value>
        </property>
        <property name="processDomainObjectClass">       
            <value>edu.columbia.gemma.genome.Gene</value>            
        </property>
        <property name="requirePermission">
            <list>
                <ref local="SimpleAclEntry.ADMINISTRATION"/>
                <ref local="SimpleAclEntry.READ_WRITE"/>
            </list>
        </property>
    </bean>
    <bean id="bibliographicReferenceEditVoter" class="net.sf.acegisecurity.vote.BasicAclEntryVoter">
        <property name="aclManager"><ref bean="aclManager"/></property>
        <property name="processConfigAttribute">
            <value>ACL_BIBREF_EDIT</value>
        </property>
        <property name="processDomainObjectClass">       
            <value>edu.columbia.gemma.common.description.BibliographicReference</value>            
        </property>
        <property name="requirePermission">
            <list>
                <ref local="SimpleAclEntry.ADMINISTRATION"/>
                <ref local="SimpleAclEntry.READ_WRITE"/>
            </list>
        </property>
    </bean>
    
   <!-- ============== "AFTER METHOD-CALL" AUTHORIZATION (happens after the method is executed) =========== -->
      
    <bean id="afterInvocationManager" class="net.sf.acegisecurity.afterinvocation.AfterInvocationProviderManager">
        <property name="providers">
            <list>
                <ref local="afterAclRead"/>
                <ref local="afterAclCollectionRead"/>
                <ref local="afterAclArrayDesignCollectionRead"/>
            </list>
        </property>
    </bean>
    
    <!-- Processes AFTER_ACL_READ configuration settings -->
    <bean id="afterAclRead" class="net.sf.acegisecurity.afterinvocation.BasicAclEntryAfterInvocationProvider">
        <property name="aclManager"><ref local="aclManager"/></property>
        <property name="requirePermission">
            <list>
                <ref bean="SimpleAclEntry.ADMINISTRATION"/>
                <ref bean="SimpleAclEntry.READ_WRITE"/>
                <ref bean="SimpleAclEntry.READ"/>
            </list>
        </property>
    </bean>
       
    <!-- Processes AFTER_ACL_COLLECTION_READ configuration settings (removes objects from the collection if you do not 
         have authorization priviliges based on -->
    <bean id="afterAclCollectionRead" 
        class="net.sf.acegisecurity.afterinvocation.BasicAclEntryAfterInvocationCollectionFilteringProvider">
        <property name="aclManager"><ref local="aclManager"/></property>
        <property name="requirePermission">
            <list>
                <ref bean="SimpleAclEntry.ADMINISTRATION"/>
                <ref bean="SimpleAclEntry.READ_WRITE"/>
                <ref bean="SimpleAclEntry.READ"/>
            </list>
        </property>
    </bean>
    
    <!-- Process AFTER_ACL_ARRAYDESIGN_COLLECTION_READ -->
    <bean id="afterAclArrayDesignCollectionRead" 
        class="edu.columbia.gemma.security.afterInvocation.AclAfterCollectionCompSeqByArrayDesignFilter">
        <property name="aclManager"><ref local="aclManager"/></property>
        <property name="requirePermission">
            <list>
                <ref bean="SimpleAclEntry.ADMINISTRATION"/>
                <ref bean="SimpleAclEntry.READ_WRITE"/>
                <ref bean="SimpleAclEntry.READ"/>
            </list>
        </property>
    </bean>
   
   <!-- ========= ACCESS CONTROL LIST LOOKUP MANAGER DEFINITIONS ========= -->

   <bean id="aclManager" class="net.sf.acegisecurity.acl.AclProviderManager">
      <property name="providers">
         <list>
            <ref local="basicAclProvider"/>
         </list>
      </property>
   </bean>

   <bean id="basicAclProvider" class="net.sf.acegisecurity.acl.basic.BasicAclProvider">
      <property name="basicAclDao"><ref local="basicAclExtendedDao"/></property>
   </bean>

   <bean id="basicAclExtendedDao" class="net.sf.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl">
      <property name="dataSource"><ref bean="dataSource"/></property>
   </bean>
   
	<!-- ~~~~~~~~~~~~~~~~~~ AUTHORIZATION MASK DEFINITIONS ~~~~~~~~~~~~~~~~~~~ -->

   <!-- ACL permission masks -->
   
   <bean id="SimpleAclEntry.ADMINISTRATION" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>net.sf.acegisecurity.acl.basic.SimpleAclEntry.ADMINISTRATION</value>
        </property>
    </bean>
        
    <bean id="SimpleAclEntry.READ_WRITE" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>net.sf.acegisecurity.acl.basic.SimpleAclEntry.READ_WRITE</value>
        </property>
    </bean>
    
    <bean id="SimpleAclEntry.READ" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>net.sf.acegisecurity.acl.basic.SimpleAclEntry.READ</value>
        </property>
    </bean>
    
    <bean id="SimpleAclEntry.CREATE" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>net.sf.acegisecurity.acl.basic.SimpleAclEntry.CREATE</value>
        </property>
    </bean>
    
    <bean id="SimpleAclEntry.DELETE" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>net.sf.acegisecurity.acl.basic.SimpleAclEntry.DELETE</value>
        </property>
    </bean>

   <!-- ================================================================== -->
   
   <!--  Interceptor to persist ACL objects -->
   <bean id="persistAclInterceptorBackend" class="edu.columbia.gemma.security.interceptor.PersistAclInterceptorBackend">
   <property name="basicAclExtendedDao"><ref bean="basicAclExtendedDao"/></property>
   </bean>
   
</beans>
