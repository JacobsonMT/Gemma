<project xmlns:j="jelly:core" xmlns:ant="jelly:ant"
	xmlns:maven="jelly:maven">

	<!-- $Id$ -->

	<goal name="set-source-dirs">
		<ant:path id="impl" location="${basedir}/src/impl" />
		<maven:addPath id="maven.compile.src.set" refid="impl" />
		<ant:path id="gen" location="${basedir}/src/gen" />
		<maven:addPath id="maven.compile.src.set" refid="gen" />
		<ant:path id="web" location="${basedir}/src/web" />
		<maven:addPath id="maven.compile.src.set" refid="web" />
	</goal>

	<!-- ==================================================================
		Compiles
		================================================================== -->
	<preGoal name="java:compile">
		<ant:delete quiet="false" failonerror="false">
			<fileset dir="${maven.build.dest}"
				includes="**/*.class,**/*.hbm.xml" />
		</ant:delete>
		<ant:delete quiet="false" failonerror="false">
			<fileset dir="${basedir}/target/test-classes"
				includes="**/*.class,**/*.hbm.xml" />
		</ant:delete>
		<attainGoal name="set-source-dirs" />
	</preGoal>
	
	
	<postGoal name="java:compile">
		<ant:copy toDir="${maven.build.dest}">
			<fileset dir="${basedir}/metadata/webproperties"
				includes="**/*.properties" />
		</ant:copy>
	</postGoal>

	<goal name="xdoclet">
		<attainGoal name="xdoclet:webdoclet" />
		<attainGoal name="xdoclet:springdoclet" />
	</goal>

	<goal name="copy-hibconfig"
		description="Copy hibernate configuration files to the output directory">
		<ant:copy todir="${maven.build.dest}">
			<fileset dir="${basedir}/src/gen"
				includes="**/*.hbm.xml,ehcache.xml,hibernate.cfg.xml" />
		</ant:copy>
	</goal>

	<goal name="cc-build"
		description="Special task for cruise control">
		<attainGoal name="mda-clean" />
		<attainGoal name="mda-impl-clean" />
		<attainGoal name="scm:cvs-update-project" />
		<attainGoal name="site:generate" />
	</goal>


	<!-- ==================================================================
		Build and export and initialize the database schema
		================================================================== -->
	<goal name="ddl" description="Create database">
		<attainGoal name="hibernate:schema-export" /><!-- this only creates the text sql file -->
		<sql driver="${maven.sql.driver}" 
		 url="${maven.sql.url}"  onerror="continue"
		 userid="${maven.sql.userid}" 
		 password="${maven.sql.password}" src="${basedir}/target/schema/Gemma-0.1-schema.sql" >
		 	 <setProperty name="classpathref" value="${maven.sql.classpathref}"/>
		 </sql>
	</goal>

	<preGoal name="ddl">
		<attainGoal name="copy-hibconfig" />
	</preGoal>
	
	<postGoal name="ddl">
		<attainGoal name="init-database" />
	</postGoal>
	
	<goal name="init-database" description="Populate database with initial data">		
		<ant:echo message = "Populating database with initial data"/> 	    	
		<attainGoal name="sql:sql" />
	</goal>
	

	<!-- ==================================================================
		Goals used for testing the system.
		================================================================== -->
	 
	 <!-- create the tables in the test database -->
	<goal name="ddl-test" >
		<attainGoal name="hibernate:schema-export" /> <!-- this only creates the text sql file -->
		 <!-- note use of test database here -->
		 <sql driver="${maven.sql.driver}" 
		 url="${maven.sql.testdb.url}"  
		 onerror="continue"
		 userid="${maven.sql.userid}" 
		 password="${maven.sql.password}" src="${basedir}/target/schema/${maven.final.name}-schema.sql" >
		 	 <setProperty name="classpathref" value="${maven.sql.classpathref}"/>
		 </sql>
	</goal>
	
	<!-- Load initial data into the test database -->
	<goal name="init-testdb"  >
		 <sql driver="${maven.sql.driver}" 
		 url="${maven.sql.testdb.url}"  onerror="continue"
		 userid="${maven.sql.userid}" 
		 password="${maven.sql.password}" >
		 	 <setProperty name="classpathref" value="${maven.sql.classpathref}"/>
		 	 <fileset dir="${maven.sql.src.dir}" 
           	  includes="*.sql" 
    		/>
		 </sql>
	</goal>
	
	<goal name="ddl-test-setup" prereqs="ddl-test,init-testdb" />
	
	<!-- Do a full-blown test, including all preliminary tests -->
	<goal name="fulltest" prereqs="mda,init-testdb,ddl-test,xdoclet" >
		<echo>"Running test"</echo>
		<attainGoal name="test" />	
	</goal>
	
	
	
	<!-- ==================================================================
		Pre and Postgoals for website setup.
		================================================================== -->
	<preGoal name="site:run-reports">
		<attainGoal name="mda" />
	</preGoal>

	<postGoal name="site:generate">
		 <attainGoal name="copyumldocs" /> 
	</postGoal>

	<goal name="copyumldocs"
		description="Copy UML docs to the site">
		    <property name="maven.homepage" value="${pom.siteDirectory}"/>
		<tar tarfile="${basedir}/target/docs/umldoc.tar"
			basedir="${basedir}/docs/uml" />
		<gzip zipfile="${basedir}/target/docs/umldoc.tar.gz"
			src="${basedir}/target/docs/umldoc.tar" />
			<delete file="${basedir}/target/docs/umldoc.tar" />

    	<!-- Make sure the destination directory exists before trying to copy -->
        <exec dir="." executable="${maven.ssh.executable}">
	  		<arg line="${maven.ssh.args} -l ${maven.username} ${pom.siteAddress} 'mkdir -p ${maven.homepage}'"/>
    	</exec>
   		<exec dir="${maven.build.dir}" executable="${maven.scp.executable}">
      		<arg line="${maven.scp.args} ${maven.build.dir}/docs/umldoc.tar.gz ${maven.username}@${pom.siteAddress}:${maven.homepage}"/>
    	</exec>

    	<exec dir="." executable="${maven.ssh.executable}">
      		<arg line="${maven.ssh.args} -l ${maven.username} ${pom.siteAddress} 'cd ${maven.homepage};${maven.site.gunzip.executable} umldoc.tar.gz;${maven.site.tar.executable} xUvf umldoc.tar;rm umldoc.tar'"/>
    	</exec>
    	<delete file="${maven.build.dir}/docs/umldoc.tar.gz"/>
	</goal>
 


	<preGoal name="build:start">
		<attainGoal name="set-source-dirs" />
	</preGoal>

	<!-- ==================================================================
		Start andromda server
		================================================================== -->
	<goal name="start-andromda-server">
		<maven:maven descriptor="${basedir}/mda/project.xml"
			goals="andromda:start-server" />
	</goal>
	<!-- ==================================================================
		Stop andromda server
		================================================================== -->
	<goal name="stop-andromda-server">
		<maven:maven descriptor="${basedir}/mda/project.xml"
			goals="andromda:stop-server" />
	</goal>
	<!-- ==================================================================
		Run andromda
		================================================================== -->
	<goal name="mda">
		<maven:maven descriptor="${basedir}/mda/project.xml"
			goals="andromda:run" />
		<ant:echo message = "==========================================="/>
		<ant:echo message = "        YOU MAY NEED TO RUN XDOCLET          "/> 
	    <ant:echo message = "==========================================="/>	
	</goal>

	<goal name="gp-human-reverse">
		<maven:maven
			descriptor="${basedir}/mda-external/goldenpath/human/project.xml"
			goals="andromda:schema2xmi" />
	</goal>

	<goal name="gp-human-mda">
		<maven:maven
			descriptor="${basedir}/mda-external/goldenpath/human/project.xml"
			goals="andromda:run" />
	</goal>

	<preGoal name="mda">
		<attainGoal name="mda-clean" />
		<attainGoal name="mda-remove-logs" />
	</preGoal>

	<!-- ==================================================================
		Run andromda on test models (used for debugging Andromda)
		================================================================== -->
	<goal name="test-mda">
		<maven:maven descriptor="${basedir}/mda/test/project.xml"
			goals="andromda:run" />
	</goal>
	<preGoal name="test-mda">
		<attainGoal name="mda-remove-logs" />
	</preGoal>

	<!-- ==================================================================
		Remove all Andromda-generated files (except permanent impl classes)
		================================================================== -->
	<goal name="mda-clean"
		description="Remove all Andromda-generated files (except permanent impl classes)">
		<ant:delete quiet="false" failonerror="false">
			<fileset dir="${basedir}/src/gen/edu/columbia"
				includes="**/*.java,**/*.hbm.xml"
				excludes="${basedir}/src/impl/**/*.java" />
		</ant:delete>
	</goal>

	<!-- ==================================================================
		Remove all Andromda-generated impl files
		================================================================== -->
	<goal name="mda-impl-clean"
		description="Remove all Andromda-generated impl files">
		<ant:delete quiet="false" failonerror="false">
			<fileset dir="${basedir}/src/impl/edu/columbia/gemma"
				includes="**/*Impl.java"
				excludes="**/util/*,**/loader/*,**/tools/*" />
		</ant:delete>
	</goal>

	<!-- ==================================================================
		Remove the log files generated by Andromda
		================================================================== -->
	<goal name="mda-remove-logs"
		description="Clear out old Andromda log files">
		<ant:delete quiet="false" failonerror="false">
			<fileset dir="${basedir}"
				includes="andromda-hibernate.log, andromda.log, andromda-spring.log, mdr.log, andromda-java.log" />
		</ant:delete>
	</goal>

	<!-- ==================================================================
		Webapp management
		================================================================== -->
	<goal name="webapp-copy-deps"
		description="Copy dependencies to the WEB-INF/lib directory">
		<ant:delete quite="false" failonerror="false">
			<fileset dir="${webapp.build.lib}" includes="*.jar" />
			<fileset dir="${webapp.build.tlds}" includes="*.tld" />
		</ant:delete>
		<j:forEach var="lib" items="${pom.artifacts}">
			<j:set var="dep" value="${lib.dependency}" />
			<j:if test="${dep.getProperty('war.bundle')=='true'}">
				<j:if test="${dep.type =='jar'}">
					<ant:copy todir="${webapp.build.lib}"
						file="${lib.path}" />
				</j:if>
				<j:if test="${dep.type =='tld'}">
					<ant:copy todir="${webapp.build.tlds}"
						file="${lib.path}" />
				</j:if>
			</j:if>
		</j:forEach>
	</goal>

	<goal name="install-context-config">
		<ant:copy file="${basedir}/metadata/conf/Gemma.xml"
			failonerror="false"
			todir="${catalina.home}/conf/Catalina/localhost">
			<filterset refid="web.variables" />
		</ant:copy>
	</goal>
	
	<goal name="remove-work-dir">
		<ant:delete dir="${basedir}/work" quiet="false" failonerror="false"/> 
	</goal>
	
	
	<preGoal name="war">
		<attainGoal name="clean" />
	</preGoal>
	

	<!--TODO can I set up a tunnel without putty? -->
	<!-- set ${user}, ${server}, ${remotedir}, ${sshdir}, ${passphrase} in build.properties -->
	<goal name="deploy-war">
	<taskdef name="scp" classname="org.apache.tools.ant.taskdefs.optional.ssh.Scp"/>
    <ant:scp trust="yes"
    		 todir="${user}@${server}:${remotedir}" 
    		 keyfile="${sshdir}"
    		 passphrase="${passphrase}"
    		 port="22"
             verbose="yes">
     <fileset file="${basedir}/target/Gemma.war"/>
    </ant:scp>
  </goal>
  
	<ant:filterset id="web.variables">
		<filter token="WEB-APP-ROOT" value="${maven.war.src}" />
		<filter token="WEB-APP-WORK" value="${basedir}/work" />
	</ant:filterset>

</project>