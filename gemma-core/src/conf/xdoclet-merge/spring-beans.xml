<!-- ==================================================== -->
<!--    Email configuration   -->
<!-- ==================================================== -->
<bean id="mailEngine" class="ubic.gemma.util.MailEngine">
	<property name="mailSender">
		<ref bean="mailSender" />
	</property>
	<property name="velocityEngine">
		<ref bean="velocityEngine" />
	</property>
</bean>
<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	<property name="host">
		<value>${mail.host}</value>
	</property>
	<property name="username">
		<value>${mail.username}</value>
	</property>
	<property name="password">
		<value>${mail.password}</value>
	</property>
</bean>
<!-- Configure Velocity for sending e-mail -->
<bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
	<property name="velocityProperties">
		<props>
			<prop key="resource.loader">class</prop>
			<prop key="class.resource.loader.class">
				org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
			</prop>
		</props>
	</property>
</bean>
<bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage" singleton="false">
	<property name="from">
		<value>${gemma.admin.email}</value>
	</property>
</bean>
<!-- 
	==================================================== 
	configurationPropertyConfigurer allows you to use variables like ${mail.host} in the spring bean definitions.
	Variables are listed in a resource. If the resource is in your classpath, list in in 'locations'.
	Other config files can be added by defining PropertiesConfiguration instances  
	==================================================== -->
<bean id="userProperties" class="org.apache.commons.configuration.PropertiesConfiguration" dependency-check="none">
	<constructor-arg index="0">
		<value>Gemma.properties</value>
	</constructor-arg>
</bean>
<bean id="configurationPropertyConfigurer" class="ubic.gemma.util.CommonsConfigurationPropertyPlaceholderConfigurer">
	<property name="configuration">
		<ref local="userProperties" />
	</property>
	<property name="locations">
		<list>
			<value>classpath:default.properties</value>
		</list>
	</property>
	<property name="ignoreUnresolvablePlaceholders" value="false" />
	<property name="ignoreResourceNotFound" value="false" />
</bean>
<!-- ==================================================== -->
<!-- EXTERNAL DATABASE SESSION FACTORY -->
<!-- ==================================================== -->
<bean id="sessionFactoryGoldenPathHuman" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
	<property name="dataSource">
		<ref bean="dataSourceGoldenPathHuman" />
	</property>
	<property name="mappingResources">
		<list></list>
	</property>
	<property name="hibernateProperties">
		<props>
			<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
			<prop key="hibernate.cache.use_query_cache">false</prop>
			<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
			<prop key="hibernate.cache.query_cache_factory">org.hibernate.cache.StandardQueryCacheFactory</prop>
			<prop key="hibernate.show_sql">true</prop>
		</props>
	</property>
</bean>
<!-- DATASOURCE USED BY SESSION FACTORY ABOVE -->
<bean id="dataSourceGoldenPathHuman" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<property name="driverClassName">
		<value>${gemma.goldenpath.db.driver}</value>
	</property>
	<property name="username">
		<value>${gemma.goldenpath.db.user}</value>
	</property>
	<property name="password">
		<value>${gemma.goldenpath.db.password}</value>
	</property>
	<property name="url">
		<value>jdbc:mysql://${gemma.goldenpath.db.host}:${gemma.goldenpath.db.port}/${gemma.goldenpath.db.human}</value>
	</property>
</bean>
<bean id="auditAdvice" class="org.springframework.aop.framework.ProxyFactoryBean">
	<property name="target">
		<bean class="ubic.gemma.security.interceptor.AuditInterceptor">
			<property name="userDao">
				<ref bean="userDao" />
			</property>
			<property name="crudUtils">
				<ref bean="crudUtils" />
			</property>
			<property name="auditTrailDao">
				<ref bean="auditTrailDao" />
			</property>
			<property name="sessionFactory">
				<ref bean="sessionFactory" />
			</property>
		</bean>
	</property>
	<property name="proxyInterfaces">
		<value>org.aopalliance.intercept.MethodInterceptor</value>
	</property>
	<property name="interceptorNames">
		<list>
			<value>hibernateInterceptor</value>
		</list>
	</property>
</bean>

<!-- When creating new services, make sure you add a line in the transactionAttributeSource for your service. -->
<bean id="additionalServiceTransactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributeSource">
			<value>
				ubic.gemma.security.expression.experiment.ExpressionExperimentSecureService.loadExpressionExperimentsForUser=PROPAGATION_REQUIRED,readOnly
				ubic.gemma.security.expression.experiment.ExpressionExperimentSecureService.loadExpressionExperimentsForAnotherUser=PROPAGATION_REQUIRED,readOnly
			</value>
		</property>
</bean>


<bean id="expressionExperimentSecureService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="ubic.gemma.security.expression.experiment.ExpressionExperimentSecureServiceImpl">
				<property name="expressionExperimentDao">
					<ref bean="expressionExperimentDao" />
				</property>
			</bean>
		</property>
		<property name="proxyInterfaces">
			<value>ubic.gemma.security.expression.experiment.ExpressionExperimentSecureService</value>
		</property>
		<property name="interceptorNames">
			<list>
				<value>serviceTransactionInterceptor</value>
				<value>additionalServiceTransactionInterceptor</value>
				<value>hibernateInterceptor</value>
				<value>serviceSecurityInterceptor</value>
				<value>addOrRemoveFromACLInterceptor</value>
				<value>auditInterceptor</value>
				<value>monitorInterceptor</value>
			</list>
		</property>
</bean>