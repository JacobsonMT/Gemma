/*
 * The Gemma project.
 * 
 * Copyright (c) 2006-2007 University of British Columbia
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
//
package ubic.gemma.persistence.service.genome;

import org.hibernate.Hibernate;
import org.hibernate.LockOptions;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.stereotype.Repository;
import ubic.gemma.model.genome.PhysicalLocation;

/**
 * @see ubic.gemma.model.genome.PhysicalLocation
 */
@Repository
public class PhysicalLocationDaoImpl extends PhysicalLocationDaoBase {

    @Autowired
    public PhysicalLocationDaoImpl( SessionFactory sessionFactory ) {
        super( sessionFactory );
    }

    @Override
    public void thaw( final PhysicalLocation physicalLocation ) {
        if ( physicalLocation == null )
            return;
        if ( physicalLocation.getId() == null )
            return;
        HibernateTemplate templ = this.getHibernateTemplate();
        templ.execute( new org.springframework.orm.hibernate3.HibernateCallback<Object>() {
            @Override
            public Object doInHibernate( org.hibernate.Session session ) throws org.hibernate.HibernateException {
                session.buildLockRequest( LockOptions.NONE ).lock( physicalLocation );
                Hibernate.initialize( physicalLocation );
                Hibernate.initialize( physicalLocation.getChromosome() );
                Hibernate.initialize( physicalLocation.getChromosome().getTaxon() );

                return null;
            }
        } );

    }

    @Override
    public PhysicalLocation find( PhysicalLocation entity ) {
        return load( entity.getId() );
    }
}