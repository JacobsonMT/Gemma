/*
 * The Gemma project
 * 
 * Copyright (c) 2006 University of British Columbia
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package ubic.gemma.datastructure.matrix;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import ubic.gemma.model.expression.bioAssay.BioAssay;
import ubic.gemma.model.expression.biomaterial.BioMaterial;
import ubic.gemma.model.expression.experiment.ExperimentalDesign;
import ubic.gemma.model.expression.experiment.ExperimentalFactor;
import ubic.gemma.model.expression.experiment.ExpressionExperiment;
import ubic.gemma.model.expression.experiment.FactorValue;
import ubic.gemma.util.DateUtil;

/**
 * @author keshav
 * @version $Id$
 */
public class ExperimentalDesignWriter {

    private Log log = LogFactory.getLog( this.getClass() );

    private static final String WEBSITE_CITATION = "http://bioinformatics.ubc.ca/Gemma";

    /**
     * @param writer
     * @param expressionExperiment
     * @param dataMatrix
     * @param writeHeader
     * @throws IOException
     */
    public void write( Writer writer, ExpressionExperiment expressionExperiment, ExpressionDataDoubleMatrix dataMatrix,
            boolean writeHeader ) throws IOException {

        ExperimentalDesign ed = expressionExperiment.getExperimentalDesign();
        Collection<ExperimentalFactor> efs = ed.getExperimentalFactors();

        List<ExperimentalFactor> orderedFactors = new ArrayList<ExperimentalFactor>();
        orderedFactors.addAll( efs );

        StringBuffer buf = new StringBuffer();

        if ( writeHeader ) {
            writeHeader( writer, efs, writeHeader, buf );
        }

        int expDesignRows = dataMatrix.columns();

        for ( int i = 0; i < expDesignRows; i++ ) {

            BioMaterial biomaterial = dataMatrix.getBioMaterialForColumn( i );

            buf.append( biomaterial.getName() + ":" );
            for ( Iterator<BioAssay> it = dataMatrix.getBioAssaysForColumn( i ).iterator(); it.hasNext(); ) {
                BioAssay ba = it.next();
                buf.append( ba.getName() );
                if ( it.hasNext() ) {
                    buf.append( "," );
                }
            }
            buf.append( "\t" );

            int j = 0;
            for ( ExperimentalFactor ef : orderedFactors ) {
                if ( j < efs.size() - 1 ) {
                    buf.append( "\t" );
                    Collection<FactorValue> fvs = biomaterial.getFactorValues();
                    for ( FactorValue f : fvs ) {
                        if ( f.getExperimentalFactor().equals( ef ) ) {
                            buf.append( f.getValue() );
                            break;
                        }
                    }

                } else {
                    buf.append( "\n" );
                }
                j++;
            }
        }

        log.info( buf.toString() );

        writer.write( buf.toString() );

        writer.close();
    }

    /**
     * @param writer
     * @param factors
     * @param writeHeader
     * @param buf
     */
    private void writeHeader( Writer writer, Collection<ExperimentalFactor> factors, boolean writeHeader,
            StringBuffer buf ) {
        buf.append( "# Experimental design file generated by Gemma\n" );
        buf.append( "# Generated " + DateUtil.convertDateToString( new Date() ) + "\n" );
        buf.append( "# If you use this file for your research, please cite the Gemma web site: " + WEBSITE_CITATION
                + "\n" );
        buf.append( "Bioassay" );

        for ( ExperimentalFactor ef : factors ) {
            buf.append( "\t" + ef.getName() );
        }

        buf.append( "\n" );
    }

}
