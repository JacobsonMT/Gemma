<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
    "http://www.springframework.org/dtd/spring-beans.dtd">

<!-- 
	author: keshav    
	$Id$ 
-->

<beans>

	<!-- ======================== FILTER CHAIN ======================= -->
	<bean id="filterChainProxy" class="org.acegisecurity.util.FilterChainProxy">
		<property name="filterInvocationDefinitionSource">
			<value><!--  CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON  -->
				<![CDATA[
                PATTERN_TYPE_APACHE_ANT 
                  /**=httpSessionContextIntegrationFilter,authenticationProcessingFilter,remoteUserFilter,rememberMeProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor
            ]]>
			</value>
			<!-- Put channelProcessingFilter before remoteUserFilter to turn on SSL switching -->
		</property>
	</bean>



	<!-- ======================== FILTERS ======================= -->

	<!--   Populates the SecurityContextHolder with information obtained from the HttpSession. -->
	<bean id="httpSessionContextIntegrationFilter"
		class="org.acegisecurity.context.HttpSessionContextIntegrationFilter">
		<property name="context">
			<value>org.acegisecurity.context.SecurityContextImpl</value>
		</property>
	</bean>


	<bean id="remoteUserFilter"
		class="org.acegisecurity.wrapper.SecurityContextHolderAwareRequestFilter" />

	<bean id="anonymousProcessingFilter"
		class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
		<property name="key">
			<value>anonymous</value>
		</property>
		<property name="userAttribute">
			<value>anonymous,ROLE_ANONYMOUS</value>
		</property>
	</bean>

	<!-- ======================== AUTHENTICATION FILTER ======================= -->

	<bean id="authenticationProcessingFilter"
		class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
		<property name="authenticationManager">
			<ref local="authenticationManager" />
		</property>
		<property name="authenticationFailureUrl">
			<value>/login.jsp?error=true</value>
		</property>
		<property name="defaultTargetUrl">
			<value>/</value>
		</property>
		<property name="filterProcessesUrl">
			<value>/j_security_check</value>
		</property>
		<property name="rememberMeServices" ref="rememberMeServices" />
	</bean>

	<bean id="manualAuthenticationProcessing"
		class="ubic.gemma.security.authentication.ManualAuthenticationProcessing">
		<property name="authenticationManager">
			<ref bean="authenticationManager" />
		</property>

	</bean>

	<bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
		<property name="providers">
			<list>
				<ref local="daoAuthenticationProvider" />
				<ref local="anonymousAuthenticationProvider" />
				<ref local="rememberMeAuthenticationProvider" />
			</list>
		</property>
	</bean>

	<!-- Automatically receives AuthenticationEvent messages from DaoAuthenticationProvider -->
	<bean id="loggerListener" class="org.acegisecurity.event.authentication.LoggerListener" />

	<bean id="daoAuthenticationProvider"
		class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="jdbcDaoImpl" />
		<property name="userCache" ref="userCache" />
		<property name="passwordEncoder" ref="passwordEncoder" />
	</bean>

	<!-- This bean definition must be available to ApplicationContext.getBean() so StartupListener
		can look for it and detect if password encryption is turned on or not -->
	<bean id="passwordEncoder" class="org.acegisecurity.providers.encoding.ShaPasswordEncoder" />



	<!-- Read users from database -->
	<bean id="jdbcDaoImpl" class="org.acegisecurity.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="usersByUsernameQuery">
			<value>SELECT USER_NAME,PASSWORD,ENABLED FROM CONTACT WHERE USER_NAME = ?</value>
		</property>
		<property name="authoritiesByUsernameQuery">
			<value>SELECT USER_NAME,NAME FROM USER_ROLE WHERE USER_NAME = ?</value>
		</property>
	</bean>

	<bean id="userCache" class="org.acegisecurity.providers.dao.cache.EhCacheBasedUserCache">
		<property name="cache">
			<bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
				<property name="cacheManager">
					<bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />
				</property>
				<property name="cacheName">
					<value>userCache</value>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="anonymousAuthenticationProvider"
		class="org.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
		<property name="key">
			<value>anonymous</value>
		</property>
	</bean>

	<!-- ===================== REMEMBER ME ==================== -->
	<bean id="rememberMeProcessingFilter"
		class="org.acegisecurity.ui.rememberme.RememberMeProcessingFilter">
		<property name="rememberMeServices" ref="rememberMeServices" />
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>

	<bean id="rememberMeServices"
		class="org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices">
		<property name="userDetailsService" ref="jdbcDaoImpl" />
		<property name="key" value="gemmapleaserememberme" />
		<property name="parameter" value="rememberMe" />
	</bean>

	<bean id="rememberMeAuthenticationProvider"
		class="org.acegisecurity.providers.rememberme.RememberMeAuthenticationProvider">
		<property name="key" value="gemmapleaserememberme" />
	</bean>

	<!-- ===================== HTTP REQUEST SECURITY ==================== -->

	<bean id="exceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint">
			<ref local="authenticationProcessingFilterEntryPoint" />
		</property>
	</bean>

	<!-- Note the order that entries are placed against the objectDefinitionSource is critical.
		The FilterSecurityInterceptor will work from the top of the list down to the FIRST pattern that matches the request URL.
		Accordingly, you should place MOST SPECIFIC (ie a/b/c/d.*) expressions first, with LEAST SPECIFIC (ie a/.*) expressions last -->
	<bean id="filterInvocationInterceptor"
		class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
		<property name="authenticationManager">
			<ref local="authenticationManager" />
		</property>
		<property name="accessDecisionManager">
			<ref local="roleAccessDecisionManager" />
		</property>
		<property name="objectDefinitionSource">
			<value>
				<![CDATA[
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON 
                PATTERN_TYPE_APACHE_ANT 
                /signup.html=ROLE_ANONYMOUS,admin,user
                /passwordhint.html*=ROLE_ANONYMOUS,admin,user
                /clickstreams.jsp=admin
                /**/*.html*=admin,user 
                /**/*.htm*=admin,user 
             ]]>
			</value>
		</property>
	</bean>

	<!-- if user requests a secure Http resource but has not been authenticated, they will be presented this login form -->
	<bean id="authenticationProcessingFilterEntryPoint"
		class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
		<property name="loginFormUrl">
			<value>/login.jsp</value>
		</property>
		<property name="forceHttps">
			<value>false</value>
		</property>
	</bean>

	<!-- ===================== SSL SWITCHING ==================== -->
	<bean id="channelProcessingFilter"
		class="org.acegisecurity.securechannel.ChannelProcessingFilter">
		<property name="channelDecisionManager" ref="channelDecisionManager" />
		<property name="filterInvocationDefinitionSource">
			<value>
				<![CDATA[
                PATTERN_TYPE_APACHE_ANT
                /admin/**=REQUIRES_SECURE_CHANNEL
                /login*=REQUIRES_SECURE_CHANNEL
                /j_security_check*=REQUIRES_SECURE_CHANNEL
                /editProfile.html*=REQUIRES_SECURE_CHANNEL
                /signup.html*=REQUIRES_SECURE_CHANNEL
                /saveUser.html*=REQUIRES_SECURE_CHANNEL
                /**=REQUIRES_INSECURE_CHANNEL
             ]]>
			</value>
		</property>
	</bean>

	<bean id="channelDecisionManager"
		class="org.acegisecurity.securechannel.ChannelDecisionManagerImpl">
		<property name="channelProcessors">
			<list>
				<bean class="org.acegisecurity.securechannel.SecureChannelProcessor" />
				<bean class="org.acegisecurity.securechannel.InsecureChannelProcessor" />
			</list>
		</property>
	</bean>


	<!-- ===================== AUTHORIZATION ==================== -->

	<!-- acegi serviceSecurityInterceptor. You must manually add objectDefinitionSource lines for methods in services. -->
	<bean id="serviceSecurityInterceptor"
		class="org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor">
		<property name="authenticationManager">
			<ref bean="authenticationManager" />
		</property>
		<property name="accessDecisionManager">
			<ref bean="httpRequestAccessDecisionManager" />
		</property>
		<property name="afterInvocationManager">
			<ref bean="afterInvocationManager" />
		</property>
		<property name="objectDefinitionSource">
			<value>
				<![CDATA[
                ubic.gemma.model.expression.experiment.ExpressionExperimentService.loadAll=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentService.findOrCreate=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentService.update=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentService.create=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentService.find=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentService.delete=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentService.findByInvestigator=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentService.findByAccession=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentService.read=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentService.findByName=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentService.findOrCreate=ACL_SECURABLE_EDIT,admin,user
                ubic.gemma.model.expression.experiment.ExperimentalDesignService.loadAll=user,admin
                ubic.gemma.model.expression.experiment.ExperimentalDesignService.create=user,admin
                ubic.gemma.model.expression.experiment.ExperimentalFactorService.loadAll=user,admin
                ubic.gemma.model.expression.experiment.ExperimentalFactorService.create=user,admin 
                ubic.gemma.model.expression.experiment.FactorValueService.loadAll=user,admin
                ubic.gemma.model.expression.experiment.FactorValueService.findOrCreate=user,admin 
                ubic.gemma.model.expression.experiment.FactorValueService.delete=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentSubSetService.loadAll=user,admin
                ubic.gemma.model.expression.experiment.ExpressionExperimentSubSetService.create=user,admin
                ubic.gemma.model.expression.designElement.CompositeSequenceService.findOrCreate=user,admin
                ubic.gemma.model.expression.designElement.CompositeSequenceService.remove=user,admin
                ubic.gemma.model.expression.designElement.CompositeSequenceService.find=user,admin
                ubic.gemma.model.expression.designElement.ReporterService.findOrCreate=user,admin 
                ubic.gemma.model.expression.designElement.ReporterService.remove=user,admin
                ubic.gemma.model.expression.designElement.ReporterService.find=user,admin
                ubic.gemma.model.expression.arrayDesign.ArrayDesignService.getAllArrayDesigns=user,admin
                ubic.gemma.model.expression.arrayDesign.ArrayDesignService.findOrCreate=ACL_SECURABLE_EDIT,admin,user
                ubic.gemma.model.expression.arrayDesign.ArrayDesignService.remove=ACL_SECURABLE_EDIT
                ubic.gemma.model.expression.arrayDesign.ArrayDesignService.findArrayDesignByName=user,admin
                ubic.gemma.model.expression.arrayDesign.ArrayDesignService.update=ACL_SECURABLE_EDIT 
                ubic.gemma.model.expression.arrayDesign.ArrayDesignService.find=user,admin
                ubic.gemma.model.expression.bioAssay.BioAssayService.findOrCreate=ACL_SECURABLE_EDIT,user,admin
                ubic.gemma.model.expression.bioAssay.BioAssayService.getAllBioAssays=user,admin 
                ubic.gemma.model.expression.bioAssay.BioAssayService.remove=ACL_SECURABLE_EDIT
                ubic.gemma.model.expression.bioAssayData.BioAssayDataVectorService.findOrCreate=ACL_SECURABLE_EDIT,user,admin
                ubic.gemma.model.expression.bioAssayData.BioAssayDataVectorService.remove=user,admin
                ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.findOrCreate=user,admin
                ubic.gemma.model.expression.bioAssayData.DesignElementDataVectorService.remove=user,admin
                ubic.gemma.model.expression.bioAssayData.BioAssayDimensionService.findOrCreate=user,admin
                ubic.gemma.model.expression.bioAssayData.DesignElementDimensionService.findOrCreate=user,admin
                ubic.gemma.model.expression.biomaterial.BioMaterialService.getBioMaterials=user,admin
                ubic.gemma.model.expression.biomaterial.BioMaterialService.findOrCreate=user,admin 
                ubic.gemma.model.expression.biomaterial.BioMaterialService.remove=user,admin
                ubic.gemma.model.expression.biomaterial.TreatmentService.getTreatments=user,admin
                ubic.gemma.model.expression.biomaterial.TreatmentService.saveTreatment=user,admin 
                ubic.gemma.model.expression.biomaterial.CompoundService.find=user,admin
                ubic.gemma.model.expression.biomaterial.CompoundService.findOrCreate=user,admin 
                ubic.gemma.model.expression.biomaterial.CompoundService.update=user,admin
                ubic.gemma.model.expression.biomaterial.CompoundService.remove=user,admin 
                ubic.gemma.model.common.description.BibliographicReferenceService.getAll=user,admin
                ubic.gemma.model.common.description.BibliographicReferenceService.findOrCreate=ACL_SECURABLE_EDIT,user,admin
                ubic.gemma.model.common.description.BibliographicReferenceService.findByExternalId=user,admin
                ubic.gemma.model.common.description.BibliographicReferenceService.findByExternalId=user,admin
                ubic.gemma.model.common.description.BibliographicReferenceService.find=user,admin
                ubic.gemma.model.common.description.BibliographicReferenceService.getBibliographicReferenceByTitle=user,admin
                ubic.gemma.model.common.description.BibliographicReferenceService.saveBibliographicReferenceByLookup=user,admin
                ubic.gemma.model.common.description.BibliographicReferenceService.updateBibliographicReference=ACL_SECURABLE_EDIT
                ubic.gemma.model.common.description.BibliographicReferenceService.remove=ACL_SECURABLE_EDIT
                ubic.gemma.model.common.description.BibliographicReferenceService.addPDF=user,admin 
                ubic.gemma.model.common.description.ExternalDatabaseService.find=user,admin
                ubic.gemma.model.common.description.ExternalDatabaseService.findOrCreate=user,admin
                ubic.gemma.model.common.description.ExternalDatabaseService.remove=user,admin
                ubic.gemma.model.common.description.NotedReferenceListService.createNewList=user,admin
                ubic.gemma.model.common.description.NotedReferenceListService.addReferenceToList=user,admin
                ubic.gemma.model.common.description.NotedReferenceListService.getAllReferencesForList=user,admin
                ubic.gemma.model.common.description.NotedReferenceListService.setListDescription=user,admin
                ubic.gemma.model.common.description.NotedReferenceListService.setComment=user,admin
                ubic.gemma.model.common.description.NotedReferenceListService.removeList=user,admin
                ubic.gemma.model.common.description.NotedReferenceListService.removeReferenceFromList=user,admin
                ubic.gemma.model.common.description.NotedReferenceListService.setRating=user,admin
                ubic.gemma.model.common.description.FileFormatService.findByIdentifier=user,admin
                ubic.gemma.model.common.description.LocalFileService.deleteFile=ACL_SECURABLE_EDIT
                ubic.gemma.model.common.description.LocalFileService.copyFile=ACL_SECURABLE_EDIT 
                ubic.gemma.model.common.description.LocalFileService.findByPath=user,admin
                ubic.gemma.model.common.description.LocalFileService.find=user,admin 
                ubic.gemma.model.common.description.LocalFileService.save=user,admin
                ubic.gemma.model.common.description.LocalFileService.update=user,admin 
                ubic.gemma.model.common.description.LocalFileService.findOrCreate=user,admin
                ubic.gemma.model.common.description.DatabaseEntryService.find=user,admin 
                ubic.gemma.model.common.description.DatabaseEntryService.findOrCreate=user,admin
                ubic.gemma.model.common.description.DatabaseEntryService.update=user,admin 
                ubic.gemma.model.common.description.DatabaseEntryService.remove=user,admin
                ubic.gemma.model.common.description.OntologyEntryService.findOrCreate=user,admin 
                ubic.gemma.model.common.description.OntologyEntryService.remove=user,admin
                ubic.gemma.model.common.auditAndSecurity.PersonService.savePerson=user,admin 
                ubic.gemma.model.common.auditAndSecurity.PersonService.getAllPersons=user,admin
                ubic.gemma.model.common.auditAndSecurity.PersonService.removePerson=user,admin 
                ubic.gemma.model.common.auditAndSecurity.PersonService.findByName=user,admin
                ubic.gemma.model.common.auditAndSecurity.PersonService.findByFullName=user,admin 
                ubic.gemma.model.common.auditAndSecurity.PersonService.findOrCreate=user,admin
                ubic.gemma.model.common.auditAndSecurity.UserService.getUser=user,admin,ROLE_ANONYMOUS
                ubic.gemma.model.common.auditAndSecurity.UserService.getUsers=user,admin
                ubic.gemma.model.common.auditAndSecurity.UserService.saveUser=user,admin,ROLE_ANONYMOUS
                ubic.gemma.model.common.auditAndSecurity.UserService.removeUser=user,admin 
                ubic.gemma.model.common.auditAndSecurity.UserService.checkLoginCookie=user,admin
                ubic.gemma.model.common.auditAndSecurity.UserService.createLoginCookie=user,admin
                ubic.gemma.model.common.auditAndSecurity.UserService.removeLoginCookies=user,admin
                ubic.gemma.model.common.auditAndSecurity.UserService.addRole=user,admin,ROLE_ANONYMOUS 
                ubic.gemma.model.common.auditAndSecurity.UserService.findById=user,admin
                ubic.gemma.model.common.auditAndSecurity.UserRoleService.getRoles=user,admin
                ubic.gemma.model.common.auditAndSecurity.UserRoleService.getRole=user,admin,anonymous,ROLE_ANONYMOUS
                ubic.gemma.model.common.auditAndSecurity.UserRoleService.saveRole=user,admin,ROLE_ANONYMOUS
                ubic.gemma.model.common.auditAndSecurity.UserRoleService.removeRole=user,admin 
                ubic.gemma.model.common.auditAndSecurity.ContactService.findOrCreate=user,admin
                ubic.gemma.model.common.auditAndSecurity.ContactService.find=user,admin 
                ubic.gemma.model.common.auditAndSecurity.ContactService.remove=user,admin
                ubic.gemma.model.common.auditAndSecurity.ContactService.update=user,admin 
                ubic.gemma.model.common.protocol.HardwareService.find=user,admin
                ubic.gemma.model.common.protocol.HardwareService.findOrCreate=user,admin 
                ubic.gemma.model.common.protocol.HardwareService.update=user,admin
                ubic.gemma.model.common.protocol.HardwareService.remove=user,admin 
                ubic.gemma.model.common.protocol.ProtocolService.find=user,admin
                ubic.gemma.model.common.protocol.ProtocolService.findOrCreate=user,admin 
                ubic.gemma.model.common.protocol.ProtocolService.update=user,admin
                ubic.gemma.model.common.protocol.ProtocolService.remove=user,admin 
                ubic.gemma.model.common.protocol.SoftwareService.findOrCreate=user,admin
                ubic.gemma.model.common.protocol.SoftwareService.find=user,admin 
                ubic.gemma.model.common.protocol.SoftwareService.update=user,admin
                ubic.gemma.model.common.protocol.SoftwareService.remove=user,admin 
                ubic.gemma.model.common.quantitationtype.QuantitationTypeService.find=user,admin
                ubic.gemma.model.common.quantitationtype.QuantitationTypeService.findOrCreate=user,admin
                ubic.gemma.model.common.quantitationtype.QuantitationTypeService.update=user,admin
                ubic.gemma.model.common.quantitationtype.QuantitationTypeService.remove=user,admin 
                ubic.gemma.model.genome.biosequence.BioSequenceService.find=user,admin
                ubic.gemma.model.genome.biosequence.BioSequenceService.remove=user,admin 
                ubic.gemma.model.genome.biosequence.BioSequenceService.findOrCreate=user,admin
                ubic.gemma.model.genome.biosequence.BioSequenceService.update=user,admin 
                ubic.gemma.model.genome.gene.CandidateGeneListService.createByName=user,admin
                ubic.gemma.model.genome.gene.CandidateGeneListService.updateCandidateGeneList=user,admin
                ubic.gemma.model.genome.gene.CandidateGeneListService.removeCandidateGeneList=user,admin
                ubic.gemma.model.genome.gene.CandidateGeneListService.findByContributer=user,admin
                ubic.gemma.model.genome.gene.CandidateGeneListService.findByGeneOfficialName=user,admin
                ubic.gemma.model.genome.gene.CandidateGeneListService.findByID=user,admin 
                ubic.gemma.model.genome.gene.CandidateGeneListService.findByListOwner=user,admin
                ubic.gemma.model.genome.gene.CandidateGeneListService.findAll=user,admin 
                ubic.gemma.model.genome.gene.CandidateGeneListService.setActor=user,admin
                ubic.gemma.model.genome.gene.CandidateGeneListService.saveCandidateGeneList=user,admin 
                ubic.gemma.model.genome.gene.GeneService.update=ACL_SECURABLE_EDIT
                ubic.gemma.model.genome.gene.GeneService.findAll=user,admin 
                ubic.gemma.model.genome.gene.GeneService.remove=ACL_SECURABLE_EDIT
                ubic.gemma.model.genome.gene.GeneService.findByOfficialName=user,admin 
                ubic.gemma.model.genome.gene.GeneService.findAllQtlsByPhysicalMapLocation=user,admin
                ubic.gemma.model.genome.gene.GeneService.findByOfficialSymbol=user,admin 
                ubic.gemma.model.genome.gene.GeneService.findByOfficialSymbolInexact=user,admin
                ubic.gemma.model.genome.gene.GeneService.findByID=user,admin 
                ubic.gemma.model.genome.gene.GeneService.findOrCreate=user,admin
                ubic.gemma.model.genome.gene.GeneService.remove=user,admin 
                ubic.gemma.model.genome.TaxonService.find=user,admin
                ubic.gemma.model.genome.TaxonService.update=user,admin 
                ubic.gemma.model.genome.TaxonService.remove=user,admin
                ubic.gemma.model.genome.TaxonService.findOrCreate=user,admin
           ]]>
			</value>
		</property>
	</bean>

	<!-- An access decision manager used by the serviceSecurityInterceptor, which uses method interception (as well as the role voter). -->
	<bean id="httpRequestAccessDecisionManager" class="org.acegisecurity.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions">
			<value>false</value>
		</property>
		<property name="decisionVoters">
			<list>
				<ref local="roleVoter" />
				<ref bean="securableVoter" />
				<ref bean="localFileEditVoter" />
			</list>
		</property>
	</bean>

	<!--  An access decision manager used by filterInvocationInterceptor, which is incompatible with BasicAclVoter (inherits from AbstractAclVoter) -->
	<bean id="roleAccessDecisionManager" class="org.acegisecurity.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions">
			<value>false</value>
		</property>
		<property name="decisionVoters">
			<list>
				<ref bean="roleVoter" />
			</list>
		</property>
	</bean>


	<!-- ===================== VOTING ==================== -->

	<!-- role-based voting -->
	<bean id="roleVoter" class="org.acegisecurity.vote.RoleVoter">
		<property name="rolePrefix">
			<value />
		</property>
	</bean>

	<!-- ============== "BEFORE METHOD-CALL" AUTHORIZATION (happens before the method is executed) =========== -->

	<!-- An access decision voters that read processConfigAttribute settings -->

	<!--  voter that can be applied to any operation on a securable -->
	<bean id="securableVoter" class="org.acegisecurity.vote.BasicAclEntryVoter">
		<property name="aclManager">
			<ref bean="aclManager" />
		</property>
		<property name="processConfigAttribute">
			<value>ACL_SECURABLE_EDIT</value>
		</property>
		<property name="processDomainObjectClass">
			<value>ubic.gemma.model.common.Securable</value>
		</property>
		<property name="requirePermission">
			<list>
				<ref local="SimpleAclEntry.ADMINISTRATION" />
				<ref local="SimpleAclEntry.READ_WRITE" />
			</list>
		</property>
	</bean>

	<bean id="localFileEditVoter" class="org.acegisecurity.vote.BasicAclEntryVoter">
		<property name="aclManager">
			<ref bean="aclManager" />
		</property>
		<property name="processConfigAttribute">
			<value>ACL_LOCALFILE_EDIT</value>
		</property>
		<property name="processDomainObjectClass">
			<value>ubic.gemma.model.common.description.LocalFile</value>
		</property>
		<property name="requirePermission">
			<list>
				<ref local="SimpleAclEntry.ADMINISTRATION" />
				<ref local="SimpleAclEntry.READ_WRITE" />
			</list>
		</property>
	</bean>

	<!-- ============== "AFTER METHOD-CALL" AUTHORIZATION (happens after the method is executed) =========== -->

	<bean id="afterInvocationManager"
		class="org.acegisecurity.afterinvocation.AfterInvocationProviderManager">
		<property name="providers">
			<list>
				<ref local="afterAclRead" />
				<ref local="afterAclCollectionRead" />
				<ref local="afterAclArrayDesignCollectionRead" />
			</list>
		</property>
	</bean>

	<!-- Processes AFTER_ACL_READ configuration settings -->
	<bean id="afterAclRead"
		class="org.acegisecurity.afterinvocation.BasicAclEntryAfterInvocationProvider">
		<property name="aclManager">
			<ref local="aclManager" />
		</property>
		<property name="requirePermission">
			<list>
				<ref bean="SimpleAclEntry.ADMINISTRATION" />
				<ref bean="SimpleAclEntry.READ_WRITE" />
				<ref bean="SimpleAclEntry.READ" />
			</list>
		</property>
	</bean>

	<!-- Processes AFTER_ACL_COLLECTION_READ configuration settings (removes objects from the collection if you do not 
		have authorization priviliges based on -->
	<bean id="afterAclCollectionRead"
		class="org.acegisecurity.afterinvocation.BasicAclEntryAfterInvocationCollectionFilteringProvider">
		<property name="aclManager">
			<ref local="aclManager" />
		</property>
		<property name="requirePermission">
			<list>
				<ref bean="SimpleAclEntry.ADMINISTRATION" />
				<ref bean="SimpleAclEntry.READ_WRITE" />
				<ref bean="SimpleAclEntry.READ" />
			</list>
		</property>
	</bean>

	<!-- Process AFTER_ACL_ARRAYDESIGN_COLLECTION_READ -->
	<bean id="afterAclArrayDesignCollectionRead"
		class="ubic.gemma.security.afterInvocation.AclAfterCollectionCompSeqByArrayDesignFilter">
		<property name="aclManager">
			<ref local="aclManager" />
		</property>
		<property name="requirePermission">
			<list>
				<ref bean="SimpleAclEntry.ADMINISTRATION" />
				<ref bean="SimpleAclEntry.READ_WRITE" />
				<ref bean="SimpleAclEntry.READ" />
			</list>
		</property>
	</bean>

	<!-- ========= ACCESS CONTROL LIST LOOKUP MANAGER DEFINITIONS ========= -->

	<bean id="aclManager" class="org.acegisecurity.acl.AclProviderManager">
		<property name="providers">
			<list>
				<ref local="basicAclProvider" />
			</list>
		</property>
	</bean>

	<bean id="basicAclProvider" class="org.acegisecurity.acl.basic.BasicAclProvider">
		<property name="basicAclDao">
			<ref local="basicAclExtendedDao" />
		</property>
	</bean>

	<bean id="basicAclExtendedDao" class="org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- ~~~~~~~~~~~~~~~~~~ AUTHORIZATION MASK DEFINITIONS ~~~~~~~~~~~~~~~~~~~ -->

	<!-- ACL permission masks -->

	<bean id="SimpleAclEntry.ADMINISTRATION"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField">
			<value>org.acegisecurity.acl.basic.SimpleAclEntry.ADMINISTRATION</value>
		</property>
	</bean>

	<bean id="SimpleAclEntry.READ_WRITE"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField">
			<value>org.acegisecurity.acl.basic.SimpleAclEntry.READ_WRITE</value>
		</property>
	</bean>

	<bean id="SimpleAclEntry.READ"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField">
			<value>org.acegisecurity.acl.basic.SimpleAclEntry.READ</value>
		</property>
	</bean>

	<bean id="SimpleAclEntry.CREATE"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField">
			<value>org.acegisecurity.acl.basic.SimpleAclEntry.CREATE</value>
		</property>
	</bean>

	<bean id="SimpleAclEntry.DELETE"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField">
			<value>org.acegisecurity.acl.basic.SimpleAclEntry.DELETE</value>
		</property>
	</bean>

	<!-- ================================================================== -->

	<!--  Interceptor to persist ACL objects -->
	<bean id="addOrRemoveFromACLInterceptor"
		class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice">
			<ref local="aclAdvice" />
		</property>
		<property name="pointcut">
			<bean class="ubic.gemma.security.interceptor.AclPointcut" />
		</property>
	</bean>

	<bean id="aclAdvice" class="ubic.gemma.security.interceptor.AddOrRemoveFromACLInterceptor">
		<property name="basicAclExtendedDao">
			<ref bean="basicAclExtendedDao" />
		</property>
		<property name="hibernateInterceptor">
			<ref bean="hibernateInterceptor" />
		</property>
	</bean>

	<!--  pointcut that identifies crud operations -->
	<bean id="crudPointcut" class="ubic.gemma.security.interceptor.AclPointcut" />

	<!--  Interceptor for audit trail -->
	<bean id="auditAdvice" class="ubic.gemma.security.interceptor.AuditInterceptor">
		<property name="auditTrailDao">
			<ref bean="auditTrailDao" />
		</property>
		<property name="userDao">
			<ref bean="userDao" />
		</property>
		<property name="hibernateInterceptor">
			<ref bean="hibernateInterceptor" />
		</property>
	</bean>

	<bean id="auditInterceptor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice">
			<ref local="auditAdvice" />
		</property>
		<property name="pointcut">
			<ref bean="crudPointcut" />
		</property>
	</bean>


	<!-- This interceptor insures that that users can only update themselves, not other users -->
	<bean id="userSecurityInterceptor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="advice" ref="userSecurityAdvice" />
		<property name="patterns" value=".*saveUser" />
	</bean>

	<bean id="userSecurityAdvice" class="ubic.gemma.security.interceptor.UserSecurityAdvice" />


</beans>
