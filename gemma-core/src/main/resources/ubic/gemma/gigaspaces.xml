<?xml version="1.0" encoding="UTF-8"?>
	<!--
		$Id$
	-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
            
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- Declaration of GigaSpaces factory bean -->
	<bean id="gigaspace" class="org.springmodules.javaspaces.gigaspaces.GigaSpacesFactoryBean">
		<property name="urls">
			<list>
				<value>${gemma.spaces.url.0}</value>
			</list>
		</property>
	</bean>

	<!--  Declaration of GigaSpaces uid factory -->
	<bean id="gigaSpacesUidFactory" class="org.springmodules.javaspaces.gigaspaces.remote.support.GigaSpacesUidFactory">
		<property name="space" ref="gigaspace" />
	</bean>

	<!-- Declaration of GigaSpace template-->
	<bean id="gigaspacesTemplate" class="org.springmodules.javaspaces.gigaspaces.GigaSpacesTemplate">
		<property name="space" ref="gigaspace" />
	</bean>

	<bean id="javaSpaceInterceptor" class="org.springmodules.javaspaces.gigaspaces.GigaSpacesInterceptor">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="uidFactory" ref="gigaSpacesUidFactory" />
		<property name="synchronous">
			<value>true</value> <!-- When the interceptor executes, block: this is important so we can cleanup easily. See GridTaskInterceptor -->
		</property>
		<!--
			The master will take the result from the space when it is available. This sets the time the master will wait for a
			result before timing out. This has been set to an extremely large value to make the effects negligible. That is, the
			master will never time out based on this setting. Instead, the master should terminate itself programmatically after
			receiving the result.
		-->
		<property name="timeoutMillis">
			<value>600000000</value>
		</property>
	</bean>

	<!--
		help us with some bookkeeping on the client (master). See also taskMethodAdvice defined in serviceBeans, for worker
		wrapper.
	-->
	<bean id="gridTaskInterceptor" class="ubic.gemma.job.grid.GridTaskInterceptor">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
	</bean>

	<!--
			This is the client-side proxy to which task interfaces are added to.
		-->
	<bean id="javaspaceProxyInterfaceFactory" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="interceptorNames">
			<list>
				<value>gridTaskInterceptor</value>
				<value>javaSpaceInterceptor</value>
			</list>
		</property>
		<property name="proxyInterfaces">
			<list>
				<value>
					ubic.gemma.tasks.analysis.expression.ExpressionExperimentLoadTask
				</value>
				<value>
					ubic.gemma.tasks.maintenance.ExpressionExperimentReportTask
				</value>
				<value>
					ubic.gemma.tasks.maintenance.IndexerTask
				</value>
				<value>
					ubic.gemma.tasks.analysis.diffex.DifferentialExpressionAnalysisTask
				</value>
				<value>
					ubic.gemma.tasks.analysis.expression.ProcessedExpressionDataVectorCreateTask
				</value>
				<value>
					ubic.gemma.tasks.analysis.expression.TwoChannelMissingValueTask
				</value>
				<value>
					ubic.gemma.tasks.analysis.coexp.LinkAnalysisTask
				</value>
				<value>
					ubic.gemma.tasks.analysis.sequence.ArrayDesignProbeMapperTask
				</value>
				<value>
					ubic.gemma.tasks.analysis.sequence.ArrayDesignRepeatScanTask
				</value>
				<value>
					ubic.gemma.tasks.analysis.expression.AutoTaggerTask
				</value>
				<value>
					ubic.gemma.job.grid.util.MonitorTask
				</value>
				<value>
					ubic.gemma.tasks.analysis.expression.BioAssayOutlierProcessingTask
				</value>
				<value>
					ubic.gemma.tasks.analysis.expression.SvdTask
				</value>
				<value>
					ubic.gemma.tasks.analysis.BatchInfoFetchTask
				</value>
			</list>
		</property>
	</bean>


	<!-- Add workers here -->
	<bean id="expressionExperimentLoadWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="expressionExperimentLoadTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.analysis.expression.ExpressionExperimentLoadTask
			</value>
		</property>
	</bean>

	<bean id="indexerWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="indexerTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.maintenance.IndexerTask
			</value>
		</property>
	</bean>


	<bean id="expressionExperimentReportWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="expressionExperimentReportTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.maintenance.ExpressionExperimentReportTask
			</value>
		</property>
	</bean>

	<bean id="svdWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="svdTask" />
		</property>
		<property name="businessInterface">
			<value>
	ubic.gemma.tasks.expression.SvdTask
			</value>
		</property>
	</bean>

	<bean id="differentialExpressionAnalysisWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="differentialExpressionAnalysisTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.analysis.diffex.DifferentialExpressionAnalysisTask
			</value>
		</property>
	</bean>

	<bean id="processedExpressionDataVectorCreateWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker"
		scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="processedExpressionDataVectorCreateTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.analysis.expression.ProcessedExpressionDataVectorCreateTask
			</value>
		</property>
	</bean>

	<bean id="twoChannelMissingValueWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="twoChannelMissingValueTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.analysis.expression.TwoChannelMissingValueTask
			</value>
		</property>
	</bean>

	<bean id="linkAnalysisWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="linkAnalysisTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.analysis.coexp.LinkAnalysisTask
			</value>
		</property>
	</bean>


	<bean id="arrayDesignProbeMapperWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="arrayDesignProbeMapperTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.analysis.sequence.ArrayDesignProbeMapperTask
			</value>
		</property>
	</bean>

	<bean id="arrayDesignRepeatScanWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="arrayDesignProbeMapperTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.analysis.sequence.ArrayDesignRepeatScanTask
			</value>
		</property>
	</bean>

	<bean id="autoTaggerWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="autoTaggerTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.analysis.expression.AutoTaggerTask
			</value>
		</property>
	</bean>

	<bean id="monitorWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="monitorTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.job.grid.util.MonitorTask
			</value>
		</property>
	</bean>

	<bean id="bioAssayOutlierProcessingWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="bioAssayOutlierProcessingTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.analysis.expression.BioAssayOutlierProcessingTask
			</value>
		</property>
	</bean>
	
	<bean id="batchInfoFetchWorker" class="ubic.gemma.job.grid.worker.CustomDelegatingWorker" scope="prototype">
		<property name="javaSpaceTemplate" ref="gigaspacesTemplate" />
		<property name="delegate">
			<ref bean="batchInfoFetchTask" />
		</property>
		<property name="businessInterface">
			<value>
				ubic.gemma.tasks.expression.BatchInfoFetchTask
			</value>
		</property>
	</bean>

</beans>


